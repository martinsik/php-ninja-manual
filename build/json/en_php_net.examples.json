{"apciterator::__construct":[{"title":"A APCIterator::__construct() example","source":"foreach (new APCIterator('user', '\/^counter\\.\/') as $counter) {\n    echo \"$counter[key]: $counter[value]\\n\";\n    apc_dec($counter['key'], $counter['value']);\n}","output":null}],"apcuiterator::__construct":[{"title":"A APCUIterator::__construct() example","source":"foreach (new APCUIterator('\/^counter\\.\/') as $counter) {\n    echo \"$counter[key]: $counter[value]\\n\";\n    apc_dec($counter['key'], $counter['value']);\n}","output":null}],"appenditerator::append":[{"title":"AppendIterator::append() example","source":"$array_a = new ArrayIterator(array('a', 'b', 'c'));\n$array_b = new ArrayIterator(array('d', 'e', 'f'));\n\n$iterator = new AppendIterator;\n$iterator->append($array_a);\n$iterator->append($array_b);\n\nforeach ($iterator as $current) {\n    echo $current;\n}","output":"abcdef"}],"appenditerator::getinneriterator":[{"title":"AppendIterator::getInnerIterator() example","source":"$array_a = new ArrayIterator(array('a' => 'aardwolf', 'b' => 'bear', 'c' => 'capybara'));\n$array_b = new RegexIterator($array_a, '\/^[ac]\/');\n\n$iterator = new AppendIterator;\n$iterator->append($array_a);\n$iterator->append($array_b);\n\nforeach ($iterator as $current) {\n    $inner = $iterator->getInnerIterator();\n    if ($inner instanceOf RegexIterator) {\n        echo 'Filtered: ';\n    } else {\n        echo 'Original: ';\n    }\n    echo $current . PHP_EOL;\n}","output":"Original: aardwolf\nOriginal: bear\nOriginal: capybara\nFiltered: aardwolf\nFiltered: capybara"}],"appenditerator::getiteratorindex":[{"title":"AppendIterator.getIteratorIndex() basic example","source":"$array_a = new ArrayIterator(array('a' => 'aardwolf', 'b' => 'bear', 'c' => 'capybara'));\n$array_b = new ArrayIterator(array('apple', 'orange', 'lemon'));\n\n$iterator = new AppendIterator;\n$iterator->append($array_a);\n$iterator->append($array_b);\n\nforeach ($iterator as $key => $current) {\n    echo $iterator->getIteratorIndex() . '  ' . $key . ' ' . $current . PHP_EOL;\n}","output":"0  a aardwolf\n0  b bear\n0  c capybara\n1  0 apple\n1  1 orange\n1  2 lemon"}],"appenditerator::key":[{"title":"AppendIterator::key() basic example","source":"$array_a = new ArrayIterator(array('a' => 'aardwolf', 'b' => 'bear', 'c' => 'capybara'));\n$array_b = new ArrayIterator(array('apple', 'orange', 'lemon'));\n\n$iterator = new AppendIterator;\n$iterator->append($array_a);\n$iterator->append($array_b);\n\n\/\/ Manual iteration\n$iterator->rewind();\nwhile ($iterator->valid()) {\n    echo $iterator->key() . ' ' . $iterator->current() . PHP_EOL;\n    $iterator->next();\n}\n\necho PHP_EOL;\n\n\/\/ With foreach\nforeach ($iterator as $key => $current) {\n    echo $key . ' ' . $current . PHP_EOL;\n}","output":"a aardwolf\nb bear\nc capybara\n0 apple\n1 orange\n2 lemon\n\na aardwolf\nb bear\nc capybara\n0 apple\n1 orange\n2 lemon"}],"arrayaccess::offsetexists":[{"title":"ArrayAccess::offsetExists() example","source":"class obj implements arrayaccess {\n    public function offsetSet($offset, $value) {\n        var_dump(__METHOD__);\n    }\n    public function offsetExists($var) {\n        var_dump(__METHOD__);\n        if ($var == \"foobar\") {\n            return true;\n        }\n        return false;\n    }\n    public function offsetUnset($var) {\n        var_dump(__METHOD__);\n    }\n    public function offsetGet($var) {\n        var_dump(__METHOD__);\n        return \"value\";\n    }\n}\n\n$obj = new obj;\n\necho \"Runs obj::offsetExists()\\n\";\nvar_dump(isset($obj[\"foobar\"]));\n\necho \"\\nRuns obj::offsetExists() and obj::offsetGet()\\n\";\nvar_dump(empty($obj[\"foobar\"]));\n\necho \"\\nRuns obj::offsetExists(), *not* obj:offsetGet() as there is nothing to get\\n\";\nvar_dump(empty($obj[\"foobaz\"]));","output":"Runs obj::offsetExists()\nstring(17) \"obj::offsetExists\"\nbool(true)\n\nRuns obj::offsetExists() and obj::offsetGet()\nstring(17) \"obj::offsetExists\"\nstring(14) \"obj::offsetGet\"\nbool(false)\n\nRuns obj::offsetExists(), *not* obj:offsetGet() as there is nothing to get\nstring(17) \"obj::offsetExists\"\nbool(true)"}],"arrayaccess::offsetset":[{"title":"The above example will output:","source":"$arrayaccess[] = \"first value\";\n$arrayaccess[] = \"second value\";\nprint_r($arrayaccess);","output":"Array\n(\n    [0] => first value\n    [1] => second value\n)"}],"arrayiterator::current":[{"title":"ArrayIterator::current() example","source":"$array = array('1' => 'one',\n               '2' => 'two',\n               '3' => 'three');\n\n$arrayobject = new ArrayObject($array);\n\nfor($iterator = $arrayobject->getIterator();\n    $iterator->valid();\n    $iterator->next()) {\n\n    echo $iterator->key() . ' => ' . $iterator->current() . \"\\n\";\n}","output":"1 => one\n2 => two\n3 => three"}],"arrayiterator::key":[{"title":"ArrayIterator::key() example","source":"$array = array('key' => 'value');\n\n$arrayobject = new ArrayObject($array);\n$iterator = $arrayobject->getIterator();\n\necho $iterator->key(); \/\/key","output":null}],"arrayiterator::next":[{"title":"ArrayIterator::next() example","source":"$arrayobject = new ArrayObject();\n\n$arrayobject[] = 'zero';\n$arrayobject[] = 'one';\n\n$iterator = $arrayobject->getIterator();\n\nwhile($iterator->valid()) {\n    echo $iterator->key() . ' => ' . $iterator->current() . \"\\n\";\n\n    $iterator->next();\n}","output":"0 => zero\n1 => one"}],"arrayiterator::rewind":[{"title":"ArrayIterator::rewind() example","source":"$arrayobject = new ArrayObject();\n\n$arrayobject[] = 'zero';\n$arrayobject[] = 'one';\n$arrayobject[] = 'two';\n\n$iterator = $arrayobject->getIterator();\n\n$iterator->next();\necho $iterator->key(); \/\/1\n\n$iterator->rewind(); \/\/rewinding to the begining\necho $iterator->key(); \/\/0","output":null}],"arrayiterator::valid":[{"title":"ArrayIterator::valid() example","source":"$array = array('1' => 'one');\n\n$arrayobject = new ArrayObject($array);\n$iterator = $arrayobject->getIterator();\n\nvar_dump($iterator->valid()); \/\/bool(true)\n\n$iterator->next(); \/\/ advance to the next item\n\n\/\/bool(false) because there is only one array element\nvar_dump($iterator->valid());","output":null}],"arrayobject::append":[{"title":"ArrayObject::append() example","source":"$arrayobj = new ArrayObject(array('first','second','third'));\n$arrayobj->append('fourth');\n$arrayobj->append(array('five', 'six'));\nvar_dump($arrayobj);","output":"object(ArrayObject)#1 (5) {\n  [0]=>\n  string(5) \"first\"\n  [1]=>\n  string(6) \"second\"\n  [2]=>\n  string(5) \"third\"\n  [3]=>\n  string(6) \"fourth\"\n  [4]=>\n  array(2) {\n    [0]=>\n    string(4) \"five\"\n    [1]=>\n    string(3) \"six\"\n  }\n}"}],"arrayobject::asort":[{"title":"ArrayObject::asort() example","source":"$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\n$fruitArrayObject = new ArrayObject($fruits);\n$fruitArrayObject->asort();\n\nforeach ($fruitArrayObject as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"c = apple\nb = banana\nd = lemon\na = orange"}],"arrayobject::count":[{"title":"ArrayObject::count() example","source":"class Example {\n    public $public = 'prop:public';\n    private $prv   = 'prop:private';\n    protected $prt = 'prop:protected';\n}\n\n$arrayobj = new ArrayObject(new Example());\nvar_dump($arrayobj->count());\n\n$arrayobj = new ArrayObject(array('first','second','third'));\nvar_dump($arrayobj->count());","output":"int(1)\nint(3)"}],"arrayobject::exchangearray":[{"title":"ArrayObject::exchangeArray() example","source":"\/\/ Array of available fruits\n$fruits = array(\"lemons\" => 1, \"oranges\" => 4, \"bananas\" => 5, \"apples\" => 10);\n\/\/ Array of locations in Europe\n$locations = array('Amsterdam', 'Paris', 'London');\n\n$fruitsArrayObject = new ArrayObject($fruits);\n\n\/\/ Now exchange fruits for locations\n$old = $fruitsArrayObject->exchangeArray($locations);\nprint_r($old);\nprint_r($fruitsArrayObject);","output":"Array\n(\n    [lemons] => 1\n    [oranges] => 4\n    [bananas] => 5\n    [apples] => 10\n)\nArrayObject Object\n(\n    [0] => Amsterdam\n    [1] => Paris\n    [2] => London\n)"}],"arrayobject::getarraycopy":[{"title":"ArrayObject::getArrayCopy() example","source":"\/\/ Array of available fruits\n$fruits = array(\"lemons\" => 1, \"oranges\" => 4, \"bananas\" => 5, \"apples\" => 10);\n\n$fruitsArrayObject = new ArrayObject($fruits);\n$fruitsArrayObject['pears'] = 4;\n\n\/\/ create a copy of the array\n$copy = $fruitsArrayObject->getArrayCopy();\nprint_r($copy);","output":"Array\n(\n    [lemons] => 1\n    [oranges] => 4\n    [bananas] => 5\n    [apples] => 10\n    [pears] => 4\n)"}],"arrayobject::getflags":[{"title":"ArrayObject::getFlags() example","source":"\/\/ Array of available fruits\n$fruits = array(\"lemons\" => 1, \"oranges\" => 4, \"bananas\" => 5, \"apples\" => 10);\n\n$fruitsArrayObject = new ArrayObject($fruits);\n\n\/\/ Get the current flags\n$flags = $fruitsArrayObject->getFlags();\nvar_dump($flags);\n\n\/\/ Set new flags\n$fruitsArrayObject->setFlags(ArrayObject::ARRAY_AS_PROPS);\n\n\/\/ Get the new flags\n$flags = $fruitsArrayObject->getFlags();\nvar_dump($flags);","output":"int(0)\nint(2)"}],"arrayobject::getiterator":[{"title":"ArrayObject::getIterator() example","source":"$array = array('1' => 'one',\n               '2' => 'two',\n               '3' => 'three');\n\n$arrayobject = new ArrayObject($array);\n\n$iterator = $arrayobject->getIterator();\n\nwhile($iterator->valid()) {\n    echo $iterator->key() . ' => ' . $iterator->current() . \"\\n\";\n\n    $iterator->next();\n}","output":"1 => one\n2 => two\n3 => three"}],"arrayobject::getiteratorclass":[{"title":"ArrayObject::getIteratorClass() example","source":"\/\/ Custom ArrayIterator (inherits from ArrayIterator)\nclass MyArrayIterator extends ArrayIterator {\n    \/\/ custom implementation\n}\n\n\/\/ Array of available fruits\n$fruits = array(\"lemons\" => 1, \"oranges\" => 4, \"bananas\" => 5, \"apples\" => 10);\n\n$fruitsArrayObject = new ArrayObject($fruits);\n\n\/\/ Get the current class name\n$className = $fruitsArrayObject->getIteratorClass();\nvar_dump($className);\n\n\/\/ Set new classname\n$fruitsArrayObject->setIteratorClass('MyArrayIterator');\n\n\/\/ Get the new iterator classname\n$className = $fruitsArrayObject->getIteratorClass();\nvar_dump($className);","output":"string(13) \"ArrayIterator\"\nstring(15) \"MyArrayIterator\""}],"arrayobject::ksort":[{"title":"ArrayObject::ksort() example","source":"$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\n$fruitArrayObject = new ArrayObject($fruits);\n$fruitArrayObject->ksort();\n\nforeach ($fruitArrayObject as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"a = orange\nb = banana\nc = apple\nd = lemon"}],"arrayobject::natcasesort":[{"title":"ArrayObject::natcasesort() example","source":"$array = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');\n\n$arr1 = new ArrayObject($array);\n$arr2 = clone $arr1;\n\n$arr1->asort();\necho \"Standard sorting\\n\";\nprint_r($arr1);\n\n$arr2->natcasesort();\necho \"\\nNatural order sorting (case-insensitive)\\n\";\nprint_r($arr2);","output":"Standard sorting\nArrayObject Object\n(\n    [0] => IMG0.png\n    [5] => IMG3.png\n    [4] => img1.png\n    [2] => img10.png\n    [1] => img12.png\n    [3] => img2.png\n)\n\nNatural order sorting (case-insensitive)\nArrayObject Object\n(\n    [0] => IMG0.png\n    [4] => img1.png\n    [3] => img2.png\n    [5] => IMG3.png\n    [2] => img10.png\n    [1] => img12.png\n)"}],"arrayobject::natsort":[{"title":"ArrayObject::natsort() example","source":"$array = array(\"img12.png\", \"img10.png\", \"img2.png\", \"img1.png\");\n\n$arr1 = new ArrayObject($array);\n$arr2 = clone $arr1;\n\n$arr1->asort();\necho \"Standard sorting\\n\";\nprint_r($arr1);\n\n$arr2->natsort();\necho \"\\nNatural order sorting\\n\";\nprint_r($arr2);","output":"Standard sorting\nArrayObject Object\n(\n    [3] => img1.png\n    [1] => img10.png\n    [0] => img12.png\n    [2] => img2.png\n)\n\nNatural order sorting\nArrayObject Object\n(\n    [3] => img1.png\n    [2] => img2.png\n    [1] => img10.png\n    [0] => img12.png\n)"}],"arrayobject::offsetexists":[{"title":"ArrayObject::offsetExists() example","source":"$arrayobj = new ArrayObject(array('zero', 'one', 'example'=>'e.g.'));\nvar_dump($arrayobj->offsetExists(1));\nvar_dump($arrayobj->offsetExists('example'));\nvar_dump($arrayobj->offsetExists('notfound'));","output":"bool(true)\nbool(true)\nbool(false)"}],"arrayobject::offsetget":[{"title":"ArrayObject::offsetGet() example","source":"$arrayobj = new ArrayObject(array('zero', 7, 'example'=>'e.g.'));\nvar_dump($arrayobj->offsetGet(1));\nvar_dump($arrayobj->offsetGet('example'));\nvar_dump($arrayobj->offsetExists('notfound'));","output":"int(7)\nstring(4) \"e.g.\"\nbool(false)"}],"arrayobject::offsetset":[{"title":"ArrayObject::offsetSet() example","source":"class Example {\n    public $property = 'prop:public';\n}\n$arrayobj = new ArrayObject(new Example());\n$arrayobj->offsetSet(4, 'four');\n$arrayobj->offsetSet('group', array('g1', 'g2'));\nvar_dump($arrayobj);\n\n$arrayobj = new ArrayObject(array('zero','one'));\n$arrayobj->offsetSet(null, 'last');\nvar_dump($arrayobj);","output":"object(ArrayObject)#1 (3) {\n  [\"property\"]=>\n  string(11) \"prop:public\"\n  [4]=>\n  string(4) \"four\"\n  [\"group\"]=>\n  array(2) {\n    [0]=>\n    string(2) \"g1\"\n    [1]=>\n    string(2) \"g2\"\n  }\n}\nobject(ArrayObject)#3 (3) {\n  [0]=>\n  string(4) \"zero\"\n  [1]=>\n  string(3) \"one\"\n  [2]=>\n  string(4) \"last\"\n}"}],"arrayobject::offsetunset":[{"title":"ArrayObject::offsetUnset() example","source":"$arrayobj = new ArrayObject(array(0=>'zero',2=>'two'));\n$arrayobj->offsetUnset(2);\nvar_dump($arrayobj);","output":"object(ArrayObject)#1 (1) {\n  [0]=>\n  string(4) \"zero\"\n}"}],"arrayobject::serialize":[{"title":"ArrayObject::serialize() example","source":"$o = new ArrayObject();\n\n$s1 = serialize($o);\n$s2 = $o->serialize();\n\nvar_dump($s1);\nvar_dump($s2);","output":"string(45) \"C:11:\"ArrayObject\":21:{x:i:0;a:0:{};m:a:0:{}}\"\nstring(21) \"x:i:0;a:0:{};m:a:0:{}\""}],"arrayobject::setflags":[{"title":"ArrayObject::setFlags() example","source":"\/\/ Array of available fruits\n$fruits = array(\"lemons\" => 1, \"oranges\" => 4, \"bananas\" => 5, \"apples\" => 10);\n\n$fruitsArrayObject = new ArrayObject($fruits);\n\n\/\/ Try to use array key as property\nvar_dump($fruitsArrayObject->lemons);\n\/\/ Set the flag so that the array keys can be used as properties of the ArrayObject\n$fruitsArrayObject->setFlags(ArrayObject::ARRAY_AS_PROPS);\n\/\/ Try it again\nvar_dump($fruitsArrayObject->lemons);","output":"NULL\nint(1)"}],"arrayobject::setiteratorclass":[{"title":"ArrayObject::setIteratorClass() example","source":"\/\/ Custom ArrayIterator (inherits from ArrayIterator)\nclass MyArrayIterator extends ArrayIterator {\n    \/\/ custom implementation\n}\n\n\/\/ Array of available fruits\n$fruits = array(\"lemons\" => 1, \"oranges\" => 4, \"bananas\" => 5, \"apples\" => 10);\n\n$fruitsArrayObject = new ArrayObject($fruits);\n\n\/\/ Set the iterator classname to the newly\n$fruitsArrayObject->setIteratorClass('MyArrayIterator');\nprint_r($fruitsArrayObject->getIterator());","output":"MyArrayIterator Object\n(\n    [lemons] => 1\n    [oranges] => 4\n    [bananas] => 5\n    [apples] => 10\n)"}],"arrayobject::uasort":[{"title":"ArrayObject::uasort() example","source":"\/\/ Comparison function\nfunction cmp($a, $b) {\n    if ($a == $b) {\n        return 0;\n    }\n    return ($a < $b) ? -1 : 1;\n}\n\n\/\/ Array to be sorted\n$array = array('a' => 4, 'b' => 8, 'c' => -1, 'd' => -9, 'e' => 2, 'f' => 5, 'g' => 3, 'h' => -4);\n$arrayObject = new ArrayObject($array);\nprint_r($arrayObject);\n\n\/\/ Sort and print the resulting array\n$arrayObject->uasort('cmp');\nprint_r($arrayObject);","output":"Array\n(\n    [a] => 4\n    [b] => 8\n    [c] => -1\n    [d] => -9\n    [e] => 2\n    [f] => 5\n    [g] => 3\n    [h] => -4\n)\nArray\n(\n    [d] => -9\n    [h] => -4\n    [c] => -1\n    [e] => 2\n    [g] => 3\n    [a] => 4\n    [f] => 5\n    [b] => 8\n)"}],"arrayobject::uksort":[{"title":"ArrayObject::uksort() example","source":"function cmp($a, $b) {\n    $a = preg_replace('@^(a|an|the) @', '', $a);\n    $b = preg_replace('@^(a|an|the) @', '', $b);\n    return strcasecmp($a, $b);\n}\n\n$array = array(\"John\" => 1, \"the Earth\" => 2, \"an apple\" => 3, \"a banana\" => 4);\n$arrayObject = new ArrayObject($array);\n$arrayObject->uksort('cmp');\n\nforeach ($arrayObject as $key => $value) {\n    echo \"$key: $value\\n\";\n}","output":"an apple: 3\na banana: 4\nthe Earth: 2\nJohn: 1"}],"cachingiterator::getcache":[{"title":"CachingIterator::getCache() example","source":"$iterator = new ArrayIterator(array(1, 2, 3));\n$cache    = new CachingIterator($iterator, CachingIterator::FULL_CACHE);\n\n$cache->next();\n$cache->next();\nvar_dump($cache->getCache());\n\n$cache->next();\nvar_dump($cache->getCache());","output":"array(2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n}\narray(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"cairo::availablefonts":[{"title":"Object oriented style","source":"\/* Object Oriented Style *\/\nvar_dump(Cairo::availableFonts());","output":"array(2) {\n  [0]=>\n  string(5) \"WIN32\"\n  [1]=>\n  string(4) \"USER\"\n}"},{"title":"Procedural style","source":"\/* Procedural style *\/\nvar_dump(cairo_available_fonts());","output":"array(2) {\n  [0]=>\n  string(5) \"WIN32\"\n  [1]=>\n  string(4) \"USER\"\n}"}],"cairo::availablesurfaces":[{"title":"Object oriented style","source":"\/* Object Oriented style *\/\nvar_dump(Cairo::availableSurfaces());","output":"array(6) {\n  [0]=>\n  string(5) \"IMAGE\"\n  [1]=>\n  string(3) \"PNG\"\n  [2]=>\n  string(3) \"PDF\"\n  [3]=>\n  string(2) \"PS\"\n  [4]=>\n  string(3) \"SVG\"\n  [5]=>\n  string(5) \"WIN32\"\n}"},{"title":"Procedural style","source":"\/* Procedural style *\/\nvar_dump(cairo_available_surfaces());","output":"array(6) {\n  [0]=>\n  string(5) \"IMAGE\"\n  [1]=>\n  string(3) \"PNG\"\n  [2]=>\n  string(3) \"PDF\"\n  [3]=>\n  string(2) \"PS\"\n  [4]=>\n  string(3) \"SVG\"\n  [5]=>\n  string(5) \"WIN32\"\n}"}],"cairo::statustostring":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n$context = new CairoContext($surface);\n\nvar_dump(Cairo::statusToString($context->status()));","output":"string(7) \"success\""},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n$context = cairo_create($surface);\n\nvar_dump(cairo_status_to_string(cairo_status($context)));","output":"string(7) \"success\""}],"cairo::version":[{"title":"Object oriented style","source":"var_dump(Cairo::version());","output":"int(10808)"},{"title":"Procedural style","source":"var_dump(cairo_version());","output":"int(10808)"}],"cairo::versionstring":[{"title":"Object oriented style","source":"var_dump(Cairo::versionString());","output":"string(5) \"1.8.8\""},{"title":"Procedural style","source":"var_dump(cairo_version_string());","output":"string(5) \"1.8.8\""}],"cairocontext::appendpath":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\n$path = $context->copyPath();\n\n$context->appendPath($path);","output":null},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\n$path = cairo_copy_path($context);\n\ncairo_append_path($context, $path);","output":null}],"cairocontext::arc":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n\n$c->setSourceRgb(0, 0, 0);\n$c->paint();\n\n$c->setLineWidth(1);\n$c->setSourceRgb(1, 1, 1);\n\nfor ($r = 50; $r > 0; $r -= 10) {\n $c->arc(50, 50, $r, 0, 2 * M_PI);\n $c->stroke();\n $c->fill();\n}\n\n$s->writeToPng(dirname(__FILE__) . '\/CairoContext__arc.png');","output":null},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\ncairo_set_source_rgb($c, 0, 0, 0);\ncairo_paint($c);\n\ncairo_set_source_rgb($c, 1, 1, 1);\ncairo_set_line_width($c, 1);\n\nfor ($r = 50; $r > 0; $r -= 10) {\n cairo_arc($c, 50, 50, $r, 0, 2 * M_PI);\n cairo_stroke($c);\n cairo_fill($c);\n}\n\ncairo_surface_write_to_png($s, dirname(__FILE__) . '\/cairo_arc.png');","output":null}],"cairocontext::arcnegative":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n\n$c->setSourceRgb(0, 0, 0);\n$c->paint();\n\n$c->setLineWidth(1);\n$c->setSourceRgb(1, 1, 1);\n\nfor ($r = 50; $r > 0; $r -= 10) {\n $c->arcNegative(50, 50, $r, 2 * M_PI, 0);\n $c->stroke();\n $c->fill();\n}\n\n$s->writeToPng(dirname(__FILE__) . '\/CairoContext__arcNegative.png');","output":null},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\ncairo_set_source_rgb($c, 0, 0, 0);\ncairo_paint($c);\n\ncairo_set_source_rgb($c, 1, 1, 1);\ncairo_set_line_width($c, 1);\n\nfor ($r = 50; $r > 0; $r -= 10) {\n cairo_arc_negative($c, 50, 50, $r, 2 * M_PI, 0);\n cairo_stroke($c);\n cairo_fill($c);\n}\n\ncairo_surface_write_to_png($s, dirname(__FILE__) . '\/cairo_arc_negative.png');","output":null}],"cairocontext::clip":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\n$context->clip();","output":null},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\ncairo_clip($context);","output":null}],"cairocontext::clipextents":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\nvar_dump($context->clipExtents());","output":"array(4) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0)\n  [2]=>\n  float(50)\n  [3]=>\n  float(50)\n}"},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\nvar_dump(cairo_clip_extents($context));","output":"array(4) {\n  [0]=>\n  float(0)\n  [1]=>\n  float(0)\n  [2]=>\n  float(50)\n  [3]=>\n  float(50)\n}"}],"cairocontext::clippreserve":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\n$context->clipPreserve();","output":null},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\ncairo_clip_preserve($context);","output":null}],"cairocontext::cliprectanglelist":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\nvar_dump($context->clipRectangleList());","output":"array(1) {\n  [0]=>\n  array(4) {\n    [\"x\"]=>\n    float(0)\n    [\"y\"]=>\n    float(0)\n    [\"width\"]=>\n    float(50)\n    [\"height\"]=>\n    float(50)\n  }\n}"},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\nvar_dump(cairo_clip_rectangle_list($context));","output":"array(1) {\n  [0]=>\n  array(4) {\n    [\"x\"]=>\n    float(0)\n    [\"y\"]=>\n    float(0)\n    [\"width\"]=>\n    float(50)\n    [\"height\"]=>\n    float(50)\n  }\n}"}],"cairocontext::closepath":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\n$context->closePath();","output":null},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\ncairo_close_path($context);","output":null}],"cairocontext::__construct":[{"title":"CairoContext::__construct() example","source":"\/\/ The surface to work on\n$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n\/\/ Create a new CairoContext for the CairoSurface\n$context = new CairoContext($surface);","output":null}],"cairocontext::copypage":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\n$context->copyPage();","output":null},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\ncairo_copy_page($context);","output":null}],"cairocontext::copypath":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\nvar_dump($context->copyPath())","output":"object(CairoPath)#3 (0) {\n}"},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\nvar_dump(cairo_copy_path($context));","output":"object(CairoPath)#3 (0) {\n}"}],"cairocontext::copypathflat":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\n$context = new CairoContext($surface);\n\nvar_dump($context->copyPathFlat());","output":"object(CairoPath)#3 (0) {\n}"},{"title":"Procedural style","source":"$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n\n$context = cairo_create($surface);\n\nvar_dump(cairo_copy_path_flat($context));","output":"object(CairoPath)#3 (0) {\n}"}],"cairocontext::curveto":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n\n$c->setSourceRgb(0, 0, 0);\n\n$c->paint();\n\n$c->moveTo(10, 50); \n$c->setLineWidth(5);\n$c->setSourceRgb(.1, 0, 1);\n$c->curveTo(20, 80, 80, 20, 90, 50); \n$c->stroke();\n\n$s->writeToPng(dirname(__FILE__) . '\/curveTo.png');","output":null},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\ncairo_set_source_rgb($c, 0, 0, 0);\n\ncairo_paint($c);\n\ncairo_move_to($c, 10, 50);\ncairo_set_line_width($c, 5);\ncairo_set_source_rgb($c, .1, 0, 1);\ncairo_curve_to($c, 20, 80, 80, 20, 90, 50);\ncairo_stroke($c);\n\ncairo_surface_write_to_png($s, dirname(__FILE__) . '\/curve_to.png');","output":null}],"cairocontext::fill":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n \n$c->setSourceRgb(0, 0, 0);\n$c->paint();\n\n$c->setSourceRgb(1, 1, 1);\n$c->rectangle(0, 0, 50, 50);\n$c->fill();\n$c->setSourceRgb(0, 1, 0);\n$c->rectangle(50, 50, 50, 50);\n$c->fill();\n\n$s->writeToPng(dirname(__FILE__) . '\/CairoContext_fill.png');","output":"..."},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\ncairo_set_source_rgb($c, 0, 0, 0);\ncairo_paint($c);\n\ncairo_set_source_rgb($c, 1, 1, 1);\ncairo_rectangle($c, 0, 0, 50, 50);\ncairo_fill($c);\ncairo_set_source_rgb($c, 0, 1, 0);\ncairo_rectangle($c, 50, 50, 50, 50);\ncairo_fill($c);\n\ncairo_surface_write_to_png($s, dirname(__FILE__) . '\/cairo_fill.png');","output":"..."}],"cairocontext::fillextents":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::fillpreserve":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::fontextents":[{"title":"Object oriented style","source":"$sur = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n$con = new CairoContext($sur);\n\nvar_dump($con->fontExtents());","output":"array(5) {\n  [\"ascent\"]=>\n  float(10)\n  [\"descent\"]=>\n  float(3)\n  [\"height\"]=>\n  float(13.3125)\n  [\"max_x_advance\"]=>\n  float(26.65625)\n  [\"max_y_advance\"]=>\n  float(0)\n}"},{"title":"Procedural style","source":"$sur = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n$con = cairo_create($sur);\n\nvar_dump(cairo_font_extents($con));","output":"array(5) {\n  [\"ascent\"]=>\n  float(10)\n  [\"descent\"]=>\n  float(3)\n  [\"height\"]=>\n  float(13.3125)\n  [\"max_x_advance\"]=>\n  float(26.65625)\n  [\"max_y_advance\"]=>\n  float(0)\n}"}],"cairocontext::getantialias":[{"title":"Object oriented style","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n$context = new CairoContext($surface);\n\n$context->setAntialias(CairoAntialias::MODE_SUBPIXEL);\n\nvar_dump($context->getAntialias());","output":"int(3)"},{"title":"Procedural style","source":"$sur = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);\n$con = cairo_create($sur);\n\ncairo_set_antialias($con, CAIRO_ANTIALIAS_SUBPIXEL);\n\nvar_dump(cairo_get_antialias($con));","output":"int(3)"}],"cairocontext::getcurrentpoint":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n\n$c->moveTo(10, 10);\n\nvar_dump($c->getCurrentPoint());","output":"array(2) {\n  [0]=>\n  float(10)\n  [1]=>\n  float(10)\n}"},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\ncairo_move_to($c, 10, 10);\n\nvar_dump(cairo_get_current_point($c));","output":"array(2) {\n  [0]=>\n  float(10)\n  [1]=>\n  float(10)\n}"}],"cairocontext::getdash":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getdashcount":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getfillrule":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getfontface":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getfontmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getfontoptions":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getgrouptarget":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getlinecap":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getlinejoin":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getlinewidth":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getmiterlimit":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getoperator":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getscaledfont":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::getsource":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::gettarget":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::gettolerance":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::glyphpath":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::hascurrentpoint":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n\nvar_dump($c->hasCurrentPoint());\n\n$c->moveTo(10, 10);\n\nvar_dump($c->hasCurrentPoint());","output":"bool(false)\nbool(true)"},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\nvar_dump(cairo_has_current_point($c));\n\ncairo_move_to($c, 10, 10);\n\nvar_dump(cairo_has_current_point($c));","output":"bool(false)\nbool(true)"}],"cairocontext::identitymatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::infill":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::instroke":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::lineto":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::mask":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::masksurface":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::moveto":[{"title":"Object oriented style","source":"$s = new CairoImageSurface(CairoFormat::ARGB32, 100, 100);\n$c = new CairoContext($s);\n\n$c->setSourceRgb(0, 0, 0);\n$c->paint();\n\n\/\/ Move 10 pixels across, and 10 pixels down\n$c->moveTo(10, 10);\n$c->lineTo(90, 90);\n$c->setLineWidth(2);\n$c->setSourceRgb(1, 1, 1);\n$c->stroke();\n\n\/\/ Move 90 pixels across, and 10 pixels down\n$c->moveTo(90, 10);\n$c->lineTo(10, 90);\n$c->setLineWidth(2);\n$c->setSourceRgb(1, 1, 1);\n$c->stroke();\n\n$s->writeToPng(dirname(__FILE__) . '\/CairoContext_moveTo.png');","output":"..."},{"title":"Procedural style","source":"$s = cairo_image_surface_create(CAIRO_SURFACE_TYPE_IMAGE, 100, 100);\n$c = cairo_create($s);\n\ncairo_set_source_rgb($c, 0, 0, 0);\ncairo_paint($c);\n\n\/\/ Move 10 pixels across, and 10 pixels down\ncairo_move_to($c, 10, 10);\ncairo_line_to($c, 90, 90);\ncairo_set_line_width($c, 2);\ncairo_set_source_rgb($c, 1, 1, 1);\ncairo_stroke($c);\n\n\/\/ Move 90 pixels across, and 10 pixels down\ncairo_move_to($c, 90, 10);\ncairo_line_to($c, 10, 90);\ncairo_set_line_width($c, 2);\ncairo_set_source_rgb($c, 1, 1, 1);\ncairo_stroke($c);\n\ncairo_surface_write_to_png($s, dirname(__FILE__) . '\/cairo_move_to.png');","output":"..."}],"cairocontext::newpath":[{"title":"Object oriented style","source":"\/\/ [...]\nCairoContext::newPath();","output":null},{"title":"Procedural style","source":"\/\/ [...]\ncairo_new_path($context);","output":null}],"cairocontext::newsubpath":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::paint":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::paintwithalpha":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::pathextents":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::popgroup":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::popgrouptosource":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::pushgroup":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::pushgroupwithcontent":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::rectangle":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::relcurveto":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::rellineto":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::relmoveto":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::resetclip":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::restore":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::rotate":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::save":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::scale":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::selectfontface":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setantialias":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setdash":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setfillrule":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setfontface":[{"title":"Object oriented style","source":"\/\/ New surface with white background\n$s = new CairoImageSurface(CairoFormat::ARGB32, 300, 100);\n$c = new CairoContext($s);\n$c->setSourceRgb(1, 1, 1);\n$c->paint();\n\n\/\/ Draw some text\n$c->setSourceRgb(0, 0, 0);\n$c->moveTo(10, 60);\n\/\/ Create a new font face\n$f = new CairoToyFontFace(\"sans-serif\", CairoFontSlant::NORMAL, CairoFontWeight::NORMAL);\n$c->setFontFace($f);\n$c->setFontSize(30);\n$c->showText('Hello, World!');\n$s->writeToPng(dirname(__FILE__) . '\/setFontFace.png');","output":null},{"title":"Procedural style","source":"\/* ... *\/","output":null}],"cairocontext::setfontmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setfontoptions":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setfontsize":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setlinecap":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setlinejoin":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setlinewidth":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setmiterlimit":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setoperator":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setscaledfont":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setsource":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setsourcergb":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setsourcergba":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::setsourcesurface":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::settolerance":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::showpage":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::showtext":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::status":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::stroke":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::strokeextents":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::strokepreserve":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::textextents":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::textpath":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::transform":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::translate":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::usertodevice":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairocontext::usertodevicedistance":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairofontface::__construct":[{"title":"CairoFontFace::__construct() example","source":"\/* ... *\/","output":"..."}],"cairofontface::gettype":[{"title":"CairoFontFace::getType() example","source":"\/\/ Creates the font face\n$fontface = new CairoToyFontFace('sans-serif');\n\n\/\/ Get the font face type\nvar_dump($fontface->getType());","output":"int(0)"}],"cairofontface::status":[{"title":"Object oriented style","source":"\/\/ Creates the font face\n$fontface = new CairoToyFontFace('sans-serif');\n\n\/\/ Get the font face status\nvar_dump($fontface->status()); \/\/ should be the value of CAIRO_STATUS_SUCCESS","output":"int(0)"},{"title":"Procedural style","source":"\/\/ Creates the font face\n$fontface = new CairoToyFontFace('sans-serif');\n\n\/\/ Get the font face status\nvar_dump(cairo_font_face_status($fontface)); \/\/ should be the value of CAIRO_STATUS_SUCCESS","output":"int(0)"}],"cairo_font_face_status":[{"title":"cairo_font_face_status() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::__construct":[{"title":"CairoFontOptions::__construct() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::equal":[{"title":"CairoFontOptions::equal() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::getantialias":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairofontoptions::gethintmetrics":[{"title":"CairoFontOptions::getHintMetrics() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::gethintstyle":[{"title":"CairoFontOptions::getHintStyle() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::getsubpixelorder":[{"title":"CairoFontOptions::getSubpixelOrder() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::hash":[{"title":"CairoFontOptions::hash() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::merge":[{"title":"CairoFontOptions::merge() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::setantialias":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairofontoptions::sethintmetrics":[{"title":"CairoFontOptions::setHintMetrics() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::sethintstyle":[{"title":"CairoFontOptions::setHintStyle() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::setsubpixelorder":[{"title":"CairoFontOptions::setSubpixelOrder() example","source":"\/* ... *\/","output":"..."}],"cairofontoptions::status":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairoformat::strideforwidth":[{"title":"CairoFormat::strideForWidth() example","source":"\/* ... *\/","output":"..."}],"cairogradientpattern::addcolorstoprgb":[{"title":"CairoGradientPattern::addColorStopRgb() example","source":"\/* ... *\/","output":"..."}],"cairogradientpattern::addcolorstoprgba":[{"title":"CairoGradientPattern::addColorStopRgba() example","source":"\/* ... *\/","output":"..."}],"cairogradientpattern::getcolorstopcount":[{"title":"CairoGradientPattern::getColorStopCount() example","source":"\/* ... *\/","output":"..."}],"cairogradientpattern::getcolorstoprgba":[{"title":"CairoGradientPattern::getColorStopRgba() example","source":"\/* ... *\/","output":"..."}],"cairogradientpattern::getextend":[{"title":"CairoGradientPattern::getExtend() example","source":"\/* ... *\/","output":"..."}],"cairogradientpattern::setextend":[{"title":"CairoGradientPattern::setExtend() example","source":"\/* ... *\/","output":"..."}],"cairoimagesurface::__construct":[{"title":"CairoImageSurface::__construct() example","source":"\/\/ Creates a image with ARGB32 format of 50 width and 50 height\n$surface = new CairoImageSurface(CairoFormat::ARGB32, 50,50);","output":null}],"cairoimagesurface::createfordata":[{"title":"CairoImageSurface::createForData() example","source":"\/* ... *\/","output":"..."}],"cairoimagesurface::createfrompng":[{"title":"CairoImageSurface::createFromPng() example","source":"$surface = CairoImageSurface::createFromPng('\/path\/to\/image\/file.png');","output":"..."}],"cairoimagesurface::getdata":[{"title":"CairoImageSurface::getData() example","source":"\/* ... *\/","output":"..."}],"cairoimagesurface::getformat":[{"title":"CairoImageSurface::getFormat() example","source":"$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);\n\nvar_dump($surface->getFormat()); \/\/ 0\n\n$surface2 = new CairoImageSurface(CairoFormat::A8, 50, 50);\n\nvar_dump($surface2->getFormat()); \/\/ 2","output":"int(0)\nint(2)"}],"cairoimagesurface::getheight":[{"title":"CairoImageSurface::getHeight() example","source":"\/\/ creates a new image surface\n$surface = new CairoImageSurface(CairoFormat::ARGB32, 80, 50);\n\n\/\/gets the height\nvar_dump($surface->getHeight());","output":"int(50)"}],"cairoimagesurface::getstride":[{"title":"CairoImageSurface::getStride() example","source":"\/* ... *\/","output":"..."}],"cairoimagesurface::getwidth":[{"title":"CairoImageSurface::getWidth() example","source":"\/\/ creates a new image surface\n$surface = new CairoImageSurface(CairoFormat::ARGB32, 80, 50);\n\n\/\/gets the width\nvar_dump($surface->getWidth());","output":"int(80)"}],"cairolineargradient::__construct":[{"title":"CairoLinearGradient::__construct() example","source":"\/* ... *\/","output":"..."}],"cairolineargradient::getpoints":[{"title":"CairoLinearGradient::getPoints() example","source":"\/* ... *\/","output":"..."}],"cairomatrix::__construct":[{"title":"Object oriented style","source":"\/* Create a new Matrix *\/\n$matrix = new CairoMatrix(1.0, 0.5, 0.0, 1.0, 0.0, 0.0);","output":null},{"title":"Procedural style","source":"\/* Create a new Matrix *\/\n$matrix = cairo_matrix_init(1.0, 0.5, 0.0, 1.0, 0.0, 0.0);","output":null}],"cairomatrix::initidentity":[{"title":"Object oriented style","source":"\/* Create a new Matrix *\/\n$matrix = CairoMatrix::initIdentity();","output":null},{"title":"Procedural style","source":"\/* Create a new Matrix *\/\n$matrix = cairo_matrix_init_identity();","output":null}],"cairomatrix::initrotate":[{"title":"Object oriented style","source":"\/* Create a new Matrix *\/\n$matrix = CairoMatrix::initRotate(0.3);","output":null},{"title":"Procedural style","source":"\/* Create a new Matrix *\/\n$matrix = cairo_matrix_init_rotate(0.3);","output":null}],"cairomatrix::initscale":[{"title":"Object oriented style","source":"\/* Create a new Matrix *\/\n$matrix = CairoMatrix::initScale(1.0, 2.0);","output":null},{"title":"Procedural style","source":"\/* Create a new Matrix *\/\n$matrix = cairo_matrix_init_scale(1.0, 2.0);","output":null}],"cairomatrix::inittranslate":[{"title":"Object oriented style","source":"\/* Create a new Matrix *\/\n$matrix = CairoMatrix::initTranslate(1.0, 2.0);","output":null},{"title":"Procedural style","source":"\/* Create a new Matrix *\/\n$matrix = cairo_matrix_init_translate(1.0, 2.0);","output":null}],"cairomatrix::invert":[{"title":"CairoMatrix::invert() example","source":"\/* ... *\/","output":"..."}],"cairomatrix::multiply":[{"title":"CairoMatrix::multiply() example","source":"\/* ... *\/","output":"..."}],"cairomatrix::rotate":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairomatrix::scale":[{"title":"Object oriented style","source":"\/* Apply scaling to a matrix *\/\n$matrix = new CairoMatrix(1.0, 0.5, 0.0, 1.0, 0.0, 0.0);\n$matrix->scale(0.2, 2.0);","output":null},{"title":"Procedural style","source":"\/* Apply scaling to a matrix *\/\n$matrix = cairo_matrix_init(1.0, 0.5, 0.0, 1.0, 0.0, 0.0);\ncairo_matrix_scale($matrix, 0.2, 2.0);","output":null}],"cairomatrix::transformdistance":[{"title":"CairoMatrix::transformDistance() example","source":"\/* ... *\/","output":"..."}],"cairomatrix::transformpoint":[{"title":"CairoMatrix::transformPoint() example","source":"\/* ... *\/","output":"..."}],"cairomatrix::translate":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairopattern::__construct":[{"title":"CairoPattern::__construct() example","source":"\/* ... *\/","output":"..."}],"cairopattern::getmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairopattern::gettype":[{"title":"CairoPattern::getType() example","source":"\/* ... *\/","output":"..."}],"cairopattern::setmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairopattern::status":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairopdfsurface::__construct":[{"title":"CairoPdfSurface::__construct() example","source":"\/* ... *\/","output":"..."}],"cairopdfsurface::setsize":[{"title":"CairoPdfSurface::setSize() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::__construct":[{"title":"CairoPsSurface::__construct() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::dscbeginpagesetup":[{"title":"CairoPsSurface::dscBeginPageSetup() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::dscbeginsetup":[{"title":"CairoPsSurface::dscBeginSetup() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::dsccomment":[{"title":"CairoPsSurface::dscComment() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::geteps":[{"title":"CairoPsSurface::getEps() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::getlevels":[{"title":"CairoPsSurface::getLevels() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::leveltostring":[{"title":"CairoPsSurface::levelToString() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::restricttolevel":[{"title":"CairoPsSurface::restrictToLevel() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::seteps":[{"title":"CairoPsSurface::setEps() example","source":"\/* ... *\/","output":"..."}],"cairopssurface::setsize":[{"title":"CairoPsSurface::setSize() example","source":"\/* ... *\/","output":"..."}],"cairoradialgradient::__construct":[{"title":"CairoRadialGradient::__construct() example","source":"\/* ... *\/","output":"..."}],"cairoradialgradient::getcircles":[{"title":"CairoRadialGradient::getCircles() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::__construct":[{"title":"CairoScaledFont::__construct() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::extents":[{"title":"CairoScaledFont::extents() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::getctm":[{"title":"CairoScaledFont::getCtm() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::getfontface":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::getfontmatrix":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::getfontoptions":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::getscalematrix":[{"title":"CairoScaledFont::getScaleMatrix() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::gettype":[{"title":"CairoScaledFont::getType() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::glyphextents":[{"title":"CairoScaledFont::glyphExtents() example","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::status":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairoscaledfont::textextents":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairosolidpattern::__construct":[{"title":"CairoSolidPattern::__construct() example","source":"\/* ... *\/","output":"..."}],"cairosolidpattern::getrgba":[{"title":"CairoSolidPattern::getRgba() example","source":"\/* ... *\/","output":"..."}],"cairosurface::copypage":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairosurface::createsimilar":[{"title":"CairoSurface::createSimilar() example","source":"\/* ... *\/","output":"..."}],"cairosurface::finish":[{"title":"CairoSurface::finish() example","source":"\/* ... *\/","output":"..."}],"cairosurface::flush":[{"title":"CairoSurface::flush() example","source":"\/* ... *\/","output":"..."}],"cairosurface::getcontent":[{"title":"CairoSurface::getContent() example","source":"\/* ... *\/","output":"..."}],"cairosurface::getdeviceoffset":[{"title":"CairoSurface::getDeviceOffset() example","source":"\/* ... *\/","output":"..."}],"cairosurface::getfontoptions":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairosurface::gettype":[{"title":"CairoSurface::getType() example","source":"\/* ... *\/","output":"..."}],"cairosurface::markdirty":[{"title":"CairoSurface::markDirty() example","source":"\/* ... *\/","output":"..."}],"cairosurface::markdirtyrectangle":[{"title":"CairoSurface::markDirtyRectangle() example","source":"\/* ... *\/","output":"..."}],"cairosurface::setdeviceoffset":[{"title":"CairoSurface::setDeviceOffset() example","source":"\/* ... *\/","output":"..."}],"cairosurface::setfallbackresolution":[{"title":"CairoSurface::setFallbackResolution() example","source":"\/* ... *\/","output":"..."}],"cairosurface::showpage":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairosurface::status":[{"title":"Object oriented style","source":"\/* ... *\/","output":"..."},{"title":"Procedural style","source":"\/* ... *\/","output":"..."}],"cairosurface::writetopng":[{"title":"CairoSurface::writeToPng() example","source":"\/* ... *\/","output":"..."}],"cairosurfacepattern::__construct":[{"title":"CairoSurfacePattern::__construct() example","source":"\/* ... *\/","output":"..."}],"cairosurfacepattern::getextend":[{"title":"CairoSurfacePattern::getExtend() example","source":"\/* ... *\/","output":"..."}],"cairosurfacepattern::getfilter":[{"title":"CairoSurfacePattern::getFilter() example","source":"\/* ... *\/","output":"..."}],"cairosurfacepattern::getsurface":[{"title":"CairoSurfacePattern::getSurface() example","source":"\/* ... *\/","output":"..."}],"cairosurfacepattern::setextend":[{"title":"CairoSurfacePattern::setExtend() example","source":"\/* ... *\/","output":"..."}],"cairosurfacepattern::setfilter":[{"title":"CairoSurfacePattern::setFilter() example","source":"\/* ... *\/","output":"..."}],"cairosvgsurface::__construct":[{"title":"CairoSvgSurface::__construct() example","source":"\/* ... *\/","output":"..."}],"cairosvgsurface::getversions":[{"title":"CairoSvgSurface::getVersions() example","source":"\/* Grab our list of versions *\/\n$versions = CairoSvgSurface::getVersions();\nvar_dump($versions);\n\n\/* echo the string name of each version *\/\nforeach($versions as $id) {\n    echo CairoSvgSurface::versionToString($id), PHP_EOL;\n}","output":"array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\nSVG 1.1\nSVG 1.2"},{"title":"Procedural style","source":"\/* Grab our list of versions *\/\n$versions = cairo_svg_surface_get_versions();\nvar_dump($versions);\n\n\/* echo the string name of each version *\/\nforeach($versions as $id) {\n    echo cairo_svg_surface_version_to_string($id), PHP_EOL;\n}","output":"array(2) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n}\nSVG 1.1\nSVG 1.2"}],"cairosvgsurface::restricttoversion":[{"title":"CairoSvgSurface::restrictToVersion() example","source":"\/* ... *\/","output":"..."}],"cairosvgsurface::versiontostring":[{"title":"CairoSvgSurface::versionToString() example","source":"\/* ... *\/","output":"..."}],"chdb::get":[{"title":"chdb::get() example","source":"$data = array(\n    'key1' => 'value1',\n    'key2' => 'value2',\n    \/\/ ...\n);\nchdb_create('data.chdb', $data);\n\n$chdb = new chdb('data.chdb');\n$value1 = $chdb->get('key1');\n$value2 = $chdb->get('key2');\n\necho $value1, PHP_EOL;\necho $value2, PHP_EOL;","output":"value1\nvalue2"}],"closure::bind":[{"title":"Closure::bind() example","source":"class A {\n    private static $sfoo = 1;\n    private $ifoo = 2;\n}\n$cl1 = static function() {\n    return A::$sfoo;\n};\n$cl2 = function() {\n    return $this->ifoo;\n};\n\n$bcl1 = Closure::bind($cl1, null, 'A');\n$bcl2 = Closure::bind($cl2, new A(), 'A');\necho $bcl1(), \"\\n\";\necho $bcl2(), \"\\n\";","output":"1\n2"}],"closure::bindto":[{"title":"Closure::bindTo() example","source":"class A {\n    function __construct($val) {\n        $this->val = $val;\n    }\n    function getClosure() {\n        \/\/returns closure bound to this object and scope\n        return function() { return $this->val; };\n    }\n}\n\n$ob1 = new A(1);\n$ob2 = new A(2);\n\n$cl = $ob1->getClosure();\necho $cl(), \"\\n\";\n$cl = $cl->bindTo($ob2);\necho $cl(), \"\\n\";","output":"1\n2"}],"closure::call":[{"title":"Closure::call() example","source":"class Value {\n    protected $value;\n\n    public function __construct($value) {\n        $this->value = $value;\n    }\n\n    public function getValue() {\n        return $this->value;\n    }\n}\n\n$three = new Value(3);\n$four = new Value(4);\n\n$closure = function ($delta) { var_dump($this->getValue() + $delta); };\n$closure->call($three, 4);\n$closure->call($four, 4);","output":"int(7)\nint(8)"}],"collator::asort":[{"title":"collator_asort()example","source":"$coll = collator_create( 'en_US' );\n$arr = array(\n     'a' => '100',\n     'b' => '50',\n     'c' => '7'\n);\ncollator_asort( $coll, $arr, Collator::SORT_NUMERIC );\nvar_export( $arr );\n\ncollator_asort( $coll, $arr, Collator::SORT_STRING );\nvar_export( $arr );","output":"array (\n  'c' => '7',\n  'b' => '50',\n  'a' => '100',\n)array (\n  'a' => '100',\n  'b' => '50',\n  'c' => '7',\n)"}],"collator::compare":[{"title":"collator_compare()example","source":"$s1 = 'Hello';\n$s2 = 'hello';\n\n$coll = collator_create( 'en_US' );\n$res  = collator_compare( $coll, $s1, $s2 );\n\nif ($res === false) {\n    echo collator_get_error_message( $coll );\n} else if( $res > 0 ) {\n    echo \"s1 is greater than s2\\n\";\n} else if( $res < 0 ) {\n    echo \"s1 is less than s2\\n\";\n} else {\n    echo \"s1 is equal to s2\\n\";\n}","output":null}],"collator::create":[{"title":"collator_create() example","source":"$coll = collator_create( 'en_US' );\n\nif( !isset( $coll ) ) {\n    printf( \"Collator creation failed: %s\\n\", intl_get_error_message() );\n    exit( 1 );\n}","output":null}],"collator::getattribute":[{"title":"collator_get_attribute() example","source":"$coll = collator_create( 'en_CA' );\n$val = collator_get_attribute( $coll, Collator::NUMERIC_COLLATION );\nif( $val === false )\n{\n    \/\/ Handle error.\n}","output":null}],"collator::geterrorcode":[{"title":"collator_get_error_code() example","source":"$coll = collator_create( 'en_US' );\nif( collator_get_attribute( $coll, Collator::FRENCH_COLLATION ) === false )\n        handle_error( collator_get_error_code() );","output":null}],"collator::geterrormessage":[{"title":"collator_get_error_message() example","source":"$coll = collator_create( 'lt' );\nif( collator_compare( $coll, 'y', 'k' ) === false ) {\n    echo collator_get_error_message( $coll );\n}","output":null}],"collator::getlocale":[{"title":"collator_get_locale() example","source":"$coll    = collator_create( 'en_US_California' );\n$res_val = collator_get_locale( $coll, Locale::VALID_LOCALE );\n$res_act = collator_get_locale( $coll, Locale::ACTUAL_LOCALE );\nprintf( \"Valid locale name: %s\\nActual locale name: %s\\n\",\n         $res_val, $res_act );","output":"Requested locale name: en_US_California\nValid locale name: en_US\nActual locale name: en"}],"collator::getsortkey":[{"title":"collator_get_sort_key()example","source":"$s1 = 'Hello';\n\n$coll = collator_create( 'en_US' );\n$res  = collator_get_sort_key( $coll, $s1);\n\necho urlencode($res);","output":null}],"collator::getstrength":[{"title":"collator_get_strength() example","source":"$coll     = collator_create( 'en_US' );\n$strength = collator_get_strength( $coll );","output":null}],"collator::setattribute":[{"title":"collator_set_attribute() example","source":"$coll = collator_create( 'en_CA' );\n$val  = collator_get_attribute( $coll, Collator::NUMERIC_COLLATION );\nif ($val === false) {\n    \/\/ Handle error.\n} elseif ($val === Collator::ON) {\n    \/\/ Do something useful.\n}","output":null}],"collator::setstrength":[{"title":"collator_set_strength() example","source":"$arr  = array( 'aò', 'Ao', 'ao' );\n$coll = collator_create( 'en_US' );\n\n\/\/ Sort array using default strength.\ncollator_sort( $coll, $arr ); \nvar_export( $arr );\n\n\/\/ Sort array using primary strength.\ncollator_set_strength( $coll, Collator::PRIMARY );\ncollator_sort( $coll, $arr );\nvar_export( $arr );","output":"array (\n  0 => 'ao',\n  1 => 'Ao',\n  2 => 'aò',\n)\narray (\n  0 => 'aò',\n  1 => 'Ao',\n  2 => 'ao',\n)"}],"collator::sort":[{"title":"collator_sort() example","source":"$coll = collator_create( 'en_US' );\n$arr  = array( 'at', 'às', 'as' );\n\nvar_export( $arr );\ncollator_sort( $coll, $arr );\nvar_export( $arr );","output":"array (\n  0 => 'at',\n  1 => 'às',\n  2 => 'as',\n)array (\n  0 => 'as',\n  1 => 'às',\n  2 => 'at',\n)"}],"collator::sortwithsortkeys":[{"title":"collator_sort_with_sort_keys() example","source":"$arr  = array( 'Köpfe', 'Kypper', 'Kopfe' );\n$coll = collator_create( 'sv' );\n\ncollator_sort_with_sort_keys( $coll, $arr );\nvar_export( $arr );","output":"array (\n  0 => 'Kopfe',\n  1 => 'Kypper',\n  2 => 'Köpfe',\n)"}],"cond::broadcast":[{"title":"Condition Broadcasting","source":"\/** You cannot use the \"new\" keyword, a Cond is not a PHP object **\/\n$cond = Cond::create();\n\/** The caller must lock the associated Mutex before a call to broadcast **\/\nvar_dump(Cond::broadcast($cond));\n\/** Always destroy Cond you have created **\/\nCond::destroy($cond);","output":"bool(true)"}],"cond::create":[{"title":"Condition Creation and Destruction","source":"\/** You cannot use the \"new\" keyword, a Cond is not a PHP object **\/\n$cond = Cond::create();\n\/** You can now use the Cond in any context **\/\nvar_dump($cond);\n\/** Always destroy Cond you have created **\/\nCond::destroy($cond);","output":"int(4540682)"}],"cond::destroy":[{"title":"Condition Creation and Destruction","source":"\/** You cannot use the \"new\" keyword, a Cond is not a PHP object **\/\n$cond = Cond::create();\n\/** You can now use the Cond in any context **\/\nvar_dump($cond);\n\/** Always destroy Cond you have created **\/\nCond::destroy($cond);","output":"int(4540682)"}],"cond::signal":[{"title":"Condition Signalling","source":"\/** You cannot use the \"new\" keyword, a Cond is not a PHP object **\/\n$cond = Cond::create();\n\/** The caller must lock the associated Mutex before a call to broadcast **\/\nvar_dump(Cond::signal($cond));\n\/** Always destroy Cond you have created **\/\nCond::destroy($cond);","output":"bool(true)"}],"cond::wait":[{"title":"Waiting for Conditions","source":"\/** PLEASE NOTE THIS EXAMPLE WILL CAUSE THE PROCESS TO HANG **\/\n$mutex = Mutex::create(true);\n\/** You cannot use the \"new\" keyword, a Cond is not a PHP object **\/\n$cond = Cond::create();\n\/** The caller must lock the associated Mutex before a call to broadcast **\/\nvar_dump(Cond::wait($cond, $mutex));\n\/** Always destroy Cond you have created **\/\nCond::destroy($cond);\nMutex::unlock($mutex);\nMutex::destroy($mutex);","output":"int(49685473)"}],"countable::count":[{"title":"Countable::count() example","source":"class myCounter implements Countable {\n    private $count = 0;\n    public function count() {\n        return ++$this->count;\n    }\n}\n\n$counter = new myCounter;\n\nfor($i=0; $i<10; ++$i) {\n    echo \"I have been count()ed \" . count($counter) . \" times\\n\";\n}","output":"I have been count()ed 1 times\nI have been count()ed 2 times\nI have been count()ed 3 times\nI have been count()ed 4 times\nI have been count()ed 5 times\nI have been count()ed 6 times\nI have been count()ed 7 times\nI have been count()ed 8 times\nI have been count()ed 9 times\nI have been count()ed 10 times"}],"curlfile::__construct":[{"title":"CURLFile::__construct() example","source":"\/* http:\/\/example.com\/upload.php:\n<?php var_dump($_FILES); ?>\n*\/\n\n\/\/ Create a cURL handle\n$ch = curl_init('http:\/\/example.com\/upload.php');\n\n\/\/ Create a CURLFile object\n$cfile = new CURLFile('cats.jpg','image\/jpeg','test_name');\n\n\/\/ Assign POST data\n$data = array('test_file' => $cfile);\ncurl_setopt($ch, CURLOPT_POST,1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n\n\/\/ Execute the handle\ncurl_exec($ch);","output":"array(1) {\n  [\"test_file\"]=>\n  array(5) {\n    [\"name\"]=>\n    string(9) \"test_name\"\n    [\"type\"]=>\n    string(10) \"image\/jpeg\"\n    [\"tmp_name\"]=>\n    string(14) \"\/tmp\/phpPC9Kbx\"\n    [\"error\"]=>\n    int(0)\n    [\"size\"]=>\n    int(46334)\n  }\n}"}],"dateinterval::createfromdatestring":[{"title":"Parsing valid date intervals","source":"\/\/ Each set of intervals is equal.\n$i = new DateInterval('P1D');\n$i = DateInterval::createFromDateString('1 day');\n\n$i = new DateInterval('P2W');\n$i = DateInterval::createFromDateString('2 weeks');\n\n$i = new DateInterval('P3M');\n$i = DateInterval::createFromDateString('3 months');\n\n$i = new DateInterval('P4Y');\n$i = DateInterval::createFromDateString('4 years');\n\n$i = new DateInterval('P1Y1D');\n$i = DateInterval::createFromDateString('1 year + 1 day');\n\n$i = new DateInterval('P1DT12H');\n$i = DateInterval::createFromDateString('1 day + 12 hours');\n\n$i = new DateInterval('PT3600S');\n$i = DateInterval::createFromDateString('3600 seconds');","output":null}],"dateinterval::format":[{"title":"DateInterval example","source":"$interval = new DateInterval('P2Y4DT6H8M');\necho $interval->format('%d days');","output":"4 days"},{"title":"DateInterval and carry over points","source":"$interval = new DateInterval('P32D');\necho $interval->format('%d days');","output":"32 days"},{"title":"DateInterval and DateTime::diff() with the %a and %d modifiers","source":"$january = new DateTime('2010-01-01');\n$february = new DateTime('2010-02-01');\n$interval = $february->diff($january);\n\n\/\/ %a will output the total number of days.\necho $interval->format('%a total days').\"\\n\";\n\n\/\/ While %d will only output the number of days not already covered by the\n\/\/ month.\necho $interval->format('%m month, %d days');","output":"31 total days\n1 month, 0 days"}],"dateperiod::getdateinterval":[{"title":"DatePeriod::getDateInterval() example","source":"$period = new DatePeriod('R7\/2016-05-16T00:00:00Z\/P1D');\n$interval = $period->getDateInterval();\necho $interval->format('%d day');","output":"1 day"}],"dateperiod::getenddate":[{"title":"DatePeriod::getEndDate() example","source":"$period = new DatePeriod(\n    new DateTime('2016-05-16T00:00:00Z'),\n    new DateInterval('P1D'),\n    new DateTime('2016-05-20T00:00:00Z')\n);\n$start = $period->getEndDate();\necho $start->format(DateTime::ISO8601);","output":"2016-05-20T00:00:00+0000"},{"title":"DatePeriod::getEndDate() without an end date","source":"$period = new DatePeriod(\n    new DateTime('2016-05-16T00:00:00Z'),\n    new DateInterval('P1D'),\n    7\n);\nvar_dump($period->getEndDate());","output":"NULL"}],"dateperiod::getstartdate":[{"title":"DatePeriod::getStartDate() example","source":"$period = new DatePeriod('R7\/2016-05-16T00:00:00Z\/P1D');\n$start = $period->getStartDate();\necho $start->format(DateTime::ISO8601);","output":"2016-05-16T00:00:00+0000"}],"datetime::add":[{"title":"DateTime::add() example","source":"$date = new DateTime('2000-01-01');\n$date->add(new DateInterval('P10D'));\necho $date->format('Y-m-d') . \"\\n\";","output":"2000-01-11"},{"title":"Further DateTime::add() examples","source":"$date = new DateTime('2000-01-01');\n$date->add(new DateInterval('PT10H30S'));\necho $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$date = new DateTime('2000-01-01');\n$date->add(new DateInterval('P7Y5M4DT4H3M2S'));\necho $date->format('Y-m-d H:i:s') . \"\\n\";","output":"2000-01-01 10:00:30\n2007-06-05 04:03:02"},{"title":"Beware when adding months","source":"$date = new DateTime('2000-12-31');\n$interval = new DateInterval('P1M');\n\n$date->add($interval);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->add($interval);\necho $date->format('Y-m-d') . \"\\n\";","output":"2001-01-31\n2001-03-03"}],"date_create":[{"title":"DateTime::__construct() example","source":"try {\n    $date = new DateTime('2000-01-01');\n} catch (Exception $e) {\n    echo $e->getMessage();\n    exit(1);\n}\n\necho $date->format('Y-m-d');","output":"2000-01-01"},{"title":"Intricacies of DateTime::__construct()","source":"\/\/ Specified date\/time in your computer's time zone.\n$date = new DateTime('2000-01-01');\necho $date->format('Y-m-d H:i:sP') . \"\\n\";\n\n\/\/ Specified date\/time in the specified time zone.\n$date = new DateTime('2000-01-01', new DateTimeZone('Pacific\/Nauru'));\necho $date->format('Y-m-d H:i:sP') . \"\\n\";\n\n\/\/ Current date\/time in your computer's time zone.\n$date = new DateTime();\necho $date->format('Y-m-d H:i:sP') . \"\\n\";\n\n\/\/ Current date\/time in the specified time zone.\n$date = new DateTime(null, new DateTimeZone('Pacific\/Nauru'));\necho $date->format('Y-m-d H:i:sP') . \"\\n\";\n\n\/\/ Using a UNIX timestamp.  Notice the result is in the UTC time zone.\n$date = new DateTime('@946684800');\necho $date->format('Y-m-d H:i:sP') . \"\\n\";\n\n\/\/ Non-existent values roll over.\n$date = new DateTime('2000-02-30');\necho $date->format('Y-m-d H:i:sP') . \"\\n\";","output":"2000-01-01 00:00:00-05:00\n2000-01-01 00:00:00+12:00\n2010-04-24 10:24:16-04:00\n2010-04-25 02:24:16+12:00\n2000-01-01 00:00:00+00:00\n2000-03-01 00:00:00-05:00"}],"datetime::createfromformat":[{"title":"DateTime::createFromFormat() example","source":"$date = DateTime::createFromFormat('j-M-Y', '15-Feb-2009');\necho $date->format('Y-m-d');","output":"2009-02-15"},{"title":"Intricacies of DateTime::createFromFormat()","source":"echo 'Current time: ' . date('Y-m-d H:i:s') . \"\\n\";\n\n$format = 'Y-m-d';\n$date = DateTime::createFromFormat($format, '2009-02-15');\necho \"Format: $format; \" . $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$format = 'Y-m-d H:i:s';\n$date = DateTime::createFromFormat($format, '2009-02-15 15:16:17');\necho \"Format: $format; \" . $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$format = 'Y-m-!d H:i:s';\n$date = DateTime::createFromFormat($format, '2009-02-15 15:16:17');\necho \"Format: $format; \" . $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$format = '!d';\n$date = DateTime::createFromFormat($format, '15');\necho \"Format: $format; \" . $date->format('Y-m-d H:i:s') . \"\\n\";","output":"Current time: 2010-04-23 10:29:35\nFormat: Y-m-d; 2009-02-15 10:29:35\nFormat: Y-m-d H:i:s; 2009-02-15 15:16:17\nFormat: Y-m-!d H:i:s; 1970-01-15 15:16:17\nFormat: !d; 1970-01-15 00:00:00"},{"title":"Format string with literal characters","source":"echo DateTime::createFromFormat('H\\h i\\m s\\s','23h 15m 03s')->format('H:i:s');","output":"23:15:03"}],"datetime::diff":[{"title":"DateTime::diff() example","source":"$datetime1 = new DateTime('2009-10-11');\n$datetime2 = new DateTime('2009-10-13');\n$interval = $datetime1->diff($datetime2);\necho $interval->format('%R%a days');","output":"+2 days"},{"title":"DateTime object comparison","source":"$date1 = new DateTime(\"now\");\n$date2 = new DateTime(\"tomorrow\");\n\nvar_dump($date1 == $date2);\nvar_dump($date1 < $date2);\nvar_dump($date1 > $date2);","output":"bool(false)\nbool(true)\nbool(false)"}],"datetime::format":[{"title":"DateTime::format() example","source":"$date = new DateTime('2000-01-01');\necho $date->format('Y-m-d H:i:s');","output":"2000-01-01 00:00:00"}],"datetime::getlasterrors":[{"title":"DateTime::getLastErrors() example","source":"try {\n    $date = new DateTime('asdfasdf');\n} catch (Exception $e) {\n    \/\/ For demonstration purposes only...\n    print_r(DateTime::getLastErrors());\n\n    \/\/ The real object oriented way to do this is\n    \/\/ echo $e->getMessage();\n}","output":"Array\n(\n   [warning_count] => 1\n   [warnings] => Array\n       (\n           [6] => Double timezone specification\n       )\n\n   [error_count] => 1\n   [errors] => Array\n       (\n           [0] => The timezone could not be found in the database\n       )\n\n)"}],"datetime::getoffset":[{"title":"DateTime::getOffset() example","source":"$winter = new DateTime('2010-12-21', new DateTimeZone('America\/New_York'));\n$summer = new DateTime('2008-06-21', new DateTimeZone('America\/New_York'));\n\necho $winter->getOffset() . \"\\n\";\necho $summer->getOffset() . \"\\n\";","output":"-18000\n-14400"}],"datetime::gettimestamp":[{"title":"DateTime::getTimestamp() example","source":"$date = new DateTime();\necho $date->getTimestamp();","output":1272509157}],"datetime::gettimezone":[{"title":"DateTime::getTimezone() example","source":"$date = new DateTime(null, new DateTimeZone('Europe\/London'));\n$tz = $date->getTimezone();\necho $tz->getName();","output":"Europe\/London"}],"datetime::modify":[{"title":"DateTime::modify() example","source":"$date = new DateTime('2006-12-12');\n$date->modify('+1 day');\necho $date->format('Y-m-d');","output":"2006-12-13"},{"title":"Beware when adding or subtracting months","source":"$date = new DateTime('2000-12-31');\n\n$date->modify('+1 month');\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->modify('+1 month');\necho $date->format('Y-m-d') . \"\\n\";","output":"2001-01-31\n2001-03-03"}],"datetime::setdate":[{"title":"DateTime::setDate() example","source":"$date = new DateTime();\n$date->setDate(2001, 2, 3);\necho $date->format('Y-m-d');","output":"2001-02-03"},{"title":"Values exceeding ranges are added to their parent values","source":"$date = new DateTime();\n\n$date->setDate(2001, 2, 28);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->setDate(2001, 2, 29);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->setDate(2001, 14, 3);\necho $date->format('Y-m-d') . \"\\n\";","output":"2001-02-28\n2001-03-01\n2002-02-03"}],"datetime::setisodate":[{"title":"DateTime::setISODate() example","source":"$date = new DateTime();\n\n$date->setISODate(2008, 2);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->setISODate(2008, 2, 7);\necho $date->format('Y-m-d') . \"\\n\";","output":"2008-01-07\n2008-01-13"},{"title":"Values exceeding ranges are added to their parent values","source":"$date = new DateTime();\n\n$date->setISODate(2008, 2, 7);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->setISODate(2008, 2, 8);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->setISODate(2008, 53, 7);\necho $date->format('Y-m-d') . \"\\n\";","output":"2008-01-13\n2008-01-14\n2009-01-04"},{"title":"Finding the month a week is in","source":"$date = new DateTime();\n$date->setISODate(2008, 14);\necho $date->format('n');","output":3}],"datetime::settime":[{"title":"DateTime::setTime() example","source":"$date = new DateTime('2001-01-01');\n\n$date->setTime(14, 55);\necho $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$date->setTime(14, 55, 24);\necho $date->format('Y-m-d H:i:s') . \"\\n\";","output":"2001-01-01 14:55:00\n2001-01-01 14:55:24"},{"title":"Values exceeding ranges are added to their parent values","source":"$date = new DateTime('2001-01-01');\n\n$date->setTime(14, 55, 24);\necho $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$date->setTime(14, 55, 65);\necho $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$date->setTime(14, 65, 24);\necho $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$date->setTime(25, 55, 24);\necho $date->format('Y-m-d H:i:s') . \"\\n\";","output":"2001-01-01 14:55:24\n2001-01-01 14:56:05\n2001-01-01 15:05:24\n2001-01-02 01:55:24"}],"datetime::settimestamp":[{"title":"DateTime::setTimestamp() example","source":"$date = new DateTime();\necho $date->format('U = Y-m-d H:i:s') . \"\\n\";\n\n$date->setTimestamp(1171502725);\necho $date->format('U = Y-m-d H:i:s') . \"\\n\";","output":"1272508903 = 2010-04-28 22:41:43\n1171502725 = 2007-02-14 20:25:25"},{"title":"DateTime::setTimestamp() alternative in PHP 5.2","source":"$ts = 1171502725;\n$date = new DateTime(\"@$ts\");\necho $date->format('U = Y-m-d H:i:s') . \"\\n\";","output":"1171502725 = 2007-02-14 20:25:25"}],"datetime::settimezone":[{"title":"DateTime::setTimeZone() example","source":"$date = new DateTime('2000-01-01', new DateTimeZone('Pacific\/Nauru'));\necho $date->format('Y-m-d H:i:sP') . \"\\n\";\n\n$date->setTimezone(new DateTimeZone('Pacific\/Chatham'));\necho $date->format('Y-m-d H:i:sP') . \"\\n\";","output":"2000-01-01 00:00:00+12:00\n2000-01-01 01:45:00+13:45"}],"datetime::sub":[{"title":"DateTime::sub() example","source":"$date = new DateTime('2000-01-20');\n$date->sub(new DateInterval('P10D'));\necho $date->format('Y-m-d') . \"\\n\";","output":"2000-01-10"},{"title":"Further DateTime::sub() examples","source":"$date = new DateTime('2000-01-20');\n$date->sub(new DateInterval('PT10H30S'));\necho $date->format('Y-m-d H:i:s') . \"\\n\";\n\n$date = new DateTime('2000-01-20');\n$date->sub(new DateInterval('P7Y5M4DT4H3M2S'));\necho $date->format('Y-m-d H:i:s') . \"\\n\";","output":"2000-01-19 13:59:30\n1992-08-15 19:56:58"},{"title":"Beware when subtracting months","source":"$date = new DateTime('2001-04-30');\n$interval = new DateInterval('P1M');\n\n$date->sub($interval);\necho $date->format('Y-m-d') . \"\\n\";\n\n$date->sub($interval);\necho $date->format('Y-m-d') . \"\\n\";","output":"2001-03-30\n2001-03-02"}],"datetimeimmutable::createfrommutable":[{"title":"Creating an immutable date time object","source":"$date = new DateTime(\"2014-06-20 11:45 Europe\/London\");\n\n$immutable = DateTimeImmutable::createFromMutable( $date );","output":null}],"timezone_open":[{"title":"Catching errors when instantiating DateTimeZone","source":"\/\/ Error handling by catching exceptions\n$timezones = array('Europe\/London', 'Mars\/Phobos', 'Jupiter\/Europa');\n\nforeach ($timezones as $tz) {\n    try {\n        $mars = new DateTimeZone($tz);\n    } catch(Exception $e) {\n        echo $e->getMessage() . '<br \/>';\n    }\n}","output":"DateTimeZone::__construct() [datetimezone.--construct]: Unknown or bad timezone (Mars\/Phobos)\nDateTimeZone::__construct() [datetimezone.--construct]: Unknown or bad timezone (Jupiter\/Europa)"}],"datetimezone::getlocation":[{"title":"DateTimeZone::getLocation() example","source":"$tz = new DateTimeZone(\"Europe\/Prague\");\nprint_r($tz->getLocation());\nprint_r(timezone_location_get($tz));","output":"Array\n(\n    [country_code] => CZ\n    [latitude] => 50.08333\n    [longitude] => 14.43333\n    [comments] => \n)\nArray\n(\n    [country_code] => CZ\n    [latitude] => 50.08333\n    [longitude] => 14.43333\n    [comments] => \n)"}],"datetimezone::getoffset":[{"title":"DateTimeZone::getOffset() examples","source":"\/\/ Create two timezone objects, one for Taipei (Taiwan) and one for\n\/\/ Tokyo (Japan)\n$dateTimeZoneTaipei = new DateTimeZone(\"Asia\/Taipei\");\n$dateTimeZoneJapan = new DateTimeZone(\"Asia\/Tokyo\");\n\n\/\/ Create two DateTime objects that will contain the same Unix timestamp, but\n\/\/ have different timezones attached to them.\n$dateTimeTaipei = new DateTime(\"now\", $dateTimeZoneTaipei);\n$dateTimeJapan = new DateTime(\"now\", $dateTimeZoneJapan);\n\n\/\/ Calculate the GMT offset for the date\/time contained in the $dateTimeTaipei\n\/\/ object, but using the timezone rules as defined for Tokyo\n\/\/ ($dateTimeZoneJapan).\n$timeOffset = $dateTimeZoneJapan->getOffset($dateTimeTaipei);\n\n\/\/ Should show int(32400) (for dates after Sat Sep 8 01:00:00 1951 JST).\nvar_dump($timeOffset);","output":null}],"datetimezone::gettransitions":[{"title":"A timezone_transitions_get() example","source":"$timezone = new DateTimeZone(\"Europe\/London\");\n$transitions = $timezone->getTransitions();\nprint_r(array_slice($transitions, 0, 3));","output":"Array\n(\n    [0] => Array\n        (\n            [ts] => -9223372036854775808\n            [time] => -292277022657-01-27T08:29:52+0000\n            [offset] => 3600\n            [isdst] => 1\n            [abbr] => BST\n        )\n\n    [1] => Array\n        (\n            [ts] => -1691964000\n            [time] => 1916-05-21T02:00:00+0000\n            [offset] => 3600\n            [isdst] => 1\n            [abbr] => BST\n        )\n\n    [2] => Array\n        (\n            [ts] => -1680472800\n            [time] => 1916-10-01T02:00:00+0000\n            [offset] => 0\n            [isdst] => \n            [abbr] => GMT\n        )\n\n)"}],"datetimezone::listabbreviations":[{"title":"A timezone_abbreviations_list() example","source":"$timezone_abbreviations = DateTimeZone::listAbbreviations();\nprint_r($timezone_abbreviations[\"acst\"]);","output":"Array\n(\n    [0] => Array\n        (\n            [dst] => 1\n            [offset] => -14400\n            [timezone_id] => America\/Porto_Acre\n        )\n\n    [1] => Array\n        (\n            [dst] => 1\n            [offset] => -14400\n            [timezone_id] => America\/Eirunepe\n        )\n\n    [2] => Array\n        (\n            [dst] => 1\n            [offset] => -14400\n            [timezone_id] => America\/Rio_Branco\n        )\n\n    [3] => Array\n        (\n            [dst] => 1\n            [offset] => -14400\n            [timezone_id] => Brazil\/Acre\n        )\n\n)"}],"datetimezone::listidentifiers":[{"title":"A timezone_identifiers_list() example","source":"$timezone_identifiers = DateTimeZone::listIdentifiers();\nfor ($i=0; $i < 5; $i++) {\n    echo \"$timezone_identifiers[$i]\\n\";\n}","output":"Africa\/Abidjan\nAfrica\/Accra\nAfrica\/Addis_Ababa\nAfrica\/Algiers\nAfrica\/Asmara"}],"directoryiterator::current":[{"title":"A DirectoryIterator::current() example","source":"$iterator = new DirectoryIterator(__DIR__);\nwhile($iterator->valid()) {\n    $file = $iterator->current();\n    echo $iterator->key() . \" => \" . $file->getFilename() . \"\\n\";\n    $iterator->next();\n}","output":"0 => .\n1 => ..\n2 => apple.jpg\n3 => banana.jpg\n4 => index.php\n5 => pear.jpg"}],"directoryiterator::getatime":[{"title":"A DirectoryIterator::getATime() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getFilename() . \" \" . $fileinfo->getATime() . \"\\n\";\n    }\n}","output":"apple.jpg 1240047118\nbanana.jpg 1240065176\nindex.php 1240047208\npear.jpg 12240047979"}],"directoryiterator::getbasename":[{"title":"A DirectoryIterator::getBasename() example","source":"$dir = new DirectoryIterator(dirname(__FILE__));\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getBasename() . \"\\n\";\n        echo $fileinfo->getBasename('.jpg') . \"\\n\";\n    }\n}","output":"apple.jpg\napple\nbanana.jpg\nbanana\nindex.php\nindex.php\npear.jpg\npear"}],"directoryiterator::getctime":[{"title":"DirectoryIterator::getCTime() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getFilename() . \" changed at \" . $fileinfo->getCTime() . \"\\n\";\n    }\n}","output":"apple.jpg changed at 1240398312\nbanana.jpg changed at 1238605440\nindex.php changed at 1240398935\npear.jpg changed at 1237423740"}],"directoryiterator::getextension":[{"title":"DirectoryIterator::getExtension() example","source":"$directory = new DirectoryIterator(__DIR__);\nforeach ($directory as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getExtension() . \"\\n\";\n    }\n}","output":"php\ntxt\njpg\ngz"},{"title":null,"source":"$extension = pathinfo($fileinfo->getFilename(), PATHINFO_EXTENSION);","output":null}],"directoryiterator::getfilename":[{"title":"A DirectoryIterator::getFilename() example","source":"$dir = new DirectoryIterator(dirname(__FILE__));\nforeach ($dir as $fileinfo) {\n    echo $fileinfo->getFilename() . \"\\n\";\n}","output":".\n..\napple.jpg\nbanana.jpg\nindex.php\npear.jpg"}],"directoryiterator::getgroup":[{"title":"DirectoryIterator::getGroup() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\n$groupid  = $iterator->getGroup();\necho 'Directory belongs to group id ' . $groupid . \"\\n\";\nprint_r(posix_getgrgid($groupid));","output":"Directory belongs to group id 42\nArray\n(\n    [name]    => toons\n    [passwd]  => x\n    [members] => Array\n        (\n            [0] => tom\n            [1] => jerry\n        )\n    [gid]     => 42\n)"}],"directoryiterator::getinode":[{"title":"DirectoryIterator::getInode() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\necho $iterator->getInode();","output":null}],"directoryiterator::getmtime":[{"title":"A DirectoryIterator::getMTime() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getFilename() . \" \" . $fileinfo->getMTime() . \"\\n\";\n    }\n}","output":"apple.jpg 1240047118\nbanana.jpg 1240065176\nindex.php 1240047208\npear.jpg 12240047979"}],"directoryiterator::getowner":[{"title":"DirectoryIterator::getOwner() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nprint_r(posix_getpwuid($iterator->getOwner()));","output":"Array\n(\n    [name] => tom\n    [passwd] => x\n    [uid] => 501\n    [gid] => 42\n    [gecos] => Tom Cat\n    [dir] => \/home\/tom\n    [shell] => \/bin\/bash\n)"}],"directoryiterator::getpath":[{"title":"DirectoryIterator::getPath() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\necho $iterator->getPath();","output":"\/home\/examples\/public_html"}],"directoryiterator::getpathname":[{"title":"DirectoryIterator::getPathname() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    echo $fileinfo->getPathname() . \"\\n\";\n}","output":"\/home\/examples\/.\n\/home\/examples\/..\n\/home\/examples\/apple.jpg\n\/home\/examples\/banana.jpg\n\/home\/examples\/getpathname.php\n\/home\/examples\/pear.jpg"}],"directoryiterator::getperms":[{"title":"DirectoryIterator::getPerms() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if (!$fileinfo->isDot()) {\n        $octal_perms = substr(sprintf('%o', $fileinfo->getPerms()), -4);\n        echo $fileinfo->getFilename() . \" \" . $octal_perms . \"\\n\";\n    }\n}","output":"apple.jpg 0644\nbanana.jpg 0644\nindex.php 0744\npear.jpg 0644"}],"directoryiterator::getsize":[{"title":"DirectoryIterator::getSize() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getFilename() . \" \" . $fileinfo->getSize() . \"\\n\";\n    }\n}","output":"apple.jpg 15385\nbanana.jpg 15190\nexample.php 170\npear.jpg 34406"}],"directoryiterator::gettype":[{"title":"DirectoryIterator::getType() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    echo $fileinfo->getFilename() . \" \" . $fileinfo->getType() . \"\\n\";\n}","output":". dir\n.. dir\napple.jpg file\nbanana.jpg file\nexample.php file\npear.jpg file"}],"directoryiterator::isdir":[{"title":"DirectoryIterator::isDir() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isDir()) {\n        echo $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":".\n..\napples\nbananas\npears"}],"directoryiterator::isdot":[{"title":"A DirectoryIterator::isDot() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if (!$fileinfo->isDot()) {\n        echo $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":"apple.jpg\nbanana.jpg\nexample.php\npears.jpg"}],"directoryiterator::isexecutable":[{"title":"DirectoryIterator::isExecutable() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isExecutable()) {\n        echo $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":"example.php\nmyscript.sh"}],"directoryiterator::isfile":[{"title":"DirectoryIterator::isFile() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isFile()) {\n        echo $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":"apple.jpg\nbanana.jpg\nexample.php\npears.jpg"}],"directoryiterator::islink":[{"title":"A DirectoryIterator::isLink() example","source":"\/**\n * This function will recursively delete all files in the given path, without\n * following symlinks.\n * \n * @param string $path Path to the directory to remove.\n *\/\nfunction removeDir($path) {\n    $dir = new DirectoryIterator($path);\n    foreach ($dir as $fileinfo) {\n        if ($fileinfo->isFile() || $fileinfo->isLink()) {\n            unlink($fileinfo->getPathName());\n        } elseif (!$fileinfo->isDot() && $fileinfo->isDir()) {\n            removeDir($fileinfo->getPathName());\n        }\n    }\n    rmdir($path);\n}\n\nremoveDir('foo');","output":null}],"directoryiterator::isreadable":[{"title":"DirectoryIterator::isReadable() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isReadable()) {\n        echo $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":"apple.jpg\nbanana.jpg\nexample.php\npears.jpg"}],"directoryiterator::iswritable":[{"title":"DirectoryIterator::isWritable() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nforeach ($iterator as $fileinfo) {\n    if ($fileinfo->isWritable()) {\n        echo $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":"apples.txt\nbananas.html\npears"}],"directoryiterator::key":[{"title":"A DirectoryIterator::key() example","source":"$dir = new DirectoryIterator(dirname(__FILE__));\nforeach ($dir as $fileinfo) {\n    if (!$fileinfo->isDot()) {\n        echo $fileinfo->key() . \" => \" . $fileinfo->getFilename() . \"\\n\";\n    }\n}","output":"0 => apple.jpg\n1 => banana.jpg\n2 => index.php\n3 => pear.jpg"}],"directoryiterator::next":[{"title":"DirectoryIterator::next() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\nwhile($iterator->valid()) {\n    echo $iterator->getFilename() . \"\\n\";\n    $iterator->next();\n}","output":".\n..\napple.jpg\nbanana.jpg\nindex.php\npear.jpg"}],"directoryiterator::rewind":[{"title":"DirectoryIterator::rewind() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\n\n$iterator->next();\necho $iterator->key(); \/\/1\n\n$iterator->rewind(); \/\/rewinding to the beginning\necho $iterator->key(); \/\/0","output":null}],"directoryiterator::seek":[{"title":"DirectoryIterator::seek() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\n$iterator->seek(3);\nif ($iterator->valid()) {\n    echo $iterator->getFilename();\n} else {\n    echo 'No file at position 3';\n}","output":null}],"directoryiterator::__tostring":[{"title":"A DirectoryIterator::__toString() example","source":"$dir = new DirectoryIterator(dirname(__FILE__));\nforeach ($dir as $fileinfo) {\n    echo $fileinfo;\n}","output":".\n..\napple.jpg\nbanana.jpg\nindex.php\npear.jpg"}],"directoryiterator::valid":[{"title":"A DirectoryIterator::valid() example","source":"$iterator = new DirectoryIterator(dirname(__FILE__));\n\n\/\/ Loop to end of iterator\nwhile($iterator->valid()) {\n    $iterator->next();\n}\n\n$iterator->valid(); \/\/ FALSE\n$iterator->rewind(); \n$iterator->valid(); \/\/ TRUE","output":null}],"domattr::__construct":[{"title":"Creating a new DOMAttr object","source":"$dom = new DOMDocument('1.0', 'iso-8859-1');\n$element = $dom->appendChild(new DOMElement('root'));\n$attr = $element->setAttributeNode(new DOMAttr('attr', 'attrvalue'));\necho $dom->saveXML();","output":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root attr=\"attrvalue\" \/>"}],"domattr::isid":[{"title":"DOMAttr::isId() Example","source":"$doc = new DomDocument;\n\n\/\/ We need to validate our document before refering to the id\n$doc->validateOnParse = true;\n$doc->Load('book.xml');\n\n\/\/ We retrieve the attribute named id of the chapter element\n$attr = $doc->getElementsByTagName('chapter')->item(0)->getAttributeNode('id');\n\nvar_dump($attr->isId()); \/\/ bool(true)","output":null}],"domcomment::__construct":[{"title":"Creating a new DOMComment","source":"$dom = new DOMDocument('1.0', 'iso-8859-1');\n$element = $dom->appendChild(new DOMElement('root'));\n$comment = $element->appendChild(new DOMComment('root comment'));\necho $dom->saveXML(); \/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?><root><!--root comment--><\/root> *\/","output":null}],"domdocument::__construct":[{"title":"Creating a new DOMDocument","source":"$dom = new DOMDocument('1.0', 'iso-8859-1');\n\necho $dom->saveXML(); \/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?> *\/","output":null}],"domdocument::createelement":[{"title":"Creating a new element and inserting it as root","source":"$dom = new DOMDocument('1.0', 'utf-8');\n\n$element = $dom->createElement('test', 'This is the root element!');\n\n\/\/ We insert the new element as root (child of the document)\n$dom->appendChild($element);\n\necho $dom->saveXML();","output":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<test>This is the root element!<\/test>"},{"title":"Passing text containing an unescaped & as value","source":"$dom = new DOMDocument('1.0', 'utf-8');\n$element = $dom->createElement('foo', 'me & you');\n$dom->appendChild($element);\necho $dom->saveXML();","output":"Warning: DOMDocument::createElement(): unterminated entity reference             you in \/in\/BjTCg on line 4\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<foo\/>"}],"domdocument::createelementns":[{"title":"Creating a new element and inserting it as root","source":"$dom = new DOMDocument('1.0', 'utf-8');\n\n$element = $dom->createElementNS('http:\/\/www.example.com\/XFoo', 'xfoo:test', 'This is the root element!');\n\n\/\/ We insert the new element as root (child of the document)\n$dom->appendChild($element);\n\necho $dom->saveXML();","output":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xfoo:test xmlns:xfoo=\"http:\/\/www.example.com\/XFoo\">This is the root element!<\/xfoo:test>"},{"title":"A namespace prefix example","source":"$doc  = new DOMDocument('1.0', 'utf-8');\n$doc->formatOutput = true;\n$root = $doc->createElementNS('http:\/\/www.w3.org\/2005\/Atom', 'element');\n$doc->appendChild($root);\n$root->setAttributeNS('http:\/\/www.w3.org\/2000\/xmlns\/' ,'xmlns:g', 'http:\/\/base.google.com\/ns\/1.0');\n$item = $doc->createElementNS('http:\/\/base.google.com\/ns\/1.0', 'g:item_type', 'house');\n$root->appendChild($item);\n\necho $doc->saveXML(), \"\\n\";\n\necho $item->namespaceURI, \"\\n\"; \/\/ Outputs: http:\/\/base.google.com\/ns\/1.0\necho $item->prefix, \"\\n\";       \/\/ Outputs: g\necho $item->localName, \"\\n\";    \/\/ Outputs: item_type","output":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<element xmlns=\"http:\/\/www.w3.org\/2005\/Atom\" xmlns:g=\"http:\/\/base.google.com\/ns\/1.0\">\n  <g:item_type>house<\/g:item_type>\n<\/element>\n\nhttp:\/\/base.google.com\/ns\/1.0\ng\nitem_type"}],"domdocument::getelementbyid":[{"title":"DOMDocument::getElementById() Example","source":"$doc = new DomDocument;\n\n\/\/ We need to validate our document before refering to the id\n$doc->validateOnParse = true;\n$doc->Load('book.xml');\n\necho \"The element whose id is 'php-basics' is: \" . $doc->getElementById('php-basics')->tagName . \"\\n\";","output":"The element whose id is 'php-basics' is: book"}],"domdocument::getelementsbytagname":[{"title":"Basic Usage Example","source":"$xml = <<< XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<books>\n <book>Patterns of Enterprise Application Architecture<\/book>\n <book>Design Patterns: Elements of Reusable Software Design<\/book>\n <book>Clean Code<\/book>\n<\/books>\nXML;\n\n$dom = new DOMDocument;\n$dom->loadXML($xml);\n$books = $dom->getElementsByTagName('book');\nforeach ($books as $book) {\n    echo $book->nodeValue, PHP_EOL;\n}","output":"Patterns of Enterprise Application Architecture\nDesign Patterns: Elements of Reusable Software Design\nClean Code"}],"domdocument::getelementsbytagnamens":[{"title":"Get all the XInclude elements","source":"$xml = <<<EOD\n<?xml version=\"1.0\" ?>\n<chapter xmlns:xi=\"http:\/\/www.w3.org\/2001\/XInclude\">\n<title>Books of the other guy..<\/title>\n<para>\n <xi:include href=\"book.xml\">\n  <xi:fallback>\n   <error>xinclude: book.xml not found<\/error>\n  <\/xi:fallback>\n <\/xi:include>\n <include>\n  This is another namespace\n <\/include>\n<\/para>\n<\/chapter>\nEOD;\n$dom = new DOMDocument;\n\n\/\/ load the XML string defined above\n$dom->loadXML($xml);\n\nforeach ($dom->getElementsByTagNameNS('http:\/\/www.w3.org\/2001\/XInclude', '*') as $element) {\n    echo 'local name: ', $element->localName, ', prefix: ', $element->prefix, \"\\n\";\n}","output":"local name: include, prefix: xi\nlocal name: fallback, prefix: xi"}],"domdocument::importnode":[{"title":"DOMDocument::importNode() example","source":"$orgdoc = new DOMDocument;\n$orgdoc->loadXML(\"<root><element><child>text in child<\/child><\/element><\/root>\");\n\n\/\/ The node we want to import to a new document\n$node = $orgdoc->getElementsByTagName(\"element\")->item(0);\n\n\n\/\/ Create a new document\n$newdoc = new DOMDocument;\n$newdoc->formatOutput = true;\n\n\/\/ Add some markup\n$newdoc->loadXML(\"<root><someelement>text in some element<\/someelement><\/root>\");\n\necho \"The 'new document' before copying nodes into it:\\n\";\necho $newdoc->saveXML();\n\n\/\/ Import the node, and all its children, to the document\n$node = $newdoc->importNode($node, true);\n\/\/ And then append it to the \"<root>\" node\n$newdoc->documentElement->appendChild($node);\n\necho \"\\nThe 'new document' after copying the nodes into it:\\n\";\necho $newdoc->saveXML();","output":"The 'new document' before copying nodes into it:\n<?xml version=\"1.0\"?>\n<root>\n  <someelement>text in some element<\/someelement>\n<\/root>\n\nThe 'new document' after copying the nodes into it:\n<?xml version=\"1.0\"?>\n<root>\n  <someelement>text in some element<\/someelement>\n  <element>\n    <child>text in child<\/child>\n  <\/element>\n<\/root>"}],"domdocument::load":[{"title":"Creating a Document","source":"$doc = new DOMDocument();\n$doc->load('book.xml');\necho $doc->saveXML();","output":null}],"domdocument::loadhtml":[{"title":"Creating a Document","source":"$doc = new DOMDocument();\n$doc->loadHTML(\"<html><body>Test<br><\/body><\/html>\");\necho $doc->saveHTML();","output":null}],"domdocument::loadhtmlfile":[{"title":"Creating a Document","source":"$doc = new DOMDocument();\n$doc->loadHTMLFile(\"filename.html\");\necho $doc->saveHTML();","output":null}],"domdocument::loadxml":[{"title":"Creating a Document","source":"$doc = new DOMDocument();\n$doc->loadXML('<root><node\/><\/root>');\necho $doc->saveXML();","output":null},{"title":"Static invocation of loadXML","source":"\/\/ Issues an E_STRICT error\n$doc = DOMDocument::loadXML('<root><node\/><\/root>');\necho $doc->saveXML();","output":null}],"domdocument::registernodeclass":[{"title":"Adding a new method to DOMElement to ease our code","source":"class myElement extends DOMElement {\n   function appendElement($name) { \n      return $this->appendChild(new myElement($name));\n   }\n}\n\nclass myDocument extends DOMDocument {\n   function setRoot($name) { \n      return $this->appendChild(new myElement($name));\n   }\n}\n\n$doc = new myDocument();\n$doc->registerNodeClass('DOMElement', 'myElement');\n\n\/\/ From now on, adding an element to another costs only one method call ! \n$root = $doc->setRoot('root');\n$child = $root->appendElement('child');\n$child->setAttribute('foo', 'bar');\n\necho $doc->saveXML();","output":"<?xml version=\"1.0\"?>\n<root><child foo=\"bar\"\/><\/root>"},{"title":"Retrieving elements as custom class","source":"class myElement extends DOMElement {\n    public function __toString() {\n        return $this->nodeValue;\n    }\n}\n\n$doc = new DOMDocument;\n$doc->loadXML(\"<root><element><child>text in child<\/child><\/element><\/root>\");\n$doc->registerNodeClass(\"DOMElement\", \"myElement\");\n\n$element = $doc->getElementsByTagName(\"child\")->item(0);\nvar_dump(get_class($element));\n\n\/\/ And take advantage of the __toString method..\necho $element;","output":"string(9) \"myElement\"\ntext in child"},{"title":"Retrieving owner document","source":"class myDOMDocument extends DOMDocument {\n}\n\nclass myOtherDOMDocument extends DOMDocument {\n}\n\n\/\/ Create myDOMDocument with some XML\n$doc = new myDOMDocument;\n$doc->loadXML(\"<root><element><child>text in child<\/child><\/element><\/root>\");\n\n$child = $doc->getElementsByTagName(\"child\")->item(0);\n\n\/\/ The current owner of the node is myDOMDocument\nvar_dump(get_class($child->ownerDocument));\n\n\/\/ Import a node from myDOMDocument\n$newdoc = new myOtherDOMDocument;\n$child = $newdoc->importNode($child);\n\n\/\/ The new owner of the node has changed to myOtherDOMDocument\nvar_dump(get_class($child->ownerDocument));","output":"string(13) \"myDOMDocument\"\nstring(18) \"myOtherDOMDocument\""}],"domdocument::save":[{"title":"Saving a DOM tree into a file","source":"$doc = new DOMDocument('1.0');\n\/\/ we want a nice output\n$doc->formatOutput = true;\n\n$root = $doc->createElement('book');\n$root = $doc->appendChild($root);\n\n$title = $doc->createElement('title');\n$title = $root->appendChild($title);\n\n$text = $doc->createTextNode('This is the title');\n$text = $title->appendChild($text);\n\necho 'Wrote: ' . $doc->save(\"\/tmp\/test.xml\") . ' bytes'; \/\/ Wrote: 72 bytes","output":null}],"domdocument::savehtml":[{"title":"Saving a HTML tree into a string","source":"$doc = new DOMDocument('1.0');\n\n$root = $doc->createElement('html');\n$root = $doc->appendChild($root);\n\n$head = $doc->createElement('head');\n$head = $root->appendChild($head);\n\n$title = $doc->createElement('title');\n$title = $head->appendChild($title);\n\n$text = $doc->createTextNode('This is the title');\n$text = $title->appendChild($text);\n\necho $doc->saveHTML();","output":null}],"domdocument::savehtmlfile":[{"title":"Saving a HTML tree into a file","source":"$doc = new DOMDocument('1.0');\n\/\/ we want a nice output\n$doc->formatOutput = true;\n\n$root = $doc->createElement('html');\n$root = $doc->appendChild($root);\n\n$head = $doc->createElement('head');\n$head = $root->appendChild($head);\n\n$title = $doc->createElement('title');\n$title = $head->appendChild($title);\n\n$text = $doc->createTextNode('This is the title');\n$text = $title->appendChild($text);\n\necho 'Wrote: ' . $doc->saveHTMLFile(\"\/tmp\/test.html\") . ' bytes'; \/\/ Wrote: 129 bytes","output":null}],"domdocument::savexml":[{"title":"Saving a DOM tree into a string","source":"$doc = new DOMDocument('1.0');\n\/\/ we want a nice output\n$doc->formatOutput = true;\n\n$root = $doc->createElement('book');\n$root = $doc->appendChild($root);\n\n$title = $doc->createElement('title');\n$title = $root->appendChild($title);\n\n$text = $doc->createTextNode('This is the title');\n$text = $title->appendChild($text);\n\necho \"Saving all the document:\\n\";\necho $doc->saveXML() . \"\\n\";\n\necho \"Saving only the title part:\\n\";\necho $doc->saveXML($title);","output":"Saving all the document:\n<?xml version=\"1.0\"?>\n<book>\n  <title>This is the title<\/title>\n<\/book>\n\nSaving only the title part:\n<title>This is the title<\/title>"}],"domdocument::validate":[{"title":"Example of DTD validation","source":"$dom = new DOMDocument;\n$dom->load('book.xml');\nif ($dom->validate()) {\n    echo \"This document is valid!\\n\";\n}","output":null}],"domdocument::xinclude":[{"title":"DOMDocument::xinclude() example","source":"$xml = <<<EOD\n<?xml version=\"1.0\" ?>\n<chapter xmlns:xi=\"http:\/\/www.w3.org\/2001\/XInclude\">\n <title>Books of the other guy..<\/title>\n <para>\n  <xi:include href=\"book.xml\">\n   <xi:fallback>\n    <error>xinclude: book.xml not found<\/error>\n   <\/xi:fallback>\n  <\/xi:include>\n <\/para>\n<\/chapter>\nEOD;\n\n$dom = new DOMDocument;\n\n\/\/ let's have a nice output\n$dom->preserveWhiteSpace = false;\n$dom->formatOutput = true;\n\n\/\/ load the XML string defined above\n$dom->loadXML($xml);\n\n\/\/ substitute xincludes\n$dom->xinclude();\n\necho $dom->saveXML();","output":"<?xml version=\"1.0\"?>\n<chapter xmlns:xi=\"http:\/\/www.w3.org\/2001\/XInclude\">\n  <title>Books of the other guy..<\/title>\n  <para>\n    <row xml:base=\"\/home\/didou\/book.xml\">\n       <entry>The Grapes of Wrath<\/entry>\n       <entry>John Steinbeck<\/entry>\n       <entry>en<\/entry>\n       <entry>0140186409<\/entry>\n      <\/row>\n    <row xml:base=\"\/home\/didou\/book.xml\">\n       <entry>The Pearl<\/entry>\n       <entry>John Steinbeck<\/entry>\n       <entry>en<\/entry>\n       <entry>014017737X<\/entry>\n      <\/row>\n    <row xml:base=\"\/home\/didou\/book.xml\">\n       <entry>Samarcande<\/entry>\n       <entry>Amine Maalouf<\/entry>\n       <entry>fr<\/entry>\n       <entry>2253051209<\/entry>\n      <\/row>\n  <\/para>\n<\/chapter>"}],"domdocumentfragment::appendxml":[{"title":"Appending XML data to your document","source":"$doc = new DOMDocument();\n$doc->loadXML(\"<root\/>\");\n$f = $doc->createDocumentFragment();\n$f->appendXML(\"<foo>text<\/foo><bar>text2<\/bar>\");\n$doc->documentElement->appendChild($f);\necho $doc->saveXML();","output":"<?xml version=\"1.0\"?>\n<root><foo>text<\/foo><bar>text2<\/bar><\/root>"}],"domelement::__construct":[{"title":"Creating a new DOMElement","source":"$dom = new DOMDocument('1.0', 'iso-8859-1');\n$element = $dom->appendChild(new DOMElement('root'));\n$element_ns = new DOMElement('pr:node1', 'thisvalue', 'http:\/\/xyz');\n$element->appendChild($element_ns);\necho $dom->saveXML(); \/* <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root><pr:node1 xmlns:pr=\"http:\/\/xyz\">thisvalue<\/pr:node1><\/root> *\/","output":null}],"domelement::setattribute":[{"title":"Setting an attribute","source":"$doc = new DOMDocument(\"1.0\");\n$node = $doc->createElement(\"para\");\n$newnode = $doc->appendChild($node);\n$newnode->setAttribute(\"align\", \"left\");","output":null}],"domentityreference::__construct":[{"title":"Creating a new DOMEntityReference","source":"$dom = new DOMDocument('1.0', 'iso-8859-1');\n$element = $dom->appendChild(new DOMElement('root'));\n$entity = $element->appendChild(new DOMEntityReference('nbsp'));\necho $dom->saveXML(); \/* <?xml version=\"1.0\" encoding=\"iso-8859-1\"?><root>&nbsp;<\/root> *\/","output":null}],"domimplementation::createdocumenttype":[{"title":"Creating a document with an attached DTD","source":"\/\/ Creates an instance of the DOMImplementation class\n$imp = new DOMImplementation;\n\n\/\/ Creates a DOMDocumentType instance\n$dtd = $imp->createDocumentType('graph', '', 'graph.dtd');\n\n\/\/ Creates a DOMDocument instance\n$dom = $imp->createDocument(\"\", \"\", $dtd);\n\n\/\/ Set other properties\n$dom->encoding = 'UTF-8';\n$dom->standalone = false;\n\n\/\/ Create an empty element\n$element = $dom->createElement('graph');\n\n\/\/ Append the element\n$dom->appendChild($element);\n\n\/\/ Retrieve and print the document\necho $dom->saveXML();","output":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE graph SYSTEM \"graph.dtd\">\n<graph\/>"}],"domimplementation::hasfeature":[{"title":"Testing your DOM Implementation","source":"$features = array(\n  'Core'           => 'Core module',\n  'XML'            => 'XML module',\n  'HTML'           => 'HTML module',\n  'Views'          => 'Views module',\n  'Stylesheets'    => 'Style Sheets module',\n  'CSS'            => 'CSS module',\n  'CSS2'           => 'CSS2 module',\n  'Events'         => 'Events module',\n  'UIEvents'       => 'User interface Events module',\n  'MouseEvents'    => 'Mouse Events module',\n  'MutationEvents' => 'Mutation Events module',\n  'HTMLEvents'     => 'HTML Events module',\n  'Range'          => 'Range module',\n  'Traversal'      => 'Traversal module'\n);\n               \nforeach ($features as $key => $name) {\n  if (DOMImplementation::hasFeature($key, '2.0')) {\n    echo \"Has feature $name\\n\";\n  } else {\n    echo \"Missing feature $name\\n\";\n  }\n}","output":null}],"domnode::appendchild":[{"title":"Adding a child","source":"$doc = new DOMDocument;\n\n$node = $doc->createElement(\"para\");\n$newnode = $doc->appendChild($node);\n\necho $doc->saveXML();","output":null}],"domnode::getlineno":[{"title":"DOMNode::getLineNo() example","source":"\/\/ XML dump for below example\n$xml = <<<XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n    <node \/>\n<\/root>\nXML;\n\n\/\/ Create a new DOMDocument instance\n$dom = new DOMDocument;\n\n\/\/ Load the XML\n$dom->loadXML($xml);\n\n\/\/ Print where the line where the 'node' element was defined in\nprintf('The <node> tag is defined on line %d', $dom->getElementsByTagName('node')->item(0)->getLineNo());","output":"The <node> tag is defined in line 3"}],"domnode::getnodepath":[{"title":"DOMNode::getNodePath() example","source":"\/\/ Create a new DOMDocument instance\n$dom = new DOMDocument;\n\n\/\/ Load the XML\n$dom->loadXML('\n<fruits>\n <apples>\n  <apple>braeburn<\/apple>\n  <apple>granny smith<\/apple>\n <\/apples>\n <pears>\n  <pear>conference<\/pear>\n <\/pears>\n<\/fruits>\n');\n\n\/\/ Print XPath for each element\nforeach ($dom->getElementsByTagName('*') as $node) {\n    echo $node->getNodePath() . \"\\n\";\n}","output":"\/fruits\n\/fruits\/apples\n\/fruits\/apples\/apple[1]\n\/fruits\/apples\/apple[2]\n\/fruits\/pears\n\/fruits\/pears\/pear"}],"domnode::removechild":[{"title":"Removing a child","source":"$doc = new DOMDocument;\n$doc->load('book.xml');\n\n$book = $doc->documentElement;\n\n\/\/ we retrieve the chapter and remove it from the book\n$chapter = $book->getElementsByTagName('chapter')->item(0);\n$oldchapter = $book->removeChild($chapter);\n\necho $doc->saveXML();","output":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE book PUBLIC \"-\/\/OASIS\/\/DTD DocBook XML V4.1.2\/\/EN\" \n          \"http:\/\/www.oasis-open.org\/docbook\/xml\/4.1.2\/docbookx.dtd\">\n<book id=\"listing\">\n <title>My lists<\/title>\n \n<\/book>"}],"domnodelist::item":[{"title":"Traversing all the entries of the table","source":"$doc = new DOMDocument;\n$doc->load('book.xml');\n\n$items = $doc->getElementsByTagName('entry');\n\nfor ($i = 0; $i < $items->length; $i++) {\n    echo $items->item($i)->nodeValue . \"\\n\";\n}","output":"Title\nAuthor\nLanguage\nISBN\nThe Grapes of Wrath\nJohn Steinbeck\nen\n0140186409\nThe Pearl\nJohn Steinbeck\nen\n014017737X\nSamarcande\nAmine Maalouf\nfr\n2253051209"}],"domprocessinginstruction::__construct":[{"title":"Creating a new DOMProcessingInstruction object","source":"$dom = new DOMDocument('1.0', 'UTF-8');\n$html = $dom->appendChild(new DOMElement('html'));\n$body = $html->appendChild(new DOMElement('body'));\n$pinode = new DOMProcessingInstruction('php', 'echo \"Hello World\"; ');\n$body->appendChild($pinode);\necho $dom->saveXML();","output":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html><body><?php echo \"Hello World\"; ?><\/body><\/html>"}],"domxpath::evaluate":[{"title":"Getting the count of all the english books","source":"$doc = new DOMDocument;\n\n$doc->load('book.xml');\n\n$xpath = new DOMXPath($doc);\n\n$tbody = $doc->getElementsByTagName('tbody')->item(0);\n\n\/\/ our query is relative to the tbody node\n$query = 'count(row\/entry[. = \"en\"])';\n\n$entries = $xpath->evaluate($query, $tbody);\necho \"There are $entries english books\\n\";","output":"There are 2 english books"}],"domxpath::query":[{"title":"Getting all the english books","source":"$doc = new DOMDocument;\n\n\/\/ We don't want to bother with white spaces\n$doc->preserveWhiteSpace = false;\n\n$doc->Load('book.xml');\n\n$xpath = new DOMXPath($doc);\n\n\/\/ We starts from the root element\n$query = '\/\/book\/chapter\/para\/informaltable\/tgroup\/tbody\/row\/entry[. = \"en\"]';\n\n$entries = $xpath->query($query);\n\nforeach ($entries as $entry) {\n    echo \"Found {$entry->previousSibling->previousSibling->nodeValue},\" .\n         \" by {$entry->previousSibling->nodeValue}\\n\";\n}","output":"Found The Grapes of Wrath, by John Steinbeck\nFound The Pearl, by John Steinbeck"}],"domxpath::registerphpfunctions":[{"title":"book.xml","source":"Register PHP functions as XPath functions\n DOMXPath::registerNamespace\n DOM Functions\n DOMXPath\n PHP Manual\n\n \n  DOMXPath::registerPhpFunctions\n  (PHP 5 >= 5.3.0, PHP 7)DOMXPath::registerPhpFunctions — Register PHP functions as XPath functions\n\n \n\n \n  Description\n  \n   public void DOMXPath::registerPhpFunctions\n    ([ mixed $restrict\n  ] )\n\n  \n   This method enables the ability to use PHP functions within XPath expressions.\n  \n\n \n\n\n \n  Parameters\n  \n   \nrestrict\n\n     \n\n      \n       Use this parameter to only allow certain functions to be called from XPath.\n      \n      \n       This parameter can be either a string (a function name) or \n       an array of function names.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   The following examples use book.xml which contains the following:\n  \n  \n   \n    Example #1 book.xml\n    \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<books>\n <book>\n  <title>PHP Basics<\/title>\n  <author>Jim Smith<\/author>\n  <author>Jane Smith<\/author>\n <\/book>\n <book>\n  <title>PHP Secrets<\/title>\n  <author>Jenny Smythe<\/author>\n <\/book>\n <book>\n  <title>XML basics<\/title>\n  <author>Joe Black<\/author>\n <\/book>\n<\/books>\n\n    \n\n   \n  \n  \n   \n    Example #2 DOMXPath::registerPHPFunctions() with php:functionString\n    \n\n<?php\n$doc = new DOMDocument;\n$doc->load('book.xml');\n\n$xpath = new DOMXPath($doc);\n\n\/\/ Register the php: namespace (required)\n$xpath->registerNamespace(\"php\", \"http:\/\/php.net\/xpath\");\n\n\/\/ Register PHP functions (no restrictions)\n$xpath->registerPHPFunctions();\n\n\/\/ Call substr function on the book title\n$nodes = $xpath->query('\/\/book[php:functionString(\"substr\", title, 0, 3) = \"PHP\"]');\n\necho \"Found {$nodes->length} books starting with 'PHP':\\n\";\nforeach ($nodes as $node) {\n    $title  = $node->getElementsByTagName(\"title\")->item(0)->nodeValue;\n    $author = $node->getElementsByTagName(\"author\")->item(0)->nodeValue;\n    echo \"$title by $author\\n\";\n}\n\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nFound 2 books starting with 'PHP':\nPHP Basics by Jim Smith\nPHP Secrets by Jenny Smythe\n\n    \n   \n  \n  \n   \n    Example #3 DOMXPath::registerPHPFunctions() with php:function\n    \n\n<?php\n$doc = new DOMDocument;\n$doc->load('book.xml');\n\n$xpath = new DOMXPath($doc);\n\n\/\/ Register the php: namespace (required)\n$xpath->registerNamespace(\"php\", \"http:\/\/php.net\/xpath\");\n\n\/\/ Register PHP functions (has_multiple only)\n$xpath->registerPHPFunctions(\"has_multiple\");\n \nfunction has_multiple($nodes) {\n    \/\/ Return true if more than one author\n    return count($nodes) > 1;\n}\n\/\/ Filter books with multiple authors\n$books = $xpath->query('\/\/book[php:function(\"has_multiple\", author)]');\n\necho \"Books with multiple authors:\\n\";\nforeach ($books as $book) {\n    echo $book->getElementsByTagName(\"title\")->item(0)->nodeValue . \"\\n\";\n}\n\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nBooks with multiple authors:\nPHP Basics\n\n    \n   \n  \n \n\n \n \n  See Also\n  \n   DOMXPath::registerNamespace() - Registers the namespace with the DOMXPath object\n    DOMXPath::query() - Evaluates the given XPath expression\n    DOMXPath::evaluate() - Evaluates the given XPath expression and returns a typed result if possible\n   \n\n\n\n DOMXPath::registerNamespace\n DOM Functions\n DOMXPath\n PHP Manual","output":null},{"title":"DOMXPath::registerPHPFunctions() with php:functionString","source":"$doc = new DOMDocument;\n$doc->load('book.xml');\n\n$xpath = new DOMXPath($doc);\n\n\/\/ Register the php: namespace (required)\n$xpath->registerNamespace(\"php\", \"http:\/\/php.net\/xpath\");\n\n\/\/ Register PHP functions (no restrictions)\n$xpath->registerPHPFunctions();\n\n\/\/ Call substr function on the book title\n$nodes = $xpath->query('\/\/book[php:functionString(\"substr\", title, 0, 3) = \"PHP\"]');\n\necho \"Found {$nodes->length} books starting with 'PHP':\\n\";\nforeach ($nodes as $node) {\n    $title  = $node->getElementsByTagName(\"title\")->item(0)->nodeValue;\n    $author = $node->getElementsByTagName(\"author\")->item(0)->nodeValue;\n    echo \"$title by $author\\n\";\n}","output":"Found 2 books starting with 'PHP':\nPHP Basics by Jim Smith\nPHP Secrets by Jenny Smythe"},{"title":"DOMXPath::registerPHPFunctions() with php:function","source":"$doc = new DOMDocument;\n$doc->load('book.xml');\n\n$xpath = new DOMXPath($doc);\n\n\/\/ Register the php: namespace (required)\n$xpath->registerNamespace(\"php\", \"http:\/\/php.net\/xpath\");\n\n\/\/ Register PHP functions (has_multiple only)\n$xpath->registerPHPFunctions(\"has_multiple\");\n \nfunction has_multiple($nodes) {\n    \/\/ Return true if more than one author\n    return count($nodes) > 1;\n}\n\/\/ Filter books with multiple authors\n$books = $xpath->query('\/\/book[php:function(\"has_multiple\", author)]');\n\necho \"Books with multiple authors:\\n\";\nforeach ($books as $book) {\n    echo $book->getElementsByTagName(\"title\")->item(0)->nodeValue . \"\\n\";\n}","output":"Books with multiple authors:\nPHP Basics"}],"ds\\collection::clear":[{"title":"Ds\\Collection::clear() example","source":"$collection = new \\Ds\\Vector([1, 2, 3]);\nprint_r($collection);\n\n$collection->clear();\nprint_r($collection);","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Vector Object\n(\n)"}],"ds\\collection::copy":[{"title":"Ds\\Collection::copy() example","source":"$a = new \\Ds\\Vector([1, 2, 3]);\n$b = $a->copy();\n\n$b->push(4);\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)"}],"ds\\collection::isempty":[{"title":"Ds\\Collection::isEmpty() example","source":"$a = new \\Ds\\Vector([1, 2, 3]);\n$b = new \\Ds\\Vector();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\collection::toarray":[{"title":"Ds\\Collection::toArray() example","source":"$collection = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($collection->toArray());","output":"array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\deque::allocate":[{"title":"Ds\\Deque::allocate() example","source":"$deque = new \\Ds\\Deque();\nvar_dump($deque->capacity());\n\n$deque->allocate(100);\nvar_dump($deque->capacity());","output":"int(8)\nint(128)"}],"ds\\deque::apply":[{"title":"Ds\\Deque::apply() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n$deque->apply(function($value) { return $value * 2; });\n\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)"}],"ds\\deque::capacity":[{"title":"Ds\\Deque::capacity() example","source":"$deque = new \\Ds\\Deque();\nvar_dump($deque->capacity());\n\n$deque->push(...range(1, 50));\nvar_dump($deque->capacity());","output":"int(8)\nint(64)"}],"ds\\deque::clear":[{"title":"Ds\\Deque::clear() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\nprint_r($deque);\n\n$deque->clear();\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Deque Object\n(\n)"}],"ds\\deque::contains":[{"title":"Ds\\Deque::contains() example","source":"$deque = new \\Ds\\Deque(['a', 'b', 'c', 1, 2, 3]);\n\nvar_dump($deque->contains('a'));                \/\/ true\nvar_dump($deque->contains('a', 'b'));           \/\/ true\nvar_dump($deque->contains('c', 'd'));           \/\/ false\n\nvar_dump($deque->contains(...['c', 'b', 'a'])); \/\/ true\n\n\/\/ Always strict\nvar_dump($deque->contains(1));                  \/\/ true\nvar_dump($deque->contains('1'));                \/\/ false\n\nvar_dump($sequece->contains(...[]));               \/\/ true","output":"bool(true)\nbool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(true)"}],"ds\\deque::copy":[{"title":"Ds\\Deque::copy() example","source":"$a = new \\Ds\\Deque([1, 2, 3]);\n$b = $a->copy();\n\n$b->push(4);\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Deque Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Deque Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)"}],"ds\\deque::filter":[{"title":"Ds\\Deque::filter() example using callback function","source":"$deque = new \\Ds\\Deque([1, 2, 3, 4, 5]);\n\nvar_dump($deque->filter(function($value) {\n    return $value % 2 == 0;\n}));","output":"object(Ds\\Deque)#3 (2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n}"},{"title":"Ds\\Deque::filter() example without a callback function","source":"$deque = new \\Ds\\Deque([0, 1, 'a', true, false]);\n\nvar_dump($deque->filter());","output":"object(Ds\\Deque)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  bool(true)\n}"}],"ds\\deque::find":[{"title":"Ds\\Deque::find() example","source":"$deque = new \\Ds\\Deque([\"a\", 1, true]);\n\nvar_dump($deque->find(\"a\")); \/\/ 0\nvar_dump($deque->find(\"b\")); \/\/ false\nvar_dump($deque->find(\"1\")); \/\/ false\nvar_dump($deque->find(1));   \/\/ 1","output":"int(0)\nbool(false)\nbool(false)\nint(1)"}],"ds\\deque::first":[{"title":"Ds\\Deque::first() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\nvar_dump($deque->first());","output":"int(1)"}],"ds\\deque::get":[{"title":"Ds\\Deque::get() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\nvar_dump($deque->get(0));\nvar_dump($deque->get(1));\nvar_dump($deque->get(2));","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""},{"title":"Ds\\Deque::get() example using array syntax","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\nvar_dump($deque[0]);\nvar_dump($deque[1]);\nvar_dump($deque[2]);","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\deque::insert":[{"title":"Ds\\Deque::insert() example","source":"$deque = new \\Ds\\Deque();\n\n$deque->insert(0, \"e\");             \/\/ [e]\n$deque->insert(1, \"f\");             \/\/ [e, f]\n$deque->insert(2, \"g\");             \/\/ [e, f, g]\n$deque->insert(0, \"a\", \"b\");        \/\/ [a, b, e, f, g]\n$deque->insert(2, ...[\"c\", \"d\"]);   \/\/ [a, b, c, d, e, f, g]\n\nvar_dump($deque);","output":"object(Ds\\Deque)#1 (7) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(1) \"b\"\n  [2]=>\n  string(1) \"c\"\n  [3]=>\n  string(1) \"d\"\n  [4]=>\n  string(1) \"e\"\n  [5]=>\n  string(1) \"f\"\n  [6]=>\n  string(1) \"g\"\n}"}],"ds\\deque::isempty":[{"title":"Ds\\Deque::isEmpty() example","source":"$a = new \\Ds\\Deque([1, 2, 3]);\n$b = new \\Ds\\Deque();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\deque::join":[{"title":"Ds\\Deque::join() example using a separator string","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($deque->join(\"|\"));","output":"string(11) \"a|b|c|1|2|3\""},{"title":"Ds\\Deque::join() example without a separator string","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($deque->join());","output":"string(11) \"abc123\""}],"ds\\deque::last":[{"title":"Ds\\Deque::last() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\nvar_dump($deque->last());","output":"int(3)"}],"ds\\deque::map":[{"title":"Ds\\Deque::map() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\nprint_r($deque->map(function($value) { return $value * 2; }));\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)\nDs\\Deque Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)"}],"ds\\deque::merge":[{"title":"Ds\\Deque::merge() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\nvar_dump($deque->merge([4, 5, 6]));\nvar_dump($deque);","output":"object(Ds\\Deque)#2 (6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\nobject(Ds\\Deque)#1 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\deque::pop":[{"title":"Ds\\Deque::pop() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\nvar_dump($deque->pop());\nvar_dump($deque->pop());\nvar_dump($deque->pop());","output":"int(3)\nint(2)\nint(1)"}],"ds\\deque::push":[{"title":"Ds\\Deque::push() example","source":"$deque = new \\Ds\\Deque();\n\n$deque->push(\"a\");\n$deque->push(\"b\");\n$deque->push(\"c\", \"d\");\n$deque->push(...[\"e\", \"f\"]);\n\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)"}],"ds\\deque::reduce":[{"title":"Ds\\Deque::reduce() with initial value example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\n$callback = function($carry, $value) {\n    return $carry * $value;\n};\n\nvar_dump($deque->reduce($callback, 5));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = 5\n\/\/\n\/\/ $carry = $carry * 1 =  5\n\/\/ $carry = $carry * 2 = 10\n\/\/ $carry = $carry * 3 = 30","output":"int(30)"},{"title":"Ds\\Deque::reduce() without an initial value example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\nvar_dump($deque->reduce(function($carry, $value) {\n    return $carry + $value + 5;\n}));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = null\n\/\/\n\/\/ $carry = $carry + 1 + 5 =  6\n\/\/ $carry = $carry + 2 + 5 = 13\n\/\/ $carry = $carry + 3 + 5 = 21","output":"int(21)"}],"ds\\deque::remove":[{"title":"Ds\\Deque::remove() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\nvar_dump($deque->remove(1));\nvar_dump($deque->remove(0));\nvar_dump($deque->remove(0));","output":"string(1) \"b\"\nstring(1) \"a\"\nstring(1) \"c\""}],"ds\\deque::reverse":[{"title":"Ds\\Deque::reverse() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n$deque->reverse();\n\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)"}],"ds\\deque::reversed":[{"title":"Ds\\Deque::reversed() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\nprint_r($deque->reversed());\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)\nDs\\Deque Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n)"}],"ds\\deque::rotate":[{"title":"Ds\\Deque::rotate() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\", \"d\"]);\n\n$deque->rotate(1);  \/\/ \"a\" is shifted, then pushed.\nprint_r($deque);\n\n$deque->rotate(2);  \/\/ \"b\" and \"c\" are both shifted, the pushed.\nprint_r($deque);","output":"(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => a\n)\nDs\\Deque Object\n(\n    [0] => d\n    [1] => a\n    [2] => b\n    [3] => c\n)"}],"ds\\deque::set":[{"title":"Ds\\Deque::set() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\n$deque->set(1, \"_\");\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => a\n    [1] => _\n    [2] => c\n)"},{"title":"Ds\\Deque::set() example using array syntax","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\n$deque[1] = \"_\";\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => a\n    [1] => _\n    [2] => c\n)"}],"ds\\deque::shift":[{"title":"Ds\\Deque::shift() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\"]);\n\nvar_dump($deque->shift());\nvar_dump($deque->shift());\nvar_dump($deque->shift());","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\deque::slice":[{"title":"Ds\\Deque::slice() example","source":"$deque = new \\Ds\\Deque([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n\n\/\/ Slice from 2 onwards\nprint_r($deque->slice(2));\n\n\/\/ Slice from 1, for a length of 3\nprint_r($deque->slice(1, 3));\n\n\/\/ Slice from 1 onwards\nprint_r($deque->slice(1));\n\n\/\/ Slice from 2 from the end onwards\nprint_r($deque->slice(-2));\n\n\/\/ Slice from 1 to 1 from the end\nprint_r($deque->slice(1, -1));","output":"Ds\\Deque Object\n(\n    [0] => c\n    [1] => d\n    [2] => e\n)\nDs\\Deque Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)\nDs\\Deque Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => e\n)\nDs\\Deque Object\n(\n    [0] => d\n    [1] => e\n)\nDs\\Deque Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)"}],"ds\\deque::sort":[{"title":"Ds\\Deque::sort() example","source":"$deque = new \\Ds\\Deque([4, 5, 1, 3, 2]);\n$deque->sort();\n\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Deque::sort() example using a comparator","source":"$deque = new \\Ds\\Deque([4, 5, 1, 3, 2]);\n\n$deque->sort(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\deque::sorted":[{"title":"Ds\\Deque::sorted() example","source":"$deque = new \\Ds\\Deque([4, 5, 1, 3, 2]);\n\nprint_r($deque->sorted());","output":"Ds\\Deque Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Deque::sorted() example using a comparator","source":"$deque = new \\Ds\\Deque([4, 5, 1, 3, 2]);\n\n$sorted = $deque->sorted(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sorted);","output":"Ds\\Deque Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\deque::sum":[{"title":"Ds\\Deque::sum() integer example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\nvar_dump($deque->sum());","output":"int(6)"},{"title":"Ds\\Deque::sum() float example","source":"$deque = new \\Ds\\Deque([1, 2.5, 3]);\nvar_dump($deque->sum());","output":"float(6.5)"}],"ds\\deque::toarray":[{"title":"Ds\\Deque::toArray() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\nvar_dump($deque->toArray());","output":"array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\deque::unshift":[{"title":"Ds\\Deque::unshift() example","source":"$deque = new \\Ds\\Deque([1, 2, 3]);\n\n$deque->unshift(\"a\");\n$deque->unshift(\"b\", \"c\");\n\nprint_r($deque);","output":"Ds\\Deque Object\n(\n    [0] => b\n    [1] => c\n    [2] => a\n    [3] => 1\n    [4] => 2\n    [5] => 3\n)"}],"ds\\hashable::hash":[{"title":"Ds\\Hashable::hash() example","source":"class HashableObject implements \\Ds\\Hashable\n{\n    private $name;\n    private $email;\n\n    public function __construct($name, $email)\n    {\n        $this->name  = $name;\n        $this->email = $email;\n    }\n\n    \/**\n     * Should return the same value for all equal objects, but doesn't have to\n     * be unique. This value will not be used to determine equality.\n     *\/\n    public function hash()\n    {\n        return $this->email;\n    }\n\n    \/**\n     * This determines equality, usually during a hash table lookup to determine\n     * if the bucket's key matches the lookup key. The hash has to be equal if\n     * the objects are equal, otherwise this determination wouldn't be reached.\n     *\/\n    public function equals($obj): bool\n    {\n        return $this->name  === $obj->name\n            && $this->email === $obj->email;\n    }\n}","output":null}],"ds\\map::allocate":[{"title":"Ds\\Map::allocate() example","source":"$map = new \\Ds\\Map();\nvar_dump($map->capacity());\n\n$map->allocate(100);\nvar_dump($map->capacity());","output":"int(16)\nint(128)"}],"ds\\map::apply":[{"title":"Ds\\Map::apply() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$map->apply(function($key, $value) { return $value * 2; });\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 2\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 4\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 6\n        )\n\n)"}],"ds\\map::capacity":[{"title":"Ds\\Map::capacity() example","source":"$map = new \\Ds\\Map();\nvar_dump($map->capacity());","output":"int(16)"}],"ds\\map::clear":[{"title":"Ds\\Map::clear() example","source":"$map = new \\Ds\\Map([\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 3,\n]);\nprint_r($map);\n\n$map->clear();\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)\nDs\\Map Object\n(\n)"}],"ds\\map::copy":[{"title":"Ds\\Map::copy() example","source":"$map = new \\Ds\\Map([\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 3,\n]);\n\nprint_r($map->copy());","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)"}],"ds\\map::diff":[{"title":"Ds\\Map::diff() example","source":"$a = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$b = new \\Ds\\Map([\"b\" => 4, \"c\" => 5, \"d\" => 6]);\n\nvar_dump($a->diff($b));","output":"object(Ds\\Map)#3 (1) {\n  [0]=>\n  object(Ds\\Pair)#4 (2) {\n    [\"key\"]=>\n    string(1) \"a\"\n    [\"value\"]=>\n    int(1)\n  }\n}"}],"ds\\map::filter":[{"title":"Ds\\Map::filter() example using callback function","source":"$map = new \\Ds\\Map([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n\nvar_dump($map->filter(function($key, $value) {\n    return $key % 2 == 0;\n}));","output":"object(Ds\\Map)#3 (3) {\n  [0]=>\n  object(Ds\\Pair)#2 (2) {\n    [\"key\"]=>\n    int(0)\n    [\"value\"]=>\n    string(1) \"a\"\n  }\n  [1]=>\n  object(Ds\\Pair)#4 (2) {\n    [\"key\"]=>\n    int(2)\n    [\"value\"]=>\n    string(1) \"c\"\n  }\n  [2]=>\n  object(Ds\\Pair)#5 (2) {\n    [\"key\"]=>\n    int(4)\n    [\"value\"]=>\n    string(1) \"e\"\n  }\n}"},{"title":"Ds\\Map::filter() example without a callback function","source":"$map = new \\Ds\\Map([\"a\" => 0, \"b\" => 1, \"c\" => true, \"d\" => false]);\n\nvar_dump($map->filter());","output":"object(Ds\\Map)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  bool(true)\n}"}],"ds\\map::first":[{"title":"Ds\\Map::first() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\nvar_dump($map->first());","output":"object(Ds\\Pair)#2 (2) {\n  [\"key\"]=>\n  string(1) \"a\"\n  [\"value\"]=>\n  int(1)\n}"}],"ds\\map::get":[{"title":"Ds\\Map::get() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->get(\"a\"));       \/\/ 1\nvar_dump($map->get(\"d\", 10));   \/\/ 10 (default used)","output":"int(1)\nint(10)"},{"title":"Ds\\Map::get() example using array syntax","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map[\"a\"])); \/\/ 1","output":"int(1)"}],"ds\\map::haskey":[{"title":"Ds\\Map::hasKey() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->hasKey(\"a\")); \/\/ true\nvar_dump($map->hasKey(\"e\")); \/\/ false","output":"bool(true)\nbool(false)"}],"ds\\map::hasvalue":[{"title":"Ds\\Map::hasValue() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->hasValue(1)); \/\/ true\nvar_dump($map->hasValue(4)); \/\/ false","output":"bool(true)\nbool(false)"}],"ds\\map::intersect":[{"title":"Ds\\Map::intersect() example","source":"$a = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$b = new \\Ds\\Map([\"b\" => 4, \"c\" => 5, \"d\" => 6]);\n\nvar_dump($a->intersect($b));","output":"object(Ds\\Map)#3 (2) {\n  [0]=>\n  object(Ds\\Pair)#4 (2) {\n    [\"key\"]=>\n    string(1) \"b\"\n    [\"value\"]=>\n    int(2)\n  }\n  [1]=>\n  object(Ds\\Pair)#5 (2) {\n    [\"key\"]=>\n    string(1) \"c\"\n    [\"value\"]=>\n    int(3)\n  }\n}"}],"ds\\map::isempty":[{"title":"Ds\\Map::isEmpty() example","source":"$a = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$b = new \\Ds\\Map();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\map::keys":[{"title":"Ds\\Map::keys() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\nvar_dump($map->keys());","output":"object(Ds\\Set)#2 (3) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(1) \"b\"\n  [2]=>\n  string(1) \"c\"\n}"}],"ds\\map::ksort":[{"title":"Ds\\Map::ksort() example","source":"$map = new \\Ds\\Map([\"b\" => 2, \"c\" => 3, \"a\" => 1]);\n$map->ksort();\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)"},{"title":"Ds\\Map::ksort() example using a comparator","source":"$map = new \\Ds\\Map([1 => \"x\", 2 => \"y\", 0 => \"z\"]);\n\n\/\/ Reverse\n$map->ksort(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($map);","output":"Ds\\Map Object\nDs\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => 2\n            [value] => y\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => 1\n            [value] => x\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => 0\n            [value] => z\n        )\n\n)"}],"ds\\map::ksorted":[{"title":"Ds\\Map::ksorted() example","source":"$map = new \\Ds\\Map([\"b\" => 2, \"c\" => 3, \"a\" => 1]);\n\nprint_r($map->ksorted());","output":"Ds\\Map Object\nDs\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)"},{"title":"Ds\\Map::ksorted() example using a comparator","source":"$map = new \\Ds\\Map([1 => \"x\", 2 => \"y\", 0 => \"z\"]);\n\n\/\/ Reverse\n$sorted = $map->ksorted(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sorted);","output":"Ds\\Map Object\nDs\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => 2\n            [value] => y\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => 1\n            [value] => x\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => 0\n            [value] => z\n        )\n\n)"}],"ds\\map::last":[{"title":"Ds\\Map::last() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\nvar_dump($map->last());","output":"object(Ds\\Pair)#2 (2) {\n  [\"key\"]=>\n  string(1) \"c\"\n  [\"value\"]=>\n  int(3)\n}"}],"ds\\map::map":[{"title":"Ds\\Map::map() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nprint_r($map->map(function($key, $value) { return $value * 2; }));\nprint_r($map);","output":"(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 2\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 4\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 6\n        )\n\n)\nDs\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)"}],"ds\\map::merge":[{"title":"Ds\\Map::merge() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nprint_r($map->merge([\"a\" => 10, \"e\" => 50]));","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 10\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n    [3] => Ds\\Pair Object\n        (\n            [key] => e\n            [value] => 50\n        )\n\n)"}],"ds\\map::pairs":[{"title":"Ds\\Map::pairs() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->pairs());","output":"object(Ds\\Map)#8 (3) {\n  [0]=>\n  object(Ds\\Pair)#5 (2) {\n    [\"key\"]=>\n    string(1) \"a\"\n    [\"value\"]=>\n    int(1)\n  }\n  [1]=>\n  object(Ds\\Pair)#6 (2) {\n    [\"key\"]=>\n    string(1) \"b\"\n    [\"value\"]=>\n    int(2)\n  }\n  [2]=>\n  object(Ds\\Pair)#7 (2) {\n    [\"key\"]=>\n    string(1) \"c\"\n    [\"value\"]=>\n    int(3)\n  }\n}\np"}],"ds\\map::put":[{"title":"Ds\\Map::put() example","source":"$map = new \\Ds\\Map();\n\n$map->put(\"a\", 1);\n$map->put(\"b\", 2);\n$map->put(\"c\", 3);\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)"},{"title":"Ds\\Map::put() example using objects as keys","source":"class HashableObject implements \\Ds\\Hashable\n{\n    \/**\n     * An arbitrary value to use as the hash value. Does not define equality.\n     *\/\n    private $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    public function hash()\n    {\n        return $this->value;\n    }\n\n    public function equals($obj): bool\n    {\n        return $this->value === $obj->value;\n    }\n}\n\n$map = new \\Ds\\Map();\n\n$obj = new \\ArrayIterator([]);\n\n\/\/ Using the same instance multiple times will overwrite the previous value.\n$map->put($obj, 1);\n$map->put($obj, 2);\n\n\/\/ Using multiple instances of the same object will create new associations.\n$map->put(new \\stdClass(), 3);\n$map->put(new \\stdClass(), 4);\n\n\/\/ Using multiple instances of equal hashable objects will overwrite previous values.\n$map->put(new \\HashableObject(1), 5);\n$map->put(new \\HashableObject(1), 6);\n$map->put(new \\HashableObject(2), 7);\n$map->put(new \\HashableObject(2), 8);\n\nvar_dump($map);","output":"object(Ds\\Map)#1 (5) {\n  [0]=>\n  object(Ds\\Pair)#7 (2) {\n    [\"key\"]=>\n    object(ArrayIterator)#2 (1) {\n      [\"storage\":\"ArrayIterator\":private]=>\n      array(0) {\n      }\n    }\n    [\"value\"]=>\n    int(2)\n  }\n  [1]=>\n  object(Ds\\Pair)#8 (2) {\n    [\"key\"]=>\n    object(stdClass)#3 (0) {\n    }\n    [\"value\"]=>\n    int(3)\n  }\n  [2]=>\n  object(Ds\\Pair)#9 (2) {\n    [\"key\"]=>\n    object(stdClass)#4 (0) {\n    }\n    [\"value\"]=>\n    int(4)\n  }\n  [3]=>\n  object(Ds\\Pair)#10 (2) {\n    [\"key\"]=>\n    object(HashableObject)#5 (1) {\n      [\"value\":\"HashableObject\":private]=>\n      int(1)\n    }\n    [\"value\"]=>\n    int(6)\n  }\n  [4]=>\n  object(Ds\\Pair)#11 (2) {\n    [\"key\"]=>\n    object(HashableObject)#6 (1) {\n      [\"value\":\"HashableObject\":private]=>\n      int(2)\n    }\n    [\"value\"]=>\n    int(8)\n  }\n}"}],"ds\\map::putall":[{"title":"Ds\\Map::putAll() example","source":"$map = new \\Ds\\Map();\n\n$map->putAll([\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 3,\n]);\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n)"}],"ds\\map::reduce":[{"title":"Ds\\Map::reduce() with initial value example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\n$callback = function($carry, $key, $value) {\n    return $carry * $value;\n};\n\nvar_dump($map->reduce($callback, 5));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = 5\n\/\/\n\/\/ $carry = $carry * 1 =  5\n\/\/ $carry = $carry * 2 = 10\n\/\/ $carry = $carry * 3 = 30","output":"int(30)"},{"title":"Ds\\Map::reduce() without an initial value example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->reduce(function($carry, $key, $value) {\n    return $carry + $value + 5;\n}));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = null\n\/\/\n\/\/ $carry = $carry + 1 + 5 =  6\n\/\/ $carry = $carry + 2 + 5 = 13\n\/\/ $carry = $carry + 3 + 5 = 21","output":"int(21)"}],"ds\\map::remove":[{"title":"Ds\\Map::remove() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->remove(\"a\"));      \/\/  1\nvar_dump($map->remove(\"e\", 10));  \/\/ 10 (default used)","output":"int(1)\nint(10)"}],"ds\\map::reverse":[{"title":"Ds\\Map::reverse() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$map->reverse();\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n)"}],"ds\\map::reversed":[{"title":"Ds\\Map::reversed() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nprint_r($map->reversed());","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 3\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n)"}],"ds\\map::skip":[{"title":"Ds\\Map::skip() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n\nvar_dump($map->skip(1));","output":"object(Ds\\Pair)#2 (2) {\n  [\"key\"]=>\n  string(1) \"b\"\n  [\"value\"]=>\n  int(2)\n}"}],"ds\\map::slice":[{"title":"Ds\\Map::slice() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5]);\n\n\/\/ Slice from 2 onwards\nprint_r($map->slice(2)->toArray());\n\n\/\/ Slice from 1, for a length of 3\nprint_r($map->slice(1, 3)->toArray());\n\n\/\/ Slice from 1 onwards\nprint_r($map->slice(1)->toArray());\n\n\/\/ Slice from 2 from the end onwards\nprint_r($map->slice(-2)->toArray());\n\n\/\/ Slice from 1 to 1 from the end\nprint_r($map->slice(1, -1)->toArray());","output":"Array\n(\n    [c] => 3\n    [d] => 4\n    [e] => 5\n)\nArray\n(\n    [b] => 2\n    [c] => 3\n    [d] => 4\n)\nArray\n(\n    [b] => 2\n    [c] => 3\n    [d] => 4\n    [e] => 5\n)\nArray\n(\n    [d] => 4\n    [e] => 5\n)\nArray\n(\n    [b] => 2\n    [c] => 3\n    [d] => 4\n)"}],"ds\\map::sort":[{"title":"Ds\\Map::sort() example","source":"$map = new \\Ds\\Map([\"a\" => 2, \"b\" => 3, \"c\" => 1]);\n$map->sort();\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 3\n        )\n\n)"},{"title":"Ds\\Map::sort() example using a comparator","source":"$map = new \\Ds\\Map([\"a\" => 2, \"b\" => 3, \"c\" => 1]);\n\n$map->sort(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($map);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 3\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 1\n        )\n\n)"}],"ds\\map::sorted":[{"title":"Ds\\Map::sort() example","source":"$map = new \\Ds\\Map([\"a\" => 2, \"b\" => 3, \"c\" => 1]);\n\nprint_r($map->sorted());","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 3\n        )\n\n)"},{"title":"Ds\\Map::sort() example using a comparator","source":"$map = new \\Ds\\Map([\"a\" => 2, \"b\" => 3, \"c\" => 1]);\n\n\/\/ Reverse\n$sorted = $map->sorted(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sorted);","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 3\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 2\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 1\n        )\n\n)"}],"ds\\map::sum":[{"title":"Ds\\Map::sum() integer example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\nvar_dump($map->sum());","output":"int(6)"},{"title":"Ds\\Map::sum() float example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2.5, \"c\" => 3]);\nvar_dump($map->sum());","output":"float(6.5)"}],"ds\\map::toarray":[{"title":"Ds\\Map::toArray() example","source":"$map = new \\Ds\\Map([\n    \"a\" => 1,\n    \"b\" => 2,\n    \"c\" => 3,\n]);\n\nvar_dump($map->toArray());","output":"array(3) {\n  [\"a\"]=>\n  int(1)\n  [\"b\"]=>\n  int(2)\n  [\"c\"]=>\n  int(3)\n}"}],"ds\\map::union":[{"title":"Ds\\Map::union() example","source":"$a = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$b = new \\Ds\\Map([\"b\" => 3, \"c\" => 4, \"d\" => 5]);\n\nprint_r($a->union($b));","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => b\n            [value] => 3\n        )\n\n    [2] => Ds\\Pair Object\n        (\n            [key] => c\n            [value] => 4\n        )\n\n    [3] => Ds\\Pair Object\n        (\n            [key] => d\n            [value] => 5\n        )\n\n)"}],"ds\\map::values":[{"title":"Ds\\Map::values() example","source":"$map = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\nvar_dump($map->values());","output":"object(Ds\\Map)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\map::xor":[{"title":"Ds\\Map::xor() example","source":"$a = new \\Ds\\Map([\"a\" => 1, \"b\" => 2, \"c\" => 3]);\n$b = new \\Ds\\Map([\"b\" => 4, \"c\" => 5, \"d\" => 6]);\n\nprint_r($a->xor($b));","output":"Ds\\Map Object\n(\n    [0] => Ds\\Pair Object\n        (\n            [key] => a\n            [value] => 1\n        )\n\n    [1] => Ds\\Pair Object\n        (\n            [key] => d\n            [value] => 6\n        )\n\n)"}],"ds\\pair::clear":[{"title":"Ds\\Pair::clear() example","source":"$pair = new \\Ds\\Pair(\"a\", 1);\nprint_r($pair);\n\n$pair->clear();\nprint_r($pair);","output":"Ds\\Pair Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Pair Object\n(\n)"}],"ds\\pair::copy":[{"title":"Ds\\Pair::copy() example","source":"$a = new \\Ds\\Pair(\"a\", 1);\n$b = $a->copy();\n\n$a->key = \"x\";\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Pair Object\n(\n    [key] => x\n    [value] => 1\n)\nDs\\Pair Object\n(\n    [key] => a\n    [value] => 1\n)"}],"ds\\pair::isempty":[{"title":"Ds\\Pair::isEmpty() example","source":"$a = new \\Ds\\Pair(\"a\", 1);\n$b = new \\Ds\\Pair();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\pair::toarray":[{"title":"Ds\\Pair::toArray() example","source":"$pair = new \\Ds\\Pair(\"a\", 1);\n\nvar_dump($pair->toArray());","output":"array(2) {\n  [\"key\"]=>\n  string(1) \"a\"\n  [\"value\"]=>\n  int(1)\n}"}],"ds\\priorityqueue::allocate":[{"title":"Ds\\PriorityQueue::allocate() example","source":"$queue = new \\Ds\\PriorityQueue();\nvar_dump($queue->capacity());\n\n$queue->allocate(100);\nvar_dump($queue->capacity());","output":"int(8)\nint(128)"}],"ds\\priorityqueue::capacity":[{"title":"Ds\\PriorityQueue::capacity() example","source":"$queue = new \\Ds\\PriorityQueue();\nvar_dump($queue->capacity());","output":"int(8)"}],"ds\\priorityqueue::clear":[{"title":"Ds\\PriorityQueue::clear() example","source":"$queue = new \\Ds\\PriorityQueue();\n\n$queue->push(\"a\",  5);\n$queue->push(\"b\", 15);\n$queue->push(\"c\", 10);\n\n$queue->clear();\nprint_r($queue);","output":"Ds\\PriorityQueue Object\n(\n)"}],"ds\\priorityqueue::copy":[{"title":"Ds\\PriorityQueue::copy() example","source":"$queue = new \\Ds\\PriorityQueue();\n\n$queue->push(\"a\",  5);\n$queue->push(\"b\", 15);\n$queue->push(\"c\", 10);\n\nprint_r($queue->copy());","output":"Ds\\PriorityQueue Object\n(\n    [0] => b\n    [1] => c\n    [2] => a\n)"}],"ds\\priorityqueue::isempty":[{"title":"Ds\\PriorityQueue::isEmpty() example","source":"$a = new \\Ds\\PriorityQueue();\n$b = new \\Ds\\PriorityQueue();\n\n$a->push(\"a\",  5);\n$a->push(\"b\", 15);\n$a->push(\"c\", 10);\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\priorityqueue::peek":[{"title":"Ds\\PriorityQueue::peek() example","source":"$queue = new \\Ds\\PriorityQueue();\n\n$queue->push(\"a\",  5);\n$queue->push(\"b\", 15);\n$queue->push(\"c\", 10);\n\nvar_dump($queue->peek());","output":"string(1) \"b\""}],"ds\\priorityqueue::pop":[{"title":"Ds\\PriorityQueue::pop() example","source":"$queue = new \\Ds\\PriorityQueue();\n\n$queue->push(\"a\",  5);\n$queue->push(\"b\", 15);\n$queue->push(\"c\", 10);\n\nprint_r($queue->pop());\nprint_r($queue->pop());\nprint_r($queue->pop());","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\priorityqueue::push":[{"title":"Ds\\PriorityQueue::push() example","source":"$queue = new \\Ds\\PriorityQueue();\n\n$queue->push(\"a\",  5);\n$queue->push(\"b\", 15);\n$queue->push(\"c\", 10);\n\nprint_r($queue->pop());\nprint_r($queue->pop());\nprint_r($queue->pop());","output":"string(1) \"b\"\nstring(1) \"c\"\nstring(1) \"a\""}],"ds\\priorityqueue::toarray":[{"title":"Ds\\PriorityQueue::toArray() example","source":"$queue = new \\Ds\\PriorityQueue();\n\n$queue->push(\"a\",  5);\n$queue->push(\"b\", 15);\n$queue->push(\"c\", 10);\n\nvar_dump($queue->toArray());","output":"array(3) {\n  [0]=>\n  string(1) \"b\"\n  [1]=>\n  string(1) \"c\"\n  [2]=>\n  string(1) \"a\"\n}"}],"ds\\queue::allocate":[{"title":"Ds\\Queue::allocate() example","source":"$queue = new \\Ds\\Queue();\nvar_dump($queue->capacity());\n\n$queue->allocate(100);\nvar_dump($queue->capacity());","output":"int(8)\nint(128)"}],"ds\\queue::capacity":[{"title":"Ds\\Queue::capacity() example","source":"$queue = new \\Ds\\Queue();\nvar_dump($queue->capacity());\n\n$queue->push(...range(1, 50));\nvar_dump($queue->capacity());","output":"int(8)\nint(64)"}],"ds\\queue::clear":[{"title":"Ds\\Queue::clear() example","source":"$queue = new \\Ds\\Queue([1, 2, 3]);\nprint_r($queue);\n\n$queue->clear();\nprint_r($queue);","output":"Ds\\Queue Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Queue Object\n(\n)"}],"ds\\queue::copy":[{"title":"Ds\\Queue::copy() example","source":"$a = new \\Ds\\Queue([1, 2, 3]);\n$b = $a->copy();\n\n\/\/ Updating the copy doesn't affect the original\n$b->push(4);\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Queue Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Queue Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)"}],"ds\\queue::isempty":[{"title":"Ds\\Queue::isEmpty() example","source":"$a = new \\Ds\\Queue([1, 2, 3]);\n$b = new \\Ds\\Queue();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\queue::peek":[{"title":"Ds\\Queue::peek() example","source":"$queue = new \\Ds\\Queue();\n\n$queue->push(\"a\");\n$queue->push(\"b\");\n$queue->push(\"c\");\n\nvar_dump($queue->peek());","output":"string(1) \"a\""}],"ds\\queue::pop":[{"title":"Ds\\Queue::pop() example","source":"$queue = new \\Ds\\Queue();\n\n$queue->push(\"a\");\n$queue->push(\"b\");\n$queue->push(\"c\");\n\nvar_dump($queue->pop());\nvar_dump($queue->pop());\nvar_dump($queue->pop());","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\queue::push":[{"title":"Ds\\Queue::push() example","source":"$queue = new \\Ds\\Queue();\n\n$queue->push(\"a\");\n$queue->push(\"b\");\n$queue->push(\"c\", \"d\");\n$queue->push(...[\"e\", \"f\"]);\n\nprint_r($queue);","output":"Ds\\Queue Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)"}],"ds\\queue::toarray":[{"title":"Ds\\Queue::toArray() example","source":"$queue = new \\Ds\\Queue([1, 2, 3]);\n\nvar_dump($queue->toArray());","output":"array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\sequence::allocate":[{"title":"Ds\\Sequence::allocate() example","source":"$sequence = new \\Ds\\Vector();\nvar_dump($sequence->capacity());\n\n$vector->allocate(100);\nvar_dump($sequence->capacity());","output":"int(10)\nint(100)"}],"ds\\sequence::apply":[{"title":"Ds\\Sequence::apply() example","source":"$sequence = new \\Ds\\Sequence([1, 2, 3]);\n$sequence->apply(function($value) { return $value * 2; });\n\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)"}],"ds\\sequence::capacity":[{"title":"Ds\\Sequence::capacity() example","source":"$sequence = new \\Ds\\Vector();\nvar_dump($sequence->capacity());\n\n$sequence->push(...range(1, 50));\nvar_dump($sequence->capacity());\n\n$sequence[] = \"a\";\nvar_dump($sequence->capacity());","output":"int(10)\nint(50)\nint(75)"}],"ds\\sequence::contains":[{"title":"Ds\\Sequence::contains() example","source":"$sequence = new \\Ds\\Vector(['a', 'b', 'c', 1, 2, 3]);\n\nvar_dump($sequence->contains('a'));                \/\/ true\nvar_dump($sequence->contains('a', 'b'));           \/\/ true\nvar_dump($sequence->contains('c', 'd'));           \/\/ false\n\nvar_dump($sequence->contains(...['c', 'b', 'a'])); \/\/ true\n\n\/\/ Always strict\nvar_dump($sequence->contains(1));                  \/\/ true\nvar_dump($sequence->contains('1'));                \/\/ false\n\nvar_dump($sequece->contains(...[]));               \/\/ true","output":"bool(true)\nbool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(true)"}],"ds\\sequence::filter":[{"title":"Ds\\Sequence::filter() example using callback function","source":"$sequence = new \\Ds\\Vector([1, 2, 3, 4, 5]);\n\nvar_dump($sequence->filter(function($value) {\n    return $value % 2 == 0;\n}));","output":"object(Ds\\Vector)#3 (2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n}"},{"title":"Ds\\Sequence::filter() example without a callback function","source":"$sequence = new \\Ds\\Vector([0, 1, 'a', true, false]);\n\nvar_dump($sequence->filter());","output":"object(Ds\\Vector)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  bool(true)\n}"}],"ds\\sequence::find":[{"title":"Ds\\Sequence::find() example","source":"$sequence = new \\Ds\\Vector([\"a\", 1, true]);\n\nvar_dump($sequence->find(\"a\")); \/\/ 0\nvar_dump($sequence->find(\"b\")); \/\/ false\nvar_dump($sequence->find(\"1\")); \/\/ false\nvar_dump($sequence->find(1));   \/\/ 1","output":"int(0)\nbool(false)\nbool(false)\nint(1)"}],"ds\\sequence::first":[{"title":"Ds\\Sequence::first() example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\nvar_dump($sequence->first());","output":"int(1)"}],"ds\\sequence::get":[{"title":"Ds\\Sequence::get() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($sequence->get(0));\nvar_dump($sequence->get(1));\nvar_dump($sequence->get(2));","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""},{"title":"Ds\\Sequence::get() example using array syntax","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($sequence[0]);\nvar_dump($sequence[1]);\nvar_dump($sequence[2]);","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\sequence::insert":[{"title":"Ds\\Sequence::insert() example","source":"$sequence = new \\Ds\\Vector();\n\n$sequence->insert(0, \"e\");             \/\/ [e]\n$sequence->insert(1, \"f\");             \/\/ [e, f]\n$sequence->insert(2, \"g\");             \/\/ [e, f, g]\n$sequence->insert(0, \"a\", \"b\");        \/\/ [a, b, e, f, g]\n$sequence->insert(2, ...[\"c\", \"d\"]);   \/\/ [a, b, c, d, e, f, g]\n\nvar_dump($sequence);","output":"object(Ds\\Vector)#1 (7) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(1) \"b\"\n  [2]=>\n  string(1) \"c\"\n  [3]=>\n  string(1) \"d\"\n  [4]=>\n  string(1) \"e\"\n  [5]=>\n  string(1) \"f\"\n  [6]=>\n  string(1) \"g\"\n}"}],"ds\\sequence::join":[{"title":"Ds\\Sequence::join() example using a separator string","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($sequence->join(\"|\"));","output":"string(11) \"a|b|c|1|2|3\""},{"title":"Ds\\Sequence::join() example without a separator string","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($sequence->join());","output":"string(11) \"abc123\""}],"ds\\sequence::last":[{"title":"Ds\\Sequence::last() example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\nvar_dump($sequence->last());","output":"int(3)"}],"ds\\sequence::map":[{"title":"Ds\\Sequence::map() example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\n\nprint_r($sequence->map(function($value) { return $value * 2; }));\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)\nDs\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)"}],"ds\\sequence::merge":[{"title":"Ds\\Sequence::merge() example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($sequence->merge([4, 5, 6]));\nvar_dump($sequence);","output":"object(Ds\\Vector)#2 (6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\nobject(Ds\\Vector)#1 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\sequence::pop":[{"title":"Ds\\Sequence::pop() example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($sequence->pop());\nvar_dump($sequence->pop());\nvar_dump($sequence->pop());","output":"int(3)\nint(2)\nint(1)"}],"ds\\sequence::push":[{"title":"Ds\\Sequence::push() example","source":"$sequence = new \\Ds\\Vector();\n\n$sequence->push(\"a\");\n$sequence->push(\"b\");\n$sequence->push(\"c\", \"d\");\n$sequence->push(...[\"e\", \"f\"]);\n\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)"}],"ds\\sequence::reduce":[{"title":"Ds\\Sequence::reduce() with initial value example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\n\n$callback = function($carry, $value) {\n    return $carry * $value;\n};\n\nvar_dump($sequence->reduce($callback, 5));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = 5\n\/\/\n\/\/ $carry = $carry * 1 =  5\n\/\/ $carry = $carry * 2 = 10\n\/\/ $carry = $carry * 3 = 30","output":"int(30)"},{"title":"Ds\\Sequence::reduce() without an initial value example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($sequence->reduce(function($carry, $value) {\n    return $carry + $value + 5;\n}));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = null\n\/\/\n\/\/ $carry = $carry + 1 + 5 =  6\n\/\/ $carry = $carry + 2 + 5 = 13\n\/\/ $carry = $carry + 3 + 5 = 21","output":"int(21)"}],"ds\\sequence::remove":[{"title":"Ds\\Sequence::remove() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($sequence->remove(1));\nvar_dump($sequence->remove(0));\nvar_dump($sequence->remove(0));","output":"string(1) \"b\"\nstring(1) \"a\"\nstring(1) \"c\""}],"ds\\sequence::reverse":[{"title":"Ds\\Sequence::reverse() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n$sequence->reverse();\n\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)"}],"ds\\sequence::reversed":[{"title":"Ds\\Sequence::reversed() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nprint_r($sequence->reversed());\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)\nDs\\Vector Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n)"}],"ds\\sequence::rotate":[{"title":"Ds\\Sequence::rotate() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\", \"d\"]);\n\n$sequence->rotate(1);  \/\/ \"a\" is shifted, then pushed.\nprint_r($sequence);\n\n$sequence->rotate(2);  \/\/ \"b\" and \"c\" are both shifted, the pushed.\nprint_r($sequence);","output":"(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => a\n)\nDs\\Vector Object\n(\n    [0] => d\n    [1] => a\n    [2] => b\n    [3] => c\n)"}],"ds\\sequence::set":[{"title":"Ds\\Sequence::set() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\n$sequence->set(1, \"_\");\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => a\n    [1] => _\n    [2] => c\n)"},{"title":"Ds\\Sequence::set() example using array syntax","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\n$sequence[1] = \"_\";\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => a\n    [1] => _\n    [2] => c\n)"}],"ds\\sequence::shift":[{"title":"Ds\\Sequence::shift() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($sequence->shift());\nvar_dump($sequence->shift());\nvar_dump($sequence->shift());","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\sequence::slice":[{"title":"Ds\\Sequence::slice() example","source":"$sequence = new \\Ds\\Vector([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n\n\/\/ Slice from 2 onwards\nprint_r($sequence->slice(2));\n\n\/\/ Slice from 1, for a length of 3\nprint_r($sequence->slice(1, 3));\n\n\/\/ Slice from 1 onwards\nprint_r($sequence->slice(1));\n\n\/\/ Slice from 2 from the end onwards\nprint_r($sequence->slice(-2));\n\n\/\/ Slice from 1 to 1 from the end\nprint_r($sequence->slice(1, -1));","output":"Ds\\Vector Object\n(\n    [0] => c\n    [1] => d\n    [2] => e\n)\nDs\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)\nDs\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => e\n)\nDs\\Vector Object\n(\n    [0] => d\n    [1] => e\n)\nDs\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)"}],"ds\\sequence::sort":[{"title":"Ds\\Sequence::sort() example","source":"$sequence = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n$sequence->sort();\n\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Sequence::sort() example using a comparator","source":"$sequence = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n\n$sequence->sort(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\sequence::sorted":[{"title":"Ds\\Sequence::sorted() example","source":"$sequence = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n\nprint_r($sequence->sorted());","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Sequence::sorted() example using a comparator","source":"$sequence = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n\n$sorted = $sequence->sorted(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sorted);","output":"Ds\\Vector Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\sequence::sum":[{"title":"Ds\\Sequence::sum() integer example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\nvar_dump($sequence->sum());","output":"int(6)"},{"title":"Ds\\Sequence::sum() float example","source":"$sequence = new \\Ds\\Vector([1, 2.5, 3]);\nvar_dump($sequence->sum());","output":"float(6.5)"}],"ds\\sequence::unshift":[{"title":"Ds\\Sequence::unshift() example","source":"$sequence = new \\Ds\\Vector([1, 2, 3]);\n\n$sequence->unshift(\"a\");\n$sequence->unshift(\"b\", \"c\");\n\nprint_r($sequence);","output":"Ds\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => a\n    [3] => 1\n    [4] => 2\n    [5] => 3\n)"}],"ds\\set::add":[{"title":"Ds\\Set::add() example using integers","source":"$set = new \\Ds\\Set();\n\n$set->add(1);\n$set->add(1);\n$set->add(2);\n$set->add(3);\n\n\/\/ Strict comparison would not treat these the same as int(1)\n$set->add(\"1\");\n$set->add(true);\n\nvar_dump($set);","output":"object(Ds\\Set)#1 (5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  string(1) \"1\"\n  [4]=>\n  bool(true)\n}"},{"title":"Ds\\Set::add() example using objects","source":"class HashableObject implements \\Ds\\Hashable\n{\n    \/**\n     * An arbitrary value to use as the hash value. Does not define equality.\n     *\/\n    private $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    public function hash()\n    {\n        return $this->value;\n    }\n\n    public function equals($obj): bool\n    {\n        return $this->value === $obj->value;\n    }\n}\n\n$set = new \\Ds\\Set();\n\n$obj = new \\ArrayIterator([]);\n\n\/\/ Adding the same instance multiple times will only add the first.\n$set->add($obj);\n$set->add($obj);\n\n\/\/ Adding multiple instances of the same object will add them all.\n$set->add(new \\stdClass());\n$set->add(new \\stdClass());\n\n\/\/ Adding multiple instances of equal hashable objects will only add the first.\n$set->add(new \\HashableObject(1));\n$set->add(new \\HashableObject(1));\n$set->add(new \\HashableObject(2));\n$set->add(new \\HashableObject(2));\n\nvar_dump($set);","output":"object(Ds\\Set)#1 (5) {\n  [0]=>\n  object(ArrayIterator)#2 (1) {\n    [\"storage\":\"ArrayIterator\":private]=>\n    array(0) {\n    }\n  }\n  [1]=>\n  object(stdClass)#3 (0) {\n  }\n  [2]=>\n  object(stdClass)#4 (0) {\n  }\n  [3]=>\n  object(HashableObject)#5 (1) {\n    [\"value\":\"HashableObject\":private]=>\n    int(1)\n  }\n  [4]=>\n  object(HashableObject)#6 (1) {\n    [\"value\":\"HashableObject\":private]=>\n    int(2)\n  }\n}"}],"ds\\set::allocate":[{"title":"Ds\\Set::allocate() example","source":"$set = new \\Ds\\Set();\nvar_dump($set->capacity());\n\n$set->allocate(100);\nvar_dump($set->capacity());","output":"int(16)\nint(128)"}],"ds\\set::capacity":[{"title":"Ds\\Set::capacity() example","source":"$set = new \\Ds\\Set();\nvar_dump($set->capacity());\n\n$set->push(...range(1, 50));\nvar_dump($set->capacity());","output":"int(16)\nint(64)"}],"ds\\set::clear":[{"title":"Ds\\Set::clear() example","source":"$set = new \\Ds\\Set([1, 2, 3]);\nprint_r($set);\n\n$set->clear();\nprint_r($set);","output":"Ds\\Set Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Set Object\n(\n)"}],"ds\\set::contains":[{"title":"Ds\\Set::contains() example","source":"$set = new \\Ds\\Set([1, 2, 3]);\n\nvar_dump($set->contains(1));                \/\/ true\nvar_dump($set->contains(1, 2));             \/\/ true\nvar_dump($set->contains(...[1, 2]));        \/\/ true\n\nvar_dump($set->contains(\"1\"));              \/\/ false\nvar_dump($set->contains(...[1, 2, 3, 4]));  \/\/ false\n\nvar_dump($set->contains(...[]));            \/\/ true","output":"bool(true)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\nbool(true)"}],"ds\\set::copy":[{"title":"Ds\\Set::copy() example","source":"$a = new \\Ds\\Set([1, 2, 3]);\n$b = $a->copy();\n\n\/\/ Updating the copy doesn't affect the original\n$b->add(4);\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Set Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Set Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)"}],"ds\\set::diff":[{"title":"Ds\\Set::diff() example","source":"$a = new \\Ds\\Set([1, 2, 3]);\n$b = new \\Ds\\Set([3, 4, 5]);\n\nvar_dump($a->diff($b));","output":"object(Ds\\Set)#3 (2) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n}"}],"ds\\set::filter":[{"title":"Ds\\Set::filter() example using callback function","source":"$set = new \\Ds\\Set([1, 2, 3, 4, 5]);\n\nvar_dump($set->filter(function($value) {\n    return $value % 2 == 0;\n}));","output":"object(Ds\\Set)#3 (2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n}"},{"title":"Ds\\Set::filter() example without a callback function","source":"$set = new \\Ds\\Set([0, 1, 'a', true, false]);\n\nvar_dump($set->filter());","output":"object(Ds\\Set)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  bool(true)\n}"}],"ds\\set::first":[{"title":"Ds\\Set::first() example","source":"$set = new \\Ds\\Set([1, 2, 3]);\nvar_dump($set->first());","output":"int(1)"}],"ds\\set::get":[{"title":"Ds\\Set::get() example","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\"]);\n\nvar_dump($set->get(0));\nvar_dump($set->get(1));\nvar_dump($set->get(2));","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""},{"title":"Ds\\Set::get() example using array syntax","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\"]);\n\nvar_dump($set[0]);\nvar_dump($set[1]);\nvar_dump($set[2]);","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\set::intersect":[{"title":"Ds\\Set::intersect() example","source":"$a = new \\Ds\\Set([1, 2, 3]);\n$b = new \\Ds\\Set([3, 4, 5]);\n\nvar_dump($a->intersect($b));","output":"object(Ds\\Set)#3 (1) {\n  [0]=>\n  int(3)\n}"}],"ds\\set::isempty":[{"title":"Ds\\Set::isEmpty() example","source":"$a = new \\Ds\\Set([1, 2, 3]);\n$b = new \\Ds\\Set();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\set::join":[{"title":"Ds\\Set::join() example using a separator string","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($set->join(\"|\"));","output":"string(11) \"a|b|c|1|2|3\""},{"title":"Ds\\Set::join() example without a separator string","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($set->join());","output":"string(11) \"abc123\""}],"ds\\set::last":[{"title":"Ds\\Set::last() example","source":"$set = new \\Ds\\Set([1, 2, 3]);\nvar_dump($set->last());","output":"int(3)"}],"ds\\set::merge":[{"title":"Ds\\Set::merge() example","source":"$set = new \\Ds\\Set([1, 2, 3]);\n\nvar_dump($set->merge([3, 4, 5]));\nvar_dump($set);","output":"object(Ds\\Set)#2 (6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n}\nobject(Ds\\Set)#1 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\set::reduce":[{"title":"Ds\\Set::reduce() with initial value example","source":"$set = new \\Ds\\Set([1, 2, 3]);\n\n$callback = function($carry, $value) {\n    return $carry * $value;\n};\n\nvar_dump($set->reduce($callback, 5));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = 5\n\/\/\n\/\/ $carry = $carry * 1 =  5\n\/\/ $carry = $carry * 2 = 10\n\/\/ $carry = $carry * 3 = 30","output":"int(30)"},{"title":"Ds\\Set::reduce() without an initial value example","source":"$set = new \\Ds\\Set([1, 2, 3]);\n\nvar_dump($set->reduce(function($carry, $value) {\n    return $carry + $value + 5;\n}));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = null\n\/\/\n\/\/ $carry = $carry + 1 + 5 =  6\n\/\/ $carry = $carry + 2 + 5 = 13\n\/\/ $carry = $carry + 3 + 5 = 21","output":"int(21)"}],"ds\\set::remove":[{"title":"Ds\\Set::remove() example","source":"$set = new \\Ds\\Set([1, 2, 3, 4, 5]);\n\n$set->remove(1);            \/\/ Remove 1\n$set->remove(1, 2);         \/\/ Can't find 1, but remove 2\n$set->remove(...[3, 4]);    \/\/ Remove 3 and 4\n\nvar_dump($set);","output":"object(Ds\\Set)#1 (1) {\n  [0]=>\n  int(5)\n}"}],"ds\\set::reverse":[{"title":"Ds\\Set::reverse() example","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\"]);\n$set->reverse();\n\nprint_r($set);","output":"Ds\\Set Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)"}],"ds\\set::reversed":[{"title":"Ds\\Set::reversed() example","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\"]);\n\nprint_r($set->reversed());\nprint_r($set);","output":"Ds\\Set Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)\nDs\\Set Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n)"}],"ds\\set::slice":[{"title":"Ds\\Set::slice() example","source":"$set = new \\Ds\\Set([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n\n\/\/ Slice from 2 onwards\nprint_r($set->slice(2));\n\n\/\/ Slice from 1, for a length of 3\nprint_r($set->slice(1, 3));\n\n\/\/ Slice from 1 onwards\nprint_r($set->slice(1));\n\n\/\/ Slice from 2 from the end onwards\nprint_r($set->slice(-2));\n\n\/\/ Slice from 1 to 1 from the end\nprint_r($set->slice(1, -1));","output":"Ds\\Set Object\n(\n    [0] => c\n    [1] => d\n    [2] => e\n)\nDs\\Set Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)\nDs\\Set Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => e\n)\nDs\\Set Object\n(\n    [0] => d\n    [1] => e\n)\nDs\\Set Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)"}],"ds\\set::sort":[{"title":"Ds\\Set::sort() example","source":"$set = new \\Ds\\Set([4, 5, 1, 3, 2]);\n$set->sort();\n\nprint_r($set);","output":"Ds\\Set Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Set::sort() example using a comparator","source":"$set = new \\Ds\\Set([4, 5, 1, 3, 2]);\n\n$set->sort(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($set);","output":"Ds\\Set Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\set::sorted":[{"title":"Ds\\Set::sorted() example","source":"$set = new \\Ds\\Set([4, 5, 1, 3, 2]);\n\nprint_r($set->sorted());","output":"Ds\\Set Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Set::sorted() example using a comparator","source":"$set = new \\Ds\\Set([4, 5, 1, 3, 2]);\n\n$sorted = $set->sorted(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sorted);","output":"Ds\\Set Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\set::sum":[{"title":"Ds\\Set::sum() integer example","source":"$set = new \\Ds\\Set([1, 2, 3]);\nvar_dump($set->sum());","output":"int(6)"},{"title":"Ds\\Set::sum() float example","source":"$set = new \\Ds\\Set([1, 2.5, 3]);\nvar_dump($set->sum());","output":"float(6.5)"}],"ds\\set::toarray":[{"title":"Ds\\Set::toArray() example","source":"$set = new \\Ds\\Set([1, 2, 3]);\n\nvar_dump($set->toArray());","output":"array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\set::union":[{"title":"Ds\\Set::union() example","source":"$a = new \\Ds\\Set([1, 2, 3]);\n$b = new \\Ds\\Set([3, 4, 5]);\n\nvar_dump($a->union($b));","output":"object(Ds\\Set)#3 (5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n}"}],"ds\\set::xor":[{"title":"Ds\\Set::xor() example","source":"$a = new \\Ds\\Set([1, 2, 3]);\n$b = new \\Ds\\Set([3, 4, 5]);\n\nvar_dump($a->xor($b));","output":"object(Ds\\Set)#3 (4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(4)\n  [3]=>\n  int(5)\n}"}],"ds\\stack::clear":[{"title":"Ds\\Stack::clear() example","source":"$stack = new \\Ds\\Stack([1, 2, 3]);\nprint_r($stack);\n\n$stack->clear();\nprint_r($stack);","output":"Ds\\Stack Object\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\nDs\\Stack Object\n(\n)"}],"ds\\stack::copy":[{"title":"Ds\\Stack::copy() example","source":"$a = new \\Ds\\Stack([1, 2, 3]);\n$b = $a->copy();\n\n\/\/ Updating the copy doesn't affect the original\n$b->push(4);\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Stack Object\n(\n    [0] => 3\n    [1] => 2\n    [2] => 1\n)\nDs\\Stack Object\n(\n    [0] => 4\n    [1] => 3\n    [2] => 2\n    [3] => 1\n)"}],"ds\\stack::isempty":[{"title":"Ds\\Stack::isEmpty() example","source":"$a = new \\Ds\\Stack([1, 2, 3]);\n$b = new \\Ds\\Stack();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\stack::peek":[{"title":"Ds\\Stack::peek() example","source":"$stack = new \\Ds\\Stack();\n\n$stack->push(\"a\");\n$stack->push(\"b\");\n$stack->push(\"c\");\n\nvar_dump($stack->peek());","output":"string(1) \"c\""}],"ds\\stack::pop":[{"title":"Ds\\Stack::pop() example","source":"$stack = new \\Ds\\Stack();\n\n$stack->push(\"a\");\n$stack->push(\"b\");\n$stack->push(\"c\");\n\nvar_dump($stack->pop());\nvar_dump($stack->pop());\nvar_dump($stack->pop());","output":"string(1) \"c\"\nstring(1) \"b\"\nstring(1) \"a\""}],"ds\\stack::push":[{"title":"Ds\\Stack::push() example","source":"$stack = new \\Ds\\Stack();\n\n$stack->push(\"a\");\n$stack->push(\"b\");\n$stack->push(\"c\", \"d\");\n$stack->push(...[\"e\", \"f\"]);\n\nprint_r($stack);","output":"Ds\\Stack Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)"}],"ds\\stack::toarray":[{"title":"Ds\\Stack::toArray() example","source":"$stack = new \\Ds\\Stack([1, 2, 3]);\n\nvar_dump($stack->toArray());","output":"array(3) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n}"}],"ds\\vector::allocate":[{"title":"Ds\\Vector::allocate() example","source":"$vector = new \\Ds\\Vector();\nvar_dump($vector->capacity());\n\n$vector->allocate(100);\nvar_dump($vector->capacity());","output":"int(10)\nint(100)"}],"ds\\vector::apply":[{"title":"Ds\\Vector::apply() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n$vector->apply(function($value) { return $value * 2; });\n\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)"}],"ds\\vector::capacity":[{"title":"Ds\\Vector::capacity() example","source":"$vector = new \\Ds\\Vector();\nvar_dump($vector->capacity());\n\n$vector->push(...range(1, 50));\nvar_dump($vector->capacity());\n\n$vector[] = \"a\";\nvar_dump($vector->capacity());","output":"int(10)\nint(50)\nint(75)"}],"ds\\vector::clear":[{"title":"Ds\\Vector::clear() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\nprint_r($vector);\n\n$vector->clear();\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Vector Object\n(\n)"}],"ds\\vector::contains":[{"title":"Ds\\Vector::contains() example","source":"$vector = new \\Ds\\Vector(['a', 'b', 'c', 1, 2, 3]);\n\nvar_dump($vector->contains('a'));                \/\/ true\nvar_dump($vector->contains('a', 'b'));           \/\/ true\nvar_dump($vector->contains('c', 'd'));           \/\/ false\n\nvar_dump($vector->contains(...['c', 'b', 'a'])); \/\/ true\n\n\/\/ Always strict\nvar_dump($vector->contains(1));                  \/\/ true\nvar_dump($vector->contains('1'));                \/\/ false\n\nvar_dump($sequece->contains(...[]));               \/\/ true","output":"bool(true)\nbool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(true)"}],"ds\\vector::copy":[{"title":"Ds\\Vector::copy() example","source":"$a = new \\Ds\\Vector([1, 2, 3]);\n$b = $a->copy();\n\n\/\/ Updating the copy doesn't affect the original\n$b->push(4);\n\nprint_r($a);\nprint_r($b);","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nDs\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)"}],"ds\\vector::filter":[{"title":"Ds\\Vector::filter() example using callback function","source":"$vector = new \\Ds\\Vector([1, 2, 3, 4, 5]);\n\nvar_dump($vector->filter(function($value) {\n    return $value % 2 == 0;\n}));","output":"object(Ds\\Vector)#3 (2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(4)\n}"},{"title":"Ds\\Vector::filter() example without a callback function","source":"$vector = new \\Ds\\Vector([0, 1, 'a', true, false]);\n\nvar_dump($vector->filter());","output":"object(Ds\\Vector)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  string(1) \"a\"\n  [2]=>\n  bool(true)\n}"}],"ds\\vector::find":[{"title":"Ds\\Vector::find() example","source":"$vector = new \\Ds\\Vector([\"a\", 1, true]);\n\nvar_dump($vector->find(\"a\")); \/\/ 0\nvar_dump($vector->find(\"b\")); \/\/ false\nvar_dump($vector->find(\"1\")); \/\/ false\nvar_dump($vector->find(1));   \/\/ 1","output":"int(0)\nbool(false)\nbool(false)\nint(1)"}],"ds\\vector::first":[{"title":"Ds\\Vector::first() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\nvar_dump($vector->first());","output":"int(1)"}],"ds\\vector::get":[{"title":"Ds\\Vector::get() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($vector->get(0));\nvar_dump($vector->get(1));\nvar_dump($vector->get(2));","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""},{"title":"Ds\\Vector::get() example using array syntax","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($vector[0]);\nvar_dump($vector[1]);\nvar_dump($vector[2]);","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\vector::insert":[{"title":"Ds\\Vector::insert() example","source":"$vector = new \\Ds\\Vector();\n\n$vector->insert(0, \"e\");             \/\/ [e]\n$vector->insert(1, \"f\");             \/\/ [e, f]\n$vector->insert(2, \"g\");             \/\/ [e, f, g]\n$vector->insert(0, \"a\", \"b\");        \/\/ [a, b, e, f, g]\n$vector->insert(2, ...[\"c\", \"d\"]);   \/\/ [a, b, c, d, e, f, g]\n\nvar_dump($vector);","output":"object(Ds\\Vector)#1 (7) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(1) \"b\"\n  [2]=>\n  string(1) \"c\"\n  [3]=>\n  string(1) \"d\"\n  [4]=>\n  string(1) \"e\"\n  [5]=>\n  string(1) \"f\"\n  [6]=>\n  string(1) \"g\"\n}"}],"ds\\vector::isempty":[{"title":"Ds\\Vector::isEmpty() example","source":"$a = new \\Ds\\Vector([1, 2, 3]);\n$b = new \\Ds\\Vector();\n\nvar_dump($a->isEmpty());\nvar_dump($b->isEmpty());","output":"bool(false)\nbool(true)"}],"ds\\vector::join":[{"title":"Ds\\Vector::join() example using a separator string","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($vector->join(\"|\"));","output":"string(11) \"a|b|c|1|2|3\""},{"title":"Ds\\Vector::join() example without a separator string","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\", 1, 2, 3]);\n\nvar_dump($vector->join());","output":"string(11) \"abc123\""}],"ds\\vector::last":[{"title":"Ds\\Vector::last() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\nvar_dump($vector->last());","output":"int(3)"}],"ds\\vector::map":[{"title":"Ds\\Vector::map() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\nprint_r($vector->map(function($value) { return $value * 2; }));\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)\nDs\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)"}],"ds\\vector::merge":[{"title":"Ds\\Vector::merge() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($vector->merge([4, 5, 6]));\nvar_dump($vector);","output":"object(Ds\\Vector)#2 (6) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n  [3]=>\n  int(4)\n  [4]=>\n  int(5)\n  [5]=>\n  int(6)\n}\nobject(Ds\\Vector)#1 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\vector::pop":[{"title":"Ds\\Vector::pop() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($vector->pop());\nvar_dump($vector->pop());\nvar_dump($vector->pop());","output":"int(3)\nint(2)\nint(1)"}],"ds\\vector::push":[{"title":"Ds\\Vector::push() example","source":"$vector = new \\Ds\\Vector();\n\n$vector->push(\"a\");\n$vector->push(\"b\");\n$vector->push(\"c\", \"d\");\n$vector->push(...[\"e\", \"f\"]);\n\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n    [3] => d\n    [4] => e\n    [5] => f\n)"}],"ds\\vector::reduce":[{"title":"Ds\\Vector::reduce() with initial value example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\n$callback = function($carry, $value) {\n    return $carry * $value;\n};\n\nvar_dump($vector->reduce($callback, 5));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = 5\n\/\/\n\/\/ $carry = $carry * 1 =  5\n\/\/ $carry = $carry * 2 = 10\n\/\/ $carry = $carry * 3 = 30","output":"int(30)"},{"title":"Ds\\Vector::reduce() without an initial value example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($vector->reduce(function($carry, $value) {\n    return $carry + $value + 5;\n}));\n\n\/\/ Iterations:\n\/\/\n\/\/ $carry = $initial = null\n\/\/\n\/\/ $carry = $carry + 1 + 5 =  6\n\/\/ $carry = $carry + 2 + 5 = 13\n\/\/ $carry = $carry + 3 + 5 = 21","output":"int(21)"}],"ds\\vector::remove":[{"title":"Ds\\Vector::remove() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($vector->remove(1));\nvar_dump($vector->remove(0));\nvar_dump($vector->remove(0));","output":"string(1) \"b\"\nstring(1) \"a\"\nstring(1) \"c\""}],"ds\\vector::reverse":[{"title":"Ds\\Vector::reverse() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n$vector->reverse();\n\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)"}],"ds\\vector::reversed":[{"title":"Ds\\Vector::reversed() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nprint_r($vector->reversed());\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => c\n    [1] => b\n    [2] => a\n)\nDs\\Vector Object\n(\n    [0] => a\n    [1] => b\n    [2] => c\n)"}],"ds\\vector::rotate":[{"title":"Ds\\Vector::rotate() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\", \"d\"]);\n\n$vector->rotate(1);  \/\/ \"a\" is shifted, then pushed.\nprint_r($vector);\n\n$vector->rotate(2);  \/\/ \"b\" and \"c\" are both shifted, the pushed.\nprint_r($vector);","output":"(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => a\n)\nDs\\Vector Object\n(\n    [0] => d\n    [1] => a\n    [2] => b\n    [3] => c\n)"}],"ds\\vector::set":[{"title":"Ds\\Vector::set() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\n$vector->set(1, \"_\");\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => a\n    [1] => _\n    [2] => c\n)"},{"title":"Ds\\Vector::set() example using array syntax","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\n$vector[1] = \"_\";\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => a\n    [1] => _\n    [2] => c\n)"}],"ds\\vector::shift":[{"title":"Ds\\Vector::shift() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\"]);\n\nvar_dump($vector->shift());\nvar_dump($vector->shift());\nvar_dump($vector->shift());","output":"string(1) \"a\"\nstring(1) \"b\"\nstring(1) \"c\""}],"ds\\vector::slice":[{"title":"Ds\\Vector::slice() example","source":"$vector = new \\Ds\\Vector([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n\n\/\/ Slice from 2 onwards\nprint_r($vector->slice(2));\n\n\/\/ Slice from 1, for a length of 3\nprint_r($vector->slice(1, 3));\n\n\/\/ Slice from 1 onwards\nprint_r($vector->slice(1));\n\n\/\/ Slice from 2 from the end onwards\nprint_r($vector->slice(-2));\n\n\/\/ Slice from 1 to 1 from the end\nprint_r($vector->slice(1, -1));","output":"Ds\\Vector Object\n(\n    [0] => c\n    [1] => d\n    [2] => e\n)\nDs\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)\nDs\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n    [3] => e\n)\nDs\\Vector Object\n(\n    [0] => d\n    [1] => e\n)\nDs\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => d\n)"}],"ds\\vector::sort":[{"title":"Ds\\Vector::sort() example","source":"$vector = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n$vector->sort();\n\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Vector::sort() example using a comparator","source":"$vector = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n\n$vector->sort(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\vector::sorted":[{"title":"Ds\\Vector::sorted() example","source":"$vector = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n\nprint_r($vector->sorted());","output":"Ds\\Vector Object\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n)"},{"title":"Ds\\Vector::sorted() example using a comparator","source":"$vector = new \\Ds\\Vector([4, 5, 1, 3, 2]);\n\n$sorted = $vector->sorted(function($a, $b) {\n    return $b <=> $a;\n});\n\nprint_r($sorted);","output":"Ds\\Vector Object\n(\n    [0] => 5\n    [1] => 4\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"}],"ds\\vector::sum":[{"title":"Ds\\Vector::sum() integer example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\nvar_dump($vector->sum());","output":"int(6)"},{"title":"Ds\\Vector::sum() float example","source":"$vector = new \\Ds\\Vector([1, 2.5, 3]);\nvar_dump($vector->sum());","output":"float(6.5)"}],"ds\\vector::toarray":[{"title":"Ds\\Vector::toArray() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\nvar_dump($vector->toArray());","output":"array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"ds\\vector::unshift":[{"title":"Ds\\Vector::unshift() example","source":"$vector = new \\Ds\\Vector([1, 2, 3]);\n\n$vector->unshift(\"a\");\n$vector->unshift(\"b\", \"c\");\n\nprint_r($vector);","output":"Ds\\Vector Object\n(\n    [0] => b\n    [1] => c\n    [2] => a\n    [3] => 1\n    [4] => 2\n    [5] => 3\n)"}],"error::getcode":[{"title":"Error::getCode() example","source":"try {\n    throw new Error(\"Some error message\", 30);\n} catch(Error $e) {\n    echo \"The Error code is: \" . $e->getCode();\n}","output":"The Error code is: 30"}],"error::getfile":[{"title":"Error::getFile() example","source":"try {\n    throw new Error;\n} catch(Error $e) {\n    echo $e->getFile();\n}","output":"\/home\/bjori\/tmp\/ex.php"}],"error::getline":[{"title":"Error::getLine() example","source":"try {\n    throw new Error(\"Some error message\");\n} catch(Error $e) {\n    echo \"The error was created on line: \" . $e->getLine();\n}","output":"The error was created on line: 3"}],"error::getmessage":[{"title":"Error::getMessage() example","source":"try {\n    throw new Error(\"Some error message\");\n} catch(Error $e) {\n    echo $e->getMessage();\n}","output":"Some error message"}],"error::getprevious":[{"title":"Error::getPrevious() example","source":"class MyCustomError extends Error {}\n\nfunction doStuff() {\n    try {\n        throw new InvalidArgumentError(\"You are doing it wrong!\", 112);\n    } catch(Error $e) {\n        throw new MyCustomError(\"Something happened\", 911, $e);\n    }\n}\n\n\ntry {\n    doStuff();\n} catch(Error $e) {\n    do {\n        printf(\"%s:%d %s (%d) [%s]\\n\", $e->getFile(), $e->getLine(), $e->getMessage(), $e->getCode(), get_class($e));\n    } while($e = $e->getPrevious());\n}","output":"\/home\/bjori\/ex.php:8 Something happened (911) [MyCustomError]\n\/home\/bjori\/ex.php:6 You are doing it wrong! (112) [InvalidArgumentError]"}],"error::gettrace":[{"title":"Error::getTrace() example","source":"function test() {\n throw new Error;\n}\n\ntry {\n test();\n} catch(Error $e) {\n var_dump($e->getTrace());\n}","output":"array(1) {\n  [0]=>\n  array(4) {\n    [\"file\"]=>\n    string(22) \"\/home\/bjori\/tmp\/ex.php\"\n    [\"line\"]=>\n    int(7)\n    [\"function\"]=>\n    string(4) \"test\"\n    [\"args\"]=>\n    array(0) {\n    }\n  }\n}"}],"error::gettraceasstring":[{"title":"Error::getTraceAsString() example","source":"function test() {\n    throw new Error;\n}\n\ntry {\n    test();\n} catch(Error $e) {\n    echo $e->getTraceAsString();\n}","output":"#0 \/home\/bjori\/tmp\/ex.php(7): test()\n#1 {main}"}],"error::__tostring":[{"title":"Error::__toString() example","source":"try {\n    throw new Error(\"Some error message\");\n} catch(Error $e) {\n    echo $e;\n}","output":"Error: Some error message in \/home\/bjori\/tmp\/ex.php:3\nStack trace:\n#0 {main}"}],"errorexception::getseverity":[{"title":"ErrorException::getSeverity() example","source":"try {\n    throw new ErrorException(\"Exception message\", 0, E_USER_ERROR);\n} catch(ErrorException $e) {\n    echo \"This exception severity is: \" . $e->getSeverity();\n    var_dump($e->getSeverity() === E_USER_ERROR);\n}","output":"This exception severity is: 256\nbool(true)"}],"ev::embeddablebackends":[{"title":"Embedding loop created with kqueue backend into the default loop","source":"\/*\n* Check if kqueue is available but not recommended and create a kqueue backend\n* for use with sockets (which usually work with any kqueue implementation).\n* Store the kqueue\/socket-only event loop in loop_socket. (One might optionally\n* use EVFLAG_NOENV, too)\n*\n* Example borrowed from\n* http:\/\/pod.tst.eu\/http:\/\/cvs.schmorp.de\/libev\/ev.pod#Examples_CONTENT-9\n*\/\n$loop        = EvLoop::defaultLoop();\n$socket_loop = NULL;\n$embed       = NULL;\n\nif (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {\n if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {\n  $embed = new EvEmbed($loop);\n }\n}\n\nif (!$socket_loop) {\n $socket_loop = $loop;\n}\n\n\/\/ Now use $socket_loop for all sockets, and $loop for anything else","output":null}],"ev::recommendedbackends":[{"title":"Embedding one loop into another","source":"\/*\n* Try to get an embeddable event loop and embed it into the default event loop.\n* If it is impossible, use the default\n* loop. The default loop is stored in $loop_hi, while the embeddable loop is\n* stored in $loop_lo(which is $loop_hi in the case no embeddable loop can be\n* used).\n*\n* Sample translated to PHP\n* http:\/\/pod.tst.eu\/http:\/\/cvs.schmorp.de\/libev\/ev.pod#Examples_CONTENT-9\n*\/\n$loop_hi = EvLoop::defaultLoop();\n$loop_lo = NULL;\n$embed   = NULL;\n\n\/*\n* See if there is a chance of getting one that works\n* (flags' value of 0 means autodetection)\n*\/\n$loop_lo = Ev::embeddableBackends() & Ev::recommendedBackends()\n ? new EvLoop(Ev::embeddableBackends() & Ev::recommendedBackends())\n : 0;\n\nif ($loop_lo) {\n $embed = new EvEmbed($loop_lo, function () {});\n} else {\n $loop_lo = $loop_hi;\n}","output":null}],"ev::supportedbackends":[{"title":"Embedding loop created with kqueue backend into the default loop","source":"\/*\n* Check if kqueue is available but not recommended and create a kqueue backend\n* for use with sockets (which usually work with any kqueue implementation).\n* Store the kqueue\/socket-only event loop in loop_socket. (One might optionally\n* use EVFLAG_NOENV, too)\n*\n* Example borrowed from\n* http:\/\/pod.tst.eu\/http:\/\/cvs.schmorp.de\/libev\/ev.pod#Examples_CONTENT-9\n*\/\n$loop        = EvLoop::defaultLoop();\n$socket_loop = NULL;\n$embed       = NULL;\n\nif (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {\n if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {\n  $embed = new EvEmbed($loop);\n }\n}\n\nif (!$socket_loop) {\n $socket_loop = $loop;\n}\n\n\/\/ Now use $socket_loop for all sockets, and $loop for anything else","output":null}],"evembed::__construct":[{"title":"Embedding loop created with kqueue backend into the default loop","source":"\/*\n * Check if kqueue is available but not recommended and create a kqueue backend\n * for use with sockets (which usually work with any kqueue implementation).\n * Store the kqueue\/socket-only event loop in loop_socket. (One might optionally\n * use EVFLAG_NOENV, too)\n *\n * Example borrowed from\n * http:\/\/pod.tst.eu\/http:\/\/cvs.schmorp.de\/libev\/ev.pod#Examples_CONTENT-9\n *\/\n$loop        = EvLoop::defaultLoop();\n$socket_loop = NULL;\n$embed       = NULL;\n\nif (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {\n    if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {\n        $embed = new EvEmbed($loop);\n    }\n}\n\nif (!$socket_loop) {\n    $socket_loop = $loop;\n}\n\n\/\/ Now use $socket_loop for all sockets, and $loop for anything else","output":null}],"event::addsignal":[{"title":"Event::addSignal() example","source":"\/*\nLaunch it in a terminal window:\n\n$ php examples\/signal.php\n\nIn another terminal window find out the pid and send SIGTERM, e.g.:\n\n$ ps aux | grep examp\nruslan    3976  0.2  0.0 139896 11256 pts\/1    S+   10:25   0:00 php examples\/signal.php\nruslan    3978  0.0  0.0   9572   864 pts\/2    S+   10:26   0:00 grep --color=auto examp\n$ kill -TERM 3976\n\nAt the first terminal window you should catch the following:\n\nCaught signal 15\n*\/\nclass MyEventSignal {\n    private $base, $ev;\n\n    public function __construct($base) {\n        $this->base = $base;\n        $this->ev = Event::signal($base, SIGTERM, array($this, 'eventSighandler'));\n        $this->ev->addSignal();\n    }\n\n    public function eventSighandler($no, $c) {\n        echo \"Caught signal $no\\n\";\n        $this->base->exit();\n    }\n}\n\n$base = new EventBase();\n$c    = new MyEventSignal($base);\n\n$base->loop();","output":"Caught signal 15"}],"event::addtimer":[{"title":"Event::addTimer() example","source":"$base = new EventBase();\n$n = 2;\n$e = Event::timer($base, function($n) use (&$e) {\n    echo \"$n seconds elapsed\\n\";\n    $e->delTimer();\n}, $n);\n$e->addTimer($n);\n$base->loop();","output":"2 seconds elapsed"}],"eventbase::getfeatures":[{"title":"EventBase::getFeatures() example","source":"\/\/ Avoiding \"select\" method\n$cfg = new EventConfig();\nif ($cfg->avoidMethod(\"select\")) {\n    echo \"`select' method avoided\\n\";\n}\n\n$base = new EventBase($cfg);\n\necho \"Features:\\n\";\n$features = $base->getFeatures();\n($features & EventConfig::FEATURE_ET) and print(\"ET - edge-triggered IO\\n\");\n($features & EventConfig::FEATURE_O1) and print(\"O1 - O(1) operation for adding\/deletting events\\n\");\n($features & EventConfig::FEATURE_FDS) and print(\"FDS - arbitrary file descriptor types, and not just sockets\\n\");","output":null}],"eventbase::getmethod":[{"title":"EventBase::getMethod() example","source":"$cfg = new EventConfig();\nif ($cfg->avoidMethod(\"select\")) {\n    echo \"`select' method avoided\\n\";\n}\n\n\/\/ Create event_base associated with the config\n$base = new EventBase($cfg);\necho \"Event method used: \", $base->getMethod(), PHP_EOL;","output":"`select' method avoided\nEvent method used: epoll"}],"eventbuffer::search":[{"title":"EventBuffer::search() example","source":"\/\/ Count total occurances of 'str' in 'buf'\nfunction count_instances($buf, $str) {\n    $total = 0;\n    $p     = 0;\n    $i     = 0;\n\n    while (1) {\n        $p = $buf->search($str, $p);\n        if ($p === FALSE) {\n            break;\n        }\n        ++$total;\n        ++$p;\n    }\n\n    return $total;\n}\n\n$buf = new EventBuffer();\n$buf->add(\"Some string within a string inside another string\");\nvar_dump(count_instances($buf, \"str\"));","output":"int(3)"}],"eventbufferevent::connect":[{"title":"EventBufferEvent::connect() example","source":"\/*\n * 1. Connect to 127.0.0.1 at port 80\n * by means of EventBufferEvent::connect().\n *\n * 2. Request \/index.cphp via HTTP\/1.0\n * using the output buffer.\n *\n * 3. Asyncronously read the response and print it to stdout.\n *\/\n\n\/* Read callback *\/\nfunction readcb($bev, $base) {\n    $input = $bev->getInput();\n\n    while (($n = $input->remove($buf, 1024)) > 0) {\n        echo $buf;\n    }\n}\n\n\/* Event callback *\/\nfunction eventcb($bev, $events, $base) {\n    if ($events & EventBufferEvent::CONNECTED) {\n        echo \"Connected.\\n\";\n    } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {\n        if ($events & EventBufferEvent::ERROR) {\n            echo \"DNS error: \", $bev->getDnsErrorString(), PHP_EOL;\n        }\n\n        echo \"Closing\\n\";\n        $base->exit();\n        exit(\"Done\\n\");\n    }\n}\n\n$base = new EventBase();\n\necho \"step 1\\n\";\n$bev = new EventBufferEvent($base, \/* use internal socket *\/ NULL,\n    EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS);\nif (!$bev) {\n    exit(\"Failed creating bufferevent socket\\n\");\n}\n\necho \"step 2\\n\";\n$bev->setCallbacks(\"readcb\", \/* writecb *\/ NULL, \"eventcb\", $base);\n$bev->enable(Event::READ | Event::WRITE);\n\necho \"step 3\\n\";\n\/* Send request *\/\n$output = $bev->getOutput();\nif (!$output->add(\n    \"GET \/index.cphp HTTP\/1.0\\r\\n\".\n    \"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\"Failed adding request to output buffer\\n\");\n}\n\n\/* Connect to the host syncronously.\n * We know the IP, and don't need to resolve DNS. *\/\nif (!$bev->connect(\"127.0.0.1:80\")) {\n    exit(\"Can't connect to host\\n\");\n}\n\n\/* Dispatch pending events *\/\n$base->dispatch();","output":"step 1\nstep 2\nstep 3\nConnected.\nHTTP\/1.1 200 OK\nServer: nginx\/1.2.6\nDate: Sat, 09 Mar 2013 10:06:58 GMT\nContent-Type: text\/html; charset=utf-8\nConnection: close\nX-Powered-By: PHP\/5.4.11--pl2-gentoo\n\nsdfsdfsf\nClosing\nDone"},{"title":"Connect to UNIX domain socket which presumably is served by a server, read response from the server and output it to the console","source":"class MyUnixSocketClient {\n    private $base, $bev;\n\n    function __construct($base, $sock_path) {\n        $this->base = $base;\n        $this->bev = new EventBufferEvent($base, NULL, EventBufferEvent::OPT_CLOSE_ON_FREE,\n            array ($this, \"read_cb\"), NULL, array ($this, \"event_cb\"));\n\n        if (!$this->bev->connect(\"unix:$sock_path\")) {\n            trigger_error(\"Failed to connect to socket `$sock_path'\", E_USER_ERROR);\n        }\n\n        $this->bev->enable(Event::READ);\n    }\n\n    function __destruct() {\n        if ($this->bev) {\n            $this->bev->free();\n            $this->bev = NULL;\n        }\n    }\n\n    function dispatch() {\n        $this->base->dispatch();\n    }\n\n    function read_cb($bev, $unused) {\n        $in = $bev->input;\n\n        printf(\"Received %ld bytes\\n\", $in->length);\n        printf(\"----- data ----\\n\");\n        printf(\"%ld:\\t%s\\n\", (int) $in->length, $in->pullup(-1));\n\n        $this->bev->free();\n        $this->bev = NULL;\n        $this->base->exit(NULL);\n    }\n\n    function event_cb($bev, $events, $unused) {\n        if ($events & EventBufferEvent::ERROR) {\n            echo \"Error from bufferevent\\n\";\n        }\n\n        if ($events & (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {\n            $bev->free();\n            $bev = NULL;\n        } elseif ($events & EventBufferEvent::CONNECTED) {\n            $bev->output->add(\"test\\n\");\n        }\n    }\n}\n\nif ($argc <= 1) {\n    exit(\"Socket path is not provided\\n\");\n}\n$sock_path = $argv[1];\n\n$base = new EventBase();\n$cl = new MyUnixSocketClient($base, $sock_path);\n$cl->dispatch();","output":"Received 5 bytes\n----- data ----\n5:  test"}],"eventbufferevent::connecthost":[{"title":"EventBufferEvent::connectHost() example","source":"\/* Read callback *\/\nfunction readcb($bev, $base) {\n    \/\/$input = $bev->input; \/\/$bev->getInput();\n\n    \/\/$pos = $input->search(\"TTP\");\n    $pos = $bev->input->search(\"TTP\");\n\n    while (($n = $bev->input->remove($buf, 1024)) > 0) {\n        echo $buf;\n    }\n}\n\n\/* Event callback *\/\nfunction eventcb($bev, $events, $base) {\n    if ($events & EventBufferEvent::CONNECTED) {\n        echo \"Connected.\\n\";\n    } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {\n        if ($events & EventBufferEvent::ERROR) {\n            echo \"DNS error: \", $bev->getDnsErrorString(), PHP_EOL;\n        }\n\n        echo \"Closing\\n\";\n        $base->exit();\n        exit(\"Done\\n\");\n    }\n}\n\n$base = new EventBase();\n\n$dns_base = new EventDnsBase($base, TRUE); \/\/ We'll use async DNS resolving\nif (!$dns_base) {\n    exit(\"Failed to init DNS Base\\n\");\n}\n\n$bev = new EventBufferEvent($base, \/* use internal socket *\/ NULL,\n    EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,\n    \"readcb\", \/* writecb *\/ NULL, \"eventcb\", $base\n);\nif (!$bev) {\n    exit(\"Failed creating bufferevent socket\\n\");\n}\n\n\/\/$bev->setCallbacks(\"readcb\", \/* writecb *\/ NULL, \"eventcb\", $base);\n$bev->enable(Event::READ | Event::WRITE);\n\n$output = $bev->output; \/\/$bev->getOutput();\nif (!$output->add(\n    \"GET {$argv[2]} HTTP\/1.0\\r\\n\".\n    \"Host: {$argv[1]}\\r\\n\".\n    \"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\"Failed adding request to output buffer\\n\");\n}\n\nif (!$bev->connectHost($dns_base, $argv[1], 80, EventUtil::AF_UNSPEC)) {\n    exit(\"Can't connect to host {$argv[1]}\\n\");\n}\n\n$base->dispatch();","output":"Connected.\nHTTP\/1.0 301 Moved Permanently\nLocation: http:\/\/www.google.co.uk\/\nContent-Type: text\/html; charset=UTF-8\nDate: Sat, 09 Mar 2013 12:21:19 GMT\nExpires: Mon, 08 Apr 2013 12:21:19 GMT\nCache-Control: public, max-age=2592000\nServer: gws\nContent-Length: 221\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: SAMEORIGIN\n\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text\/html;charset=utf-8\">\n<TITLE>301 Moved<\/TITLE><\/HEAD><BODY>\n<H1>301 Moved<\/H1>\nThe document has moved\n<A HREF=\"http:\/\/www.google.co.uk\/\">here<\/A>.\n<\/BODY><\/HTML>\nClosing\nDone"}],"eventbufferevent::getinput":[{"title":"Buffer event's read callback","source":"function readcb($bev, $base) {\n    $input = $bev->input; \/\/$bev->getInput();\n\n    while (($n = $input->remove($buf, 1024)) > 0) {\n        echo $buf;\n    }\n}","output":null}],"eventbufferevent::getoutput":[{"title":"EventBufferEvent::getOutput() example","source":"$base = new EventBase();\n\n$dns_base = new EventDnsBase($base, TRUE); \/\/ Use async DNS resolving\nif (!$dns_base) {\n    exit(\"Failed to init DNS Base\\n\");\n}\n\n$bev = new EventBufferEvent($base, \/* use internal socket *\/ NULL,\n    EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,\n    \"readcb\", \/* writecb *\/ NULL, \"eventcb\", $base\n);\nif (!$bev) {\n    exit(\"Failed creating bufferevent socket\\n\");\n}\n\n$bev->enable(Event::READ | Event::WRITE);\n\n$output = $bev->getOutput();\nif (!$output->add(\n    \"GET {$argv[2]} HTTP\/1.0\\r\\n\".\n    \"Host: {$argv[1]}\\r\\n\".\n    \"Connection: Close\\r\\n\\r\\n\"\n)) {\n    exit(\"Failed adding request to output buffer\\n\");\n}\n\n\/* ... *\/","output":null}],"eventbufferevent::sslerror":[{"title":"EventBufferEvent::sslError() example","source":"\/\/ This callback is invoked when some even occurs on the event listener,\n\/\/ e.g. connection closed, or an error occured\nfunction ssl_event_cb($bev, $events, $ctx) {\n    if ($events & EventBufferEvent::ERROR) {\n        \/\/ Fetch errors from the SSL error stack\n        while ($err = $bev->sslError()) {\n            fprintf(STDERR, \"Bufferevent error %s.\\n\", $err);\n        }\n    }\n\n    if ($events & (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {\n        $bev->free();\n    }\n}","output":null}],"eventbufferevent::sslfilter":[{"title":"Simple SMTP server","source":"\/*\n * Author: Andrew Rose <hello at andrewrose dot co dot uk>\n *\n * Usage:\n * 1) Prepare cert.pem certificate and privkey.pem private key files.\n * 2) Launch the server script\n * 3) Open TLS connection, e.g.:\n *      $ openssl s_client -connect localhost:25 -starttls smtp -crlf\n * 4) Start testing the commands listed in `cmd` method below.\n *\/\n\nclass Handler {\n    public $domainName = FALSE;\n    public $connections = [];\n    public $buffers = [];\n    public $maxRead = 256000;\n\n    public function __construct() {\n        $this->ctx = new EventSslContext(EventSslContext::SSLv3_SERVER_METHOD, [\n            EventSslContext::OPT_LOCAL_CERT  => 'cert.pem',\n            EventSslContext::OPT_LOCAL_PK    => 'privkey.pem',\n            \/\/EventSslContext::OPT_PASSPHRASE  => '',\n            EventSslContext::OPT_VERIFY_PEER => false, \/\/ change to true with authentic cert\n            EventSslContext::OPT_ALLOW_SELF_SIGNED => true \/\/ change to false with authentic cert\n        ]);\n\n        $this->base = new EventBase();\n        if (!$this->base) {\n            exit(\"Couldn't open event base\\n\");\n        }\n\n        if (!$this->listener = new EventListener($this->base,\n            [$this, 'ev_accept'],\n            $this->ctx,\n            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,\n            -1,\n            '0.0.0.0:25'))\n        {\n            exit(\"Couldn't create listener\\n\");\n        }\n\n        $this->listener->setErrorCallback([$this, 'ev_error']);\n        $this->base->dispatch();\n    }\n\n    public function ev_accept($listener, $fd, $address, $ctx) {\n        static $id = 0;\n        $id += 1;\n\n        $this->connections[$id]['clientData'] = '';\n        $this->connections[$id]['cnx'] = new EventBufferEvent($this->base, $fd,\n            EventBufferEvent::OPT_CLOSE_ON_FREE);\n\n        if (!$this->connections[$id]['cnx']) {\n            echo \"Failed creating buffer\\n\";\n            $this->base->exit(NULL);\n            exit(1);\n        }\n\n        $this->connections[$id]['cnx']->setCallbacks([$this, \"ev_read\"], NULL,\n            [$this, 'ev_error'], $id);\n        $this->connections[$id]['cnx']->enable(Event::READ | Event::WRITE);\n\n        $this->ev_write($id, '220 '.$this->domainName.\" wazzzap?\\r\\n\");\n    }\n\n    function ev_error($listener, $ctx) {\n        $errno = EventUtil::getLastSocketErrno();\n\n        fprintf(STDERR, \"Got an error %d (%s) on the listener. Shutting down.\\n\",\n            $errno, EventUtil::getLastSocketError());\n\n        if ($errno != 0) {\n            $this->base->exit(NULL);\n            exit();\n        }\n    }\n\n    public function ev_close($id) {\n        $this->connections[$id]['cnx']->disable(Event::READ | Event::WRITE);\n        unset($this->connections[$id]);\n    }\n\n    protected function ev_write($id, $string) {\n        echo 'S('.$id.'): '.$string;\n        $this->connections[$id]['cnx']->write($string);\n    }\n\n    public function ev_read($buffer, $id) {\n        while($buffer->input->length > 0) {\n            $this->connections[$id]['clientData'] .= $buffer->input->read($this->maxRead);\n            $clientDataLen = strlen($this->connections[$id]['clientData']);\n\n            if($this->connections[$id]['clientData'][$clientDataLen-1] == \"\\n\"\n                && $this->connections[$id]['clientData'][$clientDataLen-2] == \"\\r\")\n            {\n                \/\/ remove the trailing \\r\\n\n                $line = substr($this->connections[$id]['clientData'], 0,\n                    strlen($this->connections[$id]['clientData']) - 2);\n\n                $this->connections[$id]['clientData'] = '';\n                $this->cmd($buffer, $id, $line);\n            }\n        }\n    }\n\n    protected function cmd($buffer, $id, $line) {\n        switch ($line) {\n            case strncmp('EHLO ', $line, 4):\n                $this->ev_write($id, \"250-STARTTLS\\r\\n\");\n                $this->ev_write($id, \"250 OK ehlo\\r\\n\");\n                break;\n\n            case strncmp('HELO ', $line, 4):\n                $this->ev_write($id, \"250-STARTTLS\\r\\n\");\n                $this->ev_write($id, \"250 OK helo\\r\\n\");\n                break;\n\n            case strncmp('QUIT', $line, 3):\n                $this->ev_write($id, \"250 OK quit\\r\\n\");\n                $this->ev_close($id);\n                break;\n\n            case strncmp('STARTTLS', $line, 3):\n                $this->ev_write($id, \"220 Ready to start TLS\\r\\n\");\n                $this->connections[$id]['cnx'] = EventBufferEvent::sslFilter($this->base,\n                    $this->connections[$id]['cnx'], $this->ctx,\n                    EventBufferEvent::SSL_ACCEPTING,\n                    EventBufferEvent::OPT_CLOSE_ON_FREE);\n                $this->connections[$id]['cnx']->setCallbacks([$this, \"ev_read\"], NULL, [$this, 'ev_error'], $id);\n                $this->connections[$id]['cnx']->enable(Event::READ | Event::WRITE);\n                break;\n\n            default:\n                echo 'unknown command: '.$line.\"\\n\";\n                break;\n        }\n    }\n}\n\nnew Handler();","output":null}],"eventconfig::avoidmethod":[{"title":"EventConfig::avoidMethod() example","source":"$cfg = new EventConfig();\nif ($cfg->avoidMethod(\"select\")) {\n    echo \"`select' method avoided\\n\";\n}","output":null}],"eventconfig::__construct":[{"title":"EventConfig::__construct() example","source":"\/\/ Avoiding \"select\" method\n$cfg = new EventConfig();\nif ($cfg->avoidMethod(\"select\")) {\n    echo \"`select' method avoided\\n\";\n}\n\n\/\/ Create event_base associated with the config\n$base = new EventBase($cfg);\n\n\/* Now $base is configured to avoid select backend(method) *\/","output":null}],"eventconfig::requirefeatures":[{"title":"EventConfig::requireFeatures() example","source":"$cfg = new EventConfig();\n\n\/\/ Create event_base associated with the config\n$base = new EventBase($cfg);\n\n\/\/ Require FDS feature\nif ($cfg->requireFeatures(EventConfig::FEATURE_FDS)) {\n    echo \"FDS feature is now requried\\n\";\n\n    $base = new EventBase($cfg);\n    ($base->getFeatures() & EventConfig::FEATURE_FDS)\n        and print(\"FDS - arbitrary file descriptor types, and not just sockets\\n\");\n}","output":"FDS feature is now requried\nFDS - arbitrary file descriptor types, and not just sockets"}],"eventhttp::accept":[{"title":"EventHttp::accept() example","source":"$base = new EventBase();\n$http = new EventHttp($base);\n\n$addresses = array (\n     8091 => \"127.0.0.1\",\n     8092 => \"127.0.0.2\",\n);\n$i = 0;\n\n$socket = array();\n\nforeach ($addresses as $port => $ip) {\n    echo $ip, \" \", $port, PHP_EOL;\n    $socket[$i] = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if (!socket_bind($socket[$i], $ip, $port)) {\n        exit(\"socket_bind failed\\n\");\n    }\n    socket_listen($socket[$i], 0);\n    socket_set_nonblock($socket[$i]);\n\n    if (!$http->accept($socket[$i])) {\n        echo \"Accept failed\\n\";\n        exit(1);\n    }\n\n    ++$i;\n}\n\n$http->setCallback(\"\/some-page\", function() {\n echo \"(some-page)\\n\";\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n});\n\n$http->setDefaultCallback(function($req) {\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n});\n\n$signal = Event::signal($base, SIGINT, function () use ($base) {\n    echo \"Caught SIGINT. Stopping...\\n\";\n    $base->stop();\n});\n$signal->add();\n\n$base->dispatch();\necho \"END\\n\";\n\/\/ We didn't close sockets, since Libevent already sets\n\/\/ CLOSE_ON_FREE and CLOSE_ON_EXEC flags on the file \n\/\/ descriptor associated with the sockets.","output":"Client:\n$ nc 127.0.0.1 8091\nGET \/about HTTP\/1.0\nConnection: close\n\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close\n\nServer:\n127.0.0.1 8091\n127.0.0.2 8092\nURI: \/about\nOK"}],"eventhttp::addserveralias":[{"title":"EventHttp::addServerAlias() example","source":"$base = new EventBase();\n$http = new EventHttp($base);\n\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\nif (!$http->bind(\"127.0.0.1\", 8088)) {\n    exit(\"bind(1) failed\\n\");\n};\n\nif (!$http->addServerAlias(\"local.net\")) {\n    exit(\"Failed to add server alias\\n\");\n}\n\n$http->setCallback(\"\/about\", function($req) {\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    $req->sendReply(200, \"OK\");\n});\n$base->dispatch();","output":null}],"eventhttp::bind":[{"title":"EventHttp::bind() example","source":"$base = new EventBase();\n$http = new EventHttp($base);\n\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\nif (!$http->bind(\"127.0.0.1\", 8088)) {\n    exit(\"bind(1) failed\\n\");\n};\nif (!$http->bind(\"127.0.0.1\", 8089)) {\n    exit(\"bind(2) failed\\n\");\n};\n\n$http->setCallback(\"\/about\", function($req) {\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n});\n\n$base->dispatch();","output":"Client:\n\n$ nc 127.0.0.1 8088\nGET \/about HTTP\/1.0\nConnection: close\n\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close\n\n$ nc 127.0.0.1 8089\nGET \/unknown HTTP\/1.0\nConnection: close\n\nHTTP\/1.1 404 Not Found\nContent-Type: text\/html\nDate: Wed, 13 Mar 2013 04:14:41 GMT\nContent-Length: 149\nConnection: close\n\n<html><head><title>404 Not Found<\/title><\/head><body><h1>Not Found<\/h1><p>The requested URL \/unknown was not found on this server.<\/p><\/body><\/html>\n\nServer:\nURI: \/about\nOK"}],"eventhttp::__construct":[{"title":"Simple HTTP server","source":"\/*\n * Simple HTTP server.\n *\n * To test it:\n * 1) Run it on a port of your choice, e.g.:\n * $ php examples\/http.php 8010\n * 2) In another terminal connect to some address on this port\n * and make GET or POST request(others are turned off here), e.g.:\n * $ nc -t 127.0.0.1 8010\n * POST \/about HTTP\/1.0\n * Content-Type: text\/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * It will output\n * a=12\n * HTTP\/1.0 200 OK\n * Content-Type: text\/html; charset=ISO-8859-1\n * Connection: close\n *\n * $ nc -t 127.0.0.1 8010\n * GET \/dump HTTP\/1.0\n * Content-Type: text\/plain\n * Content-Encoding: UTF-8\n * Connection: close\n * (press Enter)\n *\n * It will output:\n * HTTP\/1.0 200 OK\n * Content-Type: text\/html; charset=ISO-8859-1\n * Connection: close\n * (press Enter)\n *\n * $ nc -t 127.0.0.1 8010\n * GET \/unknown HTTP\/1.0\n * Connection: close\n *\n * It will output:\n * HTTP\/1.0 200 OK\n * Content-Type: text\/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) See what the server outputs on the previous terminal window.\n *\/\n\nfunction _http_dump($req, $data) {\n    static $counter      = 0;\n    static $max_requests = 2;\n\n    if (++$counter >= $max_requests)  {\n        echo \"Counter reached max requests $max_requests. Exiting\\n\";\n        exit();\n    }\n\n    echo __METHOD__, \" called\\n\";\n    echo \"request:\"; var_dump($req);\n    echo \"data:\"; var_dump($data);\n\n    echo \"\\n===== DUMP =====\\n\";\n    echo \"Command:\", $req->getCommand(), PHP_EOL;\n    echo \"URI:\", $req->getUri(), PHP_EOL;\n    echo \"Input headers:\"; var_dump($req->getInputHeaders());\n    echo \"Output headers:\"; var_dump($req->getOutputHeaders());\n\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n\n    echo \"\\n >> Reading input buffer ...\\n\";\n    $buf = $req->getInputBuffer();\n    while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {\n        echo $s, PHP_EOL;\n    }\n    echo \"No more data in the buffer\\n\";\n}\n\nfunction _http_about($req) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\nfunction _http_default($req, $data) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\n$port = 8010;\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Invalid port\");\n}\n\n$base = new EventBase();\n$http = new EventHttp($base);\n$http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);\n\n$http->setCallback(\"\/dump\", \"_http_dump\", array(4, 8));\n$http->setCallback(\"\/about\", \"_http_about\");\n$http->setDefaultCallback(\"_http_default\", \"custom data value\");\n\n$http->bind(\"0.0.0.0\", 8010);\n$base->loop();","output":"a=12\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close\n\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close\n(press Enter)\n\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close"}],"eventhttp::setcallback":[{"title":"EventHttp::setCallback() example","source":"\/*\n * Simple HTTP server.\n *\n * To test it:\n * 1) Run it on a port of your choice, e.g.:\n * $ php examples\/http.php 8010\n * 2) In another terminal connect to some address on this port\n * and make GET or POST request(others are turned off here), e.g.:\n * $ nc -t 127.0.0.1 8010\n * POST \/about HTTP\/1.0\n * Content-Type: text\/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * It will output\n * a=12\n * HTTP\/1.0 200 OK\n * Content-Type: text\/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) See what the server outputs on the previous terminal window.\n *\/\n\nfunction _http_dump($req, $data) {\n    static $counter      = 0;\n    static $max_requests = 2;\n\n    if (++$counter >= $max_requests)  {\n        echo \"Counter reached max requests $max_requests. Exiting\\n\";\n        exit();\n    }\n\n    echo __METHOD__, \" called\\n\";\n    echo \"request:\"; var_dump($req);\n    echo \"data:\"; var_dump($data);\n\n    echo \"\\n===== DUMP =====\\n\";\n    echo \"Command:\", $req->getCommand(), PHP_EOL;\n    echo \"URI:\", $req->getUri(), PHP_EOL;\n    echo \"Input headers:\"; var_dump($req->getInputHeaders());\n    echo \"Output headers:\"; var_dump($req->getOutputHeaders());\n\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n\n    echo \"\\n >> Reading input buffer ...\\n\";\n    $buf = $req->getInputBuffer();\n    while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {\n        echo $s, PHP_EOL;\n    }\n    echo \"No more data in the buffer\\n\";\n}\n\nfunction _http_about($req) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\nfunction _http_default($req, $data) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\n$port = 8010;\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Invalid port\");\n}\n\n$base = new EventBase();\n$http = new EventHttp($base);\n$http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);\n\n$http->setCallback(\"\/dump\", \"_http_dump\", array(4, 8));\n$http->setCallback(\"\/about\", \"_http_about\");\n$http->setDefaultCallback(\"_http_default\", \"custom data value\");\n\n$http->bind(\"0.0.0.0\", 8010);\n$base->loop();","output":"a=12\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close"}],"eventhttp::setdefaultcallback":[{"title":"EventHttp::setDefaultCallback() example","source":"$base = new EventBase();\n$http = new EventHttp($base);\n\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\nif (!$http->bind(\"127.0.0.1\", 8088)) {\n    exit(\"bind(1) failed\\n\");\n};\n\n$http->setDefaultCallback(function($req) {\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    $req->sendReply(200, \"OK\");\n});\n\n$base->dispatch();","output":null}],"eventhttpconnection::makerequest":[{"title":"EventHttpConnection::makeRequest() example","source":"function _request_handler($req, $base) {\n    echo __FUNCTION__, PHP_EOL;\n\n    if (is_null($req)) {\n        echo \"Timed out\\n\";\n    } else {\n        $response_code = $req->getResponseCode();\n\n        if ($response_code == 0) {\n            echo \"Connection refused\\n\";\n        } elseif ($response_code != 200) {\n            echo \"Unexpected response: $response_code\\n\";\n        } else {\n            echo \"Success: $response_code\\n\";\n            $buf = $req->getInputBuffer();\n            echo \"Body:\\n\";\n            while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {\n                echo $s, PHP_EOL;\n            }\n        }\n    }\n\n    $base->exit(NULL);\n}\n\n$address = \"127.0.0.1\";\n$port = 80;\n\n$base = new EventBase();\n$conn = new EventHttpConnection($base, NULL, $address, $port);\n$conn->setTimeout(5);\n$req = new EventHttpRequest(\"_request_handler\", $base);\n\n$req->addHeader(\"Host\", $address, EventHttpRequest::OUTPUT_HEADER);\n$req->addHeader(\"Content-Length\", \"0\", EventHttpRequest::OUTPUT_HEADER);\n$conn->makeRequest($req, EventHttpRequest::CMD_GET, \"\/index.cphp\");\n\n$base->loop();","output":"_request_handler\nSuccess: 200\nBody:\nPHP, date:\n2013-03-13T20:27:52+05:00"}],"eventhttpconnection::setclosecallback":[{"title":"EventHttpConnection::setCloseCallback() example","source":"\/*\n * Setting up close-connection callback\n *\n * The script handles closed connections using HTTP API.\n *\n * Usage:\n * 1) Launch the server:\n * $ php examples\/http_closecb.php 4242\n *\n * 2) Launch a client in another terminal. Telnet-like\n * session should look like the following:\n *\n * $ nc -t 127.0.0.1 4242\n * GET \/ HTTP\/1.0\n * Connection: close\n *\n * The server will output something similar to the following:\n *\n * HTTP\/1.0 200 OK\n * Content-Type: multipart\/x-mixed-replace;boundary=boundarydonotcross\n * Connection: close\n *\n * <html>\n *\n * 3) Terminate the client connection abruptly,\n * i.e. kill the process, or just press Ctrl-C.\n *\n * 4) Check if the server called _close_callback.\n * The script should output \"_close_callback\" string to standard output.\n *\n * 5) Check if the server's process has no orphaned connections,\n * e.g. with `lsof` utility.\n *\/\n\nfunction _close_callback($conn)\n{\n    echo __FUNCTION__, PHP_EOL;\n}\n\nfunction _http_default($req, $dummy)\n{\n    $conn = $req->getConnection();\n    $conn->setCloseCallback('_close_callback', NULL);\n\n    \/*\n    By enabling Event::READ we protect the server against unclosed conections.\n    This is a peculiarity of Libevent. The library disables Event::READ events\n     on this connection, and the server is not notified about terminated\n    connections.\n\n    So each time client terminates connection abruptly, we get an orphaned\n    connection. For instance, the following is a part of `lsof -p $PID | grep TCP`\n    command after client has terminated connection:\n\n    57-php     15057 ruslan  6u  unix 0xffff8802fb59c780   0t0  125187 socket\n    58:php     15057 ruslan  7u  IPv4             125189   0t0     TCP *:4242 (LISTEN)\n    59:php     15057 ruslan  8u  IPv4             124342   0t0     TCP localhost:4242->localhost:37375 (CLOSE_WAIT)\n\n    where $PID is our process ID.\n\n    The following block of code fixes such kind of orphaned connections.\n     *\/\n    $bev = $req->getBufferEvent();\n    $bev->enable(Event::READ);\n    \/\/ We have to free it explicitly. See","output":null}],"eventhttprequest::__construct":[{"title":"EventHttpRequest::__construct() example","source":"function _request_handler($req, $base) {\n    echo __FUNCTION__, PHP_EOL;\n\n    if (is_null($req)) {\n        echo \"Timed out\\n\";\n    } else {\n        $response_code = $req->getResponseCode();\n\n        if ($response_code == 0) {\n            echo \"Connection refused\\n\";\n        } elseif ($response_code != 200) {\n            echo \"Unexpected response: $response_code\\n\";\n        } else {\n            echo \"Success: $response_code\\n\";\n            $buf = $req->getInputBuffer();\n            echo \"Body:\\n\";\n            while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {\n                echo $s, PHP_EOL;\n            }\n        }\n    }\n\n    $base->exit(NULL);\n}\n\n\n$address = \"127.0.0.1\";\n$port = 80;\n\n$base = new EventBase();\n$conn = new EventHttpConnection($base, NULL, $address, $port);\n$conn->setTimeout(5);\n$req = new EventHttpRequest(\"_request_handler\", $base);\n\n$req->addHeader(\"Host\", $address, EventHttpRequest::OUTPUT_HEADER);\n$req->addHeader(\"Content-Length\", \"0\", EventHttpRequest::OUTPUT_HEADER);\n$conn->makeRequest($req, EventHttpRequest::CMD_GET, \"\/index.cphp\");\n\n$base->loop();","output":null}],"eventhttprequest::senderror":[{"title":"EventHttpRequest::sendError() example","source":"function _http_400($req) {\n    $req->sendError(400);\n}\n\n$base = new EventBase();\n$http = new EventHttp($base);\n\n$http->setCallback(\"\/err400\", \"_http_400\");\n\n$http->bind(\"0.0.0.0\", 8010);\n$base->loop();","output":null}],"eventlistener::__construct":[{"title":"EventListener::__construct() example","source":"\/*\n * Simple echo server based on libevent's connection listener.\n *\n * Usage:\n * 1) In one terminal window run:\n *\n * $ php listener.php 9881\n *\n * 2) In another terminal window open up connection, e.g.:\n *\n * $ nc 127.0.0.1 9881\n *\n * 3) start typing. The server should repeat the input.\n *\/\n\nclass MyListenerConnection {\n    private $bev, $base;\n\n    public function __destruct() {\n        $this->bev->free();\n    }\n\n    public function __construct($base, $fd) {\n        $this->base = $base;\n\n        $this->bev = new EventBufferEvent($base, $fd, EventBufferEvent::OPT_CLOSE_ON_FREE);\n\n        $this->bev->setCallbacks(array($this, \"echoReadCallback\"), NULL,\n            array($this, \"echoEventCallback\"), NULL);\n\n        if (!$this->bev->enable(Event::READ)) {\n            echo \"Failed to enable READ\\n\";\n            return;\n        }\n    }\n\n    public function echoReadCallback($bev, $ctx) {\n        \/\/ Copy all the data from the input buffer to the output buffer\n        \n        \/\/ Variant #1\n        $bev->output->addBuffer($bev->input);\n\n        \/* Variant #2 *\/\n        \/*\n        $input    = $bev->getInput();\n        $output = $bev->getOutput();\n        $output->addBuffer($input);\n        *\/\n    }\n\n    public function echoEventCallback($bev, $events, $ctx) {\n        if ($events & EventBufferEvent::ERROR) {\n            echo \"Error from bufferevent\\n\";\n        }\n\n        if ($events & (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {\n            \/\/$bev->free();\n            $this->__destruct();\n        }\n    }\n}\n\nclass MyListener {\n    public $base,\n        $listener,\n        $socket;\n    private $conn = array();\n\n    public function __destruct() {\n        foreach ($this->conn as &$c) $c = NULL;\n    }\n\n    public function __construct($port) {\n        $this->base = new EventBase();\n        if (!$this->base) {\n            echo \"Couldn't open event base\";\n            exit(1);\n        }\n\n        \/\/ Variant #1\n        \/*\n        $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n        if (!socket_bind($this->socket, '0.0.0.0', $port)) {\n            echo \"Unable to bind socket\\n\";\n            exit(1);\n        }\n        $this->listener = new EventListener($this->base,\n            array($this, \"acceptConnCallback\"), $this->base,\n            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,\n            -1, $this->socket);\n         *\/\n\n        \/\/ Variant #2\n         $this->listener = new EventListener($this->base,\n             array($this, \"acceptConnCallback\"), $this->base,\n             EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE, -1,\n             \"0.0.0.0:$port\");\n\n        if (!$this->listener) {\n            echo \"Couldn't create listener\";\n            exit(1);\n        }\n\n        $this->listener->setErrorCallback(array($this, \"accept_error_cb\"));\n    }\n\n    public function dispatch() {\n        $this->base->dispatch();\n    }\n\n    \/\/ This callback is invoked when there is data to read on $bev\n    public function acceptConnCallback($listener, $fd, $address, $ctx) {\n        \/\/ We got a new connection! Set up a bufferevent for it. *\/\n        $base = $this->base;\n        $this->conn[] = new MyListenerConnection($base, $fd);\n    }\n\n    public function accept_error_cb($listener, $ctx) {\n        $base = $this->base;\n\n        fprintf(STDERR, \"Got an error %d (%s) on the listener. \"\n            .\"Shutting down.\\n\",\n            EventUtil::getLastSocketErrno(),\n            EventUtil::getLastSocketError());\n\n        $base->exit(NULL);\n    }\n}\n\n$port = 9808;\n\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Invalid port\");\n}\n\n$l = new MyListener($port);\n$l->dispatch();","output":null}],"eventsslcontext::__construct":[{"title":"EventSslContext::__construct() example","source":"$ctx = new EventSslContext(EventSslContext::SSLv3_SERVER_METHOD, array(\n     EventSslContext::OPT_LOCAL_CERT        => $local_cert,\n     EventSslContext::OPT_LOCAL_PK          => $local_pk,\n     EventSslContext::OPT_PASSPHRASE        => \"echo server\",\n     EventSslContext::OPT_VERIFY_PEER       => true,\n     EventSslContext::OPT_ALLOW_SELF_SIGNED => false,\n));","output":null}],"evperiodic::__construct":[{"title":"Periodic timer. Use reschedule callback","source":"\/\/ Tick each 10.5 seconds\n\nfunction reschedule_cb ($watcher, $now) {\n return $now + (10.5. - fmod($now, 10.5));\n}\n\n$w = new EvPeriodic(0., 0., \"reschedule_cb\", function ($w, $revents) {\n echo time(), PHP_EOL;\n});\nEv::run();","output":null},{"title":"Periodic timer. Tick every 10.5 seconds starting at now","source":"\/\/ Tick every 10.5 seconds starting at now\n$w = new EvPeriodic(fmod(Ev::now(), 10.5), 10.5, NULL, function ($w, $revents) {\n echo time(), PHP_EOL;\n});\nEv::run();","output":null},{"title":"Hourly watcher","source":"$hourly = EvPeriodic(0, 3600, NULL, function () {\n echo \"once per hour\\n\";\n});","output":null}],"evsignal::__construct":[{"title":"Handle SIGTERM signal","source":"$w = new EvSignal(SIGTERM, function ($watcher) {\n    echo \"SIGTERM received\\n\";\n    $watcher->stop();\n});\n\nEv::run();","output":null}],"evstat::attr":[{"title":"Monitor changes of \/var\/log\/messages","source":"\/\/ Use 10 second update interval.\n$w = new EvStat(\"\/var\/log\/messages\", 8, function ($w) {\n    echo \"\/var\/log\/messages changed\\n\";\n\n    $attr = $w->attr();\n\n    if ($attr['nlink']) {\n        printf(\"Current size: %ld\\n\", $attr['size']);\n        printf(\"Current atime: %ld\\n\", $attr['atime']);\n        printf(\"Current mtime: %ld\\n\", $attr['mtime']);\n    } else {\n        fprintf(STDERR, \"`messages` file is not there!\");\n        $w->stop();\n    }\n});\n\nEv::run();","output":null}],"evstat::__construct":[{"title":"Monitor changes of \/var\/log\/messages","source":"\/\/ Use 10 second update interval.\n$w = new EvStat(\"\/var\/log\/messages\", 8, function ($w) {\n echo \"\/var\/log\/messages changed\\n\";\n\n $attr = $w->attr();\n\n if ($attr['nlink']) {\n  printf(\"Current size: %ld\\n\", $attr['size']);\n  printf(\"Current atime: %ld\\n\", $attr['atime']);\n  printf(\"Current mtime: %ld\\n\", $attr['mtime']);\n } else {\n  fprintf(STDERR, \"`messages` file is not there!\");\n  $w->stop();\n }\n});\n\nEv::run();","output":null}],"evtimer::__construct":[{"title":"Simple timers","source":"\/\/ Create and start timer firing after 2 seconds\n$w1 = new EvTimer(2, 0, function () {\n    echo \"2 seconds elapsed\\n\";\n});\n\n\/\/ Create and launch timer firing after 2 seconds repeating each second\n\/\/ until we manually stop it\n$w2 = new EvTimer(2, 1, function ($w) {\n    echo \"is called every second, is launched after 2 seconds\\n\";\n    echo \"iteration = \", Ev::iteration(), PHP_EOL;\n\n    \/\/ Stop the watcher after 5 iterations\n    Ev::iteration() == 5 and $w->stop();\n    \/\/ Stop the watcher if further calls cause more than 10 iterations\n    Ev::iteration() >= 10 and $w->stop();\n});\n\n\/\/ Create stopped timer. It will be inactive until we start it ourselves\n$w_stopped = EvTimer::createStopped(10, 5, function($w) {\n    echo \"Callback of a timer created as stopped\\n\";\n\n    \/\/ Stop the watcher after 2 iterations\n    Ev::iteration() >= 2 and $w->stop();\n});\n\n\/\/ Loop until Ev::stop() is called or all of watchers stop\nEv::run();\n\n\/\/ Start and look if it works\n$w_stopped->start();\necho \"Run single iteration\\n\";\nEv::run(Ev::RUN_ONCE);\n\necho \"Restart the second watcher and try to handle the same events, but don't block\\n\";\n$w2->again();\nEv::run(Ev::RUN_NOWAIT);\n\n$w = new EvTimer(10, 0, function() {});\necho \"Running a blocking loop\\n\";\nEv::run();\necho \"END\\n\";","output":"2 seconds elapsed\nis called every second, is launched after 2 seconds\niteration = 1\nis called every second, is launched after 2 seconds\niteration = 2\nis called every second, is launched after 2 seconds\niteration = 3\nis called every second, is launched after 2 seconds\niteration = 4\nis called every second, is launched after 2 seconds\niteration = 5\nRun single iteration\nCallback of a timer created as stopped\nRestart the second watcher and try to handle the same events, but don't block\nRunning a blocking loop\nis called every second, is launched after 2 seconds\niteration = 8\nis called every second, is launched after 2 seconds\niteration = 9\nis called every second, is launched after 2 seconds\niteration = 10\nEND"}],"evtimer::createstopped":[{"title":"Monotor changes of \/var\/log\/messages. Avoid missing updates by means of one second delay","source":"$timer = EvTimer::createStopped(0., 1.02, function ($w) {\n    $w->stop();\n\n    $stat = $w->data;\n\n    \/\/ 1 second after the most recent change of the file\n    printf(\"Current size: %ld\\n\", $stat->attr()['size']);\n});\n\n$stat = new EvStat(\"\/var\/log\/messages\", 0., function () use ($timer) {\n    \/\/ Reset timer watcher\n    $timer->again();\n});\n\n$timer->data = $stat;\n\nEv::run();","output":null}],"evwatcher::keepalive":[{"title":"Register an I\/O watcher for some UDP socket but do not keep the event loop from running just because of that watcher.","source":"$udp_socket = ...\n$udp_watcher = new EvIo($udp_socket, Ev::READ, function () { \/* ... *\/ });\n$udp_watcher->keepalive(FALSE);","output":null}],"exception::getcode":[{"title":"Exception::getCode() example","source":"try {\n    throw new Exception(\"Some error message\", 30);\n} catch(Exception $e) {\n    echo \"The exception code is: \" . $e->getCode();\n}","output":"The exception code is: 30"}],"exception::getfile":[{"title":"Exception::getFile() example","source":"try {\n    throw new Exception;\n} catch(Exception $e) {\n    echo $e->getFile();\n}","output":"\/home\/bjori\/tmp\/ex.php"}],"exception::getline":[{"title":"Exception::getLine() example","source":"try {\n    throw new Exception(\"Some error message\");\n} catch(Exception $e) {\n    echo \"The exception was created on line: \" . $e->getLine();\n}","output":"The exception was created on line: 3"}],"exception::getmessage":[{"title":"Exception::getMessage() example","source":"try {\n    throw new Exception(\"Some error message\");\n} catch(Exception $e) {\n    echo $e->getMessage();\n}","output":"Some error message"}],"exception::getprevious":[{"title":"Exception::getPrevious() example","source":"class MyCustomException extends Exception {}\n\nfunction doStuff() {\n    try {\n        throw new InvalidArgumentException(\"You are doing it wrong!\", 112);\n    } catch(Exception $e) {\n        throw new MyCustomException(\"Something happened\", 911, $e);\n    }\n}\n\n\ntry {\n    doStuff();\n} catch(Exception $e) {\n    do {\n        printf(\"%s:%d %s (%d) [%s]\\n\", $e->getFile(), $e->getLine(), $e->getMessage(), $e->getCode(), get_class($e));\n    } while($e = $e->getPrevious());\n}","output":"\/home\/bjori\/ex.php:8 Something happened (911) [MyCustomException]\n\/home\/bjori\/ex.php:6 You are doing it wrong! (112) [InvalidArgumentException]"}],"exception::gettrace":[{"title":"Exception::getTrace() example","source":"function test() {\n throw new Exception;\n}\n\ntry {\n test();\n} catch(Exception $e) {\n var_dump($e->getTrace());\n}","output":"array(1) {\n  [0]=>\n  array(4) {\n    [\"file\"]=>\n    string(22) \"\/home\/bjori\/tmp\/ex.php\"\n    [\"line\"]=>\n    int(7)\n    [\"function\"]=>\n    string(4) \"test\"\n    [\"args\"]=>\n    array(0) {\n    }\n  }\n}"}],"exception::gettraceasstring":[{"title":"Exception::getTraceAsString() example","source":"function test() {\n    throw new Exception;\n}\n\ntry {\n    test();\n} catch(Exception $e) {\n    echo $e->getTraceAsString();\n}","output":"#0 \/home\/bjori\/tmp\/ex.php(7): test()\n#1 {main}"}],"exception::__tostring":[{"title":"Exception::__toString() example","source":"try {\n    throw new Exception(\"Some error message\");\n} catch(Exception $e) {\n    echo $e;\n}","output":"exception 'Exception' with message 'Some error message' in \/home\/bjori\/tmp\/ex.php:3\nStack trace:\n#0 {main}"}],"filesystemiterator::__construct":[{"title":"FilesystemIterator::__construct() example","source":"$it = new FilesystemIterator(dirname(__FILE__));\nforeach ($it as $fileinfo) {\n    echo $fileinfo->getFilename() . \"\\n\";\n}","output":"apples.jpg\nbanana.jpg\nexample.php"}],"filesystemiterator::current":[{"title":"FilesystemIterator::current() example","source":"$iterator = new FilesystemIterator(__DIR__, FilesystemIterator::CURRENT_AS_PATHNAME);\nforeach ($iterator as $fileinfo) {\n    echo $iterator->current() . \"\\n\";\n}","output":"\/www\/examples\/apple.jpg\n\/www\/examples\/banana.jpg\n\/www\/examples\/example.php"}],"filesystemiterator::key":[{"title":"FilesystemIterator::key() example","source":"$iterator = new FilesystemIterator(dirname(__FILE__), FilesystemIterator::KEY_AS_FILENAME);\nforeach ($iterator as $fileinfo) {\n    echo $iterator->key() . \"\\n\";\n}","output":"apple.jpg\nbanana.jpg\nexample.php"}],"filesystemiterator::next":[{"title":"FilesystemIterator::next() example","source":"$iterator = new FilesystemIterator(dirname(__FILE__));\nwhile($iterator->valid()) {\n    echo $iterator->getFilename() . \"\\n\";\n    $iterator->next();\n}","output":"apple.jpg\nbanana.jpg\nexample.php"}],"filesystemiterator::rewind":[{"title":"FilesystemIterator::rewind() example","source":"$iterator = new FilesystemIterator(dirname(__FILE__), FilesystemIterator::KEY_AS_FILENAME);\n\necho $iterator->key() . \"\\n\";\n\n$iterator->next();\necho $iterator->key() . \"\\n\";\n\n$iterator->rewind();\necho $iterator->key() . \"\\n\";","output":"apple.jpg\nbanana.jpg\napple.jpg"}],"filesystemiterator::setflags":[{"title":"FilesystemIterator::key() example","source":"$iterator = new FilesystemIterator(dirname(__FILE__), FilesystemIterator::KEY_AS_PATHNAME);\necho \"Key as Pathname:\\n\";\nforeach ($iterator as $key => $fileinfo) {\n    echo $key . \"\\n\";\n}\n\n$iterator->setFlags(FilesystemIterator::KEY_AS_FILENAME);\necho \"\\nKey as Filename:\\n\";\nforeach ($iterator as $key => $fileinfo) {\n    echo $key . \"\\n\";\n}","output":"Key as Pathname:\n\/www\/examples\/apple.jpg\n\/www\/examples\/banana.jpg\n\/www\/examples\/example.php\n\nKey as Filename:\napple.jpg\nbanana.jpg\nexample.php"}],"filteriterator::accept":[{"title":"FilterIterator::accept() example","source":"\/\/ This iterator filters all values with less than 10 characters\nclass LengthFilterIterator extends FilterIterator {\n\n    public function accept() {\n        \/\/ Only accept strings with a length of 10 and greater\n        return strlen(parent::current()) >= 10;\n    }\n\n}\n\n$arrayIterator = new ArrayIterator(array('test1', 'more than 10 characters'));\n$lengthFilter = new LengthFilterIterator($arrayIterator);\n\nforeach ($lengthFilter as $value) {\n    echo $value . \"\\n\";\n}","output":"more than 10 characters"}],"abs":[{"title":"abs() example","source":"echo abs(-4.2); \/\/ 4.2 (double\/float)\necho abs(5);    \/\/ 5 (integer)\necho abs(-5);   \/\/ 5 (integer)","output":null}],"addcslashes":[{"title":null,"source":"echo addcslashes('foo[ ]', 'A..z');\n\/\/ output:  \\f\\o\\o\\[ \\]\n\/\/ All upper and lower-case letters will be escaped\n\/\/ ... but so will the [\\]^_`","output":null},{"title":null,"source":"echo addcslashes(\"zoo['.']\", 'z..A');\n\/\/ output:  \\zoo['\\.']","output":null},{"title":"addcslashes() example","source":"$escaped = addcslashes($not_escaped, \"\\0..\\37!@\\177..\\377\");","output":null}],"addslashes":[{"title":"An addslashes() example","source":"$str = \"Is your name O'Reilly?\";\n\n\/\/ Outputs: Is your name O\\'Reilly?\necho addslashes($str);","output":null}],"apache_get_modules":[{"title":"apache_get_modules() example","source":"print_r(apache_get_modules());","output":"Array\n(\n    [0] => core\n    [1] => http_core\n    [2] => mod_so\n    [3] => sapi_apache2\n    [4] => mod_mime\n    [5] => mod_rewrite\n)"}],"apache_get_version":[{"title":"apache_get_version() example","source":"$version = apache_get_version();\necho \"$version\\n\";","output":"Apache\/1.3.29 (Unix) PHP\/4.3.4"}],"apache_getenv":[{"title":"apache_getenv() example","source":"$ret = apache_getenv(\"SERVER_ADDR\");\necho $ret;","output":"42.24.42.240"}],"apache_lookup_uri":[{"title":"apache_lookup_uri() example","source":"$info = apache_lookup_uri('index.php?var=value');\nprint_r($info);\n\nif (file_exists($info->filename)) {\n    echo 'file exists!';\n}","output":"stdClass Object\n(\n    [status] => 200\n    [the_request] => GET \/dir\/file.php HTTP\/1.1\n    [method] => GET\n    [mtime] => 0\n    [clength] => 0\n    [chunked] => 0\n    [content_type] => application\/x-httpd-php\n    [no_cache] => 0\n    [no_local_copy] => 1\n    [unparsed_uri] => \/dir\/index.php?var=value\n    [uri] => \/dir\/index.php\n    [filename] => \/home\/htdocs\/dir\/index.php\n    [args] => var=value\n    [allowed] => 0\n    [sent_bodyct] => 0\n    [bytes_sent] => 0\n    [request_time] => 1074282764\n)\nfile exists!"}],"apache_note":[{"title":"Passing information between PHP and Perl","source":"apache_note('name', 'Fredrik Ekengren');\n\n\/\/ Call perl script\nvirtual(\"\/perl\/some_script.pl\");\n\n$result = apache_note(\"resultdata\");","output":null},{"title":"Logging values in access.log","source":"apache_note('sessionID', session_id());","output":null}],"apache_request_headers":[{"title":"apache_request_headers() example","source":"$headers = apache_request_headers();\n\nforeach ($headers as $header => $value) {\n    echo \"$header: $value <br \/>\\n\";\n}","output":"Accept: *\/*\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nUser-Agent: Mozilla\/4.0\nHost: www.example.com\nConnection: Keep-Alive"}],"apache_response_headers":[{"title":"apache_response_headers() example","source":"print_r(apache_response_headers());","output":"Array\n(\n    [Accept-Ranges] => bytes\n    [X-Powered-By] => PHP\/4.3.8\n)"}],"apache_setenv":[{"title":"Setting an Apache environment variable using apache_setenv()","source":"apache_setenv(\"EXAMPLE_VAR\", \"Example Value\");","output":null}],"apc_bin_load":[{"title":"apc_bin_load() example","source":"$data = apc_bin_dump(NULL, NULL);\napc_bin_load($data, APC_BIN_VERIFY_MD5 | APC_BIN_VERIFY_CRC32);","output":null}],"apc_cache_info":[{"title":"A apc_cache_info() example","source":"print_r(apc_cache_info());","output":"Array\n(\n    [num_slots] => 2000\n    [ttl] => 0\n    [num_hits] => 9\n    [num_misses] => 3\n    [start_time] => 1123958803\n    [cache_list] => Array\n        (\n            [0] => Array\n                (\n                    [filename] => \/path\/to\/apc_test.php\n                    [device] => 29954\n                    [inode] => 1130511\n                    [type] => file\n                    [num_hits] => 1\n                    [mtime] => 1123960686\n                    [creation_time] => 1123960696\n                    [deletion_time] => 0\n                    [access_time] => 1123962864\n                    [ref_count] => 1\n                    [mem_size] => 677\n                )\n            [1] => Array (...iterates for each cached file)\n)"}],"apc_cas":[{"title":"apc_cas() example","source":"apc_store('foobar', 2);\necho '$foobar = 2', PHP_EOL;\necho '$foobar == 1 ? 2 : 1 = ', (apc_cas('foobar', 1, 2) ? 'ok' : 'fail'), PHP_EOL;\necho '$foobar == 2 ? 1 : 2 = ', (apc_cas('foobar', 2, 1) ? 'ok' : 'fail'), PHP_EOL;\n\necho '$foobar = ', apc_fetch('foobar'), PHP_EOL;\n\necho '$f__bar == 1 ? 2 : 1 = ', (apc_cas('f__bar', 1, 2) ? 'ok' : 'fail'), PHP_EOL;\n\napc_store('perfection', 'xyz');\necho '$perfection == 2 ? 1 : 2 = ', (apc_cas('perfection', 2, 1) ? 'ok' : 'epic fail'), PHP_EOL;\n\necho '$foobar = ', apc_fetch('foobar'), PHP_EOL;","output":"$foobar = 2\n$foobar == 1 ? 2 : 1 = fail\n$foobar == 2 ? 1 : 2 = ok\n$foobar = 1\n$f__bar == 1 ? 2 : 1 = fail\n$perfection == 2 ? 1 : 2 = epic fail\n$foobar = 1"}],"apc_dec":[{"title":"apc_dec() example","source":"echo \"Let's do something with success\", PHP_EOL;\n\napc_store('anumber', 42);\n\necho apc_fetch('anumber'), PHP_EOL;\n\necho apc_dec('anumber'), PHP_EOL;\necho apc_dec('anumber', 10), PHP_EOL;\necho apc_dec('anumber', 10, $success), PHP_EOL;\n\nvar_dump($success);\n\necho \"Now, let's fail\", PHP_EOL, PHP_EOL;\n\napc_store('astring', 'foo');\n\n$ret = apc_dec('astring', 1, $fail);\n\nvar_dump($ret);\nvar_dump($fail);","output":"Let's do something with success\n42\n41\n31\n21\nbool(true)\n\nNow, let's fail\nbool(false)\nbool(false)"}],"apc_define_constants":[{"title":"apc_define_constants() example","source":"$constants = array(\n    'ONE'   => 1,\n    'TWO'   => 2,\n    'THREE' => 3,\n);\napc_define_constants('numbers', $constants);\necho ONE, TWO, THREE;","output":123}],"apc_delete_file":[{"title":"apc_delete_file() example","source":"$filename = 'file.php';\n\nif (apc_compile_file($filename)) {\n\n    if (apc_delete_file($filename)) {\n        echo \"Successfully deleted file $filename from APC cache.\", PHP_EOL;\n    }\n}\n\nif (apc_compile_file($filename)) {\n\n    if ($good = apc_delete_file(array($filename, 'donotexist.php'))) {\n        var_dump($good);\n    }\n}\n\n$bad = apc_delete_file('donotexist.php');\nvar_dump($bad);","output":"Successfully deleted file file.php from APC cache.\n[Mon May 24 09:30:33 2010] [apc-warning] Could not stat file donotexist.php, unable to delete from cache. in \/tmp\/test.php on line 13.\narray(1) {\n  [0]=>\n  string(14) \"donotexist.php\"\n}\n[Mon May 24 09:30:33 2010] [apc-warning] Could not stat file donotexist.php, unable to delete from cache. in \/tmp\/test.php on line 18.\nbool(false)"}],"apc_delete":[{"title":"A apc_delete() example","source":"$bar = 'BAR';\napc_store('foo', $bar);\napc_delete('foo');\n\/\/ this is obviously useless in this form","output":null}],"apc_exists":[{"title":"apc_exists() example","source":"$fruit  = 'apple';\n$veggie = 'carrot';\n\napc_store('foo', $fruit);\napc_store('bar', $veggie);\n\nif (apc_exists('foo')) {\n    echo \"Foo exists: \";\n    echo apc_fetch('foo');\n} else {\n    echo \"Foo does not exist\";\n}\n\necho PHP_EOL;\nif (apc_exists('baz')) {\n    echo \"Baz exists.\";\n} else {\n    echo \"Baz does not exist\";\n}\n\necho PHP_EOL;\n\n$ret = apc_exists(array('foo', 'donotexist', 'bar'));\nvar_dump($ret);","output":"Foo exists: apple\nBaz does not exist\narray(2) {\n  [\"foo\"]=>\n  bool(true)\n  [\"bar\"]=>\n  bool(true)\n}"}],"apc_fetch":[{"title":"A apc_fetch() example","source":"$bar = 'BAR';\napc_store('foo', $bar);\nvar_dump(apc_fetch('foo'));","output":"string(3) \"BAR\""}],"apc_inc":[{"title":"apc_inc() example","source":"echo \"Let's do something with success\", PHP_EOL;\n\napc_store('anumber', 42);\n\necho apc_fetch('anumber'), PHP_EOL;\n\necho apc_inc('anumber'), PHP_EOL;\necho apc_inc('anumber', 10), PHP_EOL;\necho apc_inc('anumber', 10, $success), PHP_EOL;\n\nvar_dump($success);\n\necho \"Now, let's fail\", PHP_EOL, PHP_EOL;\n\napc_store('astring', 'foo');\n\n$ret = apc_inc('astring', 1, $fail);\n\nvar_dump($ret);\nvar_dump($fail);","output":"42\n43\n53\n63\nbool(true)\nNow, let's fail\n\nbool(false)\nbool(false)"}],"apc_load_constants":[{"title":"apc_load_constants() example","source":"$constants = array(\n    'ONE'   => 1,\n    'TWO'   => 2,\n    'THREE' => 3,\n);\napc_define_constants('numbers', $constants);\napc_load_constants('numbers');\necho ONE, TWO, THREE;","output":123}],"apc_sma_info":[{"title":"A apc_sma_info() example","source":"print_r(apc_sma_info());","output":"Array\n(\n    [num_seg] => 1\n    [seg_size] => 31457280\n    [avail_mem] => 31448408\n    [block_lists] => Array\n        (\n            [0] => Array\n                (\n                    [0] => Array\n                        (\n                            [size] => 31448408\n                            [offset] => 8864\n                        )\n\n                )\n\n        )\n\n)"}],"apcu_cache_info":[{"title":"A apcu_cache_info() example","source":"print_r(apcu_cache_info());","output":"Array\n(\n    [num_slots] => 2000\n    [ttl] => 0\n    [num_hits] => 9\n    [num_misses] => 3\n    [start_time] => 1123958803\n    [cache_list] => Array\n        (\n            [0] => Array\n                (\n                    [filename] => \/path\/to\/apcu_test.php\n                    [device] => 29954\n                    [inode] => 1130511\n                    [type] => file\n                    [num_hits] => 1\n                    [mtime] => 1123960686\n                    [creation_time] => 1123960696\n                    [deletion_time] => 0\n                    [access_time] => 1123962864\n                    [ref_count] => 1\n                    [mem_size] => 677\n                )\n            [1] => Array (...iterates for each cached file)\n)"}],"apcu_cas":[{"title":"apcu_cas() example","source":"apcu_store('foobar', 2);\necho '$foobar = 2', PHP_EOL;\necho '$foobar == 1 ? 2 : 1 = ', (apcu_cas('foobar', 1, 2) ? 'ok' : 'fail'), PHP_EOL;\necho '$foobar == 2 ? 1 : 2 = ', (apcu_cas('foobar', 2, 1) ? 'ok' : 'fail'), PHP_EOL;\n\necho '$foobar = ', apcu_fetch('foobar'), PHP_EOL;\n\necho '$f__bar == 1 ? 2 : 1 = ', (apcu_cas('f__bar', 1, 2) ? 'ok' : 'fail'), PHP_EOL;\n\napcu_store('perfection', 'xyz');\necho '$perfection == 2 ? 1 : 2 = ', (apcu_cas('perfection', 2, 1) ? 'ok' : 'epic fail'), PHP_EOL;\n\necho '$foobar = ', apcu_fetch('foobar'), PHP_EOL;","output":"$foobar = 2\n$foobar == 1 ? 2 : 1 = fail\n$foobar == 2 ? 1 : 2 = ok\n$foobar = 1\n$f__bar == 1 ? 2 : 1 = fail\n$perfection == 2 ? 1 : 2 = epic fail\n$foobar = 1"}],"apcu_dec":[{"title":"apcu_dec() example","source":"echo \"Let's do something with success\", PHP_EOL;\n\napcu_store('anumber', 42);\n\necho apcu_fetch('anumber'), PHP_EOL;\n\necho apcu_dec('anumber'), PHP_EOL;\necho apcu_dec('anumber', 10), PHP_EOL;\necho apcu_dec('anumber', 10, $success), PHP_EOL;\n\nvar_dump($success);\n\necho \"Now, let's fail\", PHP_EOL, PHP_EOL;\n\napcu_store('astring', 'foo');\n\n$ret = apcu_dec('astring', 1, $fail);\n\nvar_dump($ret);\nvar_dump($fail);","output":"Let's do something with success\n42\n41\n31\n21\nbool(true)\nNow, let's fail\n\nbool(false)\nbool(false)"}],"apcu_delete":[{"title":"A apcu_delete() example","source":"$bar = 'BAR';\napcu_store('foo', $bar);\napcu_delete('foo');\n\/\/ this is obviously useless in this form\n\n\/\/ Alternatively delete multiple keys.\napcu_delete(['foo', 'bar', 'baz']);\n\n\/\/ Or use an Iterator with a regular expression.\napcu_delete(new APCUIterator('#^myprefix_#'));","output":null}],"apcu_entry":[{"title":"An apcu_entry() example","source":"$config = apcu_entry(\"config\", function($key) {\n return [\n   \"fruit\" => apcu_entry(\"config.fruit\", function($key){\n     return [\n       \"apples\",\n       \"pears\"\n     ];\n   }), \n   \"people\" => apcu_entry(\"config.people\", function($key){\n     return [\n      \"bob\",\n      \"joe\",\n      \"niki\"\n     ];\n   })\n ];\n});\n\nvar_dump($config);","output":"array(2) {\n  [\"fruit\"]=>\n  array(2) {\n    [0]=>\n    string(6) \"apples\"\n    [1]=>\n    string(5) \"pears\"\n  }\n  [\"people\"]=>\n  array(3) {\n    [0]=>\n    string(3) \"bob\"\n    [1]=>\n    string(3) \"joe\"\n    [2]=>\n    string(4) \"niki\"\n  }\n}"}],"apcu_exists":[{"title":"apcu_exists() example","source":"$fruit  = 'apple';\n$veggie = 'carrot';\n\napcu_store('foo', $fruit);\napcu_store('bar', $veggie);\n\nif (apcu_exists('foo')) {\n    echo \"Foo exists: \";\n    echo apcu_fetch('foo');\n} else {\n    echo \"Foo does not exist\";\n}\n\necho PHP_EOL;\nif (apcu_exists('baz')) {\n    echo \"Baz exists.\";\n} else {\n    echo \"Baz does not exist\";\n}\n\necho PHP_EOL;\n\n$ret = apcu_exists(array('foo', 'donotexist', 'bar'));\nvar_dump($ret);","output":"Foo exists: apple\nBaz does not exist\narray(2) {\n  [\"foo\"]=>\n  bool(true)\n  [\"bar\"]=>\n  bool(true)\n}"}],"apcu_fetch":[{"title":"A apcu_fetch() example","source":"$bar = 'BAR';\napcu_store('foo', $bar);\nvar_dump(apcu_fetch('foo'));","output":"string(3) \"BAR\""}],"apcu_inc":[{"title":"apcu_inc() example","source":"echo \"Let's do something with success\", PHP_EOL;\n\napcu_store('anumber', 42);\n\necho apcu_fetch('anumber'), PHP_EOL;\n\necho apcu_inc('anumber'), PHP_EOL;\necho apcu_inc('anumber', 10), PHP_EOL;\necho apcu_inc('anumber', 10, $success), PHP_EOL;\n\nvar_dump($success);\n\necho \"Now, let's fail\", PHP_EOL, PHP_EOL;\n\napcu_store('astring', 'foo');\n\n$ret = apcu_inc('astring', 1, $fail);\n\nvar_dump($ret);\nvar_dump($fail);","output":"Let's do something with success\n42\n43\n53\n63\nbool(true)\nNow, let's fail\n\nbool(false)\nbool(false)"}],"apcu_sma_info":[{"title":"A apcu_sma_info() example","source":"print_r(apcu_sma_info());","output":"Array\n(\n    [num_seg] => 1\n    [seg_size] => 31457280\n    [avail_mem] => 31448408\n    [block_lists] => Array\n        (\n            [0] => Array\n                (\n                    [0] => Array\n                        (\n                            [size] => 31448408\n                            [offset] => 8864\n                        )\n\n                )\n\n        )\n\n)"}],"apd_breakpoint":[{"title":"Typical session using tcplisten","source":"Stops the interpreter and waits on a CR from the socket\n APD Functions\n apd_callstack\n APD Functions\n PHP Manual\n\n \n  apd_breakpoint\n  (PECL apd >= 0.2)apd_breakpoint — Stops the interpreter and waits on a CR from the socket\n\n \n \n  Description\n  \n   bool apd_breakpoint\n    ( int $debug_level\n   )\n\n  \n   This can be used to stop the running of your script, and await responses \n   on the connected socket.  To step the program, just send enter (a blank \n   line), or enter a php command to be executed. \n  \n \n\n\n \n  Parameters\n  \n   \n\ndebug_level\n\nAn integer which is formed by adding\ntogether the XXX_TRACE constants.It is not recommended\nto use MEMORY_TRACE. It is very slow and does not appear to be accurate.\nASSIGNMENT_TRACE is not implemented yet.To turn on all\nfunctional traces (TIMING, FUNCTIONS, ARGS SUMMARY (like strace -c)) use the value 99\n\n\n   \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Typical session using tcplisten\n    \nbash#tcplisten localhost 7777\n\nAPD - Advanced PHP Debugger Trace File\n---------------------------------------------------------------------------\nProcess Pid (6118)\nTrace Begun at Sun Mar 10 23:13:12 2002\n---------------------------------------------------------------------------\n(  0.000000): apd_set_session_trace called at \/home\/alan\/Projects\/project2\/test. \nphp:5\n(  0.074824): apd_set_session_trace_socket() at \/home\/alan\/Projects\/project2\/tes \nt.php:5 returned.  Elapsed (0.074824)\n(  0.074918): apd_breakpoint() \/home\/alan\/Projects\/project2\/test.php:7\n              ++ argv[0] $(??) = 9\napd_breakpoint() at \/home\/alan\/Projects\/project2\/test.php:7 returned.  Elapsed ( \n-2089521468.1073275368)\n>\\n \nstatement: \/home\/alan\/Projects\/project2\/test.php:8\n>\\n \nstatement: \/home\/alan\/Projects\/project2\/test.php:8\n>\\n \nstatement: \/home\/alan\/Projects\/project2\/test.php:10\n>apd_echo($i);\nEXEC: apd_echo($i);\n0\n>apd_echo(serialize(apd_get_active_symbols()));\nEXEC:  apd_echo(serialize(apd_get_active_symbols()));\na:47:{i:0;s:4:\"PWD\";i:1;s:10:\"COLORFGBG\";i:2;s:11:\"XAUTHORITY\";i:3;s:14:\"\nCOLORTERM_BCE\";i:4;s:9:\"WINDOWID\";i:5;s:14:\"ETERM_VERSION\";i:6;s:16:\"SE\nSSION_MANAGER\";i:7;s:4:\"PS1\";i:8;s:11:\"GDMSESSION\";i:9;s:5:\"USER\";i:10;s:5:\"\nMAIL\";i:11;s:7:\"OLDPWD\";i:12;s:5:\"LANG\";i:13;s:10:\"COLORTERM\";i:14;s:8:\"DISP\nLAY\";i:15;s:8:\"LOGNAME\";i:16;s:6:\"\n>apd_echo(system('ls \/home\/mydir'));\n........\n>apd_continue(0);\n\n    \n\n   \n  \n \n\n\n\n APD Functions\n apd_callstack\n APD Functions\n PHP Manual","output":null}],"apd_callstack":[{"title":"apd_callstack() example","source":"print_r(apd_callstack());","output":null}],"apd_clunk":[{"title":"apd_clunk() example","source":"apd_clunk(\"Some Warning\", \"<br\/>\");","output":null}],"apd_continue":[{"title":"apd_continue() example","source":"apd_continue(0);","output":null}],"apd_croak":[{"title":"apd_croak() example","source":"apd_croak(\"Some Warning\",\"<P>\");","output":null}],"apd_dump_function_table":[{"title":"apd_dump_function_table() example","source":"apd_dump_function_table();","output":null}],"apd_dump_persistent_resources":[{"title":"apd_dump_persistent_resources() example","source":"print_r(apd_dump_persistent_resources());","output":null}],"apd_dump_regular_resources":[{"title":"apd_dump_regular_resources() example","source":"print_r(apd_dump_regular_resources());","output":null}],"apd_echo":[{"title":"apd_echo() example","source":"apd_echo($i);","output":null}],"apd_get_active_symbols":[{"title":"apd_get_active_symbols() example","source":"apd_echo(apd_get_active_symbols());","output":null}],"apd_set_pprof_trace":[{"title":"apd_set_pprof_trace() example","source":"apd_set_pprof_trace();","output":null}],"apd_set_session_trace_socket":[{"title":"apd_set_session_trace_socket() example","source":"apd_set_session_trace_socket(\"127.0.0.1\",APD_AF_INET,7112,0);","output":null}],"apd_set_session_trace":[{"title":"apd_set_session_trace() example","source":"apd_set_session_trace(99);","output":null}],"apd_set_session":[{"title":"apd_set_session() example","source":"apd_set_session(9);","output":null}],"array_change_key_case":[{"title":"array_change_key_case() example","source":"$input_array = array(\"FirSt\" => 1, \"SecOnd\" => 4);\nprint_r(array_change_key_case($input_array, CASE_UPPER));","output":"Array\n(\n    [FIRST] => 1\n    [SECOND] => 4\n)"}],"array_chunk":[{"title":"array_chunk() example","source":"$input_array = array('a', 'b', 'c', 'd', 'e');\nprint_r(array_chunk($input_array, 2));\nprint_r(array_chunk($input_array, 2, true));","output":"Array\n(\n    [0] => Array\n        (\n            [0] => a\n            [1] => b\n        )\n\n    [1] => Array\n        (\n            [0] => c\n            [1] => d\n        )\n\n    [2] => Array\n        (\n            [0] => e\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => a\n            [1] => b\n        )\n\n    [1] => Array\n        (\n            [2] => c\n            [3] => d\n        )\n\n    [2] => Array\n        (\n            [4] => e\n        )\n\n)"}],"array_column":[{"title":"Get the column of first names from a recordset","source":"\/\/ Array representing a possible record set returned from a database\n$records = array(\n    array(\n        'id' => 2135,\n        'first_name' => 'John',\n        'last_name' => 'Doe',\n    ),\n    array(\n        'id' => 3245,\n        'first_name' => 'Sally',\n        'last_name' => 'Smith',\n    ),\n    array(\n        'id' => 5342,\n        'first_name' => 'Jane',\n        'last_name' => 'Jones',\n    ),\n    array(\n        'id' => 5623,\n        'first_name' => 'Peter',\n        'last_name' => 'Doe',\n    )\n);\n \n$first_names = array_column($records, 'first_name');\nprint_r($first_names);","output":"Array\n(\n    [0] => John\n    [1] => Sally\n    [2] => Jane\n    [3] => Peter\n)"},{"title":"Get the column of last names from a recordset, indexed by the \"id\" column","source":"\/\/ Using the $records array from Example #1\n$last_names = array_column($records, 'last_name', 'id');\nprint_r($last_names);","output":"Array\n(\n    [2135] => Doe\n    [3245] => Smith\n    [5342] => Jones\n    [5623] => Doe\n)"},{"title":"Get the column of usernames from the public \"username\" property of an object","source":"class User\n{\n    public $username;\n\n    public function __construct(string $username)\n    {\n        $this->username = $username;\n    }\n}\n\n$users = [\n    new User('user 1'),\n    new User('user 2'),\n    new User('user 3'),\n];\n\nprint_r(array_column($users, 'username'));","output":"Array\n(\n    [0] => user 1\n    [1] => user 2\n    [2] => user 3\n)"},{"title":"Get the column of names from the private \"name\" property of an object using the magic __get() method.","source":"class Person\n{\n    private $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function __get($prop)\n    {\n        return $this->$prop;\n    }\n\n    public function __isset($prop) : bool\n    {\n        return isset($this->$prop);\n    }\n}\n\n$people = [\n    new Person('Fred'),\n    new Person('Jane'),\n    new Person('John'),\n];\n\nprint_r(array_column($people, 'name'));","output":"Array\n(\n    [0] => Fred\n    [1] => Jane\n    [2] => John\n)"}],"array_combine":[{"title":"A simple array_combine() example","source":"$a = array('green', 'red', 'yellow');\n$b = array('avocado', 'apple', 'banana');\n$c = array_combine($a, $b);\n\nprint_r($c);","output":"Array\n(\n    [green]  => avocado\n    [red]    => apple\n    [yellow] => banana\n)"}],"array_count_values":[{"title":"array_count_values() example","source":"$array = array(1, \"hello\", 1, \"world\", \"hello\");\nprint_r(array_count_values($array));","output":"Array\n(\n    [1] => 2\n    [hello] => 2\n    [world] => 1\n)"}],"array_diff_assoc":[{"title":"array_diff_assoc() example","source":"$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"green\", \"yellow\", \"red\");\n$result = array_diff_assoc($array1, $array2);\nprint_r($result);","output":"Array\n(\n    [b] => brown\n    [c] => blue\n    [0] => red\n)"},{"title":"array_diff_assoc() example","source":"$array1 = array(0, 1, 2);\n$array2 = array(\"00\", \"01\", \"2\");\n$result = array_diff_assoc($array1, $array2);\nprint_r($result);","output":"Array\n(\n    [0] => 0\n    [1] => 1\n    )"}],"array_diff_key":[{"title":"array_diff_key() example","source":"$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);\n$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);\n\nvar_dump(array_diff_key($array1, $array2));","output":"array(2) {\n  [\"red\"]=>\n  int(2)\n  [\"purple\"]=>\n  int(4)\n}"}],"array_diff_uassoc":[{"title":"array_diff_uassoc() example","source":"function key_compare_func($a, $b)\n{\n    if ($a === $b) {\n        return 0;\n    }\n    return ($a > $b)? 1:-1;\n}\n\n$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"green\", \"yellow\", \"red\");\n$result = array_diff_uassoc($array1, $array2, \"key_compare_func\");\nprint_r($result);","output":"Array\n(\n    [b] => brown\n    [c] => blue\n    [0] => red\n)"}],"array_diff_ukey":[{"title":"array_diff_ukey() example","source":"function key_compare_func($key1, $key2)\n{\n    if ($key1 == $key2)\n        return 0;\n    else if ($key1 > $key2)\n        return 1;\n    else\n        return -1;\n}\n\n$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);\n$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);\n\nvar_dump(array_diff_ukey($array1, $array2, 'key_compare_func'));","output":"array(2) {\n  [\"red\"]=>\n  int(2)\n  [\"purple\"]=>\n  int(4)\n}"}],"array_diff":[{"title":"array_diff() example","source":"$array1 = array(\"a\" => \"green\", \"red\", \"blue\", \"red\");\n$array2 = array(\"b\" => \"green\", \"yellow\", \"red\");\n$result = array_diff($array1, $array2);\n\nprint_r($result);","output":"Array\n(\n    [1] => blue\n)"}],"array_fill_keys":[{"title":"array_fill_keys() example","source":"$keys = array('foo', 5, 10, 'bar');\n$a = array_fill_keys($keys, 'banana');\nprint_r($a);","output":"Array\n(\n    [foo] => banana\n    [5] => banana\n    [10] => banana\n    [bar] => banana\n)"}],"array_fill":[{"title":"array_fill() example","source":"$a = array_fill(5, 6, 'banana');\n$b = array_fill(-2, 4, 'pear');\nprint_r($a);\nprint_r($b);","output":"Array\n(\n    [5]  => banana\n    [6]  => banana\n    [7]  => banana\n    [8]  => banana\n    [9]  => banana\n    [10] => banana\n)\nArray\n(\n    [-2] => pear\n    [0] => pear\n    [1] => pear\n    [2] => pear\n)"}],"array_filter":[{"title":"array_filter() example","source":"function odd($var)\n{\n    \/\/ returns whether the input integer is odd\n    return($var & 1);\n}\n\nfunction even($var)\n{\n    \/\/ returns whether the input integer is even\n    return(!($var & 1));\n}\n\n$array1 = array(\"a\"=>1, \"b\"=>2, \"c\"=>3, \"d\"=>4, \"e\"=>5);\n$array2 = array(6, 7, 8, 9, 10, 11, 12);\n\necho \"Odd :\\n\";\nprint_r(array_filter($array1, \"odd\"));\necho \"Even:\\n\";\nprint_r(array_filter($array2, \"even\"));","output":"Odd :\nArray\n(\n    [a] => 1\n    [c] => 3\n    [e] => 5\n)\nEven:\nArray\n(\n    [0] => 6\n    [2] => 8\n    [4] => 10\n    [6] => 12\n)"},{"title":"array_filter() without callback","source":"$entry = array(\n             0 => 'foo',\n             1 => false,\n             2 => -1,\n             3 => null,\n             4 => ''\n          );\n\nprint_r(array_filter($entry));","output":"Array\n(\n    [0] => foo\n    [2] => -1\n)"},{"title":"array_filter() with flag","source":"$arr = ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4];\n\nvar_dump(array_filter($arr, function($k) {\n    return $k == 'b';\n}, ARRAY_FILTER_USE_KEY));\n\nvar_dump(array_filter($arr, function($v, $k) {\n    return $k == 'b' || $v == 4;\n}, ARRAY_FILTER_USE_BOTH));","output":"array(1) {\n  [\"b\"]=>\n  int(2)\n}\narray(2) {\n  [\"b\"]=>\n  int(2)\n  [\"d\"]=>\n  int(4)\n}"}],"array_flip":[{"title":"array_flip() example","source":"$input = array(\"oranges\", \"apples\", \"pears\");\n$flipped = array_flip($input);\n\nprint_r($flipped);","output":"Array\n(\n    [oranges] => 0\n    [apples] => 1\n    [pears] => 2\n)"},{"title":"array_flip() example : collision","source":"$input = array(\"a\" => 1, \"b\" => 1, \"c\" => 2);\n$flipped = array_flip($input);\n\nprint_r($flipped);","output":"Array\n(\n    [1] => b\n    [2] => c\n)"}],"array_intersect_assoc":[{"title":"array_intersect_assoc() example","source":"$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"green\", \"b\" => \"yellow\", \"blue\", \"red\");\n$result_array = array_intersect_assoc($array1, $array2);\nprint_r($result_array);","output":"Array\n(\n    [a] => green\n)"}],"array_intersect_key":[{"title":"array_intersect_key() example","source":"$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);\n$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);\n\nvar_dump(array_intersect_key($array1, $array2));","output":"array(2) {\n  [\"blue\"]=>\n  int(1)\n  [\"green\"]=>\n  int(3)\n}"}],"array_intersect_uassoc":[{"title":"array_intersect_uassoc() example","source":"$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"GREEN\", \"B\" => \"brown\", \"yellow\", \"red\");\n\nprint_r(array_intersect_uassoc($array1, $array2, \"strcasecmp\"));","output":"Array\n(\n    [b] => brown\n)"}],"array_intersect_ukey":[{"title":"array_intersect_ukey() example","source":"function key_compare_func($key1, $key2)\n{\n    if ($key1 == $key2)\n        return 0;\n    else if ($key1 > $key2)\n        return 1;\n    else\n        return -1;\n}\n\n$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);\n$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);\n\nvar_dump(array_intersect_ukey($array1, $array2, 'key_compare_func'));","output":"array(2) {\n  [\"blue\"]=>\n  int(1)\n  [\"green\"]=>\n  int(3)\n}"}],"array_intersect":[{"title":"array_intersect() example","source":"$array1 = array(\"a\" => \"green\", \"red\", \"blue\");\n$array2 = array(\"b\" => \"green\", \"yellow\", \"red\");\n$result = array_intersect($array1, $array2);\nprint_r($result);","output":"Array\n(\n    [a] => green\n    [0] => red\n)"}],"array_key_exists":[{"title":"array_key_exists() example","source":"$search_array = array('first' => 1, 'second' => 4);\nif (array_key_exists('first', $search_array)) {\n    echo \"The 'first' element is in the array\";\n}","output":null},{"title":"array_key_exists() vs isset()","source":"$search_array = array('first' => null, 'second' => 4);\n\n\/\/ returns false\nisset($search_array['first']);\n\n\/\/ returns true\narray_key_exists('first', $search_array);","output":null}],"array_keys":[{"title":"array_keys() example","source":"$array = array(0 => 100, \"color\" => \"red\");\nprint_r(array_keys($array));\n\n$array = array(\"blue\", \"red\", \"green\", \"blue\", \"blue\");\nprint_r(array_keys($array, \"blue\"));\n\n$array = array(\"color\" => array(\"blue\", \"red\", \"green\"),\n               \"size\"  => array(\"small\", \"medium\", \"large\"));\nprint_r(array_keys($array));","output":"Array\n(\n    [0] => 0\n    [1] => color\n)\nArray\n(\n    [0] => 0\n    [1] => 3\n    [2] => 4\n)\nArray\n(\n    [0] => color\n    [1] => size\n)"}],"array_map":[{"title":"array_map() example","source":"function cube($n)\n{\n    return($n * $n * $n);\n}\n\n$a = array(1, 2, 3, 4, 5);\n$b = array_map(\"cube\", $a);\nprint_r($b);","output":"Array\n(\n    [0] => 1\n    [1] => 8\n    [2] => 27\n    [3] => 64\n    [4] => 125\n)"},{"title":"array_map() using a lambda function (as of PHP 5.3.0)","source":"$func = function($value) {\n    return $value * 2;\n};\n\nprint_r(array_map($func, range(1, 5)));","output":"Array\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n    [3] => 8\n    [4] => 10\n)"},{"title":"array_map() - using more arrays","source":"function show_Spanish($n, $m)\n{\n    return(\"The number $n is called $m in Spanish\");\n}\n\nfunction map_Spanish($n, $m)\n{\n    return(array($n => $m));\n}\n\n$a = array(1, 2, 3, 4, 5);\n$b = array(\"uno\", \"dos\", \"tres\", \"cuatro\", \"cinco\");\n\n$c = array_map(\"show_Spanish\", $a, $b);\nprint_r($c);\n\n$d = array_map(\"map_Spanish\", $a , $b);\nprint_r($d);","output":"\/\/ printout of $c\nArray\n(\n    [0] => The number 1 is called uno in Spanish\n    [1] => The number 2 is called dos in Spanish\n    [2] => The number 3 is called tres in Spanish\n    [3] => The number 4 is called cuatro in Spanish\n    [4] => The number 5 is called cinco in Spanish\n)\n\n\/\/ printout of $d\nArray\n(\n    [0] => Array\n        (\n            [1] => uno\n        )\n\n    [1] => Array\n        (\n            [2] => dos\n        )\n\n    [2] => Array\n        (\n            [3] => tres\n        )\n\n    [3] => Array\n        (\n            [4] => cuatro\n        )\n\n    [4] => Array\n        (\n            [5] => cinco\n        )\n\n)"},{"title":"Creating an array of arrays","source":"$a = array(1, 2, 3, 4, 5);\n$b = array(\"one\", \"two\", \"three\", \"four\", \"five\");\n$c = array(\"uno\", \"dos\", \"tres\", \"cuatro\", \"cinco\");\n\n$d = array_map(null, $a, $b, $c);\nprint_r($d);","output":"Array\n(\n    [0] => Array\n        (\n            [0] => 1\n            [1] => one\n            [2] => uno\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1] => two\n            [2] => dos\n        )\n\n    [2] => Array\n        (\n            [0] => 3\n            [1] => three\n            [2] => tres\n        )\n\n    [3] => Array\n        (\n            [0] => 4\n            [1] => four\n            [2] => cuatro\n        )\n\n    [4] => Array\n        (\n            [0] => 5\n            [1] => five\n            [2] => cinco\n        )\n\n)"},{"title":"array_map() - with string keys","source":"$arr = array(\"stringkey\" => \"value\");\nfunction cb1($a) {\n    return array ($a);\n}\nfunction cb2($a, $b) {\n    return array ($a, $b);\n}\nvar_dump(array_map(\"cb1\", $arr));\nvar_dump(array_map(\"cb2\", $arr, $arr));\nvar_dump(array_map(null,  $arr));\nvar_dump(array_map(null, $arr, $arr));","output":"array(1) {\n  [\"stringkey\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"value\"\n  }\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(5) \"value\"\n    [1]=>\n    string(5) \"value\"\n  }\n}\narray(1) {\n  [\"stringkey\"]=>\n  string(5) \"value\"\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(5) \"value\"\n    [1]=>\n    string(5) \"value\"\n  }\n}"}],"array_merge_recursive":[{"title":"array_merge_recursive() example","source":"$ar1 = array(\"color\" => array(\"favorite\" => \"red\"), 5);\n$ar2 = array(10, \"color\" => array(\"favorite\" => \"green\", \"blue\"));\n$result = array_merge_recursive($ar1, $ar2);\nprint_r($result);","output":"Array\n(\n    [color] => Array\n        (\n            [favorite] => Array\n                (\n                    [0] => red\n                    [1] => green\n                )\n\n            [0] => blue\n        )\n\n    [0] => 5\n    [1] => 10\n)"}],"array_merge":[{"title":"array_merge() example","source":"$array1 = array(\"color\" => \"red\", 2, 4);\n$array2 = array(\"a\", \"b\", \"color\" => \"green\", \"shape\" => \"trapezoid\", 4);\n$result = array_merge($array1, $array2);\nprint_r($result);","output":"Array\n(\n    [color] => green\n    [0] => 2\n    [1] => 4\n    [2] => a\n    [3] => b\n    [shape] => trapezoid\n    [4] => 4\n)"},{"title":"Simple array_merge() example","source":"$array1 = array();\n$array2 = array(1 => \"data\");\n$result = array_merge($array1, $array2);","output":"Array\n(\n    [0] => data\n)"},{"title":"array_merge() with non-array types","source":"$beginning = 'foo';\n$end = array(1 => 'bar');\n$result = array_merge((array)$beginning, (array)$end);\nprint_r($result);","output":"Array\n    (\n        [0] => foo\n        [1] => bar\n    )"}],"array_multisort":[{"title":"Sorting multiple arrays","source":"$ar1 = array(10, 100, 100, 0);\n$ar2 = array(1, 3, 2, 4);\narray_multisort($ar1, $ar2);\n\nvar_dump($ar1);\nvar_dump($ar2);","output":"array(4) {\n  [0]=> int(0)\n  [1]=> int(10)\n  [2]=> int(100)\n  [3]=> int(100)\n}\narray(4) {\n  [0]=> int(4)\n  [1]=> int(1)\n  [2]=> int(2)\n  [3]=> int(3)\n}"},{"title":"Sorting multi-dimensional array","source":"$ar = array(\n       array(\"10\", 11, 100, 100, \"a\"),\n       array(   1,  2, \"2\",   3,   1)\n      );\narray_multisort($ar[0], SORT_ASC, SORT_STRING,\n                $ar[1], SORT_NUMERIC, SORT_DESC);\nvar_dump($ar);","output":"array(2) {\n  [0]=> array(5) {\n    [0]=> string(2) \"10\"\n    [1]=> int(100)\n    [2]=> int(100)\n    [3]=> int(11)\n    [4]=> string(1) \"a\"\n  }\n  [1]=> array(5) {\n    [0]=> int(1)\n    [1]=> int(3)\n    [2]=> string(1) \"2\"\n    [3]=> int(2)\n    [4]=> int(1)\n  }\n}"},{"title":"Sorting database results","source":"$data[] = array('volume' => 67, 'edition' => 2);\n$data[] = array('volume' => 86, 'edition' => 1);\n$data[] = array('volume' => 85, 'edition' => 6);\n$data[] = array('volume' => 98, 'edition' => 2);\n$data[] = array('volume' => 86, 'edition' => 6);\n$data[] = array('volume' => 67, 'edition' => 7);","output":"volume | edition\n-------+--------\n    67 |       2\n    86 |       1\n    85 |       6\n    98 |       2\n    86 |       6\n    67 |       7"},{"title":"Case insensitive sorting","source":"$array = array('Alpha', 'atomic', 'Beta', 'bank');\n$array_lowercase = array_map('strtolower', $array);\n\narray_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);\n\nprint_r($array);","output":"Array\n(\n    [0] => Alpha\n    [1] => atomic\n    [2] => bank\n    [3] => Beta\n)"}],"array_pad":[{"title":"array_pad() example","source":"$input = array(12, 10, 9);\n\n$result = array_pad($input, 5, 0);\n\/\/ result is array(12, 10, 9, 0, 0)\n\n$result = array_pad($input, -7, -1);\n\/\/ result is array(-1, -1, -1, -1, 12, 10, 9)\n\n$result = array_pad($input, 2, \"noop\");\n\/\/ not padded","output":null}],"array_pop":[{"title":"array_pop() example","source":"$stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\");\n$fruit = array_pop($stack);\nprint_r($stack);","output":"Array\n(\n    [0] => orange\n    [1] => banana\n    [2] => apple\n)"}],"array_product":[{"title":"array_product() examples","source":"$a = array(2, 4, 6, 8);\necho \"product(a) = \" . array_product($a) . \"\\n\";\necho \"product(array()) = \" . array_product(array()) . \"\\n\";","output":"product(a) = 384\nproduct(array()) = 1"}],"array_push":[{"title":"array_push() example","source":"$stack = array(\"orange\", \"banana\");\narray_push($stack, \"apple\", \"raspberry\");\nprint_r($stack);","output":"Array\n(\n    [0] => orange\n    [1] => banana\n    [2] => apple\n    [3] => raspberry\n)"}],"array_rand":[{"title":"array_rand() example","source":"$input = array(\"Neo\", \"Morpheus\", \"Trinity\", \"Cypher\", \"Tank\");\n$rand_keys = array_rand($input, 2);\necho $input[$rand_keys[0]] . \"\\n\";\necho $input[$rand_keys[1]] . \"\\n\";","output":null}],"array_reduce":[{"title":"array_reduce() example","source":"function sum($carry, $item)\n{\n    $carry += $item;\n    return $carry;\n}\n\nfunction product($carry, $item)\n{\n    $carry *= $item;\n    return $carry;\n}\n\n$a = array(1, 2, 3, 4, 5);\n$x = array();\n\nvar_dump(array_reduce($a, \"sum\")); \/\/ int(15)\nvar_dump(array_reduce($a, \"product\", 10)); \/\/ int(1200), because: 10*1*2*3*4*5\nvar_dump(array_reduce($x, \"sum\", \"No data to reduce\")); \/\/ string(17) \"No data to reduce\"","output":null}],"array_replace_recursive":[{"title":"array_replace_recursive() example","source":"$base = array('citrus' => array( \"orange\") , 'berries' => array(\"blackberry\", \"raspberry\"), );\n$replacements = array('citrus' => array('pineapple'), 'berries' => array('blueberry'));\n\n$basket = array_replace_recursive($base, $replacements);\nprint_r($basket);\n\n$basket = array_replace($base, $replacements);\nprint_r($basket);","output":"Array\n(\n    [citrus] => Array\n        (\n            [0] => pineapple\n        )\n\n    [berries] => Array\n        (\n            [0] => blueberry\n            [1] => raspberry\n        )\n\n)\nArray\n(\n    [citrus] => Array\n        (\n            [0] => pineapple\n        )\n\n    [berries] => Array\n        (\n            [0] => blueberry\n        )\n\n)"},{"title":"array_replace_recursive() and recursive behavior","source":"$base = array('citrus' => array(\"orange\") , 'berries' => array(\"blackberry\", \"raspberry\"), 'others' => 'banana' );\n$replacements = array('citrus' => 'pineapple', 'berries' => array('blueberry'), 'others' => array('litchis'));\n$replacements2 = array('citrus' => array('pineapple'), 'berries' => array('blueberry'), 'others' => 'litchis');\n\n$basket = array_replace_recursive($base, $replacements, $replacements2);\nprint_r($basket);","output":"Array\n(\n    [citrus] => Array\n        (\n            [0] => pineapple\n        )\n\n    [berries] => Array\n        (\n            [0] => blueberry\n            [1] => raspberry\n        )\n\n    [others] => litchis\n)"}],"array_replace":[{"title":"array_replace() example","source":"$base = array(\"orange\", \"banana\", \"apple\", \"raspberry\");\n$replacements = array(0 => \"pineapple\", 4 => \"cherry\");\n$replacements2 = array(0 => \"grape\");\n\n$basket = array_replace($base, $replacements, $replacements2);\nprint_r($basket);","output":"Array\n(\n    [0] => grape\n    [1] => banana\n    [2] => apple\n    [3] => raspberry\n    [4] => cherry\n)"}],"array_reverse":[{"title":"array_reverse() example","source":"$input  = array(\"php\", 4.0, array(\"green\", \"red\"));\n$reversed = array_reverse($input);\n$preserved = array_reverse($input, true);\n\nprint_r($input);\nprint_r($reversed);\nprint_r($preserved);","output":"Array\n(\n    [0] => php\n    [1] => 4\n    [2] => Array\n        (\n            [0] => green\n            [1] => red\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [0] => green\n            [1] => red\n        )\n\n    [1] => 4\n    [2] => php\n)\nArray\n(\n    [2] => Array\n        (\n            [0] => green\n            [1] => red\n        )\n\n    [1] => 4\n    [0] => php\n)"}],"array_search":[{"title":"array_search() example","source":"$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');\n\n$key = array_search('green', $array); \/\/ $key = 2;\n$key = array_search('red', $array);   \/\/ $key = 1;","output":null}],"array_shift":[{"title":"array_shift() example","source":"$stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\");\n$fruit = array_shift($stack);\nprint_r($stack);","output":"Array\n(\n    [0] => banana\n    [1] => apple\n    [2] => raspberry\n)"}],"array_slice":[{"title":"array_slice() examples","source":"$input = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n\n$output = array_slice($input, 2);      \/\/ returns \"c\", \"d\", and \"e\"\n$output = array_slice($input, -2, 1);  \/\/ returns \"d\"\n$output = array_slice($input, 0, 3);   \/\/ returns \"a\", \"b\", and \"c\"\n\n\/\/ note the differences in the array keys\nprint_r(array_slice($input, 2, -1));\nprint_r(array_slice($input, 2, -1, true));","output":"Array\n(\n    [0] => c\n    [1] => d\n)\nArray\n(\n    [2] => c\n    [3] => d\n)"}],"array_splice":[{"title":"array_splice() examples","source":"$input = array(\"red\", \"green\", \"blue\", \"yellow\");\narray_splice($input, 2);\n\/\/ $input is now array(\"red\", \"green\")\n\n$input = array(\"red\", \"green\", \"blue\", \"yellow\");\narray_splice($input, 1, -1);\n\/\/ $input is now array(\"red\", \"yellow\")\n\n$input = array(\"red\", \"green\", \"blue\", \"yellow\");\narray_splice($input, 1, count($input), \"orange\");\n\/\/ $input is now array(\"red\", \"orange\")\n\n$input = array(\"red\", \"green\", \"blue\", \"yellow\");\narray_splice($input, -1, 1, array(\"black\", \"maroon\"));\n\/\/ $input is now array(\"red\", \"green\",\n\/\/          \"blue\", \"black\", \"maroon\")\n\n$input = array(\"red\", \"green\", \"blue\", \"yellow\");\narray_splice($input, 3, 0, \"purple\");\n\/\/ $input is now array(\"red\", \"green\",\n\/\/          \"blue\", \"purple\", \"yellow\");","output":null},{"title":"array_splice() examples","source":"array_push($input, $x, $y);\narray_splice($input, count($input), 0, array($x, $y));\narray_pop($input);\narray_splice($input, -1);\narray_shift($input);\narray_splice($input, 0, 1);\narray_unshift($input, $x, $y);\narray_splice($input, 0, 0, array($x, $y));\n$input[$x] = $y; \/\/ for arrays where key equals offset\narray_splice($input, $x, 1, $y);","output":null}],"array_sum":[{"title":"array_sum() examples","source":"$a = array(2, 4, 6, 8);\necho \"sum(a) = \" . array_sum($a) . \"\\n\";\n\n$b = array(\"a\" => 1.2, \"b\" => 2.3, \"c\" => 3.4);\necho \"sum(b) = \" . array_sum($b) . \"\\n\";","output":"sum(a) = 20\nsum(b) = 6.9"}],"array_udiff_assoc":[{"title":"array_udiff_assoc() example","source":"class cr {\n    private $priv_member;\n    function cr($val)\n    {\n        $this->priv_member = $val;\n    }\n\n    static function comp_func_cr($a, $b)\n    {\n        if ($a->priv_member === $b->priv_member) return 0;\n        return ($a->priv_member > $b->priv_member)? 1:-1;\n    }\n}\n\n$a = array(\"0.1\" => new cr(9), \"0.5\" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);\n$b = array(\"0.2\" => new cr(9), \"0.5\" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);\n\n$result = array_udiff_assoc($a, $b, array(\"cr\", \"comp_func_cr\"));\nprint_r($result);","output":"Array\n(\n    [0.1] => cr Object\n        (\n            [priv_member:private] => 9\n        )\n\n    [0.5] => cr Object\n        (\n            [priv_member:private] => 12\n        )\n\n    [0] => cr Object\n        (\n            [priv_member:private] => 23\n        )\n)"}],"array_udiff_uassoc":[{"title":"array_udiff_uassoc() example","source":"class cr {\n    private $priv_member;\n    function cr($val)\n    {\n        $this->priv_member = $val;\n    }\n\n    static function comp_func_cr($a, $b)\n    {\n        if ($a->priv_member === $b->priv_member) return 0;\n        return ($a->priv_member > $b->priv_member)? 1:-1;\n    }\n\n    static function comp_func_key($a, $b)\n    {\n        if ($a === $b) return 0;\n        return ($a > $b)? 1:-1;\n    }\n}\n$a = array(\"0.1\" => new cr(9), \"0.5\" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);\n$b = array(\"0.2\" => new cr(9), \"0.5\" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);\n\n$result = array_udiff_uassoc($a, $b, array(\"cr\", \"comp_func_cr\"), array(\"cr\", \"comp_func_key\"));\nprint_r($result);","output":"Array\n(\n    [0.1] => cr Object\n        (\n            [priv_member:private] => 9\n        )\n\n    [0.5] => cr Object\n        (\n            [priv_member:private] => 12\n        )\n\n    [0] => cr Object\n        (\n            [priv_member:private] => 23\n        )\n)"}],"array_udiff":[{"title":"array_udiff() example using stdClass Objects","source":"\/\/ Arrays to compare\n$array1 = array(new stdclass, new stdclass,\n                new stdclass, new stdclass,\n               );\n\n$array2 = array(\n                new stdclass, new stdclass,\n               );\n\n\/\/ Set some properties for each object\n$array1[0]->width = 11; $array1[0]->height = 3;\n$array1[1]->width = 7;  $array1[1]->height = 1;\n$array1[2]->width = 2;  $array1[2]->height = 9;\n$array1[3]->width = 5;  $array1[3]->height = 7;\n\n$array2[0]->width = 7;  $array2[0]->height = 5;\n$array2[1]->width = 9;  $array2[1]->height = 2;\n\nfunction compare_by_area($a, $b) {\n    $areaA = $a->width * $a->height;\n    $areaB = $b->width * $b->height;\n    \n    if ($areaA < $areaB) {\n        return -1;\n    } elseif ($areaA > $areaB) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nprint_r(array_udiff($array1, $array2, 'compare_by_area'));","output":"Array\n(\n    [0] => stdClass Object\n        (\n            [width] => 11\n            [height] => 3\n        )\n\n    [1] => stdClass Object\n        (\n            [width] => 7\n            [height] => 1\n        )\n\n)"},{"title":"array_udiff() example using DateTime Objects","source":"class MyCalendar {\n    public $free = array();\n    public $booked = array();\n\n    public function __construct($week = 'now') {\n        $start = new DateTime($week);\n        $start->modify('Monday this week midnight');\n        $end = clone $start;\n        $end->modify('Friday this week midnight');\n        $interval = new DateInterval('P1D');\n        foreach (new DatePeriod($start, $interval, $end) as $freeTime) {\n            $this->free[] = $freeTime;\n        }\n    }\n\n    public function bookAppointment(DateTime $date, $note) {\n        $this->booked[] = array('date' => $date->modify('midnight'), 'note' => $note);\n    }\n\n    public function checkAvailability() {\n        return array_udiff($this->free, $this->booked, array($this, 'customCompare'));\n    }\n    \n    public function customCompare($free, $booked) {\n        if (is_array($free)) $a = $free['date'];\n        else $a = $free;\n        if (is_array($booked)) $b = $booked['date'];\n        else $b = $booked;\n        if ($a == $b) {\n            return 0;\n        } elseif ($a > $b) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}\n\n\/\/ Create a calendar for weekly appointments\n$myCalendar = new MyCalendar;\n\n\/\/ Book some appointments for this week\n$myCalendar->bookAppointment(new DateTime('Monday this week'), \"Cleaning GoogleGuy's apartment.\");\n$myCalendar->bookAppointment(new DateTime('Wednesday this week'), \"Going on a snowboarding trip.\");\n$myCalendar->bookAppointment(new DateTime('Friday this week'), \"Fixing buggy code.\");\n\n\/\/ Check availability of days by comparing $booked dates against $free dates\necho \"I'm available on the following days this week...\\n\\n\";\nforeach ($myCalendar->checkAvailability() as $free) {\n    echo $free->format('l'), \"\\n\"; \n}\necho \"\\n\\n\";\necho \"I'm busy on the following days this week...\\n\\n\";\nforeach ($myCalendar->booked as $booked) {\n    echo $booked['date']->format('l'), \": \", $booked['note'], \"\\n\"; \n}","output":"I'm available on the following days this week...\n\nTuesday\nThursday\n\n\nI'm busy on the following days this week...\n\nMonday: Cleaning GoogleGuy's apartment.\nWednesday: Going on a snowboarding trip.\nFriday: Fixing buggy code."}],"array_uintersect_assoc":[{"title":"array_uintersect_assoc() example","source":"$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"GREEN\", \"B\" => \"brown\", \"yellow\", \"red\");\n\nprint_r(array_uintersect_assoc($array1, $array2, \"strcasecmp\"));","output":"Array\n(\n    [a] => green\n)"}],"array_uintersect_uassoc":[{"title":"array_uintersect_uassoc() example","source":"$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"GREEN\", \"B\" => \"brown\", \"yellow\", \"red\");\n\nprint_r(array_uintersect_uassoc($array1, $array2, \"strcasecmp\", \"strcasecmp\"));","output":"Array\n(\n    [a] => green\n    [b] => brown\n)"}],"array_uintersect":[{"title":"array_uintersect() example","source":"$array1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");\n$array2 = array(\"a\" => \"GREEN\", \"B\" => \"brown\", \"yellow\", \"red\");\n\nprint_r(array_uintersect($array1, $array2, \"strcasecmp\"));","output":"Array\n(\n    [a] => green\n    [b] => brown\n    [0] => red\n)"}],"array_unique":[{"title":"array_unique() example","source":"$input = array(\"a\" => \"green\", \"red\", \"b\" => \"green\", \"blue\", \"red\");\n$result = array_unique($input);\nprint_r($result);","output":"Array\n(\n    [a] => green\n    [0] => red\n    [1] => blue\n)"},{"title":"array_unique() and types","source":"$input = array(4, \"4\", \"3\", 4, 3, \"3\");\n$result = array_unique($input);\nvar_dump($result);","output":"array(2) {\n  [0] => int(4)\n  [2] => string(1) \"3\"\n}"}],"array_unshift":[{"title":"array_unshift() example","source":"$queue = array(\"orange\", \"banana\");\narray_unshift($queue, \"apple\", \"raspberry\");\nprint_r($queue);","output":"Array\n(\n    [0] => apple\n    [1] => raspberry\n    [2] => orange\n    [3] => banana\n)"}],"array_values":[{"title":"array_values() example","source":"$array = array(\"size\" => \"XL\", \"color\" => \"gold\");\nprint_r(array_values($array));","output":"Array\n(\n    [0] => XL\n    [1] => gold\n)"}],"array_walk_recursive":[{"title":"array_walk_recursive() example","source":"$sweet = array('a' => 'apple', 'b' => 'banana');\n$fruits = array('sweet' => $sweet, 'sour' => 'lemon');\n\nfunction test_print($item, $key)\n{\n    echo \"$key holds $item\\n\";\n}\n\narray_walk_recursive($fruits, 'test_print');","output":"a holds apple\nb holds banana\nsour holds lemon"}],"array_walk":[{"title":"array_walk() example","source":"$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\n\nfunction test_alter(&$item1, $key, $prefix)\n{\n    $item1 = \"$prefix: $item1\";\n}\n\nfunction test_print($item2, $key)\n{\n    echo \"$key. $item2<br \/>\\n\";\n}\n\necho \"Before ...:\\n\";\narray_walk($fruits, 'test_print');\n\narray_walk($fruits, 'test_alter', 'fruit');\necho \"... and after:\\n\";\n\narray_walk($fruits, 'test_print');","output":"Before ...:\nd. lemon\na. orange\nb. banana\nc. apple\n... and after:\nd. fruit: lemon\na. fruit: orange\nb. fruit: banana\nc. fruit: apple"}],"array":[{"title":"array() example","source":"$fruits = array (\n    \"fruits\"  => array(\"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\"),\n    \"numbers\" => array(1, 2, 3, 4, 5, 6),\n    \"holes\"   => array(\"first\", 5 => \"second\", \"third\")\n);","output":null},{"title":"Automatic index with array()","source":"$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);\nprint_r($array);","output":"Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 13\n    [4] => 1\n    [8] => 1\n    [9] => 19\n)"},{"title":"1-based index with array()","source":"$firstquarter = array(1 => 'January', 'February', 'March');\nprint_r($firstquarter);","output":"Array\n(\n    [1] => January\n    [2] => February\n    [3] => March\n)"},{"title":"Accessing an array inside double quotes","source":"$foo = array('bar' => 'baz');\necho \"Hello {$foo['bar']}!\"; \/\/ Hello baz!","output":null}],"arsort":[{"title":"arsort() example","source":"$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\narsort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"a = orange\nd = lemon\nb = banana\nc = apple"}],"asort":[{"title":"asort() example","source":"$fruits = array(\"d\" => \"lemon\", \"a\" => \"orange\", \"b\" => \"banana\", \"c\" => \"apple\");\nasort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"c = apple\nb = banana\nd = lemon\na = orange"}],"assert_options":[{"title":"assert_options() example","source":"\/\/ This is our function to handle \n\/\/ assert failures\nfunction assert_failure()\n{\n    echo 'Assert failed';\n}\n\n\/\/ This is our test function\nfunction test_assert($parameter)\n{\n    assert(is_bool($parameter));\n}\n\n\/\/ Set our assert options\nassert_options(ASSERT_ACTIVE,   true);\nassert_options(ASSERT_BAIL,     true);\nassert_options(ASSERT_WARNING,  false);\nassert_options(ASSERT_CALLBACK, 'assert_failure');\n\n\/\/ Make an assert that would fail\ntest_assert(1);\n\n\/\/ This is never reached due to ASSERT_BAIL \n\/\/ being true\necho 'Never reached';","output":null}],"base_convert":[{"title":"base_convert() example","source":"$hexadecimal = 'a37334';\necho base_convert($hexadecimal, 16, 2);","output":1.01000110111e+23}],"base64_decode":[{"title":"base64_decode() example","source":"$str = 'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==';\necho base64_decode($str);","output":"This is an encoded string"}],"base64_encode":[{"title":"base64_encode() example","source":"$str = 'This is an encoded string';\necho base64_encode($str);","output":"VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw=="}],"basename":[{"title":"basename() example","source":"echo \"1) \".basename(\"\/etc\/sudoers.d\", \".d\").PHP_EOL;\necho \"2) \".basename(\"\/etc\/sudoers.d\").PHP_EOL;\necho \"3) \".basename(\"\/etc\/passwd\").PHP_EOL;\necho \"4) \".basename(\"\/etc\/\").PHP_EOL;\necho \"5) \".basename(\".\").PHP_EOL;\necho \"6) \".basename(\"\/\");","output":"1) sudoers\n2) sudoers.d\n3) passwd\n4) etc\n5) .\n6)"}],"bbcode_add_smiley":[{"title":"bbcode_add_smiley() usage example","source":"\/*\n * Prepare the rule set \n *\/\n$arrayBBCode=array(\n    ''=>         array('type'=>BBCODE_TYPE_ROOT,  \n                       'childs'=>'!i'),\n    'b'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<b>', \n                       'close_tag'=>'<\/b>'),\n    'u'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<u>', \n                       'close_tag'=>'<\/u>', \n                       'flags'=>BBCODE_FLAGS_SMILEYS_OFF),\n    'i'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<i>', \n                       'close_tag'=>'<\/i>', \n                       'childs'=>'b'),\n);\n\/* \n * Parsed Text\n *\/\n$text=<<<EOF\n[i] No parse Test [\/i] :)\n[b] Parsed, with smiley :( [\/b]\n[u] Parsed, with no smiley :D [\/u]\nEOF;\n\/*\n * Init the parser\n *\/\n$BBHandler=bbcode_create($arrayBBCode);\n\/*\n * Add Smiley rules to parser\n *\/\nbbcode_add_smiley($BBHandler, \":)\", \"<img src=\\\"smiley.gif\\\" alt=\\\":)\\\" \/>\");\nbbcode_add_smiley($BBHandler, \":(\", \"<img src=\\\"sad.gif\\\" alt=\\\":(\\\" \/>\");\nbbcode_add_smiley($BBHandler, \":D\", \"<img src=\\\"happy.gif\\\" alt=\\\":D\\\" \/>\");\nbbcode_add_smiley($BBHandler, \":p\", \"<img src=\\\"tong.gif\\\" alt=\\\":p\\\" \/>\");\nbbcode_add_smiley($BBHandler, \":|\", \"<img src=\\\"special.gif\\\" alt=\\\":|\\\" \/>\");\nbbcode_add_smiley($BBHandler, \":6:\", \"<img src=\\\"six.gif\\\" alt=\\\":6:\\\" \/>\");\n\/*\n * Parse the text\n *\/\necho bbcode_parse($BBHandler,$text);","output":"<i> No parse Test <\/i> <img src=\"smiley.gif\" alt=\":)\" \/>\n<b> Parsed, with smiley <img src=\"sad.gif\" alt=\":(\" \/> <\/b>\n<u> Parsed, with no smiley :D <\/u>"}],"bbcode_create":[{"title":"bbcode_create() example","source":"$arrayBBCode=array(\n    ''=>         array('type'=>BBCODE_TYPE_ROOT,  'childs'=>'!i'),\n    'i'=>        array('type'=>BBCODE_TYPE_NOARG, 'open_tag'=>'<i>',\n                    'close_tag'=>'<\/i>', 'childs'=>'b'),\n    'url'=>      array('type'=>BBCODE_TYPE_OPTARG,\n                    'open_tag'=>'<a href=\"{PARAM}\">', 'close_tag'=>'<\/a>',\n                    'default_arg'=>'{CONTENT}',\n                    'childs'=>'b,i'),\n    'img'=>      array('type'=>BBCODE_TYPE_NOARG,\n                    'open_tag'=>'<img src=\"', 'close_tag'=>'\" \/>',\n                    'childs'=>''),\n    'b'=>        array('type'=>BBCODE_TYPE_NOARG, 'open_tag'=>'<b>',\n                    'close_tag'=>'<\/b>'),\n);\n$text=<<<EOF\n[b]Bold Text[\/b]\n[i]Italic Text[\/i]\n[url]http:\/\/www.php.net\/[\/url]\n[url=http:\/\/pecl.php.net\/][b]Content Text[\/b][\/url]\n[img]http:\/\/static.php.net\/www.php.net\/images\/php.gif[\/img]\n[url=http:\/\/www.php.net\/]\n[img]http:\/\/static.php.net\/www.php.net\/images\/php.gif[\/img]\n[\/url]\nEOF;\n$BBHandler=bbcode_create($arrayBBCode);\necho bbcode_parse($BBHandler,$text);","output":"<b>Bold Text<\/b>\n[i]Italic Text[\/i]\n<a href=\"http:\/\/www.php.net\/\">http:\/\/www.php.net\/<\/a>\n<a href=\"http:\/\/pecl.php.net\/\"><b>Content Text<\/b><\/a>\n<img src=\"http:\/\/static.php.net\/www.php.net\/images\/php.gif\" \/>\n<a href=\"http:\/\/www.php.net\/\">\n[img]http:\/\/static.php.net\/www.php.net\/images\/php.gif[\/img]\n<\/a>"}],"bbcode_set_arg_parser":[{"title":"bbcode_set_arg_parser() usage example","source":"\/*\n * Generating bbcode ruleset for main parser \n *\/\n$arrayBBCode=array(\n    'quote'=>    array('type'=>BBCODE_TYPE_ARG,\n                       'open_tag'=>'<quote><h4>Source: {PARAM}<\/h4>', \n                       'close_tag'=>'<\/quote>',\n                       'flags'=>BBCODE_FLAGS_REMOVE_IF_EMPTY|BBCODE_FLAGS_ARG_PARSING),\n    'b'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<b>', 'close_tag'=>'<\/b>', \n                       'flags'=>BBCODE_FLAGS_REMOVE_IF_EMPTY),\n    'u'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<u>', 'close_tag'=>'<\/u>', \n                       'flags'=>BBCODE_FLAGS_SMILEYS_OFF | BBCODE_FLAGS_REMOVE_IF_EMPTY | BBCODE_FLAGS_SMILEYS_OFF),\n    'i'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<i>', 'close_tag'=>'<\/i>', \n                       'flags'=>BBCODE_FLAGS_REMOVE_IF_EMPTY),\n);\n\/*\n * Generating bbcode ruleset for argument parser \n *\/\n$arrayBBCode_arg=array(\n    'b'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<b class=\"sub\">', 'close_tag'=>'<\/b>', \n                       'flags'=>BBCODE_FLAGS_REMOVE_IF_EMPTY),\n    'u'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<u>', 'close_tag'=>'<\/u>',\n                       'flags'=>BBCODE_FLAGS_SMILEYS_OFF | BBCODE_FLAGS_REMOVE_IF_EMPTY | BBCODE_FLAGS_SMILEYS_OFF),\n    'i'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<i>', 'close_tag'=>'<\/i>', \n                       'flags'=>BBCODE_FLAGS_REMOVE_IF_EMPTY),\n);\n\/*\n * Text we are going to parse\n *\/\n$text=<<<EOF\n[quote=\"[b]Test[\/b]\"]\nFoo :)\n[\/quote]\n[b]Bar example :)[\/b] :)\nEOF;\n\/*\n * Init the two parsers\n *\/\n$BBHandler=bbcode_create($arrayBBCode);\n$BBArgHandler=bbcode_create($arrayBBCode_arg);\n\/*\n * Setting Flags on the parsers\n *\/\nbbcode_set_flags($BBHandler,\n                 BBCODE_CORRECT_REOPEN_TAGS|BBCODE_DEFAULT_SMILEYS_ON|BBCODE_ARG_DOUBLE_QUOTE|\n                 BBCODE_ARG_SINGLE_QUOTE|BBCODE_ARG_HTML_QUOTE,BBCODE_SET_FLAGS_SET);\nbbcode_set_flags($BBArgHandler,\n                 BBCODE_CORRECT_REOPEN_TAGS|BBCODE_DEFAULT_SMILEYS_ON|BBCODE_ARG_DOUBLE_QUOTE|\n                 BBCODE_ARG_SINGLE_QUOTE|BBCODE_ARG_HTML_QUOTE,BBCODE_SET_FLAGS_SET);\n\/*\n * Setting $BBArgHandler as the BBHandler argument parser\n *\/\nbbcode_set_arg_parser($BBHandler,$BBArgHandler);\n\/*\n * Adding Smileys handling rules to Main parser\n *\/\nbbcode_add_smiley($BBHandler, \":)\", \"<img src=\\\"smiley.gif\\\" alt=\\\":)\\\" \/>\");\n\/*\n * Use the main parser to parse text\n *\/\necho bbcode_parse($BBHandler,$text);","output":"<quote><h4>Source: <b class=\"sub\">Test<\/b><\/h4>\nFoo <img src=\"smiley.gif\" alt=\":)\" \/>\n<\/quote>\n<b>Bar example :)<\/b> <img src=\"smiley.gif\" alt=\":)\" \/>"}],"bbcode_set_flags":[{"title":"bbcode_set_flags() usage example","source":"\/*\n * Preparing RuleSet\n *\/\n$arrayBBCode=array(\n    'b'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<b>', 'close_tag'=>'<\/b>'),\n    'u'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<u>', 'close_tag'=>'<\/u>'),\n    'i'=>        array('type'=>BBCODE_TYPE_NOARG, \n                       'open_tag'=>'<i>', 'close_tag'=>'<\/i>'),\n);\n\/*\n * Paired incorrectly nested BBCode \n *\/\n$text=\"[i] Parser [b] Auto Correction [\/i] at work [\/b]\\n\";\n$BBHandler=bbcode_create($arrayBBCode);\necho bbcode_parse($BBHandler,$text);\n\/\/ Enabling reopening of automatically closed elements\nbbcode_set_flags($BBHandler,BBCODE_CORRECT_REOPEN_TAGS, \n                 BBCODE_SET_FLAGS_SET);\necho bbcode_parse($BBHandler,$text);\n\n\/*\n * Unpaired incorrectly nested BBCode \n *\/\n$text=\"[i] Parser [b] Auto Correction [\/i] at work\\n\";\necho bbcode_parse($BBHandler,$text);\n\/\/ Enabling automatic close of pending tags\nbbcode_set_flags($BBHandler,\n                 BBCODE_CORRECT_REOPEN_TAGS|BBCODE_AUTO_CORRECT, \n                 BBCODE_SET_FLAGS_SET);\necho bbcode_parse($BBHandler,$text);","output":"<i> Parser <b> Auto Correction <\/b><\/i> at work \n<i> Parser <b> Auto Correction <\/b><\/i><b> at work <\/b>\n<i> Parser [b] Auto Correction <\/i> at work\n<i> Parser <b> Auto Correction <\/b><\/i><b> at work\n<\/b>"}],"bcadd":[{"title":"bcadd() example","source":"$a = '1.234';\n$b = '5';\n\necho bcadd($a, $b);     \/\/ 6\necho bcadd($a, $b, 4);  \/\/ 6.2340","output":null}],"bccomp":[{"title":"bccomp() example","source":"echo bccomp('1', '2') . \"\\n\";   \/\/ -1\necho bccomp('1.00001', '1', 3); \/\/ 0\necho bccomp('1.00001', '1', 5); \/\/ 1","output":null}],"bcdiv":[{"title":"bcdiv() example","source":"echo bcdiv('105', '6.55957', 3);  \/\/ 16.007","output":null}],"bcmod":[{"title":"bcmod() example","source":"echo bcmod('4', '2'); \/\/ 0\necho bcmod('2', '4'); \/\/ 2","output":null}],"bcmul":[{"title":"bcmul() example","source":"echo bcmul('1.34747474747', '35', 3); \/\/ 47.161\necho bcmul('2', '4'); \/\/ 8","output":null}],"bcompiler_load_exe":[{"title":"bcompiler_load_exe() example","source":"bcompiler_load_exe(\"\/tmp\/example.exe\");\nprint_r(get_defined_classes());","output":null}],"bcompiler_load":[{"title":"bcompiler_load() example","source":"bcompiler_load(\"\/tmp\/example\");\n\nprint_r(get_defined_classes());","output":null}],"bcompiler_parse_class":[{"title":"bcompiler_parse_class() example","source":"function readByteCodes($data) {\n    print_r($data);\n}\n\nbcompiler_parse_class(\"DB\",\"readByteCodes\");","output":null}],"bcompiler_read":[{"title":"bcompiler_read() example","source":"$fh = fopen(\"\/tmp\/example\",\"r\");\nbcompiler_read($fh);\nfclose($fh);\nprint_r(get_defined_classes());","output":null}],"bcompiler_write_class":[{"title":"bcompiler_write_class() example","source":"$fh = fopen(\"\/tmp\/example\",\"w\");\nbcompiler_write_header($fh);\nbcompiler_write_class($fh,\"DB\");\n\/\/ you must write DB_common before DB_mysql, as DB_mysql extends DB_common.\nbcompiler_write_class($fh,\"DB_common\");\nbcompiler_write_class($fh,\"DB_mysql\");\nbcompiler_write_footer($fh);\nfclose($fh);","output":null}],"bcompiler_write_constant":[{"title":"bcompiler_write_constant() example","source":"define(\"MODULE_MAX\", 30);\n\n$fh = fopen(\"\/tmp\/example\",\"w\");\nbcompiler_write_header($fh);\nbcompiler_write_constant($fh,\"MODULE_MAX\");\nbcompiler_write_footer($fh);\nfclose($fh);","output":null}],"bcompiler_write_exe_footer":[{"title":"bcompiler_write_exe_footer() example","source":"\/* creating the output file (example.exe) *\/\n$fh = fopen(\"example.exe\", \"w\");\n\n\/* 1) writing a stub (phpe.exe) *\/\n$size = filesize(\"phpe.exe\");\n$fr = fopen(\"phpe.exe\", \"r\");\nfwrite($fh, fread($fr, $size), $size);\n$startpos = ftell($fh);\n\n\/* 2) writing bytecodes *\/\nbcompiler_write_header($fh);\nbcompiler_write_class($fh, \"myclass\");\nbcompiler_write_function($fh, \"main\");\nbcompiler_write_footer($fh);\n\n\/* 3) writing EXE footer *\/\nbcompiler_write_exe_footer($fh, $startpos);\n\n\/* closing the output file *\/\nfclose($fh);","output":null}],"bcompiler_write_file":[{"title":"bcompiler_write_file() example","source":"$fh = fopen(\"example.phb\", \"w\");\nbcompiler_write_header($fh);\nbcompiler_write_file($fh, \"example.php\");\nbcompiler_write_footer($fh);\nfclose($fh);\n\/* the following should be equivalent:\ninclude \"example.php\";\n   and\ninclude \"example.phb\";\n*\/","output":null}],"bcompiler_write_footer":[{"title":"bcompiler_write_footer() example","source":"$fh = fopen(\"\/tmp\/example\",\"w\");\nbcompiler_write_header($fh);\nbcompiler_write_class($fh,\"DB\");\nbcompiler_write_class($fh,\"DB_common\");\nbcompiler_write_footer($fh);\nfclose($fh);","output":null}],"bcompiler_write_function":[{"title":"bcompiler_write_function() example","source":"$fh = fopen(\"\/tmp\/example\",\"w\");\nbcompiler_write_header($fh);\nbcompiler_write_function($fh,\"my_function_a\");\nbcompiler_write_function($fh,\"my_function_b\");\nbcompiler_write_footer($fh);\nfclose($fh);","output":null}],"bcompiler_write_functions_from_file":[{"title":"bcompiler_write_functions_from_file() example","source":"require('module.php');\n\n$fh = fopen(\"\/tmp\/example\",\"w\");\nbcompiler_write_header($fh);\nbcompiler_write_functions_from_file($fh,'module.php');\nbcompiler_write_footer($fh);\nfclose($fh);","output":null}],"bcompiler_write_header":[{"title":"bcompiler_write_header() example","source":"$fh = fopen(\"\/tmp\/example\",\"w\");\nbcompiler_write_header($fh);\nbcompiler_write_class($fh,\"DB\");\nbcompiler_write_footer($fh);\nfclose($fh);","output":null}],"bcpow":[{"title":"bcpow() example","source":"echo bcpow('4.2', '3', 2); \/\/ 74.08","output":null},{"title":"bcpow() scale example","source":"echo bcpow('5', '2', 2);     \/\/ prints \"25\", not \"25.00\"","output":null}],"bcpowmod":[{"title":null,"source":"$a = bcpowmod($x, $y, $mod);\n\n$b = bcmod(bcpow($x, $y), $mod);\n\n\/\/ $a and $b are equal to each other.","output":null}],"bcscale":[{"title":"bcscale() example","source":"\/\/ default scale : 3\nbcscale(3);\necho bcdiv('105', '6.55957'); \/\/ 16.007\n\n\/\/ this is the same without bcscale()\necho bcdiv('105', '6.55957', 3); \/\/ 16.007","output":null}],"bcsqrt":[{"title":"bcsqrt() example","source":"echo bcsqrt('2', 3); \/\/ 1.414","output":null}],"bcsub":[{"title":"bcsub() example","source":"$a = '1.234';\n$b = '5';\n\necho bcsub($a, $b);     \/\/ -3\necho bcsub($a, $b, 4);  \/\/ -3.7660","output":null}],"bindec":[{"title":"bindec() example","source":"echo bindec('110011') . \"\\n\";\necho bindec('000110011') . \"\\n\";\n\necho bindec('111');","output":"51\n51\n7"},{"title":"bindec() interprets input as unsigned integers","source":"\/*\n * The lesson from this example is in the output\n * rather than the PHP code itself.\n *\/\n\n$magnitude_lower = pow(2, (PHP_INT_SIZE * 8) - 2);\np($magnitude_lower - 1);\np($magnitude_lower, 'See the rollover?  Watch it next time around...');\n\np(PHP_INT_MAX, 'PHP_INT_MAX');\np(~PHP_INT_MAX, 'interpreted to be one more than PHP_INT_MAX');\n\nif (PHP_INT_SIZE == 4) {\n    $note = 'interpreted to be the largest unsigned integer';\n} else {\n    $note = 'interpreted to be the largest unsigned integer\n              (18446744073709551615) but skewed by float precision';\n}\np(-1, $note);\n\n\nfunction p($input, $note = '') {\n    echo \"input:        $input\\n\";\n\n    $format = '%0' . (PHP_INT_SIZE * 8) . 'b';\n    $bin = sprintf($format, $input);\n    echo \"binary:       $bin\\n\";\n\n    ini_set('precision', 20);  \/\/ For readability on 64 bit boxes.\n    $dec = bindec($bin);\n    echo 'bindec():     ' . $dec . \"\\n\";\n\n    if ($note) {\n        echo \"NOTE:         $note\\n\";\n    }\n\n    echo \"\\n\";\n}","output":"input:        1073741823\nbinary:       00111111111111111111111111111111\nbindec():     1073741823\n\ninput:        1073741824\nbinary:       01000000000000000000000000000000\nbindec():     1073741824\nNOTE:         See the rollover?  Watch it next time around...\n\ninput:        2147483647\nbinary:       01111111111111111111111111111111\nbindec():     2147483647\nNOTE:         PHP_INT_MAX\n\ninput:        -2147483648\nbinary:       10000000000000000000000000000000\nbindec():     2147483648\nNOTE:         interpreted to be one more than PHP_INT_MAX\n\ninput:        -1\nbinary:       11111111111111111111111111111111\nbindec():     4294967295\nNOTE:         interpreted to be the largest unsigned integer"}],"bindtextdomain":[{"title":"bindtextdomain() example","source":"$domain = 'myapp';\necho bindtextdomain($domain, '\/usr\/share\/myapp\/locale');","output":"\/usr\/share\/myapp\/locale"}],"blenc_encrypt":[{"title":"blenc_encrypt() example","source":"\/* read the PHP source code *\/\n$source_code = file_get_contents(\"my_source_to_protect.php\");\n\n\/* create the encrypted version *\/\n$redistributable_key = blenc_encrypt($source_code, \"my_source_encoded.php\");\n\n\/* read which is the key_file *\/\n$key_file = ini_get('blenc.key_file');\n\n\/* save the redistributable key *\/\nfile_put_contents($key_file, $redistributable_key, FILE_APPEND);","output":null}],"boolval":[{"title":"boolval() examples","source":"echo '0:        '.(boolval(0) ? 'true' : 'false').\"\\n\";\necho '42:       '.(boolval(42) ? 'true' : 'false').\"\\n\";\necho '0.0:      '.(boolval(0.0) ? 'true' : 'false').\"\\n\";\necho '4.2:      '.(boolval(4.2) ? 'true' : 'false').\"\\n\";\necho '\"\":       '.(boolval(\"\") ? 'true' : 'false').\"\\n\";\necho '\"string\": '.(boolval(\"string\") ? 'true' : 'false').\"\\n\";\necho '\"0\":      '.(boolval(\"0\") ? 'true' : 'false').\"\\n\";\necho '\"1\":      '.(boolval(\"1\") ? 'true' : 'false').\"\\n\";\necho '[1, 2]:   '.(boolval([1, 2]) ? 'true' : 'false').\"\\n\";\necho '[]:       '.(boolval([]) ? 'true' : 'false').\"\\n\";\necho 'stdClass: '.(boolval(new stdClass) ? 'true' : 'false').\"\\n\";","output":"0:        false\n42:       true\n0.0:      false\n4.2:      true\n\"\":       false\n\"string\": true\n\"0\":      false\n\"1\":      true\n[1, 2]:   true\n[]:       false\nstdClass: true"}],"bzcompress":[{"title":"Compressing data","source":"$str = \"sample data\";\n$bzstr = bzcompress($str, 9);\necho $bzstr;","output":null}],"bzdecompress":[{"title":"Decompressing a String","source":"$start_str = \"This is not an honest face?\";\n$bzstr = bzcompress($start_str);\n\necho \"Compressed String: \";\necho $bzstr;\necho \"\\n<br \/>\\n\";\n\n$str = bzdecompress($bzstr);\necho \"Decompressed String: \";\necho $str;\necho \"\\n<br \/>\\n\";","output":null}],"bzerror":[{"title":"bzerror() example","source":"$error = bzerror($bz);\n\necho $error[\"errno\"];\necho $error[\"errstr\"];","output":null}],"bzopen":[{"title":"bzopen() example","source":"$file = \"\/tmp\/foo.bz2\";\n$bz = bzopen($file, \"r\") or die(\"Couldn't open $file for reading\");\n\nbzclose($bz);","output":null}],"bzread":[{"title":"bzread() example","source":"$file = \"\/tmp\/foo.bz2\";\n$bz = bzopen($file, \"r\") or die(\"Couldn't open $file\");\n\n$decompressed_file = '';\nwhile (!feof($bz)) {\n  $decompressed_file .= bzread($bz, 4096);\n}\nbzclose($bz);\n\necho \"The contents of $file are: <br \/>\\n\";\necho $decompressed_file;","output":null}],"bzwrite":[{"title":"bzwrite() example","source":"$str = \"uncompressed data\";\n$bz = bzopen(\"\/tmp\/foo.bz2\", \"w\");\nbzwrite($bz, $str, strlen($str));\nbzclose($bz);","output":null}],"cairo_create":[{"title":"cairo_create() example","source":"\/* ... *\/","output":"..."}],"cairo_font_face_get_type":[{"title":"cairo_font_face_get_type() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_create":[{"title":"cairo_font_options_create() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_equal":[{"title":"cairo_font_options_equal() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_get_antialias":[{"title":"cairo_font_options_get_antialias() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_get_hint_metrics":[{"title":"cairo_font_options_get_hint_metrics() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_get_hint_style":[{"title":"cairo_font_options_get_hint_style() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_get_subpixel_order":[{"title":"cairo_font_options_get_subpixel_order() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_hash":[{"title":"cairo_font_options_hash() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_merge":[{"title":"cairo_font_options_merge() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_set_antialias":[{"title":"cairo_font_options_set_antialias() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_set_hint_metrics":[{"title":"cairo_font_options_set_hint_metrics() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_set_hint_style":[{"title":"cairo_font_options_set_hint_style() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_set_subpixel_order":[{"title":"cairo_font_options_set_subpixel_order() example","source":"\/* ... *\/","output":"..."}],"cairo_font_options_status":[{"title":"cairo_font_options_status() example","source":"\/* ... *\/","output":"..."}],"cairo_format_stride_for_width":[{"title":"cairo_format_stride_for_width() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_create_for_data":[{"title":"cairo_image_surface_create_for_data() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_create_from_png":[{"title":"cairo_image_surface_create_from_png() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_create":[{"title":"cairo_image_surface_create() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_get_data":[{"title":"cairo_image_surface_get_data() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_get_format":[{"title":"cairo_image_surface_get_format() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_get_height":[{"title":"cairo_image_surface_get_height() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_get_stride":[{"title":"cairo_image_surface_get_stride() example","source":"\/* ... *\/","output":"..."}],"cairo_image_surface_get_width":[{"title":"cairo_image_surface_get_width() example","source":"\/* ... *\/","output":"..."}],"cairo_matrix_invert":[{"title":"cairo_matrix_invert() example","source":"\/* ... *\/","output":"..."}],"cairo_matrix_multiply":[{"title":"cairo_matrix_multiply() example","source":"\/* ... *\/","output":"..."}],"cairo_matrix_rotate":[{"title":"cairo_matrix_rotate() example","source":"\/* ... *\/","output":"..."}],"cairo_matrix_transform_distance":[{"title":"cairo_matrix_transform_distance() example","source":"\/* ... *\/","output":"..."}],"cairo_matrix_transform_point":[{"title":"cairo_matrix_transform_point() example","source":"\/* ... *\/","output":"..."}],"cairo_matrix_translate":[{"title":"cairo_matrix_translate() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_add_color_stop_rgb":[{"title":"cairo_pattern_add_color_stop_rgb() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_add_color_stop_rgba":[{"title":"cairo_pattern_add_color_stop_rgba() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_create_for_surface":[{"title":"cairo_pattern_create_for_surface() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_create_linear":[{"title":"cairo_pattern_create_linear() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_create_radial":[{"title":"cairo_pattern_create_radial() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_create_rgb":[{"title":"cairo_pattern_create_rgb() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_create_rgba":[{"title":"cairo_pattern_create_rgba() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_color_stop_count":[{"title":"cairo_pattern_get_color_stop_count() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_color_stop_rgba":[{"title":"cairo_pattern_get_color_stop_rgba() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_extend":[{"title":"cairo_pattern_get_extend() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_filter":[{"title":"cairo_pattern_get_filter() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_linear_points":[{"title":"cairo_pattern_get_linear_points() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_matrix":[{"title":"cairo_pattern_get_matrix() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_radial_circles":[{"title":"cairo_pattern_get_radial_circles() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_rgba":[{"title":"cairo_pattern_get_rgba() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_surface":[{"title":"cairo_pattern_get_surface() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_get_type":[{"title":"cairo_pattern_get_type() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_set_extend":[{"title":"cairo_pattern_set_extend() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_set_filter":[{"title":"cairo_pattern_set_filter() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_set_matrix":[{"title":"cairo_pattern_set_matrix() example","source":"\/* ... *\/","output":"..."}],"cairo_pattern_status":[{"title":"cairo_pattern_status() example","source":"\/* ... *\/","output":"..."}],"cairo_pdf_surface_create":[{"title":"cairo_pdf_surface_create() example","source":"\/* ... *\/","output":"..."}],"cairo_pdf_surface_set_size":[{"title":"cairo_pdf_surface_set_size() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_get_levels":[{"title":"cairo_ps_get_levels() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_level_to_string":[{"title":"cairo_ps_level_to_string() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_create":[{"title":"cairo_ps_surface_create() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_dsc_begin_page_setup":[{"title":"cairo_ps_surface_dsc_begin_page_setup() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_dsc_begin_setup":[{"title":"cairo_ps_surface_dsc_begin_setup() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_dsc_comment":[{"title":"cairo_ps_surface_dsc_comment() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_get_eps":[{"title":"cairo_ps_surface_get_eps() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_restrict_to_level":[{"title":"cairo_ps_surface_restrict_to_level() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_set_eps":[{"title":"cairo_ps_surface_set_eps() example","source":"\/* ... *\/","output":"..."}],"cairo_ps_surface_set_size":[{"title":"cairo_ps_surface_set_size() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_create":[{"title":"cairo_scaled_font_create() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_extents":[{"title":"cairo_scaled_font_extents() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_get_ctm":[{"title":"cairo_scaled_font_get_ctm() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_get_font_face":[{"title":"cairo_scaled_font_get_font_face() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_get_font_matrix":[{"title":"cairo_scaled_font_get_font_matrix() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_get_font_options":[{"title":"cairo_scaled_font_get_font_options() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_get_scale_matrix":[{"title":"cairo_scaled_font_get_scale_matrix() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_get_type":[{"title":"cairo_scaled_font_get_type() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_glyph_extents":[{"title":"cairo_scaled_font_glyph_extents() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_status":[{"title":"cairo_scaled_font_status() example","source":"\/* ... *\/","output":"..."}],"cairo_scaled_font_text_extents":[{"title":"cairo_scaled_font_text_extents() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_copy_page":[{"title":"cairo_surface_copy_page() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_create_similar":[{"title":"cairo_surface_create_similar() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_finish":[{"title":"cairo_surface_finish() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_flush":[{"title":"cairo_surface_flush() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_get_content":[{"title":"cairo_surface_get_content() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_get_device_offset":[{"title":"cairo_surface_get_device_offset() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_get_font_options":[{"title":"cairo_surface_get_font_options() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_get_type":[{"title":"cairo_surface_get_type() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_mark_dirty_rectangle":[{"title":"cairo_surface_mark_dirty_rectangle() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_mark_dirty":[{"title":"cairo_surface_mark_dirty() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_set_device_offset":[{"title":"cairo_surface_set_device_offset() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_set_fallback_resolution":[{"title":"cairo_surface_set_fallback_resolution() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_show_page":[{"title":"cairo_surface_show_page() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_status":[{"title":"cairo_surface_status() example","source":"\/* ... *\/","output":"..."}],"cairo_surface_write_to_png":[{"title":"cairo_surface_write_to_png() example","source":"\/* ... *\/","output":"..."}],"cairo_svg_surface_create":[{"title":"cairo_svg_surface_create() example","source":"\/* ... *\/","output":"..."}],"cairo_svg_surface_restrict_to_version":[{"title":"cairo_svg_surface_restrict_to_version() example","source":"\/* ... *\/","output":"..."}],"cairo_svg_version_to_string":[{"title":"cairo_svg_version_to_string() example","source":"\/* ... *\/","output":"..."}],"cal_days_in_month":[{"title":"cal_days_in_month() example","source":"$number = cal_days_in_month(CAL_GREGORIAN, 8, 2003); \/\/ 31\necho \"There were {$number} days in August 2003\";","output":null}],"cal_from_jd":[{"title":"cal_from_jd() example","source":"$today = unixtojd(mktime(0, 0, 0, 8, 16, 2003));\nprint_r(cal_from_jd($today, CAL_GREGORIAN));","output":"Array\n(\n    [date] => 8\/16\/2003\n    [month] => 8\n    [day] => 16\n    [year] => 2003\n    [dow] => 6\n    [abbrevdayname] => Sat\n    [dayname] => Saturday\n    [abbrevmonth] => Aug\n    [monthname] => August\n)"}],"cal_info":[{"title":"cal_info() example","source":"$info = cal_info(0);\nprint_r($info);","output":"Array\n(\n    [months] => Array\n        (\n            [1] => January\n            [2] => February\n            [3] => March\n            [4] => April\n            [5] => May\n            [6] => June\n            [7] => July\n            [8] => August\n            [9] => September\n            [10] => October\n            [11] => November\n            [12] => December\n        )\n\n    [abbrevmonths] => Array\n        (\n            [1] => Jan\n            [2] => Feb\n            [3] => Mar\n            [4] => Apr\n            [5] => May\n            [6] => Jun\n            [7] => Jul\n            [8] => Aug\n            [9] => Sep\n            [10] => Oct\n            [11] => Nov\n            [12] => Dec\n        )\n\n    [maxdaysinmonth] => 31\n    [calname] => Gregorian\n    [calsymbol] => CAL_GREGORIAN\n)"}],"call_user_func_array":[{"title":"call_user_func_array() example","source":"function foobar($arg, $arg2) {\n    echo __FUNCTION__, \" got $arg and $arg2\\n\";\n}\nclass foo {\n    function bar($arg, $arg2) {\n        echo __METHOD__, \" got $arg and $arg2\\n\";\n    }\n}\n\n\n\/\/ Call the foobar() function with 2 arguments\ncall_user_func_array(\"foobar\", array(\"one\", \"two\"));\n\n\/\/ Call the $foo->bar() method with 2 arguments\n$foo = new foo;\ncall_user_func_array(array($foo, \"bar\"), array(\"three\", \"four\"));","output":"foobar got one and two\nfoo::bar got three and four"},{"title":"call_user_func_array() using namespace name","source":"namespace Foobar;\n\nclass Foo {\n    static public function test($name) {\n        print \"Hello {$name}!\\n\";\n    }\n}\n\n\/\/ As of PHP 5.3.0\ncall_user_func_array(__NAMESPACE__ .'\\Foo::test', array('Hannes'));\n\n\/\/ As of PHP 5.3.0\ncall_user_func_array(array(__NAMESPACE__ .'\\Foo', 'test'), array('Philip'));","output":"Hello Hannes!\nHello Philip!"},{"title":"Using lambda function","source":"$func = function($arg1, $arg2) {\n    return $arg1 * $arg2;\n};\n\nvar_dump(call_user_func_array($func, array(2, 4))); \/* As of PHP 5.3.0 *\/","output":"int(8)"},{"title":"Passing values by reference","source":"function mega(&$a){\n    $a = 55;\n    echo \"function mega \\$a=$a\\n\";\n}\n$bar = 77;\ncall_user_func_array('mega',array(&$bar));\necho \"global \\$bar=$bar\\n\";","output":"function mega $a=55\nglobal $bar=55"}],"call_user_func":[{"title":"call_user_func() example and references","source":"error_reporting(E_ALL);\nfunction increment(&$var)\n{\n    $var++;\n}\n\n$a = 0;\ncall_user_func('increment', $a);\necho $a.\"\\n\";\n\n\/\/ You can use this instead\ncall_user_func_array('increment', array(&$a));\necho $a.\"\\n\";","output":"0\n1"},{"title":"call_user_func() example","source":"function barber($type)\n{\n    echo \"You wanted a $type haircut, no problem\\n\";\n}\ncall_user_func('barber', \"mushroom\");\ncall_user_func('barber', \"shave\");","output":"You wanted a mushroom haircut, no problem\nYou wanted a shave haircut, no problem"},{"title":"call_user_func() using namespace name","source":"namespace Foobar;\n\nclass Foo {\n    static public function test() {\n        print \"Hello world!\\n\";\n    }\n}\n\ncall_user_func(__NAMESPACE__ .'\\Foo::test'); \/\/ As of PHP 5.3.0\ncall_user_func(array(__NAMESPACE__ .'\\Foo', 'test')); \/\/ As of PHP 5.3.0","output":"Hello world!\nHello world!"},{"title":"Using a class method with call_user_func()","source":"class myclass {\n    static function say_hello()\n    {\n        echo \"Hello!\\n\";\n    }\n}\n\n$classname = \"myclass\";\n\ncall_user_func(array($classname, 'say_hello'));\ncall_user_func($classname .'::say_hello'); \/\/ As of 5.2.3\n\n$myobject = new myclass();\n\ncall_user_func(array($myobject, 'say_hello'));","output":"Hello!\nHello!\nHello!"},{"title":"Using lambda function with call_user_func()","source":"call_user_func(function($arg) { print \"[$arg]\\n\"; }, 'test'); \/* As of PHP 5.3.0 *\/","output":"[test]"}],"call_user_method_array":[{"title":"call_user_method_array() alternative","source":"call_user_func_array(array($obj, $method_name), $params);","output":null}],"call_user_method":[{"title":"call_user_method() alternative","source":"call_user_func(array($obj, $method_name), $parameter \/* , ... *\/);","output":null}],"ceil":[{"title":"ceil() example","source":"echo ceil(4.3);    \/\/ 5\necho ceil(9.999);  \/\/ 10\necho ceil(-3.14);  \/\/ -3","output":null}],"chdb_create":[{"title":"chdb_create() example","source":"$data = array(\n    'key1' => 'value1',\n    'key2' => 'value2',\n    \/\/ ...\n);\nchdb_create('data.chdb', $data);","output":null}],"chdir":[{"title":"chdir() example","source":"\/\/ current directory\necho getcwd() . \"\\n\";\n\nchdir('public_html');\n\n\/\/ current directory\necho getcwd() . \"\\n\";","output":"\/home\/vincent\n\/home\/vincent\/public_html"}],"checkdate":[{"title":"checkdate() example","source":"var_dump(checkdate(12, 31, 2000));\nvar_dump(checkdate(2, 29, 2001));","output":"bool(true)\nbool(false)"}],"chgrp":[{"title":"Changing a file's group","source":"$filename = 'shared_file.txt';\n$format = \"%s's Group ID @ %s: %d\\n\";\nprintf($format, $filename, date('r'), filegroup($filename));\nchgrp($filename, 8);\nclearstatcache(); \/\/ do not cache filegroup() results\nprintf($format, $filename, date('r'), filegroup($filename));","output":null}],"chmod":[{"title":null,"source":"chmod(\"\/somedir\/somefile\", 755);   \/\/ decimal; probably incorrect\nchmod(\"\/somedir\/somefile\", \"u+rwx,go+rx\"); \/\/ string; incorrect\nchmod(\"\/somedir\/somefile\", 0755);  \/\/ octal; correct value of mode","output":null},{"title":null,"source":"\/\/ Read and write for owner, nothing for everybody else\nchmod(\"\/somedir\/somefile\", 0600);\n\n\/\/ Read and write for owner, read for everybody else\nchmod(\"\/somedir\/somefile\", 0644);\n\n\/\/ Everything for owner, read and execute for others\nchmod(\"\/somedir\/somefile\", 0755);\n\n\/\/ Everything for owner, read and execute for owner's group\nchmod(\"\/somedir\/somefile\", 0750);","output":null}],"chown":[{"title":"Simple chown() usage","source":"\/\/ File name and username to use\n$file_name= \"foo.php\";\n$path = \"\/home\/sites\/php.net\/public_html\/sandbox\/\" . $file_name ;\n$user_name = \"root\";\n\n\/\/ Set the user\nchown($path, $user_name);\n\n\/\/ Check the result\n$stat = stat($path);\nprint_r(posix_getpwuid($stat['uid']));","output":"Array\n(\n    [name] => root\n    [passwd] => x\n    [uid] => 0\n    [gid] => 0\n    [gecos] => root\n    [dir] => \/root\n    [shell] => \/bin\/bash\n)"}],"chr":[{"title":"chr() example","source":"$str = \"The string ends in escape: \";\n$str .= chr(27); \/* add an escape character at the end of $str *\/\n\n\/* Often this is more useful *\/\n\n$str = sprintf(\"The string ends in escape: %c\", 27);","output":null},{"title":"Overflow behavior","source":"echo chr(-159), chr(833), PHP_EOL;","output":"aA"}],"chroot":[{"title":"chroot() example","source":"chroot(\"\/path\/to\/your\/chroot\/\");\necho getcwd();","output":"\/"}],"chunk_split":[{"title":"chunk_split() example","source":"\/\/ format $data using RFC 2045 semantics\n$new_string = chunk_split(base64_encode($data));","output":null}],"class_alias":[{"title":"class_alias() example","source":"class foo { }\n\nclass_alias('foo', 'bar');\n\n$a = new foo;\n$b = new bar;\n\n\/\/ the objects are the same\nvar_dump($a == $b, $a === $b);\nvar_dump($a instanceof $b);\n\n\/\/ the classes are the same\nvar_dump($a instanceof foo);\nvar_dump($a instanceof bar);\n\nvar_dump($b instanceof foo);\nvar_dump($b instanceof bar);","output":"bool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(true)\nbool(true)\nbool(true)"}],"class_exists":[{"title":"class_exists() example","source":"\/\/ Check that the class exists before trying to use it\nif (class_exists('MyClass')) {\n    $myclass = new MyClass();\n}","output":null},{"title":"autoload parameter example","source":"function __autoload($class)\n{\n    include($class . '.php');\n\n    \/\/ Check to see whether the include declared the class\n    if (!class_exists($class, false)) {\n        trigger_error(\"Unable to load class: $class\", E_USER_WARNING);\n    }\n}\n\nif (class_exists('MyClass')) {\n    $myclass = new MyClass();\n}","output":null}],"class_implements":[{"title":"class_implements() example","source":"interface foo { }\nclass bar implements foo {}\n\nprint_r(class_implements(new bar));\n\n\/\/ since PHP 5.1.0 you may also specify the parameter as a string\nprint_r(class_implements('bar'));\n\n\nfunction __autoload($class_name) {\n   require_once $class_name . '.php';\n}\n\n\/\/ use __autoload to load the 'not_loaded' class\nprint_r(class_implements('not_loaded', true));","output":"Array\n(\n    [foo] => foo\n)\n\nArray\n(\n    [interface_of_not_loaded] => interface_of_not_loaded\n)"}],"class_parents":[{"title":"class_parents() example","source":"class foo { }\nclass bar extends foo {}\n\nprint_r(class_parents(new bar));\n\n\/\/ since PHP 5.1.0 you may also specify the parameter as a string\nprint_r(class_parents('bar'));\n\n\nfunction __autoload($class_name) {\n   require_once $class_name . '.php';\n}\n\n\/\/ use __autoload to load the 'not_loaded' class\nprint_r(class_parents('not_loaded', true));","output":"Array\n(\n    [foo] => foo\n)\n\nArray\n(\n    [parent_of_not_loaded] => parent_of_not_loaded\n)"}],"class_uses":[{"title":"class_uses() example","source":"trait foo { }\nclass bar {\n  use foo;\n}\n\nprint_r(class_uses(new bar));\n\nprint_r(class_uses('bar'));\n\nfunction __autoload($class_name) {\n   require_once $class_name . '.php';\n}\n\n\/\/ use __autoload to load the 'not_loaded' class\nprint_r(class_uses('not_loaded', true));","output":"Array\n(\n    [foo] => foo\n)\n\nArray\n(\n    [foo] => foo\n)\n\nArray\n(\n    [trait_of_not_loaded] => trait_of_not_loaded\n)"}],"classkit_import":[{"title":"classkit_import() example","source":"\/\/ file: newclass.php\nclass Example {\n    function foo() {\n        return \"bar!\\n\";\n    }\n}","output":"foo!\nbar!"}],"classkit_method_add":[{"title":"classkit_method_add() example","source":"class Example {\n    function foo() {\n        echo \"foo!\\n\";\n    }\n}\n\n\/\/ create an Example object\n$e = new Example();\n\n\/\/ Add a new public method\nclasskit_method_add(\n    'Example',\n    'add',\n    '$num1, $num2',\n    'return $num1 + $num2;',\n    CLASSKIT_ACC_PUBLIC\n);\n\n\/\/ add 12 + 4\necho $e->add(12, 4);","output":16}],"classkit_method_copy":[{"title":"classkit_method_copy() example","source":"class Foo {\n    function example() {\n        return \"foo!\\n\";\n    }\n}\n\nclass Bar {\n    \/\/ initially, no methods\n}\n\n\/\/ copy the example() method from the Foo class to the Bar class, as baz()\nclasskit_method_copy('Bar', 'baz', 'Foo', 'example');\n\n\/\/ output copied function\necho Bar::baz();","output":"foo!"}],"classkit_method_redefine":[{"title":"classkit_method_redefine() example","source":"class Example {\n    function foo() {\n        return \"foo!\\n\";\n    }\n}\n\n\/\/ create an Example object\n$e = new Example();\n\n\/\/ output Example::foo() (before redefine)\necho \"Before: \" . $e->foo();\n\n\/\/ Redefine the 'foo' method\nclasskit_method_redefine(\n    'Example',\n    'foo',\n    '',\n    'return \"bar!\\n\";',\n    CLASSKIT_ACC_PUBLIC\n);\n\n\/\/ output Example::foo() (after redefine)\necho \"After: \" . $e->foo();","output":"Before: foo!\nAfter: bar!"}],"classkit_method_remove":[{"title":"classkit_method_remove() example","source":"class Example {\n    function foo() {\n        return \"foo!\\n\";\n    }\n    \n    function bar() {\n        return \"bar!\\n\";\n    }\n}\n\n\/\/ Remove the 'foo' method\nclasskit_method_remove(\n    'Example',\n    'foo'\n);\n\necho implode(' ', get_class_methods('Example'));","output":"bar"}],"classkit_method_rename":[{"title":"classkit_method_rename() example","source":"class Example {\n    function foo() {\n        return \"foo!\\n\";\n    }\n}\n\n\/\/ Rename the 'foo' method to 'bar'\nclasskit_method_rename(\n    'Example',\n    'foo',\n    'bar'\n);\n\n\/\/ output renamed function\necho Example::bar();","output":"foo!"}],"clearstatcache":[{"title":"clearstatcache() example","source":"$file = 'output_log.txt';\n\nfunction get_owner($file)\n{\n    $stat = stat($file);\n    $user = posix_getpwuid($stat['uid']);\n    return $user['name'];\n}\n\n$format = \"UID @ %s: %s\\n\";\n\nprintf($format, date('r'), get_owner($file));\n\nchown($file, 'ross');\nprintf($format, date('r'), get_owner($file));\n\nclearstatcache();\nprintf($format, date('r'), get_owner($file));","output":"UID @ Sun, 12 Oct 2008 20:48:28 +0100: root\nUID @ Sun, 12 Oct 2008 20:48:28 +0100: root\nUID @ Sun, 12 Oct 2008 20:48:28 +0100: ross"}],"cli_get_process_title":[{"title":"cli_get_process_title() example","source":"echo \"Process title: \" . cli_get_process_title() . \"\\n\";","output":null}],"cli_set_process_title":[{"title":"cli_set_process_title() example","source":"$title = \"My Amazing PHP Script\";\n$pid = getmypid(); \/\/ you can use this to see your process title in ps\n\nif (!cli_set_process_title($title)) {\n    echo \"Unable to set process title for PID $pid...\\n\";\n    exit(1);\n} else {\n    echo \"The process title '$title' for PID $pid has been set for your process!\\n\";\n    sleep(5);\n}","output":null}],"closedir":[{"title":"closedir() example","source":"$dir = \"\/etc\/php5\/\";\n\n\/\/ Open a known directory, read directory into variable and then close\nif (is_dir($dir)) {\n    if ($dh = opendir($dir)) {\n        $directory = readdir($dh);\n        closedir($dh);\n    }\n}","output":null}],"com_event_sink":[{"title":"COM event sink example","source":"class IEEventSinker {\n    var $terminated = false;\n\n   function ProgressChange($progress, $progressmax) {\n      echo \"Download progress: $progress \/ $progressmax\\n\";\n    }\n\n    function DocumentComplete(&$dom, $url) {\n      echo \"Document $url complete\\n\";\n    }\n\n    function OnQuit() {\n      echo \"Quit!\\n\";\n      $this->terminated = true;\n    }\n}\n$ie = new COM(\"InternetExplorer.Application\");\n\/\/ note that you don't need the & for PHP 5!\n$sink = new IEEventSinker();\ncom_event_sink($ie, $sink, \"DWebBrowserEvents2\");\n$ie->Visible = true;\n$ie->Navigate(\"http:\/\/www.example.org\");\nwhile(!$sink->terminated) {\n  com_message_pump(4000);\n}\n$ie = null;","output":null}],"compact":[{"title":"compact() example","source":"$city  = \"San Francisco\";\n$state = \"CA\";\n$event = \"SIGGRAPH\";\n\n$location_vars = array(\"city\", \"state\");\n\n$result = compact(\"event\", \"nothing_here\", $location_vars);\nprint_r($result);","output":"Array\n(\n    [event] => SIGGRAPH\n    [city] => San Francisco\n    [state] => CA\n)"}],"constant":[{"title":"constant() example","source":"define(\"MAXSIZE\", 100);\n\necho MAXSIZE;\necho constant(\"MAXSIZE\"); \/\/ same thing as the previous line\n\n\ninterface bar {\n    const test = 'foobar!';\n}\n\nclass foo {\n    const test = 'foobar!';\n}\n\n$const = 'test';\n\nvar_dump(constant('bar::'. $const)); \/\/ string(7) \"foobar!\"\nvar_dump(constant('foo::'. $const)); \/\/ string(7) \"foobar!\"","output":null}],"convert_uudecode":[{"title":"convert_uudecode() example","source":"\/* Can you imagine what this will print? :) *\/\necho convert_uudecode(\"+22!L;W9E(%!(4\\\"$`\\n`\");","output":null}],"convert_uuencode":[{"title":"convert_uuencode() example","source":"$some_string = \"test\\ntext text\\r\\n\";\n\necho convert_uuencode($some_string);","output":null}],"copy":[{"title":"copy() example","source":"$file = 'example.txt';\n$newfile = 'example.txt.bak';\n\nif (!copy($file, $newfile)) {\n    echo \"failed to copy $file...\\n\";\n}","output":null}],"cos":[{"title":"cos() example","source":"echo cos(M_PI); \/\/ -1","output":null}],"count_chars":[{"title":"count_chars() example","source":"$data = \"Two Ts and one F.\";\n\nforeach (count_chars($data, 1) as $i => $val) {\n   echo \"There were $val instance(s) of \\\"\" , chr($i) , \"\\\" in the string.\\n\";\n}","output":"There were 4 instance(s) of \" \" in the string.\nThere were 1 instance(s) of \".\" in the string.\nThere were 1 instance(s) of \"F\" in the string.\nThere were 2 instance(s) of \"T\" in the string.\nThere were 1 instance(s) of \"a\" in the string.\nThere were 1 instance(s) of \"d\" in the string.\nThere were 1 instance(s) of \"e\" in the string.\nThere were 2 instance(s) of \"n\" in the string.\nThere were 2 instance(s) of \"o\" in the string.\nThere were 1 instance(s) of \"s\" in the string.\nThere were 1 instance(s) of \"w\" in the string."}],"count":[{"title":"count() example","source":"$a[0] = 1;\n$a[1] = 3;\n$a[2] = 5;\n$result = count($a);\n\/\/ $result == 3\n\n$b[0]  = 7;\n$b[5]  = 9;\n$b[10] = 11;\n$result = count($b);\n\/\/ $result == 3\n\n$result = count(null);\n\/\/ $result == 0\n\n$result = count(false);\n\/\/ $result == 1","output":null},{"title":"Recursive count() example","source":"$food = array('fruits' => array('orange', 'banana', 'apple'),\n              'veggie' => array('carrot', 'collard', 'pea'));\n\n\/\/ recursive count\necho count($food, COUNT_RECURSIVE); \/\/ output 8\n\n\/\/ normal count\necho count($food); \/\/ output 2","output":null}],"crc32":[{"title":"Displaying a crc32 checksum","source":"$checksum = crc32(\"The quick brown fox jumped over the lazy dog.\");\nprintf(\"%u\\n\", $checksum);","output":null}],"create_function":[{"title":"Creating an anonymous function with create_function()","source":"$newfunc = create_function('$a,$b', 'return \"ln($a) + ln($b) = \" . log($a * $b);');\necho \"New anonymous function: $newfunc\\n\";\necho $newfunc(2, M_E) . \"\\n\";\n\/\/ outputs\n\/\/ New anonymous function: lambda_1\n\/\/ ln(2) + ln(2.718281828459) = 1.6931471805599","output":null},{"title":"Making a general processing function with create_function()","source":"function process($var1, $var2, $farr)\n{\n    foreach ($farr as $f) {\n        echo $f($var1, $var2) . \"\\n\";\n    }\n}\n\n\/\/ create a bunch of math functions\n$f1 = 'if ($a >=0) {return \"b*a^2 = \".$b*sqrt($a);} else {return false;}';\n$f2 = \"return \\\"min(b^2+a, a^2,b) = \\\".min(\\$a*\\$a+\\$b,\\$b*\\$b+\\$a);\";\n$f3 = 'if ($a > 0 && $b != 0) {return \"ln(a)\/b = \".log($a)\/$b; } else { return false; }';\n$farr = array(\n    create_function('$x,$y', 'return \"some trig: \".(sin($x) + $x*cos($y));'),\n    create_function('$x,$y', 'return \"a hypotenuse: \".sqrt($x*$x + $y*$y);'),\n    create_function('$a,$b', $f1),\n    create_function('$a,$b', $f2),\n    create_function('$a,$b', $f3)\n    );\n\necho \"\\nUsing the first array of anonymous functions\\n\";\necho \"parameters: 2.3445, M_PI\\n\";\nprocess(2.3445, M_PI, $farr);\n\n\/\/ now make a bunch of string processing functions\n$garr = array(\n    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return \"** \\\"$a\\\" '.\n    'and \\\"$b\\\"\\n** Look the same to me! (looking at the first 3 chars)\";'),\n    create_function('$a,$b', '; return \"CRCs: \" . crc32($a) . \", \".crc32($b);'),\n    create_function('$a,$b', '; return \"similar(a,b) = \" . similar_text($a, $b, &$p) . \"($p%)\";')\n    );\necho \"\\nUsing the second array of anonymous functions\\n\";\nprocess(\"Twas brilling and the slithy toves\", \"Twas the night\", $garr);","output":"Using the first array of anonymous functions\nparameters: 2.3445, M_PI\nsome trig: -1.6291725057799\na hypotenuse: 3.9199852871011\nb*a^2 = 4.8103313314525\nmin(b^2+a, a^2,b) = 8.6382729035898\nln(a)\/b = 0.27122299212594\n\nUsing the second array of anonymous functions\n** \"Twas the night\" and \"Twas brilling and the slithy toves\"\n** Look the same to me! (looking at the first 3 chars)\nCRCs: -725381282, 342550513\nsimilar(a,b) = 11(45.833333333333%)"},{"title":"Using anonymous functions as callback functions","source":"$av = array(\"the \", \"a \", \"that \", \"this \");\narray_walk($av, create_function('&$v,$k', '$v = $v . \"mango\";'));\nprint_r($av);","output":"Array\n(\n  [0] => the mango\n  [1] => a mango\n  [2] => that mango\n  [3] => this mango\n)"}],"crypt":[{"title":"crypt() examples","source":"$hashed_password = crypt('mypassword'); \/\/ let the salt be automatically generated\n\n\/* You should pass the entire results of crypt() as the salt for comparing a\n   password, to avoid problems when different hashing algorithms are used. (As\n   it says above, standard DES-based password hashing uses a 2-character salt,\n   but MD5-based hashing uses 12.) *\/\nif (hash_equals($hashed_password, crypt($user_input, $hashed_password))) {\n   echo \"Password verified!\";\n}","output":null},{"title":"Using crypt() with htpasswd","source":"\/\/ Set the password\n$password = 'mypassword';\n\n\/\/ Get the hash, letting the salt be automatically generated\n$hash = crypt($password);","output":null},{"title":"Using crypt() with different hash types","source":"\/* These salts are examples only, and should not be used verbatim in your code.\n   You should generate a distinct, correctly-formatted salt for each password.\n*\/\nif (CRYPT_STD_DES == 1) {\n    echo 'Standard DES: ' . crypt('rasmuslerdorf', 'rl') . \"\\n\";\n}\n\nif (CRYPT_EXT_DES == 1) {\n    echo 'Extended DES: ' . crypt('rasmuslerdorf', '_J9..rasm') . \"\\n\";\n}\n\nif (CRYPT_MD5 == 1) {\n    echo 'MD5:          ' . crypt('rasmuslerdorf', '$1$rasmusle$') . \"\\n\";\n}\n\nif (CRYPT_BLOWFISH == 1) {\n    echo 'Blowfish:     ' . crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$') . \"\\n\";\n}\n\nif (CRYPT_SHA256 == 1) {\n    echo 'SHA-256:      ' . crypt('rasmuslerdorf', '$5$rounds=5000$usesomesillystringforsalt$') . \"\\n\";\n}\n\nif (CRYPT_SHA512 == 1) {\n    echo 'SHA-512:      ' . crypt('rasmuslerdorf', '$6$rounds=5000$usesomesillystringforsalt$') . \"\\n\";\n}","output":"Standard DES: rl.3StKT.4T8M\nExtended DES: _J9..rasmBYk8r9AiWNc\nMD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0\nBlowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e.\/U9C8sBjqp8I90dH6hi\nSHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH\/Tp.6\nSHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP\/EN5mcO.ChWQW21"}],"ctype_alnum":[{"title":"A ctype_alnum() example (using the default locale)","source":"$strings = array('AbCd1zyZ9', 'foo!#$bar');\nforeach ($strings as $testcase) {\n    if (ctype_alnum($testcase)) {\n        echo \"The string $testcase consists of all letters or digits.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all letters or digits.\\n\";\n    }\n}","output":"The string AbCd1zyZ9 consists of all letters or digits.\nThe string foo!#$bar does not consist of all letters or digits."}],"ctype_alpha":[{"title":"A ctype_alpha() example (using the default locale)","source":"$strings = array('KjgWZC', 'arf12');\nforeach ($strings as $testcase) {\n    if (ctype_alpha($testcase)) {\n        echo \"The string $testcase consists of all letters.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all letters.\\n\";\n    }\n}","output":"The string KjgWZC consists of all letters.\nThe string arf12 does not consist of all letters."}],"ctype_cntrl":[{"title":"A ctype_cntrl() example","source":"$strings = array('string1' => \"\\n\\r\\t\", 'string2' => 'arf12');\nforeach ($strings as $name => $testcase) {\n    if (ctype_cntrl($testcase)) {\n        echo \"The string '$name' consists of all control characters.\\n\";\n    } else {\n        echo \"The string '$name' does not consist of all control characters.\\n\";\n    }\n}","output":"The string 'string1' consists of all control characters.\nThe string 'string2' does not consist of all control characters."}],"ctype_digit":[{"title":"A ctype_digit() example","source":"$strings = array('1820.20', '10002', 'wsl!12');\nforeach ($strings as $testcase) {\n    if (ctype_digit($testcase)) {\n        echo \"The string $testcase consists of all digits.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all digits.\\n\";\n    }\n}","output":"The string 1820.20 does not consist of all digits.\nThe string 10002 consists of all digits.\nThe string wsl!12 does not consist of all digits."},{"title":"A ctype_digit() example comparing strings with integers","source":"$numeric_string = '42';\n$integer        = 42;\n\nctype_digit($numeric_string);  \/\/ true\nctype_digit($integer);         \/\/ false (ASCII 42 is the * character)\n\nis_numeric($numeric_string);   \/\/ true\nis_numeric($integer);          \/\/ true","output":null}],"ctype_graph":[{"title":"A ctype_graph() example","source":"$strings = array('string1' => \"asdf\\n\\r\\t\", 'string2' => 'arf12', 'string3' => 'LKA#@%.54');\nforeach ($strings as $name => $testcase) {\n    if (ctype_graph($testcase)) {\n        echo \"The string '$name' consists of all (visibly) printable characters.\\n\";\n    } else {\n        echo \"The string '$name' does not consist of all (visibly) printable characters.\\n\";\n    }\n}","output":"The string 'string1' does not consist of all (visibly) printable characters.\nThe string 'string2' consists of all (visibly) printable characters.\nThe string 'string3' consists of all (visibly) printable characters."}],"ctype_lower":[{"title":"A ctype_lower() example (using the default locale)","source":"$strings = array('aac123', 'qiutoas', 'QASsdks');\nforeach ($strings as $testcase) {\n    if (ctype_lower($testcase)) {\n        echo \"The string $testcase consists of all lowercase letters.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all lowercase letters.\\n\";\n    }\n}","output":"The string aac123 does not consist of all lowercase letters.\nThe string qiutoas consists of all lowercase letters.\nThe string QASsdks does not consist of all lowercase letters."}],"ctype_print":[{"title":"A ctype_print() example","source":"$strings = array('string1' => \"asdf\\n\\r\\t\", 'string2' => 'arf12', 'string3' => 'LKA#@%.54');\nforeach ($strings as $name => $testcase) {\n    if (ctype_print($testcase)) {\n        echo \"The string '$name' consists of all printable characters.\\n\";\n    } else {\n        echo \"The string '$name' does not consist of all printable characters.\\n\";\n    }\n}","output":"The string 'string1' does not consist of all printable characters.\nThe string 'string2' consists of all printable characters.\nThe string 'string3' consists of all printable characters."}],"ctype_punct":[{"title":"A ctype_punct() example","source":"$strings = array('ABasdk!@!$#', '!@ # $', '*&$()');\nforeach ($strings as $testcase) {\n    if (ctype_punct($testcase)) {\n        echo \"The string $testcase consists of all punctuation.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all punctuation.\\n\";\n    }\n}","output":"The string ABasdk!@!$# does not consist of all punctuation.\nThe string !@ # $ does not consist of all punctuation.\nThe string *&$() consists of all punctuation."}],"ctype_space":[{"title":"A ctype_space() example","source":"$strings = array(\n    'string1' => \"\\n\\r\\t\",\n    'string2' => \"\\narf12\",\n    'string3' => '\\n\\r\\t' \/\/ note the single quotes\n);\nforeach ($strings as $name => $testcase) {\n    if (ctype_space($testcase)) {\n        echo \"The string '$name' consists of whitespace characters only.\\n\";\n    } else {\n        echo \"The string '$name' contains non-whitespace characters.\\n\";\n    }\n}","output":"The string 'string1' consists of whitespace characters only.\nThe string 'string2' contains non-whitespace characters.\nThe string 'string3' contains non-whitespace characters."}],"ctype_upper":[{"title":"A ctype_upper() example (using the default locale)","source":"$strings = array('AKLWC139', 'LMNSDO', 'akwSKWsm');\nforeach ($strings as $testcase) {\n    if (ctype_upper($testcase)) {\n        echo \"The string $testcase consists of all uppercase letters.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all uppercase letters.\\n\";\n    }\n}","output":"The string AKLWC139 does not consist of all uppercase letters.\nThe string LMNSDO consists of all uppercase letters.\nThe string akwSKWsm does not consist of all uppercase letters."}],"ctype_xdigit":[{"title":"A ctype_xdigit() example","source":"$strings = array('AB10BC99', 'AR1012', 'ab12bc99');\nforeach ($strings as $testcase) {\n    if (ctype_xdigit($testcase)) {\n        echo \"The string $testcase consists of all hexadecimal digits.\\n\";\n    } else {\n        echo \"The string $testcase does not consist of all hexadecimal digits.\\n\";\n    }\n}","output":"The string AB10BC99 consists of all hexadecimal digits.\nThe string AR1012 does not consist of all hexadecimal digits.\nThe string ab12bc99 consists of all hexadecimal digits."}],"cubrid_bind":[{"title":"cubrid_bind() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n$result = cubrid_execute($conn, \"SELECT code FROM event WHERE sports='Basketball' and gender='M'\");\n$row = cubrid_fetch_array($result, CUBRID_ASSOC);\n$event_code = $row[\"code\"];\n\ncubrid_close_request($result);\n\n$game_req = cubrid_prepare($conn, \"SELECT athlete_code FROM game WHERE host_year=1992 and event_code=? and nation_code='USA'\");\ncubrid_bind($game_req, 1, $event_code, \"number\");\ncubrid_execute($game_req);\n\nprintf(\"--- Dream Team (1992 United States men's Olympic basketball team) ---\\n\");\nwhile ($athlete_code = cubrid_fetch_array($game_req, CUBRID_NUM)) {\n    $athlete_req = cubrid_prepare($conn, \"SELECT name FROM athlete WHERE code=? AND nation_code='USA' AND event='Basketball' AND gender='M'\");\n    cubrid_bind($athlete_req, 1, $athlete_code[0], \"number\");\n    cubrid_execute($athlete_req);\n    $row = cubrid_fetch_assoc($athlete_req);\n    printf(\"%s\\n\", $row[\"name\"]);\n}\n\ncubrid_close_request($game_req);\ncubrid_close_request($athlete_req);\n\ncubrid_disconnect($conn);","output":"--- Dream Team (1992 United States men's Olympic basketball team) ---\nStockton John\nRobinson David\nPippen Scottie\nMullin C.\nMalone Karl\nLaettner C.\nJordan Michael\nJohnson Earvin\nEwing Patrick\nDrexler Clyde\nBird Larry\nBarkley Charles"},{"title":"cubrid_bind() BLOB\/CLOB example","source":"$con = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\nif ($con) {\n    cubrid_execute($con,\"DROP TABLE if exists php_cubrid_lob_test\");\n    cubrid_execute($con,\"CREATE TABLE php_cubrid_lob_test (doc_content CLOB)\");\n    $sql = \"INSERT INTO php_cubrid_lob_test(doc_content) VALUES(?)\"; \n    $req = cubrid_prepare($con, $sql); \n\n    $fp = fopen(\"book.txt\", \"rb\");\n\n    cubrid_bind($req, 1, $fp, \"clob\"); \n    cubrid_execute($req);  \n}","output":null},{"title":"cubrid_bind() BLOB\/CLOB example","source":"$con = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\nif ($con) {\n    cubrid_execute($con,\"DROP TABLE if exists php_cubrid_lob_test\");\n    cubrid_execute($con,\"CREATE TABLE php_cubrid_lob_test (image BLOB)\");\n    $sql = \"INSERT INTO php_cubrid_lob_test(image) VALUES(?)\"; \n    $req = cubrid_prepare($con, $sql); \n\n    cubrid_bind($req, 1, \"cubrid_logo.png\", \"blob\"); \n    cubrid_execute($req);  \n}","output":null}],"cubrid_client_encoding":[{"title":"cubrid_client_encoding() example","source":"$con = cubrid_connect(\"localhost\", 33000, \"demodb\");\nif (!$con)\n{\n    die('Could not connect.');\n}\n\nprintf(\"CUBRID current charset: %s\\n\", cubrid_client_encoding($con));","output":"CUBRID current charset: iso8859-1"}],"cubrid_close_prepare":[{"title":"cubrid_close_prepare() example","source":"$con = cubrid_connect (\"localhost\", 33000, \"demodb\", \"dba\", \"\");\nif ($con) {\n   echo \"connected successfully\";\n   $req = cubrid_execute ( $con, \"select * from members\", \n                           CUBRID_INCLUDE_OID | CUBRID_ASYNC);\n   if ($req) {\n      while ( list ($id, $name) = cubrid_fetch ($req) ){\n         echo $id;\n         echo $name;\n      } \n      cubrid_close_prepare($req); \/\/ or you can use cubrid_close_request($req)\n   }\n   cubrid_disconnect($con);\n}","output":null}],"cubrid_close_request":[{"title":"cubrid_close_request() example","source":"$con = cubrid_connect (\"localhost\", 33000, \"demodb\", \"dba\", \"\");\nif ($con) {\n   echo \"connected successfully\";\n   $req = cubrid_execute ( $con, \"select * from members\", \n                           CUBRID_INCLUDE_OID | CUBRID_ASYNC);\n   if ($req) {\n      while ( list ($id, $name) = cubrid_fetch ($req) ){\n         echo $id;\n         echo $name;\n      } \n      cubrid_close_request($req); \/\/ or you can use cubrid_close_prepare($req)\n   }\n   cubrid_disconnect($con);\n}","output":null}],"cubrid_close":[{"title":"cubrid_close() example","source":"$con = cubrid_connect (\"localhost\", 33000, \"demodb\");\nif ($con) {\n   echo \"connected successfully\";\n   $req = cubrid_execute ( $con, \"insert into person values(1,'James')\");\n   if ($req) {\n      cubrid_close_request ($req);\n      cubrid_commit ($con);\n   } else {\n      cubrid_rollback ($con);\n   }\n   cubrid_close ($con);\n}","output":null}],"cubrid_col_get":[{"title":"cubrid_col_get() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\n$size = cubrid_col_size($conn, $oid, \"b\");\nvar_dump($size);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n}\nint(3)"}],"cubrid_col_size":[{"title":"cubrid_col_size() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\n$size = cubrid_col_size($conn, $oid, \"b\");\nvar_dump($size);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n}\nint(3)"}],"cubrid_column_names":[{"title":"cubrid_column_names() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n$result = cubrid_execute($conn, \"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\");\n\n$column_names = cubrid_column_names($result);\n$column_types = cubrid_column_types($result);\n\nprintf(\"%-30s %-30s %-15s\\n\", \"Column Names\", \"Column Types\", \"Column Maxlen\");\nfor($i = 0, $size = count($column_names); $i < $size; $i++) {\n    $column_len = cubrid_field_len($result, $i);\n    printf(\"%-30s %-30s %-15s\\n\", $column_names[$i], $column_types[$i], $column_len); \n}\n\ncubrid_disconnect($conn);","output":"Column Names                   Column Types                   Column Maxlen  \nhost_year                      integer                        11             \nevent_code                     integer                        11             \nathlete_code                   integer                        11             \nstadium_code                   integer                        11             \nnation_code                    char                           3              \nmedal                          char                           1              \ngame_date                      date                           10"}],"cubrid_column_types":[{"title":"cubrid_column_types() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n$result = cubrid_execute($conn, \"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\");\n\n$column_names = cubrid_column_names($result);\n$column_types = cubrid_column_types($result);\n\nprintf(\"%-30s %-30s %-15s\\n\", \"Column Names\", \"Column Types\", \"Column Maxlen\");\nfor($i = 0, $size = count($column_names); $i < $size; $i++) {\n    $column_len = cubrid_field_len($result, $i);\n    printf(\"%-30s %-30s %-15s\\n\", $column_names[$i], $column_types[$i], $column_len); \n}\n\ncubrid_disconnect($conn);","output":"Column Names                   Column Types                   Column Maxlen  \nhost_year                      integer                        11             \nevent_code                     integer                        11             \nathlete_code                   integer                        11             \nstadium_code                   integer                        11             \nnation_code                    char                           3              \nmedal                          char                           1              \ngame_date                      date                           10"}],"cubrid_commit":[{"title":"cubrid_commit() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE publishers\");\n\n$sql = <<<EOD\nCREATE TABLE publishers(\npub_id CHAR(3), \npub_name VARCHAR(20), \ncity VARCHAR(15), \nstate CHAR(2), \ncountry VARCHAR(15)\n)\nEOD;\ncubrid_set_autocommit($conn,false);\nif (!cubrid_execute($conn, $sql)) {\n    printf(\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\", cubrid_error_code_facility(), cubrid_error_code(), cubrid_error_msg());\n\n    cubrid_disconnect($conn);\n    exit;\n}\n\n$req = cubrid_prepare($conn, \"INSERT INTO publishers VALUES(?, ?, ?, ?, ?)\");\n\n$id_list = array(\"P01\", \"P02\", \"P03\", \"P04\");\n$name_list = array(\"Abatis Publishers\", \"Core Dump Books\", \"Schadenfreude Press\", \"Tenterhooks Press\");\n$city_list = array(\"New York\", \"San Francisco\", \"Hamburg\", \"Berkeley\");\n$state_list = array(\"NY\", \"CA\", NULL, \"CA\");\n$country_list = array(\"USA\", \"USA\", \"Germany\", \"USA\");\n\nfor ($i = 0, $size = count($id_list); $i < $size; $i++) {\n    cubrid_bind($req, 1, $id_list[$i]);\n    cubrid_bind($req, 2, $name_list[$i]);\n    cubrid_bind($req, 3, $city_list[$i]);\n    cubrid_bind($req, 4, $state_list[$i]);\n    cubrid_bind($req, 5, $country_list[$i]);\n\n    if (!($ret = cubrid_execute($req))) {\n        break;\n    }\n}\n\nif (!$ret) {\n    cubrid_rollback($conn);\n} else {\n    cubrid_commit($conn);\n\n    $req = cubrid_execute($conn, \"SELECT * FROM publishers\");\n    while ($result = cubrid_fetch_assoc($req)) {\n        printf(\"%-3s %-20s %-15s %-3s %-15s\\n\", \n            $result[\"pub_id\"], $result[\"pub_name\"], $result[\"city\"], $result[\"state\"], $result[\"country\"]);\n    }\n}\n\ncubrid_disconnect($conn);","output":"P01 Abatis Publishers    New York        NY  USA            \nP02 Core Dump Books      San Francisco   CA  USA            \nP03 Schadenfreude Press  Hamburg             Germany        \nP04 Tenterhooks Press    Berkeley        CA  USA"}],"cubrid_connect_with_url":[{"title":"cubrid_connect_with_url() url without properties example","source":"$conn_url = \"CUBRID:localhost:33000:demodb:dba::\";\n$con = cubrid_connect_with_url($conn_url);\n\nif ($con) {\n   echo \"connected successfully\";\n   cubrid_execute($con, \"create table person(id int,name char(16))\");\n   $req =cubrid_execute($con, \"insert into person values(1,'James')\");\n\n   if ($req) {\n      cubrid_close_request($req);\n      cubrid_commit($con);\n   } else {\n      cubrid_rollback($con);\n   }\n   cubrid_disconnect($con);\n}","output":null},{"title":"cubrid_connect_with_url() url with properties example","source":"$conn_url = \"CUBRID:127.0.0.1:33000:demodb:dba::?login_timeout=100\"\n$con = cubrid_connect_with_url ($conn_url);\n\nif ($con) {\n   echo \"connected successfully\";\n   cubrid_execute($con, \"create table person(id int,name char(16))\");\n   $req =cubrid_execute($con, \"insert into person values(1,'James')\");\n\n   if ($req) {\n      cubrid_close_request($req);\n      cubrid_commit($con);\n   } else {\n      cubrid_rollback($con);\n   }\n   cubrid_disconnect($con);\n}","output":null}],"cubrid_connect":[{"title":"cubrid_connect() example","source":"printf(\"%-30s %s\\n\", \"CUBRID PHP Version:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Server Info:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Client Info:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"CUBRID Charset:\", $charset);\n\ncubrid_disconnect($conn);","output":"CUBRID PHP Version:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nServer Info:                   9.1.0.0212\nClient Info:                   9.1.0\n\nCUBRID Charset:                iso8859-1"}],"cubrid_current_oid":[{"title":"cubrid_current_oid() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\", CUBRID_INCLUDE_OID);\n$oid = cubrid_current_oid($req);\n$res = cubrid_get($conn, $oid);\n\nprint_r($res);\n\ncubrid_disconnect($conn);","output":"Array\n(\n    [s_name] => X\n    [f_name] => Mixed\n)"}],"cubrid_data_seek":[{"title":"cubrid_data_seek() example","source":"$conn = cubrid_connect(\"127.0.0.1\", 33000, \"demodb\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\");\ncubrid_data_seek($req, 0);\n\n$result = cubrid_fetch_row($req);\nvar_dump($result);\n\ncubrid_data_seek($req, 2);\n$result = cubrid_fetch_row($req);\nvar_dump($result);\n\ncubrid_data_seek($req, 4);\n$result = cubrid_fetch_row($req);\nvar_dump($result);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(2) {\n  [0]=>\n  string(1) \"X\"\n  [1]=>\n  string(5) \"Mixed\"\n}\narray(2) {\n  [0]=>\n  string(1) \"M\"\n  [1]=>\n  string(3) \"Man\"\n}\narray(2) {\n  [0]=>\n  string(1) \"S\"\n  [1]=>\n  string(6) \"Silver\"\n}"}],"cubrid_db_name":[{"title":"cubrid_db_name() example","source":"error_reporting(E_ALL);\n\n$conn = cubrid_connect('localhost', 33000, 'demodb', 'dba', '');\n$db_list = cubrid_list_dbs($conn);\n\n$i = 0;\n$cnt = count($db_list);\nwhile ($i < $cnt) {\n    echo cubrid_db_name($db_list, $i) . \"\\n\";\n    $i++;\n}","output":"demodb"}],"cubrid_disconnect":[{"title":"cubrid_disconnect() example","source":"$con = cubrid_connect (\"localhost\", 33000, \"demodb\");\nif ($con) {\n   echo \"connected successfully\";\n   \n   $req = cubrid_execute( $con, \"create table person(id int,name char(10))\");\n   if ($req) {\n      cubrid_close_request($req);\n      cubrid_commit($con);\n   } else {\n      cubrid_rollback($con);\n   }\n   \n   $req = cubrid_execute( $con, \"insert into person values(1,'James')\");\n   if ($req) {\n      cubrid_close_request($req);\n      cubrid_commit($con);\n   } else {\n      cubrid_rollback($con);\n   }\n   cubrid_disconnect($con);\n}","output":null}],"cubrid_drop":[{"title":"cubrid_drop() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\nprintf(\"--- Before Drop: ---\\n\");\n$attr = cubrid_get($conn, $oid);\nvar_dump($attr);\n\nif (cubrid_drop($conn, $oid)) {\n    cubrid_commit($conn);\n} else {\n    cubrid_rollback($conn);\n}\n\ncubrid_close_request($req);\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\nprintf(\"\\n--- After Drop: ---\\n\");\n$attr = cubrid_get($conn, $oid);\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"--- Before Drop: ---\narray(4) {\n  [\"a\"]=>\n  string(1) \"1\"\n  [\"b\"]=>\n  array(3) {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    string(1) \"2\"\n    [2]=>\n    string(1) \"3\"\n  }\n  [\"c\"]=>\n  array(4) {\n    [0]=>\n    string(2) \"11\"\n    [1]=>\n    string(2) \"22\"\n    [2]=>\n    string(2) \"33\"\n    [3]=>\n    string(3) \"333\"\n  }\n  [\"d\"]=>\n  string(10) \"a         \"\n}\n\n--- After Drop: ---\narray(4) {\n  [\"a\"]=>\n  string(1) \"2\"\n  [\"b\"]=>\n  array(3) {\n    [0]=>\n    string(1) \"4\"\n    [1]=>\n    string(1) \"5\"\n    [2]=>\n    string(1) \"7\"\n  }\n  [\"c\"]=>\n  array(4) {\n    [0]=>\n    string(2) \"44\"\n    [1]=>\n    string(2) \"55\"\n    [2]=>\n    string(2) \"66\"\n    [3]=>\n    string(3) \"666\"\n  }\n  [\"d\"]=>\n  string(10) \"b         \"\n}"}],"cubrid_errno":[{"title":"cubrid_errno() example","source":"$con = cubrid_connect('localhost', 33000, 'demodb', 'dba', '');\n$req = cubrid_execute($con, \"select id, name from person\");\nif ($req) {\n    while (list ($id, $name) = cubrid_fetch($req)) \n    echo $id, $name;\n} else {\n    echo \"Error Code: \", cubrid_errno($con);\n    echo \"Error Message: \", cubrid_error($con);\n}","output":"Error Code: -493 Error Message: Syntax: Unknown class \"person\". select id, [name] from person"}],"cubrid_error_code_facility":[{"title":"cubrid_error_code_facility() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = @cubrid_execute($conn, \"SELECT * FROM unknown\");\nif (!$req) {\n    printf(\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\", \n        cubrid_error_code_facility(), cubrid_error_code(), cubrid_error_msg());\n\n    cubrid_disconnect($conn);\n    exit;\n}","output":"Error facility: 1\nError code: -493\nError msg: Syntax: In line 1, column 15 before END OF STATEMENT\nSyntax error: unexpected 'unknown'"}],"cubrid_error_code":[{"title":"cubrid_error_code() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_prepare($conn , \"SELECT * FROM code WHERE s_name=?\");\n\n$req = @cubrid_execute($req);\nif (!$req) {\n    printf(\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\", \n        cubrid_error_code_facility(), cubrid_error_code(), cubrid_error_msg());\n\n    cubrid_disconnect($conn);\n    exit;\n}","output":"Error facility: 4\nError code: -30015\nError msg: Some parameter not binded"}],"cubrid_error_msg":[{"title":"cubrid_error_msg() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\nif (!@cubrid_schema($conn, 100000)) {\n    printf(\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\", \n        cubrid_error_code_facility(), cubrid_error_code(), cubrid_error_msg());\n\n    cubrid_disconnect($conn);\n    exit;\n}","output":"Error facility: 2\nError code: -10015\nError msg: Invalid T_CCI_SCH_TYPE value"}],"cubrid_error":[{"title":"cubrid_error() example","source":"$con = cubrid_connect('localhost', 33000, 'demodb', 'dba', '');\n$req = cubrid_execute($con, \"select id, name from person\");\nif ($req) {\n    while (list ($id, $name) = cubrid_fetch($req)) \n    echo $id, $name;\n} else {\n    echo \"Error Code: \", cubrid_errno($con);\n    echo \"Error Message: \", cubrid_error($con);\n}","output":"Error Code: -493 Error Message: Syntax: Unknown class \"person\". select id, [name] from person"}],"cubrid_fetch_array":[{"title":"cubrid_fetch_array() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_execute($conn, \"SELECT name,area,seats,address FROM stadium WHERE nation_code='GRE' AND seats > 10000\");\n\nprintf(\"%-40s %-10s %-6s %-20s\\n\", \"name\", \"area\", \"seats\", \"address\");\nwhile ($row = cubrid_fetch_array($req, CUBRID_NUM)) {\n    printf(\"%-40s %-10s %-6s %-20s\\n\", $row[0], $row[1], $row[2], $row[3]);\n}\n\n\/\/ if you want to operate LOB object, you can use cubrid_fetch_array($req, CUBRID_NUM | CUBRID_LOB)\n\ncubrid_close_request($req);\n\ncubrid_disconnect($conn);","output":"name                                     area       seats  address             \nPanathinaiko Stadium                     86300.00   50000  Athens, Greece      \nOlympic Stadium                          54700.00   13000  Athens, Greece      \nOlympic Indoor Hall                      34100.00   18800  Athens, Greece      \nOlympic Hall                             52400.00   21000  Athens, Greece      \nOlympic Aquatic Centre                   42500.00   11500  Athens, Greece      \nMarkopoulo Olympic Equestrian Centre     64000.00   15000  Markopoulo, Athens, Greece\nFaliro Coastal Zone Olympic Complex      34650.00   12171  Faliro, Athens, Greece\nAthens Olympic Stadium                   120400.00  71030  Maroussi, Athens, Greece \nAno Liossia                              34000.00   12000  Ano Liosia, Athens, Greece"}],"cubrid_fetch_assoc":[{"title":"cubrid_fetch_assoc() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_execute($conn, \"SELECT name,area,seats,address FROM stadium WHERE nation_code='GRE' AND seats > 10000\");\n\nprintf(\"%-40s %-10s %-6s %-20s\\n\", \"name\", \"area\", \"seats\", \"address\");\nwhile ($row = cubrid_fetch_assoc($req)) {\n    printf(\"%-40s %-10s %-6s %-20s\\n\", \n        $row[\"name\"], $row[\"area\"], $row[\"seats\"], $row[\"address\"]);\n}\n\n\/\/ if you want to operate LOB object, you can use cubrid_fetch_assoc($req, CUBRID_LOB)\n\ncubrid_close_request($req);\n\ncubrid_disconnect($conn);","output":"name                                     area       seats  address             \nPanathinaiko Stadium                     86300.00   50000  Athens, Greece      \nOlympic Stadium                          54700.00   13000  Athens, Greece      \nOlympic Indoor Hall                      34100.00   18800  Athens, Greece      \nOlympic Hall                             52400.00   21000  Athens, Greece      \nOlympic Aquatic Centre                   42500.00   11500  Athens, Greece      \nMarkopoulo Olympic Equestrian Centre     64000.00   15000  Markopoulo, Athens, Greece\nFaliro Coastal Zone Olympic Complex      34650.00   12171  Faliro, Athens, Greece\nAthens Olympic Stadium                   120400.00  71030  Maroussi, Athens, Greece \nAno Liossia                              34000.00   12000  Ano Liosia, Athens, Greece"}],"cubrid_fetch_field":[{"title":"cubrid_fetch_field() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_execute($conn, \"SELECT event_code,athlete_code,nation_code,game_date FROM game WHERE host_year=1988 and event_code=20001;\");\n\nvar_dump(cubrid_fetch_row($req));\n\ncubrid_field_seek($req, 1);\n$field = cubrid_fetch_field($req);\n\nprintf(\"\\n--- Field Properties ---\\n\");\nprintf(\"%-30s %s\\n\", \"name:\", $field->name);\nprintf(\"%-30s %s\\n\", \"table:\", $field->table);\nprintf(\"%-30s \\\"%s\\\"\\n\", \"default value:\", $field->def);\nprintf(\"%-30s %d\\n\", \"max length:\", $field->max_length);\nprintf(\"%-30s %d\\n\", \"not null:\", $field->not_null);\nprintf(\"%-30s %d\\n\", \"primary key:\", $field->primary_key);\nprintf(\"%-30s %d\\n\", \"unique key:\", $field->unique_key);\nprintf(\"%-30s %d\\n\", \"multiple key:\", $field->multiple_key);\nprintf(\"%-30s %d\\n\", \"numeric:\", $field->numeric);\nprintf(\"%-30s %d\\n\", \"blob:\", $field->blob);\nprintf(\"%-30s %s\\n\", \"type:\", $field->type);\nprintf(\"%-30s %d\\n\", \"unsigned:\", $field->unsigned);\nprintf(\"%-30s %d\\n\", \"zerofill:\", $field->zerofill);\n\ncubrid_close_request($req);\n\ncubrid_disconnect($conn);","output":"array(4) {\n  [0]=>\n  string(5) \"20001\"\n  [1]=>\n  string(5) \"16681\"\n  [2]=>\n  string(3) \"KOR\"\n  [3]=>\n  string(9) \"1988-9-30\"\n}\n\n--- Field Properties ---\nname:                          athlete_code\ntable:                         game\ndefault value:                 \"\"\nmax length:                    0\nnot null:                      1\nprimary key:                   1\nunique key:                    1\nmultiple key:                  0\nnumeric:                       1\nblob:                          0\ntype:                          integer\nunsigned:                      0\nzerofill:                      0"}],"cubrid_fetch_lengths":[{"title":"cubrid_fetch_lengths() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$result = cubrid_execute($conn, \"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\");\n\n$row = cubrid_fetch_row($result);\nprint_r($row);\n\n$lens = cubrid_fetch_lengths($result);\nprint_r($lens);\n\ncubrid_disconnect($conn);","output":"Array\n(\n    [0] => 2004\n    [1] => 20085\n    [2] => 15118\n    [3] => 30134\n    [4] => AUS\n    [5] => G\n    [6] => 2004-8-20\n)\nArray\n(\n    [0] => 4\n    [1] => 5\n    [2] => 5\n    [3] => 5\n    [4] => 3\n    [5] => 1\n    [6] => 10\n)"}],"cubrid_fetch_object":[{"title":"cubrid_fetch_object() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$res = cubrid_execute($conn, \"SELECT * FROM code\");\n\nvar_dump(cubrid_fetch_object($res));\n\n\/\/ if you want to operate LOB object, you can use cubrid_fetch_object($res, CUBRID_LOB)\n\nclass demodb_code {\n    public $s_name = null;\n    public $f_name = null;\n\n    public function toString() {\n        var_dump($this);\n    }\n}\n\nvar_dump(cubrid_fetch_object($res, \"demodb_code\"));\n\n\/\/ if you want to operate LOB object, you can use cubrid_fetch_object($res, \"demodb_code\", CUBRID_LOB)\n\nclass demodb_code_construct extends demodb_code {\n    public function __construct($s, $f) {\n        $this->s_name = $s; \n        $this->f_name = $f; \n    }   \n}\n\nvar_dump(cubrid_fetch_object($res, 'demodb_code_construct', array('s_name', 'f_name')));\n\n\/\/ if you want to operate LOB object, you can use cubrid_fetch_object($res, 'demodb_code_construct', array('s_name', 'f_name'), CUBRID_LOB)\n\n\nvar_dump(cubrid_fetch_object($res));\n\ncubrid_close_request($res);\ncubrid_disconnect($conn);","output":"object(stdClass)#1 (2) {\n  [\"s_name\"]=>\n  string(1) \"X\"\n  [\"f_name\"]=>\n  string(5) \"Mixed\"\n}\nobject(demodb_code)#1 (2) {\n  [\"s_name\"]=>\n  string(1) \"W\"\n  [\"f_name\"]=>\n  string(5) \"Woman\"\n}\nobject(demodb_code_construct)#1 (2) {\n  [\"s_name\"]=>\n  string(6) \"s_name\"\n  [\"f_name\"]=>\n  string(6) \"f_name\"\n}\nobject(stdClass)#1 (2) {\n  [\"s_name\"]=>\n  string(1) \"B\"\n  [\"f_name\"]=>\n  string(6) \"Bronze\"\n}"}],"cubrid_fetch_row":[{"title":"cubrid_fetch_row() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_execute($conn, \"SELECT name,area,seats,address FROM stadium WHERE nation_code='GRE' AND seats > 10000\");\n\nprintf(\"%-40s %-10s %-6s %-20s\\n\", \"name\", \"area\", \"seats\", \"address\");\nwhile ($row = cubrid_fetch_row($req)) {\n    printf(\"%-40s %-10s %-6s %-20s\\n\", $row[0], $row[1], $row[2], $row[3]);\n}\n\n\/\/ if you want to operate LOB object, you can use cubrid_fetch_row($req, CUBRID_LOB)\n\ncubrid_close_request($req);\n\ncubrid_disconnect($conn);","output":"name                                     area       seats  address             \nPanathinaiko Stadium                     86300.00   50000  Athens, Greece      \nOlympic Stadium                          54700.00   13000  Athens, Greece      \nOlympic Indoor Hall                      34100.00   18800  Athens, Greece      \nOlympic Hall                             52400.00   21000  Athens, Greece      \nOlympic Aquatic Centre                   42500.00   11500  Athens, Greece      \nMarkopoulo Olympic Equestrian Centre     64000.00   15000  Markopoulo, Athens, Greece\nFaliro Coastal Zone Olympic Complex      34650.00   12171  Faliro, Athens, Greece\nAthens Olympic Stadium                   120400.00  71030  Maroussi, Athens, Greece \nAno Liossia                              34000.00   12000  Ano Liosia, Athens, Greece"}],"cubrid_fetch":[{"title":"cubrid_fetch() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_execute($conn, \"SELECT * FROM stadium WHERE nation_code='GRE' AND seats > 10000\");\n\nprintf(\"%-40s %-10s %-6s %-20s\\n\", \"name\", \"area\", \"seats\", \"address\");\nwhile ($row = cubrid_fetch($req)) {\n    printf(\"%-40s %-10s %-6s %-20s\\n\", \n        $row[\"name\"], $row[\"area\"], $row[\"seats\"], $row[\"address\"]);\n}\n\n\/\/ if you want to operate lob object, you can use cubrid_fetch($req, CUBRID_LOB)\n\ncubrid_close_request($req);\n\ncubrid_disconnect($conn);","output":"name                                     area       seats  address             \nPanathinaiko Stadium                     86300.00   50000  Athens, Greece      \nOlympic Stadium                          54700.00   13000  Athens, Greece      \nOlympic Indoor Hall                      34100.00   18800  Athens, Greece      \nOlympic Hall                             52400.00   21000  Athens, Greece      \nOlympic Aquatic Centre                   42500.00   11500  Athens, Greece      \nMarkopoulo Olympic Equestrian Centre     64000.00   15000  Markopoulo, Athens, Greece\nFaliro Coastal Zone Olympic Complex      34650.00   12171  Faliro, Athens, Greece\nAthens Olympic Stadium                   120400.00  71030  Maroussi, Athens, Greece \nAno Liossia                              34000.00   12000  Ano Liosia, Athens, Greece"}],"cubrid_field_flags":[{"title":"cubrid_field_flags() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$result = cubrid_execute($conn, \"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\");\n\n$col_num = cubrid_num_cols($result);\n\nprintf(\"%-30s %s\\n\", \"Field Name\", \"Field Flags\");\nfor($i = 0; $i < $col_num; $i++) {\n    printf(\"%-30s %s\\n\", cubrid_field_name($result, $i), cubrid_field_flags($result, $i)); \n}\n\ncubrid_disconnect($conn);","output":"Field Name                     Field Flags\nhost_year                      not_null primary_key unique_key\nevent_code                     not_null primary_key unique_key foreign_key\nathlete_code                   not_null primary_key unique_key foreign_key\nstadium_code                   not_null\nnation_code                    \nmedal                          \ngame_date"}],"cubrid_field_len":[{"title":"cubrid_field_len() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$result = cubrid_execute($conn, \"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\");\n\n$column_names = cubrid_column_names($result);\n$column_types = cubrid_column_types($result);\n\nprintf(\"%-30s %-30s %-15s\\n\", \"Column Names\", \"Column Types\", \"Column Maxlen\");\nfor($i = 0, $size = count($column_names); $i < $size; $i++) {\n    $column_len = cubrid_field_len($result, $i);\n    printf(\"%-30s %-30s %-15s\\n\", $column_names[$i], $column_types[$i], $column_len); \n}\n\ncubrid_disconnect($conn);","output":"Column Names                   Column Types                   Column Maxlen  \nhost_year                      integer                        11             \nevent_code                     integer                        11             \nathlete_code                   integer                        11             \nstadium_code                   integer                        11             \nnation_code                    char                           3              \nmedal                          char                           1              \ngame_date                      date                           10"}],"cubrid_field_name":[{"title":"cubrid_field_name() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$result = cubrid_execute($conn, \"SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'\");\n\n$col_num = cubrid_num_cols($result);\n\nprintf(\"%-30s %s\\n\", \"Field Name\", \"Field Flags\");\nfor($i = 0; $i < $col_num; $i++) {\n    printf(\"%-30s %s\\n\", cubrid_field_name($result, $i), cubrid_field_flags($result, $i)); \n}\n\ncubrid_disconnect($conn);","output":"Field Name                     Field Flags\nhost_year                      not_null primary_key unique_key\nevent_code                     not_null primary_key unique_key foreign_key\nathlete_code                   not_null primary_key unique_key foreign_key\nstadium_code                   not_null\nnation_code                    \nmedal                          \ngame_date"}],"cubrid_field_seek":[{"title":"cubrid_field_seek() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$req = cubrid_execute($conn, \"SELECT event_code,athlete_code,nation_code,game_date FROM game WHERE host_year=1988 and event_code=20001;\");\n\nvar_dump(cubrid_fetch_row($req));\n\ncubrid_field_seek($req, 1);\n$field = cubrid_fetch_field($req);\n\nprintf(\"\\n--- Field Properties ---\\n\");\nprintf(\"%-30s %s\\n\", \"name:\", $field->name);\nprintf(\"%-30s %s\\n\", \"table:\", $field->table);\nprintf(\"%-30s \\\"%s\\\"\\n\", \"default value:\", $field->def);\nprintf(\"%-30s %d\\n\", \"max length:\", $field->max_length);\nprintf(\"%-30s %d\\n\", \"not null:\", $field->not_null);\nprintf(\"%-30s %d\\n\", \"unique key:\", $field->unique_key);\nprintf(\"%-30s %d\\n\", \"multiple key:\", $field->multiple_key);\nprintf(\"%-30s %d\\n\", \"numeric:\", $field->numeric);\nprintf(\"%-30s %s\\n\", \"type:\", $field->type);\n\ncubrid_close_request($req);\n\ncubrid_disconnect($conn);","output":"array(4) {\n  [0]=>\n  string(5) \"20001\"\n  [1]=>\n  string(5) \"16132\"\n  [2]=>\n  string(3) \"KOR\"\n  [3]=>\n  string(9) \"1988-09-30\"\n}\n\n--- Field Properties ---\nname:                          athlete_code\ntable:                         game\ndefault value:                 \"\"\nmax length:                    0\nnot null:                      1\nunique key:                    1\nmultiple key:                  0\nnumeric:                       1\ntype:                          integer"}],"cubrid_field_table":[{"title":"cubrid_field_table() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$result = cubrid_execute($conn, \"SELECT * FROM code\");\n\n$col_num = cubrid_num_cols($result);\n\nprintf(\"%-15s %-15s %s\\n\", \"Field Table\", \"Field Name\", \"Field Type\");\nfor($i = 0; $i < $col_num; $i++) {\n    printf(\"%-15s %-15s %s\\n\", \n        cubrid_field_table($result, $i), cubrid_field_name($result, $i), cubrid_field_type($result, $i)); \n}\n\ncubrid_disconnect($conn);","output":"Field Table     Field Name      Field Type\ncode            s_name          char\ncode            f_name          varchar"}],"cubrid_field_type":[{"title":"cubrid_field_type() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n$result = cubrid_execute($conn, \"SELECT * FROM code\");\n\n$col_num = cubrid_num_cols($result);\n\nprintf(\"%-15s %-15s %s\\n\", \"Field Table\", \"Field Name\", \"Field Type\");\nfor($i = 0; $i < $col_num; $i++) {\n    printf(\"%-15s %-15s %s\\n\", \n        cubrid_field_table($result, $i), cubrid_field_name($result, $i), cubrid_field_type($result, $i)); \n}\n\ncubrid_disconnect($conn);","output":"Field Table     Field Name      Field Type\ncode            s_name          char\ncode            f_name          varchar"}],"cubrid_get_charset":[{"title":"cubrid_get_charset() example","source":"$con = cubrid_connect(\"localhost\", 33000, \"demodb\");\nif (!$con)\n{\n    die('Could not connect.');\n}\n\nprintf(\"CUBRID current charset: %s\\n\", cubrid_get_charset($con));","output":"CUBRID current charset: iso8859-1"}],"cubrid_get_class_name":[{"title":"cubrid_get_class_name() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\", CUBRID_INCLUDE_OID);\n$oid = cubrid_current_oid($req);\n$class_name = cubrid_get_class_name($conn, $oid);\n\nprint_r($class_name);\n\ncubrid_disconnect($conn);","output":"code"}],"cubrid_get_client_info":[{"title":"cubrid_get_client_info() example","source":"printf(\"%-30s %s\\n\", \"CUBRID PHP Version:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_connect(\"localhost\", 33088, \"demodb\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Server Info:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Client Info:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"CUBRID Charset:\", $charset);\n\ncubrid_disconnect($conn);","output":"CUBRID PHP Version:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nServer Info:                   9.1.0.0212\nClient Info:                   9.1.0\n\nCUBRID Charset:                iso8859-1"}],"cubrid_get_db_parameter":[{"title":"cubrid_get_db_parameter() example","source":"printf(\"%-30s %s\\n\", \"CUBRID PHP Version:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_connect(\"localhost\", 33088, \"demodb\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Server Info:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Client Info:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"CUBRID Charset:\", $charset);\n\ncubrid_disconnect($conn);","output":"CUBRID PHP Version:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nServer Info:                   9.1.0.0212\nClient Info:                   9.1.0\n\nCUBRID Charset:                iso8859-1"}],"cubrid_get_query_timeout":[{"title":"cubrid_get_query_timeout() example","source":"$host = \"localhost\";\n$port = 33000;\n$db = \"demodb\";\n\n$conn =\ncubrid_connect_with_url(\"CUBRID:$host:$port:$db:::?login_timeout=50000&query_timeout=5000&disconnect_on_query_timeout=yes\");\n\n$req = cubrid_prepare($conn, \"SELECT * FROM code\");\n\n$timeout = cubrid_get_query_timeout($req);\nvar_dump($timeout);\n\ncubrid_set_query_timeout($req, 1000);\n$timeout = cubrid_get_query_timeout($req);\nvar_dump($timeout);\n\ncubrid_close($conn);","output":"int(5000)\nint(1000)"}],"cubrid_get_server_info":[{"title":"cubrid_get_server_info() example","source":"printf(\"%-30s %s\\n\", \"CUBRID PHP Version:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_connect(\"localhost\", 33088, \"demodb\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Server Info:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Client Info:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"CUBRID Charset:\", $charset);\n\ncubrid_disconnect($conn);","output":"CUBRID PHP Version:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nServer Info:                   9.1.0.0212\nClient Info:                   9.1.0\n\nCUBRID Charset:                iso8859-1"}],"cubrid_get":[{"title":"cubrid_get() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_get($conn, $oid, \"b\");\nvar_dump($attr);\n\n$attr = cubrid_get($conn, $oid);\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"string(9) \"{1, 2, 3}\"\narray(4) {\n  [\"a\"]=>\n  string(1) \"1\"\n  [\"b\"]=>\n  array(3) {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    string(1) \"2\"\n    [2]=>\n    string(1) \"3\"\n  }\n  [\"c\"]=>\n  array(4) {\n    [0]=>\n    string(2) \"11\"\n    [1]=>\n    string(2) \"22\"\n    [2]=>\n    string(2) \"33\"\n    [3]=>\n    string(3) \"333\"\n  }\n  [\"d\"]=>\n  string(10) \"a         \"\n}"}],"cubrid_insert_id":[{"title":"cubrid_insert_id() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n@cubrid_execute($conn, \"DROP TABLE cubrid_test\");\ncubrid_execute($conn, \"CREATE TABLE cubrid_test (d int AUTO_INCREMENT(1, 2), t varchar)\");\n\nfor ($i = 0; $i < 10; $i++) {\n    cubrid_execute($conn, \"INSERT INTO cubrid_test(t) VALUES('cubrid_test')\");\n}\n\n$id = cubrid_insert_id();\nvar_dump($id);\n\ncubrid_disconnect($conn);","output":"string(2) \"19\""}],"cubrid_is_instance":[{"title":"cubrid_is_instance() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n$sql = <<<EOD\nSELECT host_year, medal, game_date \nFROM game \nWHERE athlete_code IN \n    (SELECT code FROM athlete WHERE name='Thorpe Ian');\nEOD;\n\n$req = cubrid_execute($conn, $sql, CUBRID_INCLUDE_OID);\n$oid = cubrid_current_oid($req);\n\n$res = cubrid_is_instance ($conn, $oid);\nif ($res == 1) {\n    echo \"Instance pointed by $oid exists.\\n\";\n} else if ($res == 0){\n    echo \"Instance pointed by $oid doesn't exist.\\n\";\n} else {\n    echo \"error\\n\";\n}\n\ncubrid_disconnect($conn);","output":"Instance pointed by @0|0|0 doesn't exist."}],"cubrid_list_dbs":[{"title":"cubrid_list_dbs() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n$db_list = cubrid_list_dbs($conn);\nvar_dump($db_list);\n\ncubrid_disconnect($conn);","output":"array(1) {\n  [0]=>\n  string(6) \"demodb\"\n}"}],"cubrid_load_from_glo":[{"title":"cubrid_load_from_glo() example","source":"$req = cubrid_execute ($con, \"select image from person where id=1\");\nif ($req) {\n   list ($oid) = cubrid_fetch($req);\n   cubrid_close_request($req);\n   $res = cubrid_load_from_glo ($con, $oid, \"output.jpg\");\n   if ($res) {\n      echo \"image changed successfully\";\n   }\n}","output":null}],"cubrid_lob_close":[{"title":"cubrid_lob_close() example","source":"$conn = cubrid_connect (\"localhost\", 33000, \"demodb\", \"dba\");\n\ncubrid_execute($conn,\"DROP TABLE if exists doc\");\ncubrid_execute($conn,\"CREATE TABLE doc (id INT, doc_content CLOB)\");\ncubrid_execute($conn,\"INSERT INTO doc VALUES (5,'hello,cubrid')\");\n\n$lobs = cubrid_lob_get($conn, \"SELECT doc_content FROM doc WHERE id=5\");\necho \"Doc size: \".cubrid_lob_size($lobs[0]).\" bytes\";\ncubrid_lob_export($conn, $lobs[0], \"doc_5.txt\");\ncubrid_lob_close($lobs);\ncubrid_disconnect($conn);","output":null}],"cubrid_lob_export":[{"title":"cubrid_lob_export() example","source":"$conn = cubrid_connect (\"localhost\", 33000, \"demodb\", \"dba\");\n\ncubrid_execute($conn,\"DROP TABLE if exists doc\");\ncubrid_execute($conn,\"CREATE TABLE doc (id INT, doc_content CLOB)\");\ncubrid_execute($conn,\"INSERT INTO doc VALUES (5,'hello,cubrid')\");\n\n$lobs = cubrid_lob_get($conn, \"SELECT doc_content FROM doc WHERE id=5\");\necho \"Doc size: \".cubrid_lob_size($lobs[0]).\" bytes\";\ncubrid_lob_export($conn, $lobs[0], \"doc_5.txt\");\ncubrid_lob_close($lobs);\ncubrid_disconnect($conn);","output":null}],"cubrid_lob_get":[{"title":"cubrid_lob_get() example","source":"$conn = cubrid_connect (\"localhost\", 33000, \"demodb\", \"dba\");\n\ncubrid_execute($conn,\"DROP TABLE if exists doc\");\ncubrid_execute($conn,\"CREATE TABLE doc (id INT, doc_content CLOB)\");\ncubrid_execute($conn,\"INSERT INTO doc VALUES (5,'hello,cubrid')\");\n\n$lobs = cubrid_lob_get($conn, \"SELECT doc_content FROM doc WHERE id=5\");\necho \"Doc size: \".cubrid_lob_size($lobs[0]).\" bytes\";\ncubrid_lob_export($conn, $lobs[0], \"doc_5.txt\");\ncubrid_lob_close($lobs);\ncubrid_disconnect($conn);","output":null}],"cubrid_lob_send":[{"title":"cubrid_lob_send() example","source":"$conn = cubrid_connect (\"localhost\", 33000, \"demodb\", \"dba\");\n\ncubrid_execute($conn,\"DROP TABLE if exists doc\");\ncubrid_execute($conn,\"CREATE TABLE doc (id INT, doc_content CLOB)\");\ncubrid_execute($conn,\"INSERT INTO doc VALUES (5,'hello,cubrid')\");\n\n$lobs = cubrid_lob_get($conn, \"SELECT doc_content FROM doc WHERE id=5\");\n\ncubrid_lob_send($conn, $lobs[0]);\ncubrid_lob_close($lobs);\ncubrid_disconnect($conn);","output":null}],"cubrid_lob_size":[{"title":"cubrid_lob_size() example","source":"$lobs = cubrid_lob_get($con, \"SELECT doc_content FROM doc WHERE doc_id=5\");\necho \"Doc size:\".cubrid_lob_size($lobs[0]);\ncubrid_lob_export($conn, $lobs[0], \"doc_5.txt\");\ncubrid_lob_close($lobs);","output":null}],"cubrid_lob2_bind":[{"title":"cubrid_lob2_bind() example","source":"\/\/ Table: test_lob (id INT, contents CLOB)\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists test_lob\");\ncubrid_execute($conn,\"CREATE TABLE test_lob (id INT, contents CLOB)\");\n\n$req = cubrid_prepare($conn, \"INSERT INTO test_lob VALUES (?, ?)\");\n\ncubrid_bind($req,1, 3);\n\n$lob = cubrid_lob2_new($conn, 'CLOB');\ncubrid_lob2_bind($req, 2, $lob);\n\ncubrid_execute($req);\n\ncubrid_bind($req, 1, 4);\n\ncubrid_lob2_bind($req, 2, 'CUBRID LOB2 TEST', 'CLOB');\n\ncubrid_execute($req);\n\ncubrid_disconnect($conn);","output":null}],"cubrid_lob2_export":[{"title":"cubrid_lob2_export() example","source":"\/\/ Table: test_lob (id INT, contents CLOB)\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists doc\");\ncubrid_execute($conn,\"CREATE TABLE doc (id INT, doc_content CLOB)\");\ncubrid_execute($conn,\"INSERT INTO doc VALUES (5,'hello,cubrid')\");\n\n$req = cubrid_prepare($conn, \"select * from doc\");\n\ncubrid_execute($req);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n\n$row = cubrid_fetch($req, CUBRID_NUM | CUBRID_LOB);\n\ncubrid_lob2_export($row[1], \"doc_3.txt\");\n\ncubrid_lob2_close($row[1]);\ncubrid_disconnect($conn);","output":null}],"cubrid_lob2_import":[{"title":"cubrid_lob2_export() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists test_lob\");\ncubrid_execute($conn,\"CREATE TABLE test_lob (id INT, contents CLOB)\");\n \n$req = cubrid_prepare($conn, \"INSERT INTO test_lob VALUES (?, ?)\");\ncubrid_bind($req, 1, 1);\n\n$lob = cubrid_lob2_new($conn, \"clob\");\ncubrid_lob2_import($lob, \"doc_1.txt\");\ncubrid_lob2_bind($req, 2, $lob, 'CLOB'); \/\/ or cubrid_lob2_bind($req, 2, $lob);\n\ncubrid_execute($req);\n\ncubrid_lob2_close($lob);\ncubrid_disconnect($conn);","output":null}],"cubrid_lob2_read":[{"title":"cubrid_lob2_read() example 1","source":"\/\/ test_lob (id INT, contents CLOB)\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"public\", \"\");\n\n$req = cubrid_execute($conn, \"select * from test_lob\");\n\n$row = cubrid_fetch_row($req, CUBRID_LOB);\n\nprint \"position now is \" . cubrid_lob2_tell($row[1]) . \"\\n\";\n\ncubrid_lob2_seek($row[1], 10, CUBRID_CURSOR_FIRST);\n\nprint \"\\nposition after moving farword is \" . cubrid_lob2_tell($row[1]) . \"\\n\";\n\n$data = cubrid_lob2_read($row[1], 12);\n\nprint \"\\nposition after reading is \" . cubrid_lob2_tell($row[1]) . \"\\n\";\n\nprint $data . \"\\n\";\n\ncubrid_lob2_seek($row[1], 5, CUBRID_CURSOR_CURRENT);\n\nprint \"\\nposition after moving again is \" . cubrid_lob2_tell($row[1]) . \"\\n\";\n\n$data = cubrid_lob2_read($row[1], 20);\nprint $data . \"\\n\";\n\ncubrid_disconnect($conn);","output":null},{"title":"cubrid_lob2_read() example 2","source":"\/\/ test_lob (id INT, contents CLOB)\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\n$req = cubrid_execute($conn, \"select * from test_lob\");\n\n$row = cubrid_fetch_row($req, CUBRID_LOB);\n\nwhile (true) {\n    if ($data = cubrid_lob2_read($row[1], 1024)) {\n        print $data . \"\\n\";\n    }\n    elseif ($data === false) {\n        print \"There is no more data\\n\";\n        break;\n    }\n    else {\n        print \"There must some errors\\n\";\n        break;\n    }\n}\n\ncubrid_disconnect($conn);","output":null}],"cubrid_lob2_seek":[{"title":"cubrid_lob2_seek() example","source":"\/\/ test_lob (id INT, contents CLOB)\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists test_lob\");\ncubrid_execute($conn,\"CREATE TABLE test_lob (id INT, contents CLOB)\");\n$req = cubrid_prepare($conn, \"INSERT INTO test_lob VALUES(2, ?)\");\n\n$lob = cubrid_lob2_new($conn, 'CLOB');\n$len = cubrid_lob2_write($lob, \"Hello world\");\n\ncubrid_lob2_seek($lob, 0, CUBRID_CURSOR_LAST);\ncubrid_lob2_write($lob, \"beautiful\");\n\ncubrid_lob2_seek($lob, 15, CUBRID_CURSOR_FIRST);\n$data = cubrid_lob2_read($lob, 5);\n\necho $data.\"\\n\";\n\ncubrid_lob2_bind($req, 1, $lob);\ncubrid_execute($req);\n\ncubrid_disconnect($conn);","output":null}],"cubrid_lob2_seek64":[{"title":"cubrid_lob2_seek64() example","source":"\/\/ test_lob (id INT, contents CLOB)\n\/\/ Data length of doc_1.txt should be greater than 20101029056306120215.\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists test_lob\");\ncubrid_execute($conn,\"CREATE TABLE test_lob (id INT, contents CLOB)\");\n \n$req = cubrid_prepare($conn, \"INSERT INTO test_lob VALUES (?, ?)\");\ncubrid_bind($req, 1, 1);\n\n$lob = cubrid_lob2_new($conn, \"clob\");\ncubrid_lob2_import($lob, \"doc_1.txt\");\ncubrid_lob2_bind($req, 2, $lob, 'CLOB'); \/\/ or cubrid_lob2_bind($req, 2, $lob);\n\ncubrid_execute($req);\n\ncubrid_lob2_close($lob);\n\n$req = cubrid_execute($conn, \"select * from test_lob\");\n$row = cubrid_fetch_row($req, CUBRID_LOB);\n$lob = $row[1];\n\ncubrid_lob2_seek64($lob, \"20101029056306120215\", CUBRID_CURSOR_FIRST);\n$data = cubrid_lob2_read($lob, 20);\necho $data.\"\\n\";\ncubrid_disconnect($conn);","output":null}],"cubrid_lob2_write":[{"title":"cubrid_lob2_write() example 1","source":"\/\/ test_lob (id INT, contents CLOB)\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists test_lob\");\ncubrid_execute($conn,\"CREATE TABLE test_lob (id INT, contents CLOB)\");\n\n$req = cubrid_prepare($conn, \"INSERT INTO test_lob VALUES(2, ?)\");\n\n$lob = cubrid_lob2_new($conn, 'CLOB');\n$len = cubrid_lob2_write($lob, \"Hello world\");\n\ncubrid_lob2_bind($req, 1, $lob);\ncubrid_execute($req);\n\ncubrid_disconnect($conn);","output":null},{"title":"cubrid_lob2_write() example 2","source":"\/\/ test_lob (id INT, contents CLOB)\n\n$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\", \"\");\n\ncubrid_execute($conn,\"DROP TABLE if exists test_lob\");\ncubrid_execute($conn,\"CREATE TABLE test_lob (id INT, contents CLOB)\");\n\n$req = cubrid_prepare($conn, \"INSERT INTO test_lob VALUES(1, ?)\");\n$lob1 = cubrid_lob2_new($conn, 'CLOB');\n$len = cubrid_lob2_write($lob1, \"cubrid php driver\");\ncubrid_lob2_bind($req, 1, $lob1);\ncubrid_execute($req);\n\n$req = cubrid_execute($conn, \"select * from test_lob\");\n\n$row = cubrid_fetch_row($req, CUBRID_LOB);\n$lob2 = $row[1];\ncubrid_lob2_seek($lob2, 0, CUBRID_CURSOR_LAST);\n\n$pos = cubrid_lob2_tell($lob2);\nprint \"pos before write: $pos\\n\";\n\ncubrid_lob2_write($lob2, \"Hello world\");\n\n$pos = cubrid_lob2_tell($lob2);\nprint \"pos after write: $pos\\n\";\n\ncubrid_disconnect($conn);","output":null}],"cubrid_lock_read":[{"title":"cubrid_lock_read() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\ncubrid_lock_read($conn, $oid);\n\n$attr = cubrid_get($conn, $oid, \"b\");\nvar_dump($attr);\n\n$attr = cubrid_get($conn, $oid);\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"string(9) \"{1, 2, 3}\"\narray(4) {\n  [\"a\"]=>\n  string(1) \"1\"\n  [\"b\"]=>\n  array(3) {\n    [0]=>\n    string(1) \"1\"\n    [1]=>\n    string(1) \"2\"\n    [2]=>\n    string(1) \"3\"\n  }\n  [\"c\"]=>\n  array(4) {\n    [0]=>\n    string(2) \"11\"\n    [1]=>\n    string(2) \"22\"\n    [2]=>\n    string(2) \"33\"\n    [3]=>\n    string(3) \"333\"\n  }\n  [\"d\"]=>\n  string(10) \"a         \"\n}"}],"cubrid_lock_write":[{"title":"cubrid_lock_write() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\ncubrid_lock_write($conn, $oid);\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_put($conn, $oid, \"b\", array(2, 4, 8));\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n}\narray(3) {\n  [0]=>\n  string(1) \"2\"\n  [1]=>\n  string(1) \"4\"\n  [2]=>\n  string(1) \"8\"\n}"}],"cubrid_move_cursor":[{"title":"cubrid_move_cursor() example","source":"$conn = cubrid_connect(\"127.0.0.1\", 33000, \"demodb\", \"dba\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\");\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_LAST);\n\n$result = cubrid_fetch_row($req);\nvar_dump($result);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$result = cubrid_fetch_row($req);\nvar_dump($result);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_CURRENT);\n$result = cubrid_fetch_row($req);\nvar_dump($result);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(2) {\n  [0]=>\n  string(1) \"G\"\n  [1]=>\n  string(4) \"Gold\"\n}\narray(2) {\n  [0]=>\n  string(1) \"X\"\n  [1]=>\n  string(5) \"Mixed\"\n}\narray(2) {\n  [0]=>\n  string(1) \"M\"\n  [1]=>\n  string(3) \"Man\"\n}"}],"cubrid_new_glo":[{"title":"cubrid_new_glo() example","source":"$oid = cubrid_new_glo ($con, \"glo\", \"input.jpg\");\nif ($oid){\n   \/\/ the type of column \"image\" is \"object\"\n   $req = cubrid_execute ($con, \"insert into person(image) values($oid)\");\n   if ($req) {\n      echo \"image inserted successfully\";\n      cubrid_close_request ($req);\n      cubrid_commit($con);\n   }\n}","output":null}],"cubrid_next_result":[{"title":"cubrid_next_result() example","source":"$conn = cubrid_connect(\"127.0.0.1\", 33000, \"demodb\", \"dba\");\n\n$sql_stmt = \"SELECT * FROM code; SELECT * FROM history WHERE host_year=2004 AND event_code=20281\";\n$res = cubrid_execute($conn, $sql_stmt, CUBRID_EXEC_QUERY_ALL);\n\nget_result_info($res);\ncubrid_next_result($res);\nget_result_info($res);\n\nfunction get_result_info($req)\n{\n    printf(\"\\n------------ get_result_info --------------------\\n\");\n\n    $row_num = cubrid_num_rows($req);\n    $col_num = cubrid_num_cols($req);\n\n    $column_name_list = cubrid_column_names($req);\n    $column_type_list = cubrid_column_types($req);\n\n    $column_last_name = cubrid_field_name($req, $col_num - 1);\n    $column_last_table = cubrid_field_table($req, $col_num - 1);\n\n    $column_last_type = cubrid_field_type($req, $col_num - 1);\n    $column_last_len = cubrid_field_len($req, $col_num - 1);\n\n    $column_1_flags = cubrid_field_flags($req, 1);\n\n    printf(\"%-30s %d\\n\", \"Row count:\", $row_num);\n    printf(\"%-30s %d\\n\", \"Column count:\", $col_num);\n    printf(\"\\n\");\n\n    printf(\"%-30s %-30s %-15s\\n\", \"Column Names\", \"Column Types\", \"Column Len\");\n    printf(\"------------------------------------------------------------------------------\\n\");\n\n    $size = count($column_name_list);\n    for($i = 0; $i < $size; $i++) {\n        $column_len = cubrid_field_len($req, $i);\n        printf(\"%-30s %-30s %-15s\\n\", $column_name_list[$i], $column_type_list[$i], $column_len); \n    }\n    printf(\"\\n\\n\");\n\n    printf(\"%-30s %s\\n\", \"Last Column Name:\", $column_last_name);\n    printf(\"%-30s %s\\n\", \"Last Column Table:\", $column_last_table);\n    printf(\"%-30s %s\\n\", \"Last Column Type:\", $column_last_type);\n    printf(\"%-30s %d\\n\", \"Last Column Len:\", $column_last_len);\n    printf(\"%-30s %s\\n\", \"Second Column Flags:\", $column_1_flags);\n\n    printf(\"\\n\\n\");\n}","output":"------------ get_result_info --------------------\nRow count:                     6\nColumn count:                  2\n\nColumn Names                   Column Types                   Column Len     \n------------------------------------------------------------------------------\ns_name                         char                           1              \nf_name                         varchar                        6              \n\n\nLast Column Name:              f_name\nLast Column Table:             code\nLast Column Type:              varchar\nLast Column Len:               6\nSecond Column Flags:           \n\n\n\n------------ get_result_info --------------------\nRow count:                     4\nColumn count:                  5\n\nColumn Names                   Column Types                   Column Len     \n------------------------------------------------------------------------------\nevent_code                     integer                        11             \nathlete                        varchar                        40             \nhost_year                      integer                        11             \nscore                          varchar                        10             \nunit                           varchar                        5              \n\n\nLast Column Name:              unit\nLast Column Table:             history\nLast Column Type:              varchar\nLast Column Len:               5\nSecond Column Flags:           not_null primary_key unique_key"}],"cubrid_num_cols":[{"title":"cubrid_num_cols() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\");\n\n$row_num = cubrid_num_rows($req);\n$col_num = cubrid_num_cols($req);\n\nprintf(\"Row Num: %d\\nColumn Num: %d\\n\", $row_num, $col_num);\n\ncubrid_disconnect($conn);","output":"Row Num: 6\nColumn Num: 2"}],"cubrid_num_fields":[{"title":"cubrid_num_fields() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\");\n\n$row_num = cubrid_num_rows($req);\n$col_num = cubrid_num_fields($req);\n\nprintf(\"Row Num: %d\\nColumn Num: %d\\n\", $row_num, $col_num);\n\ncubrid_disconnect($conn);","output":"Row Num: 6\nColumn Num: 2"}],"cubrid_num_rows":[{"title":"cubrid_num_rows() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\");\n\n$row_num = cubrid_num_rows($req);\n$col_num = cubrid_num_cols($req);\n\nprintf(\"Row Num: %d\\nColumn Num: %d\\n\", $row_num, $col_num);\n\ncubrid_disconnect($conn);","output":"Row Num: 6\nColumn Num: 2"}],"cubrid_pconnect_with_url":[{"title":"cubrid_pconnect_with_url() url without properties example","source":"$conn_url = \"CUBRID:127.0.0.1:33000:demodb:dba::\"\n$con = cubrid_pconnect_with_url ($conn_url);\n\nif ($con) {\n   echo \"connected successfully\";\n   cubrid_execute($con, \"create table person(id int,name char(16))\");\n   $req =cubrid_execute($con, \"insert into person values(1,'James')\");\n\n   if ($req) {\n      cubrid_close_request ($req);\n      cubrid_commit ($con);\n   } else {\n      cubrid_rollback ($con);\n   }\n   cubrid_disconnect ($con);\n}","output":null},{"title":"cubrid_pconnect_with_url() url with properties example","source":"$conn_url = \"CUBRID:127.0.0.1:33000:demodb:dba::?althost=10.34.63.132:33088&rctime=100\"\n$con = cubrid_pconnect_with_url ($conn_url);\n\nif ($con) {\n   echo \"connected successfully\";\n   $req =cubrid_execute($con, \"insert into person values(1,'James')\");\n\n   if ($req) {\n      cubrid_close_request ($req);\n      cubrid_commit ($con);\n   } else {\n      cubrid_rollback ($con);\n   }\n   cubrid_disconnect ($con);\n}","output":null}],"cubrid_pconnect":[{"title":"cubrid_connect() example","source":"printf(\"%-30s %s\\n\", \"CUBRID PHP Version:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_pconnect(\"localhost\", 33000, \"demodb\", \"dba\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Server Info:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Client Info:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"CUBRID Charset:\", $charset);\n\ncubrid_disconnect($conn);","output":"CUBRID PHP Version:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nServer Info:                   9.1.0.0212\nClient Info:                   9.1.0\n\nCUBRID Charset:                iso8859-1"}],"cubrid_ping":[{"title":"cubrid_ping() example","source":"set_time_limit(0);\n\n$conn = cubrid_connect('localhost', 33000, 'demodb');\n\n\/* Assuming this query will take a long time *\/\n$sql = \"select * from athlete\";\n$result = cubrid_query($sql);\nif (!$result) {\n    echo 'Query #1 failed, exiting.';\n    exit;\n}\n\n\/* Make sure the connection is still alive, if not, try to reconnect *\/\nif (!cubrid_ping($conn)) {\n    echo 'Lost connection, exiting after query #1';\n    exit;\n}\ncubrid_free_result($result);\n\n\/* So the connection is still alive, let's run another query *\/\n$sql2 = \"select * from code\";\n$result2 = cubrid_query($sql2);","output":null}],"cubrid_prepare":[{"title":"cubrid_prepare() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n$sql = <<<EOD\nSELECT g.event_code, e.name \nFROM game g \nJOIN event e ON g.event_code=e.code \nWHERE host_year = ? AND event_code NOT IN (SELECT event_code FROM game WHERE host_year=?) GROUP BY event_code;\nEOD;\n\n$req = cubrid_prepare($conn, $sql);\n\ncubrid_bind($req, 1, 2004);\ncubrid_bind($req, 2, 2000);\ncubrid_execute($req);\n\n$row_num = cubrid_num_rows($req);\nprintf(\"There are %d event that exits in 2004 olympic but not in 2000. For example:\\n\\n\", $row_num);\n\nprintf(\"%-15s %s\\n\", \"Event_code\", \"Event_name\");\nprintf(\"----------------------------\\n\");\n\n$row = cubrid_fetch_assoc($req);\nprintf(\"%-15d %s\\n\", $row[\"event_code\"], $row[\"name\"]);\n$row = cubrid_fetch_assoc($req);\nprintf(\"%-15d %s\\n\", $row[\"event_code\"], $row[\"name\"]);\n\ncubrid_disconnect($conn);","output":"There are 27 event that exits in 2004 olympic but not in 2000. For example:\n\nEvent_code      Event_name\n----------------------------\n20063           +91kg\n20070           64kg"}],"cubrid_put":[{"title":"cubrid_put() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(2, {4,5,7}, {44,55,66,666}, 'b')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_put($conn, $oid, \"b\", array(2, 4, 8));\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n}\narray(3) {\n  [0]=>\n  string(1) \"2\"\n  [1]=>\n  string(1) \"4\"\n  [2]=>\n  string(1) \"8\"\n}"}],"cubrid_query":[{"title":"Invalid Query","source":"$conn = cubrid_connect('localhost', 33000, 'demodb');\n\n$result = cubrid_query('SELECT * WHERE 1=1');\nif (!$result) {\n    die('Invalid query: ' . cubrid_error());\n}","output":null},{"title":"Valid Query","source":"\/\/ This could be supplied by a user, for example\n$firstname = 'fred';\n$lastname  = 'fox';\n\n$conn = cubrid_connect('localhost', 33000, 'demodb');\n\ncubrid_execute($conn,\"DROP TABLE if exists friends\");\ncubrid_execute($conn,\"create table friends(firstname varchar,lastname varchar,address char(24),age int)\");\ncubrid_execute($conn,\"insert into friends values('fred','fox','home-1','20')\");\ncubrid_execute($conn,\"insert into friends values('blue','cat','home-2','21')\");\n\/\/ Formulate Query\n\/\/ This is the best way to perform an SQL query\n\/\/ For more examples, see cubrid_real_escape_string()\n$query = sprintf(\"SELECT firstname, lastname, address, age FROM friends WHERE firstname='%s' AND lastname='%s'\",\ncubrid_real_escape_string($firstname),\ncubrid_real_escape_string($lastname));\n\n\/\/ Perform Query\n$result = cubrid_query($query);\n\n\/\/ Check result\n\/\/ This shows the actual query sent to CUBRID, and the error. Useful for debugging.\nif (!$result) {\n    $message  = 'Invalid query: ' . cubrid_error() . \"\\n\";\n    $message .= 'Whole query: ' . $query;\n    die($message);\n}\n\n\/\/ Use result\n\/\/ Attempting to print $result won't allow access to information in the resource\n\/\/ One of the cubrid result functions must be used\n\/\/ See also cubrid_result(), cubrid_fetch_array(), cubrid_fetch_row(), etc.\nwhile ($row = cubrid_fetch_assoc($result)) {\n    echo $row['firstname'];\n    echo $row['lastname'];\n    echo $row['address'];\n    echo $row['age'];\n}\n\n\/\/ Free the resources associated with the result set\n\/\/ This is done automatically at the end of the script\ncubrid_free_result($result);","output":null}],"cubrid_real_escape_string":[{"title":"cubrid_real_escape_string() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n$unescaped_str = ' !\"#$%&\\'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n$escaped_str = cubrid_real_escape_string($unescaped_str);\n\n$len = strlen($unescaped_str);\n\n@cubrid_execute($conn, \"DROP TABLE cubrid_test\");\ncubrid_execute($conn, \"CREATE TABLE cubrid_test (t char($len))\");\ncubrid_execute($conn, \"INSERT INTO cubrid_test (t) VALUES('$escaped_str')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM cubrid_test\");\n$row = cubrid_fetch_assoc($req);\n\nvar_dump($row);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(1) {\n  [\"t\"]=>\n  string(95) \" !\"#$%&'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"\n}"}],"cubrid_result":[{"title":"cubrid_result() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM code\");\n\n$result = cubrid_result($req, 0);\nvar_dump($result);\n\n$result = cubrid_result($req, 0, 1);\nvar_dump($result);\n\n$result = cubrid_result($req, 5, \"f_name\");\nvar_dump($result);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"string(1) \"X\"\nstring(5) \"Mixed\"\nstring(4) \"Gold\""}],"cubrid_rollback":[{"title":"cubrid_rollback() example","source":"$conn = cubrid_connect(\"127.0.0.1\", 33000, \"demodb\", \"dba\");\ncubrid_set_autocommit($conn,false);\n\n@cubrid_execute($conn, \"DROP TABLE publishers\");\n\n$sql = <<<EOD\nCREATE TABLE publishers(\npub_id CHAR(3), \npub_name VARCHAR(20), \ncity VARCHAR(15), \nstate CHAR(2), \ncountry VARCHAR(15)\n)\nEOD;\n\nif (!cubrid_execute($conn, $sql)) {\n    printf(\"Error facility: %d\\nError code: %d\\nError msg: %s\\n\", cubrid_error_code_facility(), cubrid_error_code(), cubrid_error_msg());\n\n    cubrid_disconnect($conn);\n    exit;\n}\n\n$req = cubrid_prepare($conn, \"INSERT INTO publishers VALUES(?, ?, ?, ?, ?)\");\n\n$id_list = array(\"P01\", \"P02\", \"P03\", \"P04\");\n$name_list = array(\"Abatis Publishers\", \"Core Dump Books\", \"Schadenfreude Press\", \"Tenterhooks Press\");\n$city_list = array(\"New York\", \"San Francisco\", \"Hamburg\", \"Berkeley\");\n$state_list = array(\"NY\", \"CA\", NULL, \"CA\");\n$country_list = array(\"USA\", \"USA\", \"Germany\", \"USA\");\n\nfor ($i = 0, $size = count($id_list); $i < $size; $i++) {\n    cubrid_bind($req, 1, $id_list[$i]);\n    cubrid_bind($req, 2, $name_list[$i]);\n    cubrid_bind($req, 3, $city_list[$i]);\n    cubrid_bind($req, 4, $state_list[$i]);\n    cubrid_bind($req, 5, $country_list[$i]);\n\n    if (!($ret = cubrid_execute($req))) {\n        break;\n    }\n}\n\nif (!$ret) {\n    cubrid_rollback($conn);\n} else {\n    cubrid_commit($conn);\n\n    $req = cubrid_execute($conn, \"SELECT * FROM publishers\");\n    while ($result = cubrid_fetch_assoc($req)) {\n        printf(\"%-3s %-20s %-15s %-3s %-15s\\n\", \n            $result[\"pub_id\"], $result[\"pub_name\"], $result[\"city\"], $result[\"state\"], $result[\"country\"]);\n    }\n}\n\ncubrid_disconnect($conn);","output":"P01 Abatis Publishers    New York        NY  USA            \nP02 Core Dump Books      San Francisco   CA  USA            \nP03 Schadenfreude Press  Hamburg             Germany        \nP04 Tenterhooks Press    Berkeley        CA  USA"}],"cubrid_save_to_glo":[{"title":"cubrid_save_to_glo() example","source":"$req = cubrid_execute ($con, \"select image from person where id=1\");\nif ($req) {\n   list ($oid) = cubrid_fetch($req);\n   cubrid_close_request($req);\n   $res = cubrid_save_to_glo ($con, $oid, \"input.jpg\");\n   if ($res) {\n      echo \"image changed successfully\";\n   }\n}","output":null}],"cubrid_schema":[{"title":"cubrid_schema() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\nprintf(\"\\n--- Primary Key ---\\n\");\n$pk = cubrid_schema($conn, CUBRID_SCH_PRIMARY_KEY, \"game\");\nvar_dump($pk);\n\nprintf(\"\\n--- Foreign Keys ---\\n\");\n$fk = cubrid_schema($conn, CUBRID_SCH_IMPORTED_KEYS, \"game\");\nvar_dump($fk);\n\nprintf(\"\\n--- Column Attribute ---\\n\");\n$attr = cubrid_schema($conn, CUBRID_SCH_ATTRIBUTE, \"stadium\", \"area\");\nvar_dump($attr);\n\ncubrid_disconnect($conn);","output":"--- Primary Key ---\narray(3) {\n  [0]=>\n  array(4) {\n    [\"CLASS_NAME\"]=>\n    string(4) \"game\"\n    [\"ATTR_NAME\"]=>\n    string(12) \"athlete_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"3\"\n    [\"KEY_NAME\"]=>\n    string(41) \"pk_game_host_year_event_code_athlete_code\"\n  }\n  [1]=>\n  array(4) {\n    [\"CLASS_NAME\"]=>\n    string(4) \"game\"\n    [\"ATTR_NAME\"]=>\n    string(10) \"event_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"2\"\n    [\"KEY_NAME\"]=>\n    string(41) \"pk_game_host_year_event_code_athlete_code\"\n  }\n  [2]=>\n  array(4) {\n    [\"CLASS_NAME\"]=>\n    string(4) \"game\"\n    [\"ATTR_NAME\"]=>\n    string(9) \"host_year\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"1\"\n    [\"KEY_NAME\"]=>\n    string(41) \"pk_game_host_year_event_code_athlete_code\"\n  }\n}\n\n--- Foreign Keys ---\narray(2) {\n  [0]=>\n  array(9) {\n    [\"PKTABLE_NAME\"]=>\n    string(7) \"athlete\"\n    [\"PKCOLUMN_NAME\"]=>\n    string(4) \"code\"\n    [\"FKTABLE_NAME\"]=>\n    string(4) \"game\"\n    [\"FKCOLUMN_NAME\"]=>\n    string(12) \"athlete_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"1\"\n    [\"UPDATE_RULE\"]=>\n    string(1) \"1\"\n    [\"DELETE_RULE\"]=>\n    string(1) \"1\"\n    [\"FK_NAME\"]=>\n    string(20) \"fk_game_athlete_code\"\n    [\"PK_NAME\"]=>\n    string(15) \"pk_athlete_code\"\n  }\n  [1]=>\n  array(9) {\n    [\"PKTABLE_NAME\"]=>\n    string(5) \"event\"\n    [\"PKCOLUMN_NAME\"]=>\n    string(4) \"code\"\n    [\"FKTABLE_NAME\"]=>\n    string(4) \"game\"\n    [\"FKCOLUMN_NAME\"]=>\n    string(10) \"event_code\"\n    [\"KEY_SEQ\"]=>\n    string(1) \"1\"\n    [\"UPDATE_RULE\"]=>\n    string(1) \"1\"\n    [\"DELETE_RULE\"]=>\n    string(1) \"1\"\n    [\"FK_NAME\"]=>\n    string(18) \"fk_game_event_code\"\n    [\"PK_NAME\"]=>\n    string(13) \"pk_event_code\"\n  }\n}\n\n--- Column Attribute ---\narray(1) {\n  [0]=>\n  array(13) {\n    [\"ATTR_NAME\"]=>\n    string(4) \"area\"\n    [\"DOMAIN\"]=>\n    string(1) \"7\"\n    [\"SCALE\"]=>\n    string(1) \"2\"\n    [\"PRECISION\"]=>\n    string(2) \"10\"\n    [\"INDEXED\"]=>\n    string(1) \"0\"\n    [\"NON_NULL\"]=>\n    string(1) \"0\"\n    [\"SHARED\"]=>\n    string(1) \"0\"\n    [\"UNIQUE\"]=>\n    string(1) \"0\"\n    [\"DEFAULT\"]=>\n    NULL\n    [\"ATTR_ORDER\"]=>\n    string(1) \"4\"\n    [\"CLASS_NAME\"]=>\n    string(7) \"stadium\"\n    [\"SOURCE_CLASS\"]=>\n    string(7) \"stadium\"\n    [\"IS_KEY\"]=>\n    string(1) \"0\"\n  }\n}"}],"cubrid_send_glo":[{"title":"cubrid_send_glo() example","source":"$req = cubrid_execute ($con, \"select image from person where id =1\");\nif ($req) {\n  list ($oid) = cubrid_fetch($req);\n  cubrid_close_request($req);\n  Header (\"Content-type: image\/jpeg\");\n  cubrid_send_glo ($con, $oid);\n}","output":null}],"cubrid_seq_drop":[{"title":"cubrid_seq_drop() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c sequence(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"c\");\nvar_dump($attr);\n\ncubrid_seq_drop($conn, $oid, \"c\", 4);\n\n$attr = cubrid_col_get($conn, $oid, \"c\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(4) {\n  [0]=>\n  string(2) \"11\"\n  [1]=>\n  string(2) \"22\"\n  [2]=>\n  string(2) \"33\"\n  [3]=>\n  string(3) \"333\"\n}\narray(3) {\n  [0]=>\n  string(2) \"11\"\n  [1]=>\n  string(2) \"22\"\n  [2]=>\n  string(2) \"33\"\n}"}],"cubrid_seq_insert":[{"title":"cubrid_seq_insert() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c sequence(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"c\");\nvar_dump($attr);\n\ncubrid_seq_insert($conn, $oid, \"c\", 5, \"44\");\n\n$attr = cubrid_col_get($conn, $oid, \"c\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(4) {\n  [0]=>\n  string(2) \"11\"\n  [1]=>\n  string(2) \"22\"\n  [2]=>\n  string(2) \"33\"\n  [3]=>\n  string(3) \"333\"\n}\narray(5) {\n  [0]=>\n  string(2) \"11\"\n  [1]=>\n  string(2) \"22\"\n  [2]=>\n  string(2) \"33\"\n  [3]=>\n  string(3) \"333\"\n  [4]=>\n  string(2) \"44\"\n}"}],"cubrid_seq_put":[{"title":"cubrid_seq_put() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c sequence(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"c\");\nvar_dump($attr);\n\ncubrid_seq_put($conn, $oid, \"c\", 1, \"111\");\n\n$attr = cubrid_col_get($conn, $oid, \"c\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(4) {\n  [0]=>\n  string(2) \"11\"\n  [1]=>\n  string(2) \"22\"\n  [2]=>\n  string(2) \"33\"\n  [3]=>\n  string(3) \"333\"\n}\narray(4) {\n  [0]=>\n  string(3) \"111\"\n  [1]=>\n  string(2) \"22\"\n  [2]=>\n  string(2) \"33\"\n  [3]=>\n  string(3) \"333\"\n}"}],"cubrid_set_add":[{"title":"cubrid_set_add() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_set_add($conn, $oid, \"b\", \"4\");\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n}\narray(4) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n  [3]=>\n  string(1) \"4\"\n}"}],"cubrid_set_db_parameter":[{"title":"cubrid_get_db_parameter() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n$params = cubrid_get_db_parameter($conn);\nvar_dump($params);\n\ncubrid_set_autocommit($conn, CUBRID_AUTOCOMMIT_TRUE);\ncubrid_set_db_parameter($conn, CUBRID_PARAM_ISOLATION_LEVEL, 2);\n\n$params_new = cubrid_get_db_parameter($conn);\nvar_dump($params_new);\n\ncubrid_disconnect($conn);","output":"array(4) {\n  [\"PARAM_ISOLATION_LEVEL\"]=>\n  int(3)\n  [\"PARAM_LOCK_TIMEOUT\"]=>\n  int(-1)\n  [\"PARAM_MAX_STRING_LENGTH\"]=>\n  int(1073741823)\n  [\"PARAM_AUTO_COMMIT\"]=>\n  int(0)\n}\narray(4) {\n  [\"PARAM_ISOLATION_LEVEL\"]=>\n  int(2)\n  [\"PARAM_LOCK_TIMEOUT\"]=>\n  int(-1)\n  [\"PARAM_MAX_STRING_LENGTH\"]=>\n  int(1073741823)\n  [\"PARAM_AUTO_COMMIT\"]=>\n  int(1)\n}"}],"cubrid_set_drop":[{"title":"cubrid_set_drop() example","source":"$conn = cubrid_connect(\"localhost\", 33000, \"demodb\", \"dba\");\n\n@cubrid_execute($conn, \"DROP TABLE foo\");\ncubrid_execute($conn, \"CREATE TABLE foo(a int AUTO_INCREMENT, b set(int), c list(int), d char(10))\");\ncubrid_execute($conn, \"INSERT INTO foo(a, b, c, d) VALUES(1, {1,2,3}, {11,22,33,333}, 'a')\");\n\n$req = cubrid_execute($conn, \"SELECT * FROM foo\", CUBRID_INCLUDE_OID);\n\ncubrid_move_cursor($req, 1, CUBRID_CURSOR_FIRST);\n$oid = cubrid_current_oid($req);\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_set_drop($conn, $oid, \"b\", \"1\");\n\n$attr = cubrid_col_get($conn, $oid, \"b\");\nvar_dump($attr);\n\ncubrid_close_request($req);\ncubrid_disconnect($conn);","output":"array(3) {\n  [0]=>\n  string(1) \"1\"\n  [1]=>\n  string(1) \"2\"\n  [2]=>\n  string(1) \"3\"\n}\narray(2) {\n  [0]=>\n  string(1) \"2\"\n  [1]=>\n  string(1) \"3\"\n}"}],"cubrid_unbuffered_query":[{"title":"cubrid_unbuffered_query() example","source":"$link = cubrid_connect(\"localhost\", 30000, \"demodb\", \"dba\", \"\");\n    if (!$link)\n    {\n        die('Could not connect.');\n    }\n    $query = \"select * from code\";\n    $result = cubrid_unbuffered_query($query, $link);\n\n    while ($row = cubrid_fetch($result))\n    {\n        var_dump($row);\n    }\n\n    cubrid_close_request($result);\n    cubrid_disconnect($link);","output":null}],"cubrid_version":[{"title":"cubrid_version() example","source":"printf(\"%-30s %s\\n\", \"CUBRID PHP Version:\", cubrid_version());\n\nprintf(\"\\n\");\n\n$conn = cubrid_connect(\"localhost\", 33088, \"demodb\", \"dba\");\n\nif (!$conn) {\n    die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());\n}\n\n$db_params = cubrid_get_db_parameter($conn);\n\nwhile (list($param_name, $param_value) = each($db_params)) {\n    printf(\"%-30s %s\\n\", $param_name, $param_value);\n}\n\nprintf(\"\\n\");\n\n$server_info = cubrid_get_server_info($conn);\n$client_info = cubrid_get_client_info();\n\nprintf(\"%-30s %s\\n\", \"Server Info:\", $server_info);\nprintf(\"%-30s %s\\n\", \"Client Info:\", $client_info);\n\nprintf(\"\\n\");\n\n$charset = cubrid_get_charset($conn);\n\nprintf(\"%-30s %s\\n\", \"CUBRID Charset:\", $charset);\n\ncubrid_disconnect($conn);","output":"CUBRID PHP Version:            9.1.0.0001\n\nPARAM_ISOLATION_LEVEL          3\nLOCK_TIMEOUT                   -1\nMAX_STRING_LENGTH              1073741823\nPARAM_AUTO_COMMIT              1\n\nServer Info:                   9.1.0.0212\nClient Info:                   9.1.0\n\nCUBRID Charset:                iso8859-1"}],"curl_close":[{"title":"Initializing a new cURL session and fetching a web page","source":"\/\/ create a new cURL resource\n$ch = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch, CURLOPT_URL, \"http:\/\/www.example.com\/\");\ncurl_setopt($ch, CURLOPT_HEADER, 0);\n\n\/\/ grab URL and pass it to the browser\ncurl_exec($ch);\n\n\/\/ close cURL resource, and free up system resources\ncurl_close($ch);","output":null}],"curl_copy_handle":[{"title":"Copying a cURL handle","source":"\/\/ create a new cURL resource\n$ch = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch, CURLOPT_URL, 'http:\/\/www.example.com\/');\ncurl_setopt($ch, CURLOPT_HEADER, 0);\n\n\/\/ copy the handle\n$ch2 = curl_copy_handle($ch);\n\n\/\/ grab URL (http:\/\/www.example.com\/) and pass it to the browser\ncurl_exec($ch2);\n\n\/\/ close cURL resources, and free up system resources\ncurl_close($ch2);\ncurl_close($ch);","output":null}],"curl_errno":[{"title":"curl_errno() example","source":"\/\/ Create a curl handle to a non-existing location\n$ch = curl_init('http:\/\/404.php.net\/');\n\n\/\/ Execute\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_exec($ch);\n\n\/\/ Check if any error occurred\nif(curl_errno($ch))\n{\n    echo 'Curl error: ' . curl_error($ch);\n}\n\n\/\/ Close handle\ncurl_close($ch);","output":null}],"curl_error":[{"title":"curl_error() example","source":"\/\/ Create a curl handle to a non-existing location\n$ch = curl_init('http:\/\/404.php.net\/');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\nif(curl_exec($ch) === false)\n{\n    echo 'Curl error: ' . curl_error($ch);\n}\nelse\n{\n    echo 'Operation completed without any errors';\n}\n\n\/\/ Close handle\ncurl_close($ch);","output":null}],"curl_escape":[{"title":"curl_escape() example","source":"\/\/ Create a curl handle\n$ch = curl_init();\n\n\/\/ Escape a string used as a GET parameter\n$location = curl_escape($ch, 'Hofbräuhaus \/ München');\n\/\/ Result: Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen\n\n\/\/ Compose an URL with the escaped string\n$url = \"http:\/\/example.com\/add_location.php?location={$location}\";\n\/\/ Result: http:\/\/example.com\/add_location.php?location=Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen\n\n\/\/ Send HTTP request and close the handle\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_exec($ch);\ncurl_close($ch);","output":null}],"curl_exec":[{"title":"Fetching a web page","source":"\/\/ create a new cURL resource\n$ch = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch, CURLOPT_URL, \"http:\/\/www.example.com\/\");\ncurl_setopt($ch, CURLOPT_HEADER, 0);\n\n\/\/ grab URL and pass it to the browser\ncurl_exec($ch);\n\n\/\/ close cURL resource, and free up system resources\ncurl_close($ch);","output":null}],"curl_getinfo":[{"title":"curl_getinfo() example","source":"\/\/ Create a cURL handle\n$ch = curl_init('http:\/\/www.example.com\/');\n\n\/\/ Execute\ncurl_exec($ch);\n\n\/\/ Check if any error occurred\nif (!curl_errno($ch)) {\n  $info = curl_getinfo($ch);\n  echo 'Took ', $info['total_time'], ' seconds to send a request to ', $info['url'], \"\\n\";\n}\n\n\/\/ Close handle\ncurl_close($ch);","output":null},{"title":"curl_getinfo() example with opt parameter","source":"\/\/ Create a cURL handle\n$ch = curl_init('http:\/\/www.example.com\/');\n\n\/\/ Execute\ncurl_exec($ch);\n\n\/\/ Check HTTP status code\nif (!curl_errno($ch)) {\n  switch ($http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE)) {\n    case 200:  # OK\n      break;\n    default:\n      echo 'Unexpected HTTP code: ', $http_code, \"\\n\";\n  }\n}\n\n\/\/ Close handle\ncurl_close($ch);","output":null}],"curl_init":[{"title":"Initializing a new cURL session and fetching a web page","source":"\/\/ create a new cURL resource\n$ch = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch, CURLOPT_URL, \"http:\/\/www.example.com\/\");\ncurl_setopt($ch, CURLOPT_HEADER, 0);\n\n\/\/ grab URL and pass it to the browser\ncurl_exec($ch);\n\n\/\/ close cURL resource, and free up system resources\ncurl_close($ch);","output":null}],"curl_multi_add_handle":[{"title":"curl_multi_add_handle() example","source":"\/\/ create both cURL resources\n$ch1 = curl_init();\n$ch2 = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch1, CURLOPT_URL, \"http:\/\/www.example.com\/\");\ncurl_setopt($ch1, CURLOPT_HEADER, 0);\ncurl_setopt($ch2, CURLOPT_URL, \"http:\/\/www.php.net\/\");\ncurl_setopt($ch2, CURLOPT_HEADER, 0);\n\n\/\/create the multiple cURL handle\n$mh = curl_multi_init();\n\n\/\/add the two handles\ncurl_multi_add_handle($mh,$ch1);\ncurl_multi_add_handle($mh,$ch2);\n\n$running=null;\n\/\/execute the handles\ndo {\n    curl_multi_exec($mh,$running);\n} while($running > 0);\n\n\/\/close all the handles\ncurl_multi_remove_handle($mh, $ch1);\ncurl_multi_remove_handle($mh, $ch2);\ncurl_multi_close($mh);","output":null}],"curl_multi_close":[{"title":"curl_multi_close() example","source":"\/\/ create both cURL resources\n$ch1 = curl_init();\n$ch2 = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch1, CURLOPT_URL, \"http:\/\/www.example.com\/\");\ncurl_setopt($ch1, CURLOPT_HEADER, 0);\ncurl_setopt($ch2, CURLOPT_URL, \"http:\/\/www.php.net\/\");\ncurl_setopt($ch2, CURLOPT_HEADER, 0);\n\n\/\/create the multiple cURL handle\n$mh = curl_multi_init();\n\n\/\/add the two handles\ncurl_multi_add_handle($mh,$ch1);\ncurl_multi_add_handle($mh,$ch2);\n\n$running=null;\n\/\/execute the handles\ndo {\n    curl_multi_exec($mh,$running);\n} while ($running > 0);\n\n\/\/close the handles\ncurl_multi_remove_handle($mh, $ch1);\ncurl_close($ch1);\ncurl_multi_remove_handle($mh, $ch2);\ncurl_close($ch2);\ncurl_multi_close($mh);","output":null}],"curl_multi_exec":[{"title":"curl_multi_exec() example","source":"\/\/ create both cURL resources\n$ch1 = curl_init();\n$ch2 = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch1, CURLOPT_URL, \"http:\/\/lxr.php.net\/\");\ncurl_setopt($ch1, CURLOPT_HEADER, 0);\ncurl_setopt($ch2, CURLOPT_URL, \"http:\/\/www.php.net\/\");\ncurl_setopt($ch2, CURLOPT_HEADER, 0);\n\n\/\/create the multiple cURL handle\n$mh = curl_multi_init();\n\n\/\/add the two handles\ncurl_multi_add_handle($mh,$ch1);\ncurl_multi_add_handle($mh,$ch2);\n\n$active = null;\n\/\/execute the handles\ndo {\n    $mrc = curl_multi_exec($mh, $active);\n} while ($mrc == CURLM_CALL_MULTI_PERFORM);\n\nwhile ($active && $mrc == CURLM_OK) {\n    if (curl_multi_select($mh) != -1) {\n        do {\n            $mrc = curl_multi_exec($mh, $active);\n        } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n    }\n}\n\n\/\/close the handles\ncurl_multi_remove_handle($mh, $ch1);\ncurl_multi_remove_handle($mh, $ch2);\ncurl_multi_close($mh);","output":null}],"curl_multi_info_read":[{"title":"A curl_multi_info_read() example","source":"$urls = array(\n   \"http:\/\/www.cnn.com\/\",\n   \"http:\/\/www.bbc.co.uk\/\",\n   \"http:\/\/www.yahoo.com\/\"\n);\n\n$mh = curl_multi_init();\n\nforeach ($urls as $i => $url) {\n    $conn[$i] = curl_init($url);\n    curl_setopt($conn[$i], CURLOPT_RETURNTRANSFER, 1);\n    curl_multi_add_handle($mh, $conn[$i]);\n}\n\ndo {\n    $status = curl_multi_exec($mh, $active);\n    $info = curl_multi_info_read($mh);\n    if (false !== $info) {\n        var_dump($info);\n    }\n} while ($status === CURLM_CALL_MULTI_PERFORM || $active);\n\nforeach ($urls as $i => $url) {\n    $res[$i] = curl_multi_getcontent($conn[$i]);\n    curl_close($conn[$i]);\n}\n\nvar_dump(curl_multi_info_read($mh));","output":"array(3) {\n  [\"msg\"]=>\n  int(1)\n  [\"result\"]=>\n  int(0)\n  [\"handle\"]=>\n  resource(5) of type (curl)\n}\narray(3) {\n  [\"msg\"]=>\n  int(1)\n  [\"result\"]=>\n  int(0)\n  [\"handle\"]=>\n  resource(7) of type (curl)\n}\narray(3) {\n  [\"msg\"]=>\n  int(1)\n  [\"result\"]=>\n  int(0)\n  [\"handle\"]=>\n  resource(6) of type (curl)\n}\nbool(false)"}],"curl_multi_init":[{"title":"curl_multi_init() example","source":"\/\/ create both cURL resources\n$ch1 = curl_init();\n$ch2 = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch1, CURLOPT_URL, \"http:\/\/lxr.php.net\/\");\ncurl_setopt($ch1, CURLOPT_HEADER, 0);\ncurl_setopt($ch2, CURLOPT_URL, \"http:\/\/www.php.net\/\");\ncurl_setopt($ch2, CURLOPT_HEADER, 0);\n\n\/\/create the multiple cURL handle\n$mh = curl_multi_init();\n\n\/\/add the two handles\ncurl_multi_add_handle($mh,$ch1);\ncurl_multi_add_handle($mh,$ch2);\n\n$active = null;\n\/\/execute the handles\ndo {\n    $mrc = curl_multi_exec($mh, $active);\n} while ($mrc == CURLM_CALL_MULTI_PERFORM);\n\nwhile ($active && $mrc == CURLM_OK) {\n    if (curl_multi_select($mh) != -1) {\n        do {\n            $mrc = curl_multi_exec($mh, $active);\n        } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n    }\n}\n\n\/\/close the handles\ncurl_multi_remove_handle($mh, $ch1);\ncurl_multi_remove_handle($mh, $ch2);\ncurl_multi_close($mh);","output":null}],"curl_multi_strerror":[{"title":"curl_multi_strerror() example","source":"\/\/ Create cURL handles\n$ch1 = curl_init(\"http:\/\/example.com\"\/);\n$ch2 = curl_init(\"http:\/\/php.net\/\");\n\n\/\/ Create a cURL multi handle\n$mh = curl_multi_init();\n\n\/\/ Add the handles to the multi handle\ncurl_multi_add_handle($mh, $ch1);\ncurl_multi_add_handle($mh, $ch2);\n\n\/\/ Execute the multi handle\ndo {\n    $status = curl_multi_exec($mh, $active);\n    \/\/ Check for errors\n    if($status > 0) {\n        \/\/ Display error message\n        echo \"ERROR!\\n \" . curl_multi_strerror($status);\n    }\n} while ($status === CURLM_CALL_MULTI_PERFORM || $active);","output":null}],"curl_reset":[{"title":"curl_reset() example","source":"\/\/ Create a curl handle\n$ch = curl_init();\n\n\/\/ Set CURLOPT_USERAGENT option\ncurl_setopt($ch, CURLOPT_USERAGENT, \"My test user-agent\");\n\n\/\/ Reset all previously set options\ncurl_reset($ch);\n\n\/\/ Send HTTP request\ncurl_setopt($ch, CURLOPT_URL, 'http:\/\/example.com\/');\ncurl_exec($ch); \/\/ the previously set user-agent will be not sent, it has been reset by curl_reset\n\n\/\/ Close the handle\ncurl_close($ch);","output":null}],"curl_setopt_array":[{"title":"Initializing a new cURL session and fetching a web page","source":"\/\/ create a new cURL resource\n$ch = curl_init();\n\n\/\/ set URL and other appropriate options\n$options = array(CURLOPT_URL => 'http:\/\/www.example.com\/',\n                 CURLOPT_HEADER => false\n                );\n\ncurl_setopt_array($ch, $options);\n\n\/\/ grab URL and pass it to the browser\ncurl_exec($ch);\n\n\/\/ close cURL resource, and free up system resources\ncurl_close($ch);","output":null},{"title":"Our own implementation of curl_setopt_array()","source":"if (!function_exists('curl_setopt_array')) {\n   function curl_setopt_array(&$ch, $curl_options)\n   {\n       foreach ($curl_options as $option => $value) {\n           if (!curl_setopt($ch, $option, $value)) {\n               return false;\n           } \n       }\n       return true;\n   }\n}","output":null}],"curl_setopt":[{"title":"Initializing a new cURL session and fetching a web page","source":"\/\/ create a new cURL resource\n$ch = curl_init();\n\n\/\/ set URL and other appropriate options\ncurl_setopt($ch, CURLOPT_URL, \"http:\/\/www.example.com\/\");\ncurl_setopt($ch, CURLOPT_HEADER, false);\n\n\/\/ grab URL and pass it to the browser\ncurl_exec($ch);\n\n\/\/ close cURL resource, and free up system resources\ncurl_close($ch);","output":null},{"title":"Uploading file (deprecated as of PHP 5.5.0)","source":"\/* http:\/\/localhost\/upload.php:\nprint_r($_POST);\nprint_r($_FILES);\n*\/\n\n$ch = curl_init();\n\n$data = array('name' => 'Foo', 'file' => '@\/home\/user\/test.png');\n\ncurl_setopt($ch, CURLOPT_URL, 'http:\/\/localhost\/upload.php');\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_SAFE_UPLOAD, false); \/\/ required as of PHP 5.6.0\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n\ncurl_exec($ch);","output":"Array\n(\n    [name] => Foo\n)\nArray\n(\n    [file] => Array\n        (\n            [name] => test.png\n            [type] => image\/png\n            [tmp_name] => \/tmp\/phpcpjNeQ\n            [error] => 0\n            [size] => 279\n        )\n\n)"}],"curl_share_close":[{"title":"curl_share_setopt() example","source":"\/\/ Create cURL share handle and set it to share cookie data\n$sh = curl_share_init();\ncurl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);\n\n\/\/ Initialize the first cURL handle and assign the share handle to it\n$ch1 = curl_init(\"http:\/\/example.com\/\");\ncurl_setopt($ch1, CURLOPT_SHARE, $sh);\n\n\/\/ Execute the first cURL handle\ncurl_exec($ch1);\n\n\/\/ Initialize the second cURL handle and assign the share handle to it\n$ch2 = curl_init(\"http:\/\/php.net\/\");\ncurl_setopt($ch2, CURLOPT_SHARE, $sh);\n\n\/\/ Execute the second cURL handle\n\/\/  all cookies from $ch1 handle are shared with $ch2 handle\ncurl_exec($ch2);\n\n\/\/ Close the cURL share handle\ncurl_share_close($sh);\n\n\/\/ Close the cURL handles\ncurl_close($ch1);\ncurl_close($ch2);","output":null}],"curl_share_init":[{"title":"curl_share_init() example","source":"\/\/ Create cURL share handle and set it to share cookie data\n$sh = curl_share_init();\ncurl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);\n\n\/\/ Initialize the first cURL handle and assign the share handle to it\n$ch1 = curl_init(\"http:\/\/example.com\/\");\ncurl_setopt($ch1, CURLOPT_SHARE, $sh);\n\n\/\/ Execute the first cURL handle\ncurl_exec($ch1);\n\n\/\/ Initialize the second cURL handle and assign the share handle to it\n$ch2 = curl_init(\"http:\/\/php.net\/\");\ncurl_setopt($ch2, CURLOPT_SHARE, $sh);\n\n\/\/ Execute the second cURL handle\n\/\/  all cookies from $ch1 handle are shared with $ch2 handle\ncurl_exec($ch2);\n\n\/\/ Close the cURL share handle\ncurl_share_close($sh);\n\n\/\/ Close the cURL handles\ncurl_close($ch1);\ncurl_close($ch2);","output":null}],"curl_share_setopt":[{"title":"curl_share_setopt() example","source":"\/\/ Create cURL share handle and set it to share cookie data\n$sh = curl_share_init();\ncurl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);\n\n\/\/ Initialize the first cURL handle and assign the share handle to it\n$ch1 = curl_init(\"http:\/\/example.com\/\");\ncurl_setopt($ch1, CURLOPT_SHARE, $sh);\n\n\/\/ Execute the first cURL handle\ncurl_exec($ch1);\n\n\/\/ Initialize the second cURL handle and assign the share handle to it\n$ch2 = curl_init(\"http:\/\/php.net\/\");\ncurl_setopt($ch2, CURLOPT_SHARE, $sh);\n\n\/\/ Execute the second cURL handle\n\/\/  all cookies from $ch1 handle are shared with $ch2 handle\ncurl_exec($ch2);\n\n\/\/ Close the cURL share handle\ncurl_share_close($sh);\n\n\/\/ Close the cURL handles\ncurl_close($ch1);\ncurl_close($ch2);","output":null}],"curl_strerror":[{"title":"curl_errno() example","source":"\/\/ Create a curl handle with a mispelled protocol in URL\n$ch = curl_init(\"htp:\/\/example.com\/\");\n\n\/\/ Send request\ncurl_exec($ch);\n\n\/\/ Check for errors and display the error message\nif($errno = curl_errno($ch)) {\n    $error_message = curl_strerror($errno);\n    echo \"cURL error ({$errno}):\\n {$error_message}\";\n}\n\n\/\/ Close the handle\ncurl_close($ch);","output":"cURL error (1):\n Unsupported protocol"}],"curl_unescape":[{"title":"curl_escape() example","source":"\/\/ Create a curl handle\n$ch = curl_init('http:\/\/example.com\/redirect.php');\n\n\/\/ Send HTTP request and follow redirections\ncurl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\ncurl_exec($ch);\n\n\/\/ Get the last effective URL\n$effective_url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);\n\/\/ ie. \"http:\/\/example.com\/show_location.php?loc=M%C3%BCnchen\"\n\n\/\/ Decode the URL\n$effective_url_decoded = curl_unescape($ch, $effective_url);\n\/\/ \"http:\/\/example.com\/show_location.php?loc=München\"\n\n\/\/ Close the handle\ncurl_close($ch);","output":null}],"curl_version":[{"title":"curl_version() example","source":"\/\/ Get curl version array\n$version = curl_version();\n\n\/\/ These are the bitfields that can be used \n\/\/ to check for features in the curl build\n$bitfields = Array(\n            'CURL_VERSION_IPV6', \n            'CURL_VERSION_KERBEROS4', \n            'CURL_VERSION_SSL', \n            'CURL_VERSION_LIBZ'\n            );\n\n\nforeach($bitfields as $feature)\n{\n    echo $feature . ($version['features'] & constant($feature) ? ' matches' : ' does not match');\n    echo PHP_EOL;\n}","output":null}],"current":[{"title":"Example use of current() and friends","source":"$transport = array('foot', 'bike', 'car', 'plane');\n$mode = current($transport); \/\/ $mode = 'foot';\n$mode = next($transport);    \/\/ $mode = 'bike';\n$mode = current($transport); \/\/ $mode = 'bike';\n$mode = prev($transport);    \/\/ $mode = 'foot';\n$mode = end($transport);     \/\/ $mode = 'plane';\n$mode = current($transport); \/\/ $mode = 'plane';\n\n$arr = array();\nvar_dump(current($arr)); \/\/ bool(false)\n\n$arr = array(array());\nvar_dump(current($arr)); \/\/ array(0) { }","output":null}],"date_default_timezone_get":[{"title":"Getting the default timezone","source":"date_default_timezone_set('Europe\/London');\n\nif (date_default_timezone_get()) {\n    echo 'date_default_timezone_set: ' . date_default_timezone_get() . '<br \/>';\n}\n\nif (ini_get('date.timezone')) {\n    echo 'date.timezone: ' . ini_get('date.timezone');\n}","output":"date_default_timezone_set: Europe\/London\ndate.timezone: Europe\/London"},{"title":"Getting the abbreviation of a timezone","source":"date_default_timezone_set('America\/Los_Angeles');\necho date_default_timezone_get() . ' => ' . date('e') . ' => ' . date('T');","output":"America\/Los_Angeles => America\/Los_Angeles => PST"}],"date_default_timezone_set":[{"title":"Getting the default timezone","source":"date_default_timezone_set('America\/Los_Angeles');\n\n$script_tz = date_default_timezone_get();\n\nif (strcmp($script_tz, ini_get('date.timezone'))){\n    echo 'Script timezone differs from ini-set timezone.';\n} else {\n    echo 'Script timezone and ini-set timezone match.';\n}","output":null}],"date_parse_from_format":[{"title":"date_parse_from_format() example","source":"$date = \"6.1.2009 13:00+01:00\";\nprint_r(date_parse_from_format(\"j.n.Y H:iP\", $date));","output":"Array\n(\n    [year] => 2009\n    [month] => 1\n    [day] => 6\n    [hour] => 13\n    [minute] => 0\n    [second] => 0\n    [fraction] => \n    [warning_count] => 0\n    [warnings] => Array\n        (\n        )\n\n    [error_count] => 0\n    [errors] => Array\n        (\n        )\n\n    [is_localtime] => 1\n    [zone_type] => 1\n    [zone] => -60\n    [is_dst] => \n)"}],"date_parse":[{"title":"A date_parse() example","source":"print_r(date_parse(\"2006-12-12 10:00:00.5\"));","output":"Array\n(\n    [year] => 2006\n    [month] => 12\n    [day] => 12\n    [hour] => 10\n    [minute] => 0\n    [second] => 0\n    [fraction] => 0.5\n    [warning_count] => 0\n    [warnings] => Array()\n    [error_count] => 0\n    [errors] => Array()\n    [is_localtime] => \n)"},{"title":"date_parse() with relative formats","source":"print_r(date_parse(\"2006-12-12 10:00:00.5 +1 week +1 hour\"));","output":"Array\n(\n    [year] => 2006\n    [month] => 12\n    [day] => 12\n    [hour] => 10\n    [minute] => 0\n    [second] => 0\n    [fraction] => 0.5\n    [warning_count] => 0\n    [warnings] => Array\n        (\n        )\n\n    [error_count] => 0\n    [errors] => Array\n        (\n        )\n\n    [is_localtime] =>\n    [relative] => Array\n        (\n            [year] => 0\n            [month] => 0\n            [day] => 7\n            [hour] => 1\n            [minute] => 0\n            [second] => 0\n        )\n\n)"}],"date_sun_info":[{"title":"A date_sun_info() example","source":"$sun_info = date_sun_info(strtotime(\"2006-12-12\"), 31.7667, 35.2333);\nforeach ($sun_info as $key => $val) {\n    echo \"$key: \" . date(\"H:i:s\", $val) . \"\\n\";\n}","output":"sunrise: 05:52:11\nsunset: 15:41:21\ntransit: 10:46:46\ncivil_twilight_begin: 05:24:08\ncivil_twilight_end: 16:09:24\nnautical_twilight_begin: 04:52:25\nnautical_twilight_end: 16:41:06\nastronomical_twilight_begin: 04:21:32\nastronomical_twilight_end: 17:12:00"}],"date_sunrise":[{"title":"date_sunrise() example","source":"\/* calculate the sunrise time for Lisbon, Portugal\nLatitude: 38.4 North\nLongitude: 9 West\nZenith ~= 90\noffset: +1 GMT\n*\/\n\necho date(\"D M d Y\"). ', sunrise time : ' .date_sunrise(time(), SUNFUNCS_RET_STRING, 38.4, -9, 90, 1);","output":"Mon Dec 20 2004, sunrise time : 08:54"}],"date_sunset":[{"title":"date_sunset() example","source":"\/* calculate the sunset time for Lisbon, Portugal\nLatitude: 38.4 North\nLongitude: 9 West\nZenith ~= 90\noffset: +1 GMT\n*\/\n\necho date(\"D M d Y\"). ', sunset time : ' .date_sunset(time(), SUNFUNCS_RET_STRING, 38.4, -9, 90, 1);","output":"Mon Dec 20 2004, sunset time : 18:13"}],"date":[{"title":"date() examples","source":"\/\/ set the default timezone to use. Available since PHP 5.1\ndate_default_timezone_set('UTC');\n\n\n\/\/ Prints something like: Monday\necho date(\"l\");\n\n\/\/ Prints something like: Monday 8th of August 2005 03:12:46 PM\necho date('l jS \\of F Y h:i:s A');\n\n\/\/ Prints: July 1, 2000 is on a Saturday\necho \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));\n\n\/* use the constants in the format parameter *\/\n\/\/ prints something like: Wed, 25 Sep 2013 15:28:57 -0700\necho date(DATE_RFC2822);\n\n\/\/ prints something like: 2000-07-01T00:00:00+00:00\necho date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));","output":null},{"title":"Escaping characters in date()","source":"\/\/ prints something like: Wednesday the 15th\necho date('l \\t\\h\\e jS');","output":null},{"title":"date() and mktime() example","source":"$tomorrow  = mktime(0, 0, 0, date(\"m\")  , date(\"d\")+1, date(\"Y\"));\n$lastmonth = mktime(0, 0, 0, date(\"m\")-1, date(\"d\"),   date(\"Y\"));\n$nextyear  = mktime(0, 0, 0, date(\"m\"),   date(\"d\"),   date(\"Y\")+1);","output":null},{"title":"date() Formatting","source":"\/\/ Assuming today is March 10th, 2001, 5:16:18 pm, and that we are in the\n\/\/ Mountain Standard Time (MST) Time Zone\n\n$today = date(\"F j, Y, g:i a\");                 \/\/ March 10, 2001, 5:16 pm\n$today = date(\"m.d.y\");                         \/\/ 03.10.01\n$today = date(\"j, n, Y\");                       \/\/ 10, 3, 2001\n$today = date(\"Ymd\");                           \/\/ 20010310\n$today = date('h-i-s, j-m-y, it is w Day');     \/\/ 05-16-18, 10-03-01, 1631 1618 6 Satpm01\n$today = date('\\i\\t \\i\\s \\t\\h\\e jS \\d\\a\\y.');   \/\/ it is the 10th day.\n$today = date(\"D M j G:i:s T Y\");               \/\/ Sat Mar 10 17:16:18 MST 2001\n$today = date('H:m:s \\m \\i\\s\\ \\m\\o\\n\\t\\h');     \/\/ 17:03:18 m is month\n$today = date(\"H:i:s\");                         \/\/ 17:16:18\n$today = date(\"Y-m-d H:i:s\");                   \/\/ 2001-03-10 17:16:18 (the MySQL DATETIME format)","output":null}],"db2_autocommit":[{"title":"Retrieving the AUTOCOMMIT value for a connection","source":"$options = array('autocommit' => DB2_AUTOCOMMIT_OFF);\n$conn = db2_connect($database, $user, $password, $options);\n$ac = db2_autocommit($conn);\nif ($ac == 0) {\n    print \"$ac -- AUTOCOMMIT is off.\";\n} else {\n    print \"$ac -- AUTOCOMMIT is on.\";\n}","output":"0 -- AUTOCOMMIT is off."},{"title":"Setting the AUTOCOMMIT value for a connection","source":"$options = array('autocommit' => DB2_AUTOCOMMIT_OFF);\n$conn = db2_connect($database, $user, $password, $options);\n\n\/\/ Turn AUTOCOMMIT on\n$rc = db2_autocommit($conn, DB2_AUTOCOMMIT_ON);\nif ($rc) {\n    print \"Turning AUTOCOMMIT on succeeded.\\n\";\n}\n\n\/\/ Check AUTOCOMMIT state\n$ac = db2_autocommit($conn);\nif ($ac == 0) {\n    print \"$ac -- AUTOCOMMIT is off.\";\n} else {\n    print \"$ac -- AUTOCOMMIT is on.\";\n}","output":"Turning AUTOCOMMIT on succeeded.\n1 -- AUTOCOMMIT is on."}],"db2_bind_param":[{"title":"Binding PHP variables to a prepared statement","source":"$sql = 'SELECT name, breed, weight FROM animals\n    WHERE weight > ? AND weight < ?';\n$conn = db2_connect($database, $user, $password);\n$stmt = db2_prepare($conn, $sql);\n\n\/\/ We can declare the variable before calling db2_bind_param()\n$lower_limit = 1;\n\ndb2_bind_param($stmt, 1, \"lower_limit\", DB2_PARAM_IN);\ndb2_bind_param($stmt, 2, \"upper_limit\", DB2_PARAM_IN);\n\n\/\/ We can also declare the variable after calling db2_bind_param()\n$upper_limit = 15.0;\n\nif (db2_execute($stmt)) {\n    while ($row = db2_fetch_array($stmt)) {\n        print \"{$row[0]}, {$row[1]}, {$row[2]}\\n\";\n    }\n}","output":"Pook, cat, 3.2\nRickety Ride, goat, 9.7\nPeaches, dog, 12.3"},{"title":"Calling stored procedures with IN and OUT parameters","source":"$sql = 'CALL match_animal(?, ?, ?)';\n$conn = db2_connect($database, $user, $password);\n$stmt = db2_prepare($conn, $sql);\n\n$name = \"Peaches\";\n$second_name = \"Rickety Ride\";\n$weight = 0;\n\ndb2_bind_param($stmt, 1, \"name\", DB2_PARAM_IN);\ndb2_bind_param($stmt, 2, \"second_name\", DB2_PARAM_INOUT);\ndb2_bind_param($stmt, 3, \"weight\", DB2_PARAM_OUT);\n\nprint \"Values of bound parameters _before_ CALL:\\n\";\nprint \"  1: {$name} 2: {$second_name} 3: {$weight}\\n\\n\";\n\nif (db2_execute($stmt)) {\n    print \"Values of bound parameters _after_ CALL:\\n\";\n    print \"  1: {$name} 2: {$second_name} 3: {$weight}\\n\\n\";\n\n    print \"Results:\\n\";\n    while ($row = db2_fetch_array($stmt)) {\n        print \"  {$row[0]}, {$row[1]}, {$row[2]}\\n\";\n    }\n}","output":"Values of bound parameters _before_ CALL:\n  1: Peaches 2: Rickety Ride 3: 0\n\nValues of bound parameters _after_ CALL:\n  1: Peaches 2: TRUE 3: 22\n\nResults:\n  Peaches, dog, 12.3\n  Pook, cat, 3.2\n  Rickety Ride, goat, 9.7"},{"title":"Inserting a binary large object (BLOB) directly from a file","source":"$stmt = db2_prepare($conn, \"INSERT INTO animal_pictures(picture) VALUES (?)\");\n\n$picture = \"\/opt\/albums\/spook\/grooming.jpg\";\n$rc = db2_bind_param($stmt, 1, \"picture\", DB2_PARAM_FILE);\n$rc = db2_execute($stmt);","output":null}],"db2_client_info":[{"title":"A db2_client_info() example","source":"$conn = db2_connect( 'SAMPLE', 'db2inst1', 'ibmdb2' );\n$client = db2_client_info( $conn );\n\nif ($client) {\n    echo \"DRIVER_NAME: \";           var_dump( $client->DRIVER_NAME );\n    echo \"DRIVER_VER: \";            var_dump( $client->DRIVER_VER );\n    echo \"DATA_SOURCE_NAME: \";      var_dump( $client->DATA_SOURCE_NAME );\n    echo \"DRIVER_ODBC_VER: \";       var_dump( $client->DRIVER_ODBC_VER );\n    echo \"ODBC_VER: \";              var_dump( $client->ODBC_VER );\n    echo \"ODBC_SQL_CONFORMANCE: \";  var_dump( $client->ODBC_SQL_CONFORMANCE );\n    echo \"APPL_CODEPAGE: \";         var_dump( $client->APPL_CODEPAGE );\n    echo \"CONN_CODEPAGE: \";         var_dump( $client->CONN_CODEPAGE );\n}\nelse {\n    echo \"Error retrieving client information.\n     Perhaps your database connection was invalid.\";\n}\ndb2_close($conn);","output":"DRIVER_NAME: string(8) \"libdb2.a\"\nDRIVER_VER: string(10) \"08.02.0001\"\nDATA_SOURCE_NAME: string(6) \"SAMPLE\"\nDRIVER_ODBC_VER: string(5) \"03.51\"\nODBC_VER: string(10) \"03.01.0000\"\nODBC_SQL_CONFORMANCE: string(8) \"EXTENDED\"\nAPPL_CODEPAGE: int(819)\nCONN_CODEPAGE: int(819)"}],"db2_close":[{"title":"Closing a connection","source":"$conn = db2_connect('SAMPLE', 'db2inst1', 'ibmdb2');\n$rc = db2_close($conn);\nif ($rc) {\n    echo \"Connection was successfully closed.\";\n}","output":"Connection was successfully closed."}],"db2_conn_error":[{"title":"Retrieving an SQLSTATE value for a failed connection attempt","source":"$conn = db2_connect('badname', 'baduser', 'badpassword');\nif (!$conn) {\n    print \"SQLSTATE value: \" . db2_conn_error();\n}","output":"SQLSTATE value: 08001"}],"db2_conn_errormsg":[{"title":"Retrieving the error message returned by a failed connection attempt","source":"$conn = db2_connect('badname', 'baduser', 'badpassword');\nif (!$conn) {\n    print db2_conn_errormsg();\n}","output":"[IBM][CLI Driver] SQL1013N  The database alias name\nor database name \"BADNAME\" could not be found.  SQLSTATE=42705\n SQLCODE=-1013"}],"db2_connect":[{"title":"Creating a cataloged connection","source":"$database = 'SAMPLE';\n$user = 'db2inst1';\n$password = 'ibmdb2';\n\n$conn = db2_connect($database, $user, $password);\n\nif ($conn) {\n    echo \"Connection succeeded.\";\n    db2_close($conn);\n}\nelse {\n    echo \"Connection failed.\";\n}","output":"Connection succeeded."},{"title":"Creating an uncataloged connection","source":"$database = 'SAMPLE';\n$user = 'db2inst1';\n$password = 'ibmdb2';\n$hostname = 'localhost';\n$port = 50000;\n\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\" .\n  \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=TCPIP;UID=$user;PWD=$password;\";\n$conn = db2_connect($conn_string, '', '');\n\nif ($conn) {\n    echo \"Connection succeeded.\";\n    db2_close($conn);\n}\nelse {\n    echo \"Connection failed.\";\n}","output":"Connection succeeded."},{"title":"Creating a connection with autocommit off by default","source":"$database = 'SAMPLE';\n$user = 'db2inst1';\n$password = 'ibmdb2';\n$options = array('autocommit' => DB2_AUTOCOMMIT_OFF);\n\n$conn = db2_connect($database, $user, $password, $options);\n\nif ($conn) {\n    echo \"Connection succeeded.\\n\";\n    if (db2_autocommit($conn)) {\n         echo \"Autocommit is on.\\n\";\n    }\n    else {\n         echo \"Autocommit is off.\\n\";\n    }\n    db2_close($conn);\n}\nelse {\n    echo \"Connection failed.\";\n}","output":"Connection succeeded.\nAutocommit is off."},{"title":"i5\/OS best performance","source":"$library = \"ADC\";\n  $i5 = db2_connect(\"\", \"\", \"\", array(\"i5_lib\"=>\"qsys2\"));\n  $result = db2_exec($i5, \n       \"select * from systables where table_schema = '$library'\");\n  while ($row = db2_fetch_both($result)) {               \n     echo $row['TABLE_NAME'].\"<\/br>\";                     \n  }                                                      \n  db2_close($i5);","output":"ANIMALS\nNAMES\nPICTURES"},{"title":"Using trusted context","source":"$database = \"SAMPLE\";\n$hostname = \"localhost\";\n$port = 50000;\n$authID = \"db2inst1\";\n$auth_pass = \"ibmdb2\";\n\n$tc_user = \"tcuser\";\n$tc_pass = \"tcpassword\";\n\n$dsn = \"DATABASE=$database;HOSTNAME=$hostname;PORT=$port;\n  PROTOCOL=TCPIP;UID=$authID;PWD=$auth_pass;\";\n$options = array (\"trustedcontext\" => DB2_TRUSTED_CONTEXT_ENABLE);\n\n$tc_conn = db2_connect($dsn, \"\", \"\", $options);\nif($tc_conn) {\n    echo \"Explicit trusted connection succeeded.\\n\";\n\n    if(db2_get_option($tc_conn, \"trustedcontext\")) {\n        $userBefore = db2_get_option($tc_conn, \"trusted_user\");\n        \n        \/\/Do some work as user 1.\n\n        \/\/Switching to trusted user.\n        $parameters = array(\"trusted_user\" => $tc_user, \n          \"trusted_password\" => $tcuser_pass);\n        $res = db2_set_option ($tc_conn, $parameters, 1);\n\n        $userAfter = db2_get_option($tc_conn, \"trusted_user\");\n        \/\/Do more work as trusted user.\n\n        if($userBefore != $userAfter) {\n            echo \"User has been switched.\" . \"\\n\";    \n        }\n    }\n\n    db2_close($tc_conn);\n}\nelse {\n    echo \"Explicit trusted connection failed.\\n\";\n}","output":"Explicit trusted connection succeeded.\nUser has been switched."}],"db2_escape_string":[{"title":"A db2_escape_string() example","source":"$conn = db2_connect($database, $user, $password);\n\nif ($conn) {\n    $str[0] = \"All characters: \\x00 , \\n , \\r , \\ , ' , \\\" , \\x1a .\";\n    $str[1] = \"Backslash (\\). Single quote ('). Double quote (\\\")\";\n    $str[2] = \"The NULL character \\0 must be quoted as well\";\n    $str[3] = \"Intersting characters: \\x1a , \\x00 .\";\n    $str[4] = \"Nothing to quote\";\n    $str[5] = 200676;\n    $str[6] = \"\";\n\n    foreach( $str as $string ) {\n        echo \"db2_escape_string: \" . db2_escape_string($string). \"\\n\";\n    }\n}","output":"db2_escape_string: All characters: \\0 , \\n , \\r , \\\\ , \\' , \\\" , \\Z .\ndb2_escape_string: Backslash (\\\\). Single quote (\\'). Double quote (\\\")\ndb2_escape_string: The NULL character \\0 must be quoted as well\ndb2_escape_string: Intersting characters: \\Z , \\0 .\ndb2_escape_string: Nothing to quote\ndb2_escape_string: 200676\ndb2_escape_string:"}],"db2_exec":[{"title":"Creating a table with db2_exec()","source":"$conn = db2_connect($database, $user, $password);\n\n\/\/ Create the test table\n$create = 'CREATE TABLE animals (id INTEGER, breed VARCHAR(32),\n    name CHAR(16), weight DECIMAL(7,2))';\n$result = db2_exec($conn, $create);\nif ($result) {\n    print \"Successfully created the table.\\n\";\n}\n\n\/\/ Populate the test table\n$animals = array(\n    array(0, 'cat', 'Pook', 3.2),\n    array(1, 'dog', 'Peaches', 12.3),\n    array(2, 'horse', 'Smarty', 350.0),\n    array(3, 'gold fish', 'Bubbles', 0.1),\n    array(4, 'budgerigar', 'Gizmo', 0.2),\n    array(5, 'goat', 'Rickety Ride', 9.7),\n    array(6, 'llama', 'Sweater', 150)\n);\n\nforeach ($animals as $animal) {\n    $rc = db2_exec($conn, \"INSERT INTO animals (id, breed, name, weight)\n      VALUES ({$animal[0]}, '{$animal[1]}', '{$animal[2]}', {$animal[3]})\");\n    if ($rc) {\n        print \"Insert... \";\n    }\n}","output":"Successfully created the table.\nInsert... Insert... Insert... Insert... Insert... Insert... Insert..."},{"title":"Executing a SELECT statement with a scrollable cursor","source":"$conn = db2_connect($database, $user, $password);\n$sql = \"SELECT name FROM animals\n    WHERE weight < 10.0\n    ORDER BY name\";\nif ($conn) {\n    require_once('prepare.inc');\n    $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));\n    while ($row = db2_fetch_array($stmt)) {\n        print \"$row[0]\\n\";\n    }\n}","output":"Bubbles\nGizmo\nPook\nRickety Ride"},{"title":"Returning XML data as an SQL ResultSet","source":"$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = 'SELECT * FROM XMLTABLE(\n    XMLNAMESPACES (DEFAULT \\'http:\/\/posample.org\\'),\n    \\'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")\/customerinfo\\'\n    COLUMNS\n    \"CID\" VARCHAR (50) PATH \\'@Cid\\',\n    \"NAME\" VARCHAR (50) PATH \\'name\\',\n    \"PHONE\" VARCHAR (50) PATH \\'phone [ @type = \"work\"]\\'\n    ) AS T\n    WHERE NAME = \\'Kathy Smith\\'\n    ';\n$stmt = db2_exec($conn, $query);\n\nwhile($row = db2_fetch_object($stmt)){\n    printf(\"$row->CID     $row->NAME     $row->PHONE\\n\");\n}\ndb2_close($conn);","output":"1000     Kathy Smith     416-555-1358\n1001     Kathy Smith     905-555-7258"},{"title":"Performing a \"JOIN\" with XML data","source":"$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = '\n    SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS\n    FROM\n    XMLTABLE(\n    XMLNAMESPACES (DEFAULT \\'http:\/\/posample.org\\'),\n    \\'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")\/customerinfo\\'\n    COLUMNS\n    \"CID\" BIGINT PATH \\'@Cid\\',\n    \"NAME\" VARCHAR (50) PATH \\'name\\',\n    \"PHONE\" VARCHAR (50) PATH \\'phone [ @type = \"work\"]\\'\n    ) as A,\n    PURCHASEORDER AS B,\n    XMLTABLE (\n    XMLNAMESPACES (DEFAULT \\'http:\/\/posample.org\\'),\n    \\'db2-fn:xmlcolumn(\"PURCHASEORDER.PORDER\")\/PurchaseOrder\\'\n    COLUMNS\n    \"PONUM\"  BIGINT PATH \\'@PoNum\\',\n    \"STATUS\" VARCHAR (50) PATH \\'@Status\\'\n    ) as C\n    WHERE A.CID = B.CUSTID AND\n    B.POID = C.PONUM AND\n    A.NAME = \\'Kathy Smith\\'\n';\n\n$stmt = db2_exec($conn, $query);\n\nwhile($row = db2_fetch_object($stmt)){\n    printf(\"$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\\n\");\n}\n\ndb2_close($conn);","output":"1001     Kathy Smith     905-555-7258     5002     Shipped"},{"title":"Returning SQL data as part of a larger XML document","source":"$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = '\nSELECT\nXMLSERIALIZE(\nXMLQUERY(\\'\n    declare boundary-space strip;\n    declare default element namespace \"http:\/\/posample.org\";\n    <promoList> {\n    for $prod in $doc\/product\n    where $prod\/description\/price < 10.00\n    order by $prod\/description\/price ascending\n    return(\n        <promoitem> {\n        $prod,\n        <startdate> {$start} <\/startdate>,\n        <enddate> {$end} <\/enddate>,\n        <promoprice> {$promo} <\/promoprice>\n        } <\/promoitem>\n    )\n    } <\/promoList>\n\\' passing by ref DESCRIPTION AS \"doc\",\nPROMOSTART as \"start\",\nPROMOEND as \"end\",\nPROMOPRICE as \"promo\"\nRETURNING SEQUENCE)\nAS CLOB (32000))\nAS NEW_PRODUCT_INFO\nFROM PRODUCT\nWHERE PID = \\'100-100-01\\'\n';\n\n$stmt = db2_exec($conn, $query);\n\nwhile($row = db2_fetch_array($stmt)){\n    printf(\"$row[0]\\n\");\n}\ndb2_close($conn);","output":"<promoList xmlns=\"http:\/\/posample.org\">\n    <promoitem>\n    <product pid=\"100-100-01\">\n        <description>\n            <name>Snow Shovel, Basic 22 inch<\/name>\n            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip<\/details>\n            <price>9.99<\/price>\n            <weight>1 kg<\/weight>\n        <\/description>\n    <\/product>\n    <startdate>2004-11-19<\/startdate>\n    <enddate>2004-12-19<\/enddate>\n    <promoprice>7.25<\/promoprice>\n    <\/promoitem>\n<\/promoList>"}],"db2_execute":[{"title":"Preparing and executing an SQL statement with parameter markers","source":"$pet = array(0, 'cat', 'Pook', 3.2);\n\n$insert = 'INSERT INTO animals (id, breed, name, weight)\n    VALUES (?, ?, ?, ?)';\n\n$stmt = db2_prepare($conn, $insert);\nif ($stmt) {\n    $result = db2_execute($stmt, $pet);\n    if ($result) {\n        print \"Successfully added new pet.\";\n    }\n}","output":"Successfully added new pet."},{"title":"Calling a stored procedure with an OUT parameter","source":"$num_pets = 0;\n$res = db2_prepare($conn, \"CALL count_my_pets(?)\");\n$rc = db2_bind_param($res, 1, \"num_pets\", DB2_PARAM_OUT);\n$rc = db2_execute($res);\nprint \"I have $num_pets pets!\";","output":"I have 7 pets!"},{"title":"Returning XML data as an SQL ResultSet","source":"$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = 'SELECT * FROM XMLTABLE(\n    XMLNAMESPACES (DEFAULT \\'http:\/\/posample.org\\'),\n    \\'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")\/customerinfo\\'\n    COLUMNS\n    \"CID\" VARCHAR (50) PATH \\'@Cid\\',\n    \"NAME\" VARCHAR (50) PATH \\'name\\',\n    \"PHONE\" VARCHAR (50) PATH \\'phone [ @type = \"work\"]\\'\n    ) AS T\n    WHERE NAME = ?\n    ';\n\n$stmt = db2_prepare($conn, $query);\n\n$name = 'Kathy Smith';\n\nif ($stmt) {\n    db2_bind_param($stmt, 1, \"name\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    while($row = db2_fetch_object($stmt)){\n    printf(\"$row->CID     $row->NAME     $row->PHONE\\n\");\n    }\n}\ndb2_close($conn);","output":"1000     Kathy Smith     416-555-1358\n1001     Kathy Smith     905-555-7258"},{"title":"Performing a \"JOIN\" with XML data","source":"$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = '\nSELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS\nFROM\nXMLTABLE(\nXMLNAMESPACES (DEFAULT \\'http:\/\/posample.org\\'),\n\\'db2-fn:xmlcolumn(\"CUSTOMER.INFO\")\/customerinfo\\'\nCOLUMNS\n\"CID\" BIGINT PATH \\'@Cid\\',\n\"NAME\" VARCHAR (50) PATH \\'name\\',\n\"PHONE\" VARCHAR (50) PATH \\'phone [ @type = \"work\"]\\'\n) as A,\nPURCHASEORDER AS B,\nXMLTABLE (\nXMLNAMESPACES (DEFAULT \\'http:\/\/posample.org\\'),\n\\'db2-fn:xmlcolumn(\"PURCHASEORDER.PORDER\")\/PurchaseOrder\\'\nCOLUMNS\n\"PONUM\"  BIGINT PATH \\'@PoNum\\',\n\"STATUS\" VARCHAR (50) PATH \\'@Status\\'\n) as C\nWHERE A.CID = B.CUSTID AND\n    B.POID = C.PONUM AND\n    A.NAME = ?\n';\n\n$stmt = db2_prepare($conn, $query);\n\n$name = 'Kathy Smith';\n\nif ($stmt) {\n    db2_bind_param($stmt, 1, \"name\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    while($row = db2_fetch_object($stmt)){\n    printf(\"$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\\n\");\n    }\n}\n\ndb2_close($conn);","output":"1001     Kathy Smith     905-555-7258     5002     Shipped"},{"title":"Returning SQL data as part of a larger XML document","source":"$conn = db2_connect(\"SAMPLE\", \"db2inst1\", \"ibmdb2\");\n\n$query = '\nSELECT\nXMLSERIALIZE(\nXMLQUERY(\\'\n    declare boundary-space strip;\n    declare default element namespace \"http:\/\/posample.org\";\n    <promoList> {\n    for $prod in $doc\/product\n    where $prod\/description\/price < 10.00\n    order by $prod\/description\/price ascending\n    return(\n        <promoitem> {\n        $prod,\n        <startdate> {$start} <\/startdate>,\n        <enddate> {$end} <\/enddate>,\n        <promoprice> {$promo} <\/promoprice>\n            } <\/promoitem>\n    )\n    } <\/promoList>\n\\' passing by ref DESCRIPTION AS \"doc\",\nPROMOSTART as \"start\",\nPROMOEND as \"end\",\nPROMOPRICE as \"promo\"\nRETURNING SEQUENCE)\nAS CLOB (32000))\nAS NEW_PRODUCT_INFO\nFROM PRODUCT\nWHERE PID = ?\n';\n\n$stmt = db2_prepare($conn, $query);\n\n$pid = \"100-100-01\";\n\nif ($stmt) {\n    db2_bind_param($stmt, 1, \"pid\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    while($row = db2_fetch_array($stmt)){\n    printf(\"$row[0]\\n\");\n    }\n}\n\ndb2_close($conn);","output":"<promoList xmlns=\"http:\/\/posample.org\">\n    <promoitem>\n    <product pid=\"100-100-01\">\n        <description>\n            <name>Snow Shovel, Basic 22 inch<\/name>\n            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip<\/details>\n            <price>9.99<\/price>\n            <weight>1 kg<\/weight>\n        <\/description>\n    <\/product>\n    <startdate>2004-11-19<\/startdate>\n    <enddate>2004-12-19<\/enddate>\n    <promoprice>7.25<\/promoprice>\n    <\/promoitem>\n<\/promoList>"}],"db2_fetch_array":[{"title":"Iterating through a forward-only cursor","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$stmt = db2_prepare($conn, $sql);\n$result = db2_execute($stmt);\n\nwhile ($row = db2_fetch_array($stmt)) {\n    printf (\"%-5d %-16s %-32s %10s\\n\", \n        $row[0], $row[1], $row[2], $row[3]);\n}","output":"0     Pook             cat                                    3.20\n5     Rickety Ride     goat                                   9.70\n2     Smarty           horse                                350.00"},{"title":"Retrieving specific rows with db2_fetch_array() from a scrollable cursor","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$result = db2_exec($stmt, $sql, array('cursor' => DB2_SCROLLABLE));\n\n$i=2;\nwhile ($row = db2_fetch_array($result, $i)) {\n    printf (\"%-5d %-16s %-32s %10s\\n\", \n        $row[0], $row[1], $row[2], $row[3]);\n    $i = $i + 2;\n}","output":"0     Pook             cat                                    3.20\n5     Rickety Ride     goat                                   9.70\n2     Smarty           horse                                350.00"}],"db2_fetch_assoc":[{"title":"Iterating through a forward-only cursor","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$stmt = db2_prepare($conn, $sql);\n$result = db2_execute($stmt);\n\nwhile ($row = db2_fetch_assoc($stmt)) {\n    printf (\"%-5d %-16s %-32s %10s\\n\", \n        $row['ID'], $row['NAME'], $row['BREED'], $row['WEIGHT']);\n}","output":"0     Pook             cat                                    3.20\n5     Rickety Ride     goat                                   9.70\n2     Smarty           horse                                350.00"},{"title":"Retrieving specific rows with db2_fetch_assoc() from a scrollable cursor","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$result = db2_exec($stmt, $sql, array('cursor' => DB2_SCROLLABLE));\n\n$i=2;\nwhile ($row = db2_fetch_assoc($result, $i)) {\n    printf (\"%-5d %-16s %-32s %10s\\n\", \n        $row['ID'], $row['NAME'], $row['BREED'], $row['WEIGHT']);\n    $i = $i + 2;\n}","output":"0     Pook             cat                                    3.20\n5     Rickety Ride     goat                                   9.70\n2     Smarty           horse                                350.00"}],"db2_fetch_both":[{"title":"Iterating through a forward-only cursor","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$stmt = db2_prepare($conn, $sql);\n$result = db2_execute($stmt);\n\nwhile ($row = db2_fetch_both($stmt)) {\n    printf (\"%-5d %-16s %-32s %10s\\n\", \n        $row['ID'], $row[0], $row['BREED'], $row[3]);\n}","output":"0     Pook             cat                                    3.20\n5     Rickety Ride     goat                                   9.70\n2     Smarty           horse                                350.00"},{"title":"Retrieving specific rows with db2_fetch_both() from a scrollable cursor","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$result = db2_exec($stmt, $sql, array('cursor' => DB2_SCROLLABLE));\n\n$i=2;\nwhile ($row = db2_fetch_both($result, $i)) {\n    printf (\"%-5d %-16s %-32s %10s\\n\", \n        $row[0], $row['NAME'], $row[2], $row['WEIGHT']);\n    $i = $i + 2;\n}","output":"0     Pook             cat                                    3.20\n5     Rickety Ride     goat                                   9.70\n2     Smarty           horse                                350.00"}],"db2_fetch_object":[{"title":"A db2_fetch_object() example","source":"$conn = db2_connect($database, $user, $password);\n\n$sql = \"SELECT breed, RTRIM(name) AS name\n    FROM animals\n    WHERE id = ?\";\n\nif ($conn) {\n    $stmt = db2_prepare($conn, $sql);\n    db2_execute($stmt, array(0));\n\n    while ($pet = db2_fetch_object($stmt)) {\n        echo \"Come here, {$pet->NAME}, my little {$pet->BREED}!\";\n    }\n    db2_close($conn);\n}","output":"Come here, Pook, my little cat!"}],"db2_fetch_row":[{"title":"Iterating through a result set","source":"$sql = 'SELECT name, breed FROM animals WHERE weight < ?';\n$stmt = db2_prepare($conn, $sql);\ndb2_execute($stmt, array(10));\nwhile (db2_fetch_row($stmt)) {\n    $name = db2_result($stmt, 0);\n    $breed = db2_result($stmt, 1);\n    print \"$name $breed\";\n}","output":"cat Pook\ngold fish Bubbles\nbudgerigar Gizmo\ngoat Rickety Ride"},{"title":"i5\/OS recommended alternatives to db2_fetch_row\/db2_result","source":"$conn = db2_connect(\"\",\"\",\"\");\n  $sql = 'SELECT SPECIFIC_SCHEMA, SPECIFIC_NAME, ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE, ROUTINE_CREATED, ROUTINE_BODY, IN_PARMS, OUT_PARMS, INOUT_PARMS, PARAMETER_STYLE, EXTERNAL_NAME, EXTERNAL_LANGUAGE FROM QSYS2.SYSROUTINES FETCH FIRST 2 ROWS ONLY';\n  $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));\n  while ($row = db2_fetch_both($stmt)){\n    echo \"<br>db2_fetch_both {$row['SPECIFIC_NAME']} {$row['ROUTINE_CREATED']} {$row[5]}\";\n  }\n  $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));\n  while ($row = db2_fetch_array($stmt)){\n    echo \"<br>db2_fetch_array {$row[1]}  {$row[5]}\";\n  }\n  $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));\n  while ($row = db2_fetch_object($stmt)){\n    echo \"<br>db2_fetch_object {$row->SPECIFIC_NAME} {$row->ROUTINE_CREATED}\";\n  }\n  db2_close($conn);","output":"db2_fetch_both MATCH_ANIMAL 2006-08-25-17.10.23.775000 2006-08-25-17.10.23.775000\ndb2_fetch_both MULTIRESULTS 2006-10-17-10.11.05.308000 2006-10-17-10.11.05.308000\ndb2_fetch_array MATCH_ANIMAL 2006-08-25-17.10.23.775000\ndb2_fetch_array MULTIRESULTS 2006-10-17-10.11.05.308000\ndb2_fetch_object MATCH_ANIMAL 2006-08-25-17.10.23.775000\ndb2_fetch_object MULTIRESULTS 2006-10-17-10.11.05.308000"}],"db2_get_option":[{"title":"Setting and retrieving parameters through a connection resource","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$user     = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($database, $user, $password);\n\necho \"Client attributes passed through connection string:\\n\";\n\n\/* Create the associative options array with valid key-value pairs *\/\n\/* Assign the attributes through connection string *\/\n\/* Access the options specified *\/\n$options1 = array('userid' => 'db2inst1');\n$conn1 = db2_connect($database, $user, $password, $options1);\n$val = db2_get_option($conn1, 'userid');\necho $val . \"\\n\";\n\n$options2 = array('acctstr' => 'account');\n$conn2 = db2_connect($database, $user, $password, $options2);\n$val = db2_get_option($conn2, 'acctstr');\necho $val . \"\\n\";\n\n$options3 = array('applname' => 'myapp');\n$conn3 = db2_connect($database, $user, $password, $options3);\n$val = db2_get_option($conn3, 'applname');\necho $val . \"\\n\";\n\n$options4 = array('wrkstnname' => 'workstation');\n$conn4 = db2_connect($database, $user, $password, $options4);\n$val = db2_get_option($conn4, 'wrkstnname');\necho $val . \"\\n\";\n\necho \"Client attributes passed post-connection:\\n\";\n\n\/* Create the associative options array with valid key-value pairs *\/\n\/* Assign the attributes after a connection is made *\/\n\/* Access the options specified *\/\n$options5 = array('userid' => 'db2inst1');\n$conn5 = db2_connect($database, $user, $password);\n$rc = db2_set_option($conn5, $options5, 1);\n$val = db2_get_option($conn5, 'userid');\necho $val . \"\\n\";\n\n$options6 = array('acctstr' => 'account');\n$conn6 = db2_connect($database, $user, $password);\n$rc = db2_set_option($conn6, $options6, 1);\n$val = db2_get_option($conn6, 'acctstr');\necho $val . \"\\n\";\n\n$options7 = array('applname' => 'myapp');\n$conn7 = db2_connect($database, $user, $password);\n$rc = db2_set_option($conn7, $options7, 1);\n$val = db2_get_option($conn7, 'applname');\necho $val . \"\\n\";\n\n$options8 = array('wrkstnname' => 'workstation');\n$conn8 = db2_connect($database, $user, $password);\n$rc = db2_set_option($conn8, $options8, 1);\n$val = db2_get_option($conn8, 'wrkstnname');\necho $val . \"\\n\";","output":"Client attributes passed through connection string:\ndb2inst1\naccount\nmyapp\nworkstation\nClient attributes passed post-connection:\ndb2inst1\naccount\nmyapp\nworkstation"}],"db2_last_insert_id":[{"title":"A db2_last_insert_id() example","source":"$database = \"SAMPLE\";\n$user = \"db2inst1\";\n$password = \"ibmdb2\";\n\n$conn = db2_connect($database, $user, $password);\nif($conn) {\n    $createTable = \"CREATE TABLE lastInsertID \n      (id integer GENERATED BY DEFAULT AS IDENTITY, name varchar(20))\";\n    $insertTable = \"INSERT INTO lastInsertID (name) VALUES ('Temp Name')\";\n\n    $stmt = @db2_exec($conn, $createTable);\n\n    \/* Checking for single row inserted. *\/\n    $stmt = db2_exec($conn, $insertTable);\n    $ret =  db2_last_insert_id($conn);\n    if($ret) {\n        echo \"Last Insert ID is : \" . $ret . \"\\n\";\n    } else {\n        echo \"No Last insert ID.\\n\";\n    }\n    \n    db2_close($conn);\n}\nelse {\n    echo \"Connection failed.\";\n}","output":"Last Insert ID is : 1"}],"db2_lob_read":[{"title":"Iterating through different types of data","source":"\/* Database Connection Parameters *\/\n$db = 'SAMPLE';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($db,$username,$password);\n\nif ($conn) {\n    $drop = 'DROP TABLE clob_stream';\n    $result = @db2_exec( $conn, $drop );\n\n    $create = 'CREATE TABLE clob_stream (id INTEGER, my_clob CLOB)';\n    $result = db2_exec( $conn, $create );\n\n    $variable = \"\";\n    $stmt = db2_prepare($conn, \"INSERT INTO clob_stream (id,my_clob) VALUES (1, ?)\");\n    $variable = \"THIS IS A CLOB TEST. THIS IS A CLOB TEST.\";\n    db2_bind_param($stmt, 1, \"variable\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    $sql = \"SELECT id,my_clob FROM clob_stream\";\n    $result = db2_prepare($conn, $sql);\n    db2_execute($result);\n    db2_fetch_row($result);\n    $i = 0;\n    \/* Read LOB data *\/\n    while ($data = db2_lob_read($result, 2, 6)) {\n        echo \"Loop $i: $data\\n\";\n        $i = $i + 1;\n    }\n\n    $drop = 'DROP TABLE blob_stream';\n    $result = @db2_exec( $conn, $drop );\n\n    $create = 'CREATE TABLE blob_stream (id INTEGER, my_blob CLOB)';\n    $result = db2_exec( $conn, $create );\n\n    $variable = \"\";\n    $stmt = db2_prepare($conn, \"INSERT INTO blob_stream (id,my_blob) VALUES (1, ?)\");\n    $variable = \"THIS IS A BLOB TEST. THIS IS A BLOB TEST.\";\n    db2_bind_param($stmt, 1, \"variable\", DB2_PARAM_IN);\n    db2_execute($stmt);\n\n    $sql = \"SELECT id,my_blob FROM blob_stream\";\n    $result = db2_prepare($conn, $sql);\n    db2_execute($result);\n    db2_fetch_row($result);\n    $i = 0;\n    \/* Read LOB data *\/\n    while ($data = db2_lob_read($result, 2, 6)) {\n        echo \"Loop $i: $data\\n\";\n        $i = $i + 1;\n    }\n} else {\n    echo 'no connection: ' . db2_conn_errormsg();\n}","output":"Loop 0: THIS I\nLoop 1: S A CL\nLoop 2: OB TES\nLoop 3: T. THI\nLoop 4: S IS A\nLoop 5:  CLOB \nLoop 6: TEST.\nLoop 0: THIS I\nLoop 1: S A BL\nLoop 2: OB TES\nLoop 3: T. THI\nLoop 4: S IS A\nLoop 5:  BLOB \nLoop 6: TEST."}],"db2_next_result":[{"title":"Calling a stored procedure that returns multiple result sets","source":"$conn = db2_connect($database, $user, $password);\n\nif ($conn) {\n  $stmt = db2_exec($conn, 'CALL multiResults()');\n\n  print \"Fetching first result set\\n\";\n  while ($row = db2_fetch_array($stmt)) {\n    var_dump($row);\n  }\n\n  print \"\\nFetching second result set\\n\";\n  $res = db2_next_result($stmt);\n  if ($res) {\n    while ($row = db2_fetch_array($res)) {\n      var_dump($row);\n    }\n  }\n\n  print \"\\nFetching third result set\\n\";\n  $res2 = db2_next_result($stmt);\n  if ($res2) {\n    while ($row = db2_fetch_array($res2)) {\n      var_dump($row);\n    }\n  }\n\n  db2_close($conn);\n}","output":"Fetching first result set\narray(2) {\n  [0]=>\n  string(16) \"Bubbles         \"\n  [1]=>\n  int(3)\n}\narray(2) {\n  [0]=>\n  string(16) \"Gizmo           \"\n  [1]=>\n  int(4)\n}\n\nFetching second result set\narray(4) {\n  [0]=>\n  string(16) \"Sweater         \"\n  [1]=>\n  int(6)\n  [2]=>\n  string(5) \"llama\"\n  [3]=>\n  string(6) \"150.00\"\n}\narray(4) {\n  [0]=>\n  string(16) \"Smarty          \"\n  [1]=>\n  int(2)\n  [2]=>\n  string(5) \"horse\"\n  [3]=>\n  string(6) \"350.00\"\n}\n\nFetching third result set\narray(1) {\n  [0]=>\n  string(16) \"Bubbles         \"\n}\narray(1) {\n  [0]=>\n  string(16) \"Gizmo           \"\n}"}],"db2_num_fields":[{"title":"Retrieving the number of fields in a result set","source":"$sql = \"SELECT id, name, breed, weight FROM animals ORDER BY breed\";\n$stmt = db2_prepare($conn, $sql);\ndb2_execute($stmt, $sql);\n$columns = db2_num_fields($stmt);\n\necho \"There are {$columns} columns in the result set.\";","output":"There are 4 columns in the result set."}],"db2_pclose":[{"title":"Closing a persistent connection","source":"$conn = db2_pconnect('', '', '');\n$rc = db2_pclose($conn);\nif ($rc) {\n    echo \"Connection was successfully closed.\";\n}","output":"Connection was successfully closed."}],"db2_pconnect":[{"title":"A db2_pconnect() example","source":"$database = 'SAMPLE';\n$user = 'db2inst1';\n$password = 'ibmdb2';\n\n$pconn = db2_pconnect($database, $user, $password);\n\nif ($pconn) {\n    echo \"Persistent connection succeeded.\";\n}\nelse {\n    echo \"Persistent connection failed.\";\n}\n\n$pconn2 = db2_pconnect($database, $user, $password);\nif ($pconn) {\n    echo \"Second persistent connection succeeded.\";\n}\nelse {\n    echo \"Second persistent connection failed.\";\n}","output":"Persistent connection succeeded.\nSecond persistent connection succeeded."},{"title":"Using trusted context","source":"$database = \"SAMPLE\";\n$hostname = \"localhost\";\n$port = 50000;\n$authID = \"db2inst1\";\n$auth_pass = \"ibmdb2\";\n\n$tc_user = \"tcuser\";\n$tc_pass = \"tcpassword\";\n\n$dsn = \"DATABASE=$database;HOSTNAME=$hostname;PORT=$port;\n  PROTOCOL=TCPIP;UID=$authID;PWD=$auth_pass;\";\n$options = array (\"trustedcontext\" => DB2_TRUSTED_CONTEXT_ENABLE);\n\n$tc_conn = db2_pconnect($dsn, \"\", \"\", $options);\nif($tc_conn) {\n    echo \"Explicit trusted connection succeeded.\\n\";\n\n    if(db2_get_option($tc_conn, \"trustedcontext\")) {\n        $userBefore = db2_get_option($tc_conn, \"trusted_user\");\n        \n        \/\/Do some work as user 1.\n\n        \/\/Switching to trusted user.\n        $parameters = array(\"trusted_user\" => $tc_user, \n          \"trusted_password\" => $tcuser_pass);\n        $res = db2_set_option ($tc_conn, $parameters, 1);\n\n        $userAfter = db2_get_option($tc_conn, \"trusted_user\");\n        \/\/Do more work as trusted user.\n\n        if($userBefore != $userAfter) {\n            echo \"User has been switched.\" . \"\\n\";    \n        }\n    }\n\n    db2_close($tc_conn);\n}\nelse {\n    echo \"Explicit trusted connection failed.\\n\";\n}","output":"Explicit trusted connection succeeded.\nUser has been switched."}],"db2_prepare":[{"title":"Preparing and executing an SQL statement with parameter markers","source":"$animals = array(\n    array(0, 'cat', 'Pook', 3.2),\n    array(1, 'dog', 'Peaches', 12.3),\n    array(2, 'horse', 'Smarty', 350.0),\n);\n\n$insert = 'INSERT INTO animals (id, breed, name, weight)\n    VALUES (?, ?, ?, ?)';\n$stmt = db2_prepare($conn, $insert);\nif ($stmt) {\n    foreach ($animals as $animal) {\n        $result = db2_execute($stmt, $animal);\n    }\n}","output":null}],"db2_result":[{"title":"A db2_result() example","source":"$sql = 'SELECT name, breed FROM animals WHERE weight < ?';\n$stmt = db2_prepare($conn, $sql);\ndb2_execute($stmt, array(10));\nwhile (db2_fetch_row($stmt)) {\n    $name = db2_result($stmt, 0);\n    $breed = db2_result($stmt, 'BREED');\n    print \"$name $breed\";\n}","output":"cat Pook\ngold fish Bubbles\nbudgerigar Gizmo\ngoat Rickety Ride"}],"db2_rollback":[{"title":"Rolling back a DELETE statement","source":"$conn = db2_connect($database, $user, $password);\n\nif ($conn) {\n    $stmt = db2_exec($conn, \"SELECT count(*) FROM animals\");\n    $res = db2_fetch_array( $stmt );\n    echo $res[0] . \"\\n\";\n    \n    \/\/ Turn AUTOCOMMIT off\n    db2_autocommit($conn, DB2_AUTOCOMMIT_OFF);\n   \n    \/\/ Delete all rows from ANIMALS\n    db2_exec($conn, \"DELETE FROM animals\");\n    \n    $stmt = db2_exec($conn, \"SELECT count(*) FROM animals\");\n    $res = db2_fetch_array( $stmt );\n    echo $res[0] . \"\\n\";\n    \n    \/\/ Roll back the DELETE statement\n    db2_rollback( $conn );\n    \n    $stmt = db2_exec( $conn, \"SELECT count(*) FROM animals\" );\n    $res = db2_fetch_array( $stmt );\n    echo $res[0] . \"\\n\";\n    db2_close($conn);\n}","output":"7\n0\n7"}],"db2_server_info":[{"title":"A db2_server_info() example","source":"$conn = db2_connect('sample', 'db2inst1', 'ibmdb2');\n\n$server = db2_server_info( $conn );\n\nif ($server) {\n    echo \"DBMS_NAME: \";                 var_dump( $server->DBMS_NAME );\n    echo \"DBMS_VER: \";                  var_dump( $server->DBMS_VER );\n    echo \"DB_CODEPAGE: \";               var_dump( $server->DB_CODEPAGE );\n    echo \"DB_NAME: \";                   var_dump( $server->DB_NAME );\n    echo \"INST_NAME: \";                 var_dump( $server->INST_NAME );\n    echo \"SPECIAL_CHARS: \";             var_dump( $server->SPECIAL_CHARS );\n    echo \"KEYWORDS: \";                  var_dump( sizeof($server->KEYWORDS) );\n    echo \"DFT_ISOLATION: \";             var_dump( $server->DFT_ISOLATION );\n    echo \"ISOLATION_OPTION: \";\n    $il = '';\n    foreach( $server->ISOLATION_OPTION as $opt )\n    {\n       $il .= $opt.\" \";\n    }\n    var_dump( $il );\n    echo \"SQL_CONFORMANCE: \";           var_dump( $server->SQL_CONFORMANCE );\n    echo \"PROCEDURES: \";                var_dump( $server->PROCEDURES );\n    echo \"IDENTIFIER_QUOTE_CHAR: \";     var_dump( $server->IDENTIFIER_QUOTE_CHAR );\n    echo \"LIKE_ESCAPE_CLAUSE: \";        var_dump( $server->LIKE_ESCAPE_CLAUSE );\n    echo \"MAX_COL_NAME_LEN: \";          var_dump( $server->MAX_COL_NAME_LEN );\n    echo \"MAX_ROW_SIZE: \";              var_dump( $server->MAX_ROW_SIZE );\n    echo \"MAX_IDENTIFIER_LEN: \";        var_dump( $server->MAX_IDENTIFIER_LEN );\n    echo \"MAX_INDEX_SIZE: \";            var_dump( $server->MAX_INDEX_SIZE );\n    echo \"MAX_PROC_NAME_LEN: \";         var_dump( $server->MAX_PROC_NAME_LEN );\n    echo \"MAX_SCHEMA_NAME_LEN: \";       var_dump( $server->MAX_SCHEMA_NAME_LEN );\n    echo \"MAX_STATEMENT_LEN: \";         var_dump( $server->MAX_STATEMENT_LEN );\n    echo \"MAX_TABLE_NAME_LEN: \";        var_dump( $server->MAX_TABLE_NAME_LEN );\n    echo \"NON_NULLABLE_COLUMNS: \";      var_dump( $server->NON_NULLABLE_COLUMNS );\n\n    db2_close($conn);\n}","output":"DBMS_NAME: string(9) \"DB2\/LINUX\"\nDBMS_VER: string(10) \"08.02.0000\"\nDB_CODEPAGE: int(1208)\nDB_NAME: string(6) \"SAMPLE\"\nINST_NAME: string(8) \"db2inst1\"\nSPECIAL_CHARS: string(2) \"@#\"\nKEYWORDS: int(179)\nDFT_ISOLATION: string(2) \"CS\"\nISOLATION_OPTION: string(12) \"UR CS RS RR \"\nSQL_CONFORMANCE: string(7) \"FIPS127\"\nPROCEDURES: bool(true)\nIDENTIFIER_QUOTE_CHAR: string(1) \"\"\"\nLIKE_ESCAPE_CLAUSE: bool(true)\nMAX_COL_NAME_LEN: int(30)\nMAX_ROW_SIZE: int(32677)\nMAX_IDENTIFIER_LEN: int(18)\nMAX_INDEX_SIZE: int(1024)\nMAX_PROC_NAME_LEN: int(128)\nMAX_SCHEMA_NAME_LEN: int(30)\nMAX_STATEMENT_LEN: int(2097152)\nMAX_TABLE_NAME_LEN: int(128)\nNON_NULLABLE_COLUMNS: bool(true)"}],"db2_set_option":[{"title":"Setting one parameter with a connection resource","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('autocommit' => DB2_AUTOCOMMIT_ON);\n\n\/* Call the function using the correct resource, options array, and type values *\/\n$result = db2_set_option($conn, $options, 1);\n\n\/* Check if all options could be set correctly *\/\nif($result)\n{\n  echo 'Options Set Successfully';\n}\nelse\n{\n  echo 'Could Not Set Options';\n}","output":"Options Set Successfully"},{"title":"Setting multiple parameters with a connection resource","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('autocommit' => DB2_AUTOCOMMIT_OFF, \n                    'binmode' => DB2_PASSTHRU,\n              'db2_attr_case' => DB2_CASE_UPPER,\n                     'cursor' => DB2_SCROLLABLE);\n\n\/* Call the function using the correct resource, options array, and type values *\/\n$result = db2_set_option($conn, $options, 1);\n\n\/* Check if all options could be set correctly *\/\nif($result)\n{\n  echo 'Options Set Successfully';\n}\nelse\n{\n  echo 'Could Not Set Options';\n}","output":"Options Set Successfully"},{"title":"Setting multiple parameters with an invalid key","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('autocommit' => DB2_AUTOCOMMIT_OFF, \n             'MY_INVALID_KEY' => DB2_PASSTHRU,\n              'db2_attr_case' => DB2_CASE_UPPER,\n                     'cursor' => DB2_SCROLLABLE);\n\n\/* Call the function using the correct resource, options array, and type values *\/\n$result = db2_set_option($conn, $options, 1);\n\n\/* Check if all options could be set correctly *\/\nif($result)\n{\n  echo 'Options Set Successfully';\n}\nelse\n{\n  echo 'Could Not Set Options';\n}","output":"Could Not Set Options"},{"title":"Setting multiple parameters with an invalid value","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('autocommit' => DB2_AUTOCOMMIT_OFF, \n                    'binmode' => 'INVALID_VALUE',\n              'db2_attr_case' => DB2_CASE_UPPER,\n                     'cursor' => DB2_SCROLLABLE);\n\n\/* Call the function using the correct resource, options array, and type values *\/\n$result = db2_set_option($conn, $options, 1);\n\n\/* Check if all options could be set correctly *\/\nif($result)\n{\n  echo 'Options Set Successfully';\n}\nelse\n{\n  echo 'Could Not Set Options';\n}","output":"Could Not Set Options"},{"title":"Setting multiple parameters with a connection resource and the wrong type","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('autocommit' => DB2_AUTOCOMMIT_OFF, \n                    'binmode' => DB2_PASSTHRU,\n              'db2_attr_case' => DB2_CASE_UPPER,\n                     'cursor' => DB2_SCROLLABLE);\n\n\/* Call the function using the correct resource, options array, and the wrong type value *\/\n$result = db2_set_option($conn, $options, 2);\n\n\/* Check if all options could be set correctly *\/\nif($result)\n{\n  echo 'Options Set Successfully';\n}\nelse\n{\n  echo 'Could Not Set Options';\n}","output":"Could Not Set Options"},{"title":"Setting multiple parameters with the wrong resource","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('autocommit' => DB2_AUTOCOMMIT_OFF, \n                    'binmode' => DB2_PASSTHRU,\n              'db2_attr_case' => DB2_CASE_UPPER,\n                     'cursor' => DB2_SCROLLABLE);\n\n$stmt = db2_prepare($conn, 'SELECT * FROM EMPLOYEE');\n\n\/* Call the function using the wrong resource, and the correct options array, and type values *\/\n$result = db2_set_option($stmt, $options, 1);\n\n\/* Check if all options could be set correctly *\/\nif($result)\n{\n  echo 'Options Set Successfully';\n}\nelse\n{\n  echo 'Could Not Set Options';\n}","output":"Could Not Set Options"},{"title":"Putting it all together","source":"\/* Database Connection Parameters *\/\n$database = 'SAMPLE';\n$hostname = 'localhost';\n$port = 50000;\n$protocol = 'TCPIP';\n$username = 'db2inst1';\n$password = 'ibmdb2';\n\n\/* Connection String *\/\n$conn_string = \"DRIVER={IBM DB2 ODBC DRIVER};DATABASE=$database;\";\n$conn_string .= \"HOSTNAME=$hostname;PORT=$port;PROTOCOL=$protocol;\";\n$conn_string .= \"UID=$username;PWD=$password;\";\n\n\/* Obtain Connection Resource *\/\n$conn = db2_connect($conn_string, '', '');\n\n\/* Create the associative options array with valid key-value pairs *\/\n$options = array('db2_attr_case' => DB2_CASE_LOWER,\n                        'cursor' => DB2_SCROLLABLE);\n\n$stmt = db2_prepare($conn, 'SELECT * FROM EMPLOYEE WHERE EMPNO = ? OR EMPNO = ?');\n\n\/* Call the function using the correct resource, options array, and type values *\/\n$option_result = db2_set_option($stmt, $options, 2);\n$result = db2_execute($stmt, array('000130', '000140'));\n\n\/* Get Row 2 before Row 1 since Scrollable Cursor *\/\nprint_r(db2_fetch_assoc($stmt, 2));\nprint '<br \/><br \/>';\nprint_r(db2_fetch_assoc($stmt, 1));","output":"Array\n(\n    [empno] => 000140\n    [firstnme] => HEATHER\n    [midinit] => A\n    [lastname] => NICHOLLS\n    [workdept] => C01\n    [phoneno] => 1793\n    [hiredate] => 1976-12-15\n    [job] => ANALYST\n    [edlevel] => 18\n    [sex] => F\n    [birthdate] => 1946-01-19\n    [salary] => 28420.00\n    [bonus] => 600.00\n    [comm] => 2274.00\n)\n\nArray\n(\n    [empno] => 000130\n    [firstnme] => DELORES\n    [midinit] => M\n    [lastname] => QUINTANA\n    [workdept] => C01\n    [phoneno] => 4578\n    [hiredate] => 1971-07-28\n    [job] => ANALYST\n    [edlevel] => 16\n    [sex] => F\n    [birthdate] => 1925-09-15\n    [salary] => 23800.00\n    [bonus] => 500.00\n    [comm] => 1904.00\n)"},{"title":"i5\/OS cursors are read-only","source":"$conn = db2_connect(\"\", \"\", \"\", array(\"i5_lib\"=>\"nobody\"));\n  $stmt = db2_prepare($conn, 'select * from names where first = ?');\n  $name = \"first2\";\n  db2_bind_param($stmt, 1, \"name\", DB2_PARAM_IN);\n  $options = array(\"i5_fetch_only\"=>DB2_I5_FETCH_ON);\n  db2_set_option($stmt,$options,0);\n  if (db2_execute($stmt)) {\n    while ($row = db2_fetch_array($stmt)) {\n      echo \"{$row[0]} {$row[1]}\";\n    }\n  }","output":"first2 last2"}],"dba_handlers":[{"title":"dba_handlers() Example","source":"echo \"Available DBA handlers:\\n\";\nforeach (dba_handlers(true) as $handler_name => $handler_version) {\n  \/\/ clean the versions\n  $handler_version = str_replace('$', '', $handler_version);\n  echo \" - $handler_name: $handler_version\\n\";\n}","output":"Available DBA handlers:\n - cdb: 0.75, Revision: 1.3.2.3 \n - cdb_make: 0.75, Revision: 1.2.2.4 \n - db2: Sleepycat Software: Berkeley DB 2.7.7: (08\/20\/99)\n - inifile: 1.0, Revision: 1.6.2.3 \n - flatfile: 1.0, Revision: 1.5.2.4"}],"dbase_add_record":[{"title":"Inserting a record in a dBase database","source":"\/\/ open in read-write mode\n$db = dbase_open('\/tmp\/test.dbf', 2);\n\nif ($db) {\n  dbase_add_record($db, array(\n      date('Ymd'), \n      'Maxim Topolov', \n      '23', \n      'max@example.com',\n      'T'));   \n  dbase_close($db);\n}","output":null}],"dbase_close":[{"title":"Closing a dBase database file","source":"\/\/ open in read-only mode\n$db = dbase_open('\/tmp\/test.dbf', 0);\n\nif ($db) {\n  \/\/ read some data ..\n  \n  dbase_close($db);\n}","output":null}],"dbase_create":[{"title":"Creating a dBase database file","source":"\/\/ database \"definition\"\n$def = array(\n  array(\"date\",     \"D\"),\n  array(\"name\",     \"C\",  50),\n  array(\"age\",      \"N\",   3, 0),\n  array(\"email\",    \"C\", 128),\n  array(\"ismember\", \"L\")\n);\n\n\/\/ creation\nif (!dbase_create('\/tmp\/test.dbf', $def)) {\n  echo \"Error, can't create the database\\n\";\n}","output":null}],"dbase_get_header_info":[{"title":"Showing header information for a dBase database file","source":"\/\/ Path to dbase file\n$db_path = \"\/tmp\/test.dbf\";\n\n\/\/ Open dbase file\n$dbh = dbase_open($db_path, 0)\n  or die(\"Error! Could not open dbase database file '$db_path'.\");\n\n\/\/ Get column information\n$column_info = dbase_get_header_info($dbh);\n\n\/\/ Display information\nprint_r($column_info);","output":null}],"dbase_get_record_with_names":[{"title":"Listing all the registered members in the database","source":"\/\/ open in read-only mode\n$db = dbase_open('\/tmp\/test.dbf', 0);\n\nif ($db) {\n  $record_numbers = dbase_numrecords($db);\n  for ($i = 1; $i <= $record_numbers; $i++) {\n      $row = dbase_get_record_with_names($db, $i);\n      if ($row['ismember'] == 1) {\n          echo \"Member #$i: \" . trim($row['name']) . \"\\n\";\n      }\n  }\n}","output":null}],"dbase_numfields":[{"title":"dbase_numfields() Example","source":"$rec = dbase_get_record($db, $recno);\n$nf  = dbase_numfields($db);\nfor ($i = 0; $i < $nf; $i++) {\n  echo $rec[$i], \"\\n\";\n}","output":null}],"dbase_numrecords":[{"title":"Looping over all the records of the database","source":"\/\/ open in read-only mode\n$db = dbase_open('\/tmp\/test.dbf', 0);\n\nif ($db) {\n  $record_numbers = dbase_numrecords($db);\n  for ($i = 1; $i <= $record_numbers; $i++) {\n      \/\/ do something here, for each record\n  }\n}","output":null}],"dbase_open":[{"title":"Opening a dBase database file","source":"\/\/ open in read-only mode\n$db = dbase_open('\/tmp\/test.dbf', 0);\n\nif ($db) {\n  \/\/ read some data ..\n  \n  dbase_close($db);\n}","output":null}],"dbase_pack":[{"title":"Emptying a dBase database","source":"\/\/ open in read-write mode\n$db = dbase_open('\/tmp\/test.dbf', 2);\n\nif ($db) {\n  $record_numbers = dbase_numrecords($db);\n  for ($i = 1; $i <= $record_numbers; $i++) {\n      dbase_delete_record($db, $i);\n  }\n  \/\/ expunge the database\n  dbase_pack($db);\n}","output":null}],"dbase_replace_record":[{"title":"Updating a record in the database","source":"\/\/ open in read-write mode\n$db = dbase_open('\/tmp\/test.dbf', 2);\n\nif ($db) {\n  \/\/ gets the old row\n  $row = dbase_get_record_with_names($db, 1);\n  \n  \/\/ remove the 'deleted' entry\n  unset($row['deleted']);\n  \n  \/\/ Update the date field with the current timestamp\n  $row['date'] = date('Ymd');\n  \n  \/\/ convert the row to an indexed array\n  $row = array_values($row);\n\n  \/\/ Replace the record\n  dbase_replace_record($db, $row, 1);\n  dbase_close($db);\n}","output":null}],"dbx_close":[{"title":"dbx_close() example","source":"$link = dbx_connect(DBX_MYSQL, \"localhost\", \"db\", \"username\", \"password\")\n    or die(\"Could not connect\");\n\necho \"Connected successfully\";\ndbx_close($link);","output":null}],"dbx_compare":[{"title":"dbx_compare() example","source":"function user_re_order($a, $b) \n{\n    $rv = dbx_compare($a, $b, \"parentid\", DBX_CMP_DESC);\n    if (!$rv) {\n        $rv = dbx_compare($a, $b, \"id\", DBX_CMP_NUMBER);\n    }\n    return $rv;\n}\n\n$link   = dbx_connect(DBX_ODBC, \"\", \"db\", \"username\", \"password\")\n    or die(\"Could not connect\");\n\n$result = dbx_query($link, \"SELECT id, parentid, description FROM table ORDER BY id\");\n    \/\/ data in $result is now ordered by id\n\ndbx_sort($result, \"user_re_order\");\n    \/\/ date in $result is now ordered by parentid (descending), then by id\n\ndbx_close($link);","output":null}],"dbx_connect":[{"title":null,"source":"$link = dbx_connect(DBX_MYSQL, \"localhost\", \"db\", \"username\", \"password\");\nmysql_close($link->handle); \/\/ dbx_close($link) would be better here","output":null},{"title":"dbx_connect() example","source":"$link = dbx_connect(DBX_ODBC, \"\", \"db\", \"username\", \"password\", DBX_PERSISTENT)\n    or die(\"Could not connect\");\n\necho \"Connected successfully\";\ndbx_close($link);","output":null}],"dbx_error":[{"title":"dbx_error() example","source":"$link   = dbx_connect(DBX_MYSQL, \"localhost\", \"db\", \"username\", \"password\")\n    or die(\"Could not connect\");\n\n$result = dbx_query($link, \"select id from non_existing_table\");\nif ($result == 0) {\n    echo dbx_error($link);\n}\ndbx_close($link);","output":null}],"dbx_escape_string":[{"title":"dbx_escape_string() example","source":"$link   = dbx_connect(DBX_MYSQL, \"localhost\", \"db\", \"username\", \"password\")\n    or die(\"Could not connect\");\n\n$text = dbx_escape_string($link, \"It\\'s quoted and backslashed (\\\\).\");\n$result = dbx_query($link, \"insert into tbl (txt) values ('\" . $text . \"')\");\nif ($result == 0) {\n    echo dbx_error($link);\n}\ndbx_close($link);","output":null}],"dbx_fetch_row":[{"title":"How to handle the returned value","source":"$result = dbx_query($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);\n\necho \"<table>\\n\";\nwhile ($row = dbx_fetch_row($result)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $field) {\n        echo \"<td>$field<\/td>\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null}],"dbx_query":[{"title":null,"source":"$result = dbx_query($link, \"SELECT id FROM table\");\nmysql_field_len($result->handle, 0);","output":null},{"title":null,"source":"$result = dbx_query($link, 'SELECT id FROM table');\necho $result->rows; \/\/ number of records\necho $result->cols; \/\/ number of fields","output":null},{"title":"lists each field's name and type","source":"$result = dbx_query($link, 'SELECT id FROM table',\n                     DBX_RESULT_INDEX | DBX_RESULT_INFO);\n\nfor ($i = 0; $i < $result->cols; $i++ ) {\n    echo $result->info['name'][$i] . \"\\n\";\n    echo $result->info['type'][$i] . \"\\n\";  \n}","output":null},{"title":"outputs the content of data property into HTML table","source":"$result = dbx_query($link, 'SELECT id, parentid, description FROM table');\n\necho \"<table>\\n\";\nforeach ($result->data as $row) {\n    echo \"<tr>\\n\";\n    foreach ($row as $field) {\n        echo \"<td>$field<\/td>\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"How to handle UNBUFFERED queries","source":"$result = dbx_query ($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);\n\necho \"<table>\\n\";\nwhile ($row = dbx_fetch_row($result)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $field) {\n        echo \"<td>$field<\/td>\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"How to handle the returned value","source":"$link   = dbx_connect(DBX_ODBC, \"\", \"db\", \"username\", \"password\")\n    or die(\"Could not connect\");\n\n$result = dbx_query($link, 'SELECT id, parentid, description FROM table');\n\nif (is_object($result) ) {\n    \/\/ ... do some stuff here, see detailed examples below ...\n    \/\/ first, print out field names and types \n    \/\/ then, draw a table filled with the returned field values\n} else {\n    exit(\"Query failed\");\n}\n\ndbx_close($link);","output":null}],"dbx_sort":[{"title":"dbx_sort() example","source":"function user_re_order($a, $b) \n{\n    $rv = dbx_compare($a, $b, \"parentid\", DBX_CMP_DESC);\n    if (!$rv) {\n        $rv = dbx_compare($a, $b, \"id\", DBX_CMP_NUMBER);\n    }\n    return $rv;\n}\n\n$link   = dbx_connect(DBX_ODBC, \"\", \"db\", \"username\", \"password\")\n    or die(\"Could not connect\");\n\n$result = dbx_query($link, \"SELECT id, parentid, description FROM tbl ORDER BY id\");\n    \/\/ data in $result is now ordered by id\n\ndbx_sort($result, \"user_re_order\");\n    \/\/ data in $result is now ordered by parentid (descending), then by id\n\ndbx_close($link);","output":null}],"debug_backtrace":[{"title":"debug_backtrace() example","source":"\/\/ filename: \/tmp\/a.php\n\nfunction a_test($str)\n{\n    echo \"\\nHi: $str\";\n    var_dump(debug_backtrace());\n}\n\na_test('friend');\n?>\n\n<?php\n\/\/ filename: \/tmp\/b.php\ninclude_once '\/tmp\/a.php';","output":"Hi: friend\narray(2) {\n[0]=>\narray(4) {\n    [\"file\"] => string(10) \"\/tmp\/a.php\"\n    [\"line\"] => int(10)\n    [\"function\"] => string(6) \"a_test\"\n    [\"args\"]=>\n    array(1) {\n      [0] => &string(6) \"friend\"\n    }\n}\n[1]=>\narray(4) {\n    [\"file\"] => string(10) \"\/tmp\/b.php\"\n    [\"line\"] => int(2)\n    [\"args\"] =>\n    array(1) {\n      [0] => string(10) \"\/tmp\/a.php\"\n    }\n    [\"function\"] => string(12) \"include_once\"\n  }\n}"}],"debug_print_backtrace":[{"title":"debug_print_backtrace() example","source":"\/\/ include.php file\n\nfunction a() {\n    b();\n}\n\nfunction b() {\n    c();\n}\n\nfunction c(){\n    debug_print_backtrace();\n}\n\na();","output":"#0  c() called at [\/tmp\/include.php:10]\n#1  b() called at [\/tmp\/include.php:6]\n#2  a() called at [\/tmp\/include.php:17]\n#3  include(\/tmp\/include.php) called at [\/tmp\/test.php:3]"}],"debug_zval_dump":[{"title":"debug_zval_dump() example","source":"$var1 = 'Hello World';\n$var2 = '';\n\n$var2 =& $var1;\n\ndebug_zval_dump(&$var1);","output":"&string(11) \"Hello World\" refcount(3)"},{"title":null,"source":"$var1 = 'Hello World';\n$var2 = '';\n\n$var2 =& $var1;\n\ndebug_zval_dump($var1); \/\/ not passed by reference, this time","output":"string(11) \"Hello World\" refcount(1)"},{"title":null,"source":"$var1 = 'Hello World';\n\ndebug_zval_dump($var1);","output":"string(11) \"Hello World\" refcount(2)"}],"decbin":[{"title":"decbin() example","source":"echo decbin(12) . \"\\n\";\necho decbin(26);","output":"1100\n11010"}],"dechex":[{"title":"dechex() example","source":"echo dechex(10) . \"\\n\";\necho dechex(47);","output":"a\n2f"},{"title":"dechex() example with large integers","source":"\/\/ The output below assumes a 32-bit platform.\n\/\/ Note that the output is the same for all values.\necho dechex(-1).\"\\n\";\necho dechex(PHP_INT_MAX * 2 + 1).\"\\n\";\necho dechex(pow(2, 32) - 1).\"\\n\";","output":"ffffffff\nffffffff\nffffffff"}],"decoct":[{"title":"decoct() example","source":"echo decoct(15) . \"\\n\";\necho decoct(264);","output":"17\n410"}],"define_syslog_variables":[{"title":"define_syslog_variables() example","source":"\/\/ Check if syslog variables already is defined\nif(!get_cfg_var('define_syslog_variables'))\n{\n    define_syslog_variables();\n}\n\n\/\/ Open the log\nopenlog('', $LOG_ODELAY, $LOG_MAIL | $LOG_USER);\n\n\/\/ Continue script ...","output":null}],"define":[{"title":"Defining Constants","source":"define(\"CONSTANT\", \"Hello world.\");\necho CONSTANT; \/\/ outputs \"Hello world.\"\necho Constant; \/\/ outputs \"Constant\" and issues a notice.\n\ndefine(\"GREETING\", \"Hello you.\", true);\necho GREETING; \/\/ outputs \"Hello you.\"\necho Greeting; \/\/ outputs \"Hello you.\"\n\n\/\/ Works as of PHP 7\ndefine('ANIMALS', array(\n    'dog',\n    'cat',\n    'bird'\n));\necho ANIMALS[1]; \/\/ outputs \"cat\"","output":null}],"defined":[{"title":"Checking Constants","source":"\/* Note the use of quotes, this is important.  This example is checking\n * if the string 'TEST' is the name of a constant named TEST *\/\nif (defined('TEST')) {\n    echo TEST;\n}","output":null}],"deg2rad":[{"title":"deg2rad() example","source":"echo deg2rad(45); \/\/ 0.785398163397\nvar_dump(deg2rad(45) === M_PI_4); \/\/ bool(true)","output":null}],"dio_close":[{"title":"Closing an open file descriptor","source":"$fd = dio_open('\/dev\/ttyS0', O_RDWR);\n\ndio_close($fd);","output":null}],"dio_fcntl":[{"title":"Setting and clearing a lock","source":"$fd = dio_open('\/dev\/ttyS0', O_RDWR);\n\nif (dio_fcntl($fd, F_SETLK, Array(\"type\"=>F_WRLCK)) == -1) {\n   \/\/ the file descriptor appears locked\n   echo \"The lock can not be cleared. It is held by someone else.\";\n} else {\n   echo \"Lock successfully set\/cleared\";\n}\n\ndio_close($fd);","output":null}],"dio_open":[{"title":"Opening a file descriptor","source":"$fd = dio_open('\/dev\/ttyS0', O_RDWR | O_NOCTTY | O_NONBLOCK);\n\ndio_close($fd);","output":null}],"dio_seek":[{"title":"Positioning in a file","source":"$fd = dio_open('\/dev\/ttyS0', O_RDWR);\n\ndio_seek($fd, 10, SEEK_SET);\n\/\/ position is now at 10 characters from the start of the file\n\ndio_seek($fd, -2, SEEK_CUR);\n\/\/ position is now at 8 characters from the start of the file\n\ndio_seek($fd, -5, SEEK_END);\n\/\/ position is now at 5 characters from the end of the file\n\ndio_seek($fd, 10, SEEK_END);\n\/\/ position is now at 10 characters past the end of the file. \n\/\/ The 10 characters between the end of the file and the current\n\/\/ position are filled with zeros.\n\ndio_close($fd);","output":null}],"dio_tcsetattr":[{"title":"Setting the baud rate on a serial port","source":"$fd = dio_open('\/dev\/ttyS0', O_RDWR | O_NOCTTY | O_NONBLOCK);\n\ndio_fcntl($fd, F_SETFL, O_SYNC);\n\ndio_tcsetattr($fd, array(\n  'baud' => 9600,\n  'bits' => 8,\n  'stop'  => 1,\n  'parity' => 0\n)); \n\nwhile (1) {\n\n  $data = dio_read($fd, 256);\n\n  if ($data) {\n      echo $data;\n  }\n}","output":null}],"dir":[{"title":"dir() example","source":"$d = dir(\"\/etc\/php5\");\necho \"Handle: \" . $d->handle . \"\\n\";\necho \"Path: \" . $d->path . \"\\n\";\nwhile (false !== ($entry = $d->read())) {\n   echo $entry.\"\\n\";\n}\n$d->close();","output":"Handle: Resource id #2\nPath: \/etc\/php5\n.\n..\napache\ncgi\ncli"}],"dirname":[{"title":"dirname() example","source":"echo dirname(\"\/etc\/passwd\") . PHP_EOL;\necho dirname(\"\/etc\/\") . PHP_EOL;\necho dirname(\".\") . PHP_EOL;\necho dirname(\"C:\\\\\") . PHP_EOL;\necho dirname(\"\/usr\/local\/lib\", 2);","output":"\/etc\n\/ (or \\ on Windows)\n.\nC:\\\n\/usr"}],"disk_free_space":[{"title":"disk_free_space() example","source":"\/\/ $df contains the number of bytes available on \"\/\"\n$df = disk_free_space(\"\/\");\n\n\/\/ On Windows:\n$df_c = disk_free_space(\"C:\");\n$df_d = disk_free_space(\"D:\");","output":null}],"disk_total_space":[{"title":"disk_total_space() example","source":"\/\/ $ds contains the total number of bytes available on \"\/\"\n$ds = disk_total_space(\"\/\");\n\n\/\/ On Windows:\n$ds = disk_total_space(\"C:\");\n$ds = disk_total_space(\"D:\");","output":null}],"dl":[{"title":"dl() examples","source":"\/\/ Example loading an extension based on OS\nif (!extension_loaded('sqlite')) {\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        dl('php_sqlite.dll');\n    } else {\n        dl('sqlite.so');\n    }\n}\n\n\/\/ Or using PHP_SHLIB_SUFFIX constant\nif (!extension_loaded('sqlite')) {\n    $prefix = (PHP_SHLIB_SUFFIX === 'dll') ? 'php_' : '';\n    dl($prefix . 'sqlite.' . PHP_SHLIB_SUFFIX);\n}","output":null}],"dns_get_record":[{"title":"Using dns_get_record()","source":"$result = dns_get_record(\"php.net\");\nprint_r($result);","output":"Array\n(\n    [0] => Array\n        (\n            [host] => php.net\n            [type] => MX\n            [pri] => 5\n            [target] => pair2.php.net\n            [class] => IN\n            [ttl] => 6765\n        )\n\n    [1] => Array\n        (\n            [host] => php.net\n            [type] => A\n            [ip] => 64.246.30.37\n            [class] => IN\n            [ttl] => 8125\n        )\n\n)"},{"title":"Using dns_get_record() and DNS_ANY","source":"\/* Request \"ANY\" record for php.net,\n   and create $authns and $addtl arrays\n   containing list of name servers and\n   any additional records which go with\n   them *\/\n$result = dns_get_record(\"php.net\", DNS_ANY, $authns, $addtl);\necho \"Result = \";\nprint_r($result);\necho \"Auth NS = \";\nprint_r($authns);\necho \"Additional = \";\nprint_r($addtl);","output":"Result = Array\n(\n    [0] => Array\n        (\n            [host] => php.net\n            [type] => MX\n            [pri] => 5\n            [target] => pair2.php.net\n            [class] => IN\n            [ttl] => 6765\n        )\n\n    [1] => Array\n        (\n            [host] => php.net\n            [type] => A\n            [ip] => 64.246.30.37\n            [class] => IN\n            [ttl] => 8125\n        )\n\n)\nAuth NS = Array\n(\n    [0] => Array\n        (\n            [host] => php.net\n            [type] => NS\n            [target] => remote1.easydns.com\n            [class] => IN\n            [ttl] => 10722\n        )\n\n    [1] => Array\n        (\n            [host] => php.net\n            [type] => NS\n            [target] => remote2.easydns.com\n            [class] => IN\n            [ttl] => 10722\n        )\n\n    [2] => Array\n        (\n            [host] => php.net\n            [type] => NS\n            [target] => ns1.easydns.com\n            [class] => IN\n            [ttl] => 10722\n        )\n\n    [3] => Array\n        (\n            [host] => php.net\n            [type] => NS\n            [target] => ns2.easydns.com\n            [class] => IN\n            [ttl] => 10722\n        )\n\n)\nAdditional = Array\n(\n    [0] => Array\n        (\n            [host] => pair2.php.net\n            [type] => A\n            [ip] => 216.92.131.5\n            [class] => IN\n            [ttl] => 6766\n        )\n\n    [1] => Array\n        (\n            [host] => remote1.easydns.com\n            [type] => A\n            [ip] => 64.39.29.212\n            [class] => IN\n            [ttl] => 100384\n        )\n\n    [2] => Array\n        (\n            [host] => remote2.easydns.com\n            [type] => A\n            [ip] => 212.100.224.80\n            [class] => IN\n            [ttl] => 81241\n        )\n\n    [3] => Array\n        (\n            [host] => ns1.easydns.com\n            [type] => A\n            [ip] => 216.220.40.243\n            [class] => IN\n            [ttl] => 81241\n        )\n\n    [4] => Array\n        (\n            [host] => ns2.easydns.com\n            [type] => A\n            [ip] => 216.220.40.244\n            [class] => IN\n            [ttl] => 81241\n        )\n\n)"}],"dom_import_simplexml":[{"title":"Import SimpleXML into DOM with dom_import_simplexml()","source":"$sxe = simplexml_load_string('<books><book><title>blah<\/title><\/book><\/books>');\n\nif ($sxe === false) {\n    echo 'Error while parsing the document';\n    exit;\n}\n\n$dom_sxe = dom_import_simplexml($sxe);\nif (!$dom_sxe) {\n    echo 'Error while converting XML';\n    exit;\n}\n\n$dom = new DOMDocument('1.0');\n$dom_sxe = $dom->importNode($dom_sxe, true);\n$dom_sxe = $dom->appendChild($dom_sxe);\n\necho $dom->saveXML();","output":null}],"each":[{"title":"each() examples","source":"$foo = array(\"bob\", \"fred\", \"jussi\", \"jouni\", \"egon\", \"marliese\");\n$bar = each($foo);\nprint_r($bar);","output":"Array\n(\n    [1] => bob\n    [value] => bob\n    [0] => 0\n    [key] => 0\n)"},{"title":"$bar now contains the following key\/value pairs:","source":"$foo = array(\"Robert\" => \"Bob\", \"Seppo\" => \"Sepi\");\n$bar = each($foo);\nprint_r($bar);","output":"Array\n(\n    [1] => Bob\n    [value] => Bob\n    [0] => Robert\n    [key] => Robert\n)"},{"title":"Traversing an array with each()","source":"$fruit = array('a' => 'apple', 'b' => 'banana', 'c' => 'cranberry');\n\nreset($fruit);\nwhile (list($key, $val) = each($fruit)) {\n    echo \"$key => $val\\n\";\n}","output":"a => apple\nb => banana\nc => cranberry"}],"easter_date":[{"title":"easter_date() example","source":"echo date(\"M-d-Y\", easter_date(1999));        \/\/ Apr-04-1999\necho date(\"M-d-Y\", easter_date(2000));        \/\/ Apr-23-2000\necho date(\"M-d-Y\", easter_date(2001));        \/\/ Apr-15-2001","output":null},{"title":"The above example will output:","source":"function get_easter_datetime($year) {\n    $base = new DateTime(\"$year-03-21\");\n    $days = easter_days($year);\n\n    return $base->add(new DateInterval(\"P{$days}D\"));\n}\n\nforeach (range(2012, 2015) as $year) {\n    printf(\"Easter in %d is on %s\\n\",\n           $year,\n           get_easter_datetime($year)->format('F j'));\n}","output":"Easter in 2012 is on April 8\nEaster in 2013 is on March 31\nEaster in 2014 is on April 20\nEaster in 2015 is on April 5"}],"easter_days":[{"title":"easter_days() example","source":"echo easter_days(1999);        \/\/ 14, i.e. April 4\necho easter_days(1492);        \/\/ 32, i.e. April 22\necho easter_days(1913);        \/\/  2, i.e. March 23","output":null}],"echo":[{"title":null,"source":"I have <?=$foo?> foo.","output":null},{"title":"echo examples","source":"echo \"Hello World\";\n\necho \"This spans\nmultiple lines. The newlines will be\noutput as well\";\n\necho \"This spans\\nmultiple lines. The newlines will be\\noutput as well.\";\n\necho \"Escaping characters is done \\\"Like this\\\".\";\n\n\/\/ You can use variables inside of an echo statement\n$foo = \"foobar\";\n$bar = \"barbaz\";\n\necho \"foo is $foo\"; \/\/ foo is foobar\n\n\/\/ You can also use arrays\n$baz = array(\"value\" => \"foo\");\n\necho \"this is {$baz['value']} !\"; \/\/ this is foo !\n\n\/\/ Using single quotes will print the variable name, not the value\necho 'foo is $foo'; \/\/ foo is $foo\n\n\/\/ If you are not using any other characters, you can just echo variables\necho $foo;          \/\/ foobar\necho $foo,$bar;     \/\/ foobarbarbaz\n\n\/\/ Strings can either be passed individually as multiple arguments or\n\/\/ concatenated together and passed as a single argument\necho 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', chr(10);\necho 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . \"\\n\";\n\necho <<<END\nThis uses the \"here document\" syntax to output\nmultiple lines with $variable interpolation. Note\nthat the here document terminator must appear on a\nline with just a semicolon. no extra whitespace!\nEND;\n\n\/\/ Because echo does not behave like a function, the following code is invalid.\n($some_var) ? echo 'true' : echo 'false';\n\n\/\/ However, the following examples will work:\n($some_var) ? print 'true' : print 'false'; \/\/ print is also a construct, but\n                                            \/\/ it behaves like a function, so\n                                            \/\/ it may be used in this context.\necho $some_var ? 'true': 'false'; \/\/ changing the statement around","output":null}],"eio_cancel":[{"title":"eio_cancel() example","source":"\/* Is called when eio_nop() finished *\/\n function my_nop_cb($data, $result) {\n  echo \"my_nop \", $data, \"\\n\";\n }\n\n\/\/ This eio_nop() call will be cancelled\n$req = eio_nop(EIO_PRI_DEFAULT, \"my_nop_cb\", \"1\");\nvar_dump($req);\neio_cancel($req);\n\n\/\/ This time eio_nop() will be processed\neio_nop(EIO_PRI_DEFAULT, \"my_nop_cb\", \"2\");\n\n\/\/ Process requests\neio_event_loop();","output":"resource(4) of type (EIO Request Descriptor)\nmy_nop 2"}],"eio_custom":[{"title":"eio_custom() example","source":"\/* Callback for the custom callback *\/\nfunction my_custom_callback($data, $result) {\n    var_dump($data);\n    var_dump(count($result));\n    var_dump($result['data_modified']);\n    var_dump($result['result']);\n}\n\n\/* The custom request *\/\nfunction my_custom($data) {\n    var_dump($data);\n\n    $result  = array(\n        'result'        => 1001,\n        'data_modified' => \"my custom data\",\n    );\n\n    return $result;\n}\n\n$data = \"my_custom_data\";\n$req = eio_custom(\"my_custom\", EIO_PRI_DEFAULT, \"my_custom_callback\", $data);\nvar_dump($req);\neio_event_loop();","output":"resource(4) of type (EIO Request Descriptor)\nstring(14) \"my_custom_data\"\nstring(14) \"my_custom_data\"\nint(2)\nstring(14) \"my custom data\"\nint(1001)"}],"eio_event_loop":[{"title":"eio_event_loop() example","source":"$temp_filename = \"eio-temp-file.tmp\";\ntouch($temp_filename);\n\n\/* Is called when eio_chmod() finished *\/\nfunction my_chmod_callback($data, $result) {\n    global $temp_filename;\n\n    if ($result == 0 && !is_readable($temp_filename) && is_writable($temp_filename)) {\n        echo \"eio_chmod_ok\";\n    }\n\n    @unlink($temp_filename);\n}\n\neio_chmod($temp_filename, 0200, EIO_PRI_DEFAULT, \"my_chmod_callback\");\neio_event_loop();","output":"eio_chmod_ok"}],"eio_fstat":[{"title":"eio_lstat() example","source":"\/\/ Create temporary file\n$tmp_filename = dirname(__FILE__) .\"\/eio-file.tmp\";\ntouch($tmp_filename);\n\n\/* Is called when eio_fstat() done *\/\nfunction my_res_cb($data, $result) {\n \/\/ Should output array with stat info\n var_dump($result);\n\n if ($data['fd']) {\n  \/\/ Close temporary file\n  eio_close($data['fd']);\n  eio_event_loop();\n }\n \/\/ Remove temporary file\n @unlink($data['file']);\n}\n\n\/* Is called when eio_open() done *\/\nfunction my_open_cb($data, $result) {\n \/\/ Prepare data for callback\n $d = array(\n  'fd'  => $result,\n  'file'=> $data\n );\n \/\/ Request stat info\n eio_fstat($result, EIO_PRI_DEFAULT, \"my_res_cb\", $d);\n \/\/ Process request(s)\n eio_event_loop();\n}\n\n\/\/ Open temporary file\neio_open($tmp_filename, EIO_O_RDONLY, NULL, EIO_PRI_DEFAULT,\n  \"my_open_cb\", $tmp_filename);\neio_event_loop();","output":"array(12) {\n [\"st_dev\"]=>\n  int(2050)\n  [\"st_ino\"]=>\n  int(2489159)\n  [\"st_mode\"]=>\n  int(33188)\n  [\"st_nlink\"]=>\n  int(1)\n  [\"st_uid\"]=>\n  int(1000)\n  [\"st_gid\"]=>\n  int(100)\n  [\"st_rdev\"]=>\n  int(0)\n  [\"st_blksize\"]=>\n  int(4096)\n  [\"st_blocks\"]=>\n  int(0)\n  [\"st_atime\"]=>\n  int(1318239506)\n  [\"st_mtime\"]=>\n  int(1318239506)\n  [\"st_ctime\"]=>\n  int(1318239506)\n}"}],"eio_get_event_stream":[{"title":"Using eio with libevent","source":"function my_eio_poll($fd, $events, $arg) {\n    \/* Some libevent regulation might go here .. *\/\n    if (eio_nreqs()) {\n        eio_poll();\n    }\n    \/* .. and here *\/\n}\n\nfunction my_res_cb($d, $r) {\n    var_dump($r); var_dump($d);\n}\n\n$base = event_base_new();\n$event = event_new();\n\n$fd = eio_get_event_stream();\nvar_dump($fd);\n\neio_nop(EIO_PRI_DEFAULT, \"my_res_cb\", \"nop data\");\neio_mkdir(\"\/tmp\/abc-eio-temp\", 0750, EIO_PRI_DEFAULT, \"my_res_cb\", \"mkdir data\");\n\/* some other eio_* calls here ... *\/\n\n\n\/\/ set event flags\nevent_set($event, $fd, EV_READ \/*| EV_PERSIST*\/, \"my_eio_poll\", array($event, $base));\n\n\/\/ set event base \nevent_base_set($event, $base);\n\n\/\/ enable event\nevent_add($event);\n\n\/\/ start event loop\nevent_base_loop($base);\n\n\/* The same will be available via buffered libevent interface *\/","output":"int(3)\nint(0)\nstring(8) \"nop data\"\nint(0)\nstring(10) \"mkdir data\""}],"eio_grp_add":[{"title":"Grouping requests","source":"\/*\n * Create a group request to open, read and close a file\n *\/\n\n\/\/ Create temporary file and write some bytes to it\n$temp_filename = dirname(__FILE__) .\"\/eio-file.tmp\";\n$fp = fopen($temp_filename, \"w\");\nfwrite($fp, \"some data\");\nfclose($fp);\n\n\/* Is called when the group requests are done *\/\nfunction my_grp_done($data, $result) {\n var_dump($result == 0);\n @unlink($data);\n}\n\n\/* Is called when eio_open() done *\/\nfunction my_grp_file_opened_callback($data, $result) {\n global $grp;\n\n \/\/ $result should contain the file descriptor\n var_dump($result > 0);\n\n \/\/ Create eio_read() request and add it to the group\n \/\/ Pass file descriptor to the callback\n $req = eio_read($result, 4, 0,\n   EIO_PRI_DEFAULT, \"my_grp_file_read_callback\", $result);\n eio_grp_add($grp, $req);\n}\n\n\/* Is called when eio_read() done *\/\nfunction my_grp_file_read_callback($data, $result) {\n global $grp;\n\n \/\/ Read bytes\n var_dump($result);\n\n \/\/ Create eio_close() request and add it to the group\n \/\/ $data should contain the file descriptor\n $req = eio_close($data);\n eio_grp_add($grp, $req);\n}\n\n\/\/ Create request group\n$grp = eio_grp(\"my_grp_done\", $temp_filename);\nvar_dump($grp);\n\n\/\/ Create eio_open() request and add it to the group\n$req = eio_open($temp_filename, EIO_O_RDWR | EIO_O_APPEND , NULL,\n  EIO_PRI_DEFAULT, \"my_grp_file_opened_callback\", NULL);\neio_grp_add($grp, $req);\n\n\/\/ Process requests\neio_event_loop();","output":"resource(6) of type (EIO Group Descriptor)\nbool(true)\nstring(4) \"some\"\nbool(true)"}],"eio_grp":[{"title":"eio_grp() example","source":"$temp_filename = dirname(__FILE__) .\"\/eio-file.tmp\";\n$fp = fopen($temp_filename, \"w\");\nfwrite($fp, \"some data\");\nfclose($fp);\n$my_file_fd = NULL;\n\n\/* Is called when the group requests are done *\/\nfunction my_grp_done($data, $result) {\n \/\/ Remove the file, if it still exists\n @unlink($data);\n}\n\n\/* Is called when the temporary file is opened *\/\nfunction my_grp_file_opened_callback($data, $result) {\n global $my_file_fd, $grp;\n\n $my_file_fd = $result;\n\n $req = eio_read($my_file_fd, 4, 0,\n   EIO_PRI_DEFAULT, \"my_grp_file_read_callback\");\n eio_grp_add($grp, $req);\n}\n\n\/* Is called when the file is read *\/\nfunction my_grp_file_read_callback($data, $result) {\n global $my_file_fd, $grp;\n\n var_dump($result);\n\n \/\/ Create request to close the file\n $req = eio_close($my_file_fd);\n\n \/\/ Add request to the group\n eio_grp_add($grp, $req);\n}\n\n\/\/ Create request group\n$grp = eio_grp(\"my_grp_done\", $temp_filename);\n\n\/\/ Create request\n$req = eio_open($temp_filename, EIO_O_RDWR | EIO_O_APPEND , NULL,\n  EIO_PRI_DEFAULT, \"my_grp_file_opened_callback\", NULL);\n\n\/\/ Add request to the group\neio_grp_add($grp, $req);\n\n\/\/ Process requests\neio_event_loop();","output":"string(4) \"some\""}],"eio_link":[{"title":"eio_link() example","source":"$filename = dirname(__FILE__).\"\/symlink.dat\";\ntouch($filename);\n$link = dirname(__FILE__).\"\/symlink.link\";\n$hardlink = dirname(__FILE__).\"\/hardlink.link\";\n\nfunction my_hardlink_cb($data, $result) {\n    global $link, $filename;\n    var_dump(file_exists($data) && !is_link($data));\n    @unlink($data);\n\n    eio_symlink($filename, $link, EIO_PRI_DEFAULT, \"my_symlink_cb\", $link);\n}\n\nfunction my_symlink_cb($data, $result) {\n    global $link, $filename;\n    var_dump(file_exists($data) && is_link($data));\n\n    if (!eio_readlink($data, EIO_PRI_DEFAULT, \"my_readlink_cb\", NULL)) {\n        @unlink($link);\n        @unlink($filename);\n    }\n}\n\nfunction my_readlink_cb($data, $result) {\n    global $filename, $link;\n    var_dump($result);\n\n    @unlink($link);\n    @unlink($filename);\n}\n\neio_link($filename, $hardlink, EIO_PRI_DEFAULT, \"my_hardlink_cb\", $hardlink);\neio_event_loop();","output":"bool(true)\nbool(true)\nstring(%d) \"%ssymlink.dat\""}],"eio_lstat":[{"title":"eio_lstat() example","source":"$tmp_filename = dirname(__FILE__). \"\/eio-file.tmp\";\ntouch($tmp_filename);\n\nfunction my_res_cb($data, $result) {\n    var_dump($data);\n    var_dump($result);\n}\n\nfunction my_open_cb($data, $result) {\n    eio_close($result);\n    eio_event_loop();\n\n    @unlink($data);\n}\n\neio_lstat($tmp_filename, EIO_PRI_DEFAULT, \"my_res_cb\", \"eio_lstat\");\neio_open($tmp_filename, EIO_O_RDONLY, NULL,\n EIO_PRI_DEFAULT, \"my_open_cb\", $tmp_filename);\neio_event_loop();","output":"string(9) \"eio_lstat\"\narray(12) {\n [\"st_dev\"]=>\n  int(2050)\n  [\"st_ino\"]=>\n  int(2099197)\n  [\"st_mode\"]=>\n  int(33188)\n  [\"st_nlink\"]=>\n  int(1)\n  [\"st_uid\"]=>\n  int(1000)\n  [\"st_gid\"]=>\n  int(100)\n  [\"st_rdev\"]=>\n  int(0)\n  [\"st_blksize\"]=>\n  int(4096)\n  [\"st_blocks\"]=>\n  int(0)\n  [\"st_atime\"]=>\n  int(1318235777)\n  [\"st_mtime\"]=>\n  int(1318235777)\n  [\"st_ctime\"]=>\n  int(1318235777)\n}"}],"eio_mkdir":[{"title":"eio_mkdir() example","source":"$temp_dirname = \"eio-temp-dir\";\n\n\/* Is called when eio_mkdir() finishes *\/\nfunction my_mkdir_callback($data, $result) {\n if ($result == 0 && is_dir($temp_dirname)\n   && !is_readable($temp_dirname)\n   && is_writable($temp_dirname)) {\n  echo \"eio_mkdir_ok\";\n }\n\n \/\/ Remove directory\n    if (file_exists($data))\n        rmdir($temp_dirname);\n}\n\n\/\/ Create directory with access mode 0300\neio_mkdir($temp_dirname, 0300, EIO_PRI_DEFAULT, \"my_mkdir_callback\", $temp_dirname);\neio_event_loop();","output":"eio_mkdir_ok"}],"eio_mknod":[{"title":"eio_mknod() example","source":"\/\/ FIFO name\n$temp_filename = \"\/tmp\/eio-temp-fifo\";\n\n\/* Is called when eio_mknod() finishes *\/\nfunction my_mknod_callback($data, $result) {\n    $s = stat($data);\n    var_dump($s);\n\n    if ($result == 0) {\n        echo \"eio_mknod_ok\";\n    }\n\n    @unlink($data);\n}\n\neio_mknod($temp_filename, EIO_S_IFIFO, 0,\n    EIO_PRI_DEFAULT, \"my_mknod_callback\", $temp_filename);\neio_event_loop();","output":"array(26) {\n  [0]=>\n  int(17)\n  [1]=>\n  int(2337608)\n  [2]=>\n  int(4096)\n  [3]=>\n  int(1)\n  [4]=>\n  int(1000)\n  [5]=>\n  int(100)\n  [6]=>\n  int(0)\n  [7]=>\n  int(0)\n  [8]=>\n  int(1318241261)\n  [9]=>\n  int(1318241261)\n  [10]=>\n  int(1318241261)\n  [11]=>\n  int(4096)\n  [12]=>\n  int(0)\n  [\"dev\"]=>\n  int(17)\n  [\"ino\"]=>\n  int(2337608)\n  [\"mode\"]=>\n  int(4096)\n  [\"nlink\"]=>\n  int(1)\n  [\"uid\"]=>\n  int(1000)\n  [\"gid\"]=>\n  int(100)\n  [\"rdev\"]=>\n  int(0)\n  [\"size\"]=>\n  int(0)\n  [\"atime\"]=>\n  int(1318241261)\n  [\"mtime\"]=>\n  int(1318241261)\n  [\"ctime\"]=>\n  int(1318241261)\n  [\"blksize\"]=>\n  int(4096)\n  [\"blocks\"]=>\n  int(0)\n}\neio_mknod_ok"}],"eio_nreqs":[{"title":"eio_nreqs() example","source":"function res_cb($data, $result) {\n    var_dump($data);\n    var_dump($result);\n}\n\neio_nop(EIO_PRI_DEFAULT, \"res_cb\", \"1\");\neio_nop(EIO_PRI_DEFAULT, \"res_cb\", \"2\");\neio_nop(EIO_PRI_DEFAULT, \"res_cb\", \"3\");\n\nwhile (eio_nreqs()) {\n    eio_poll();\n}","output":"string(1) \"1\"\nint(0)\nstring(1) \"3\"\nint(0)\nstring(1) \"2\"\nint(0)"}],"eio_open":[{"title":"eio_open() example","source":"$temp_filename = \"eio-temp-file.tmp\";\n\n\/* Is called when eio_close() finishes *\/\nfunction my_close_cb($data, $result) {\n \/\/ Zero indicates success\n    var_dump($result == 0);\n @unlink($data);\n}\n\n\/* Is called when eio_open() finishes *\/\nfunction my_file_opened_callback($data, $result) {\n \/\/ $result should contain the file descriptor\n    var_dump($result > 0);\n\n    if ($result > 0) {\n  \/\/ Close the file\n        eio_close($result, EIO_PRI_DEFAULT, \"my_close_cb\", $data);\n        eio_event_loop();\n    }\n}\n\n\/\/ Create new file for reading and writing\n\/\/ Deny group and others to do anything with that file\neio_open($temp_filename, EIO_O_CREAT | EIO_O_RDWR, EIO_S_IRUSR | EIO_S_IWUSR,\n  EIO_PRI_DEFAULT, \"my_file_opened_callback\", $temp_filename);\neio_event_loop();","output":"bool(true)\nbool(true)"}],"eio_poll":[{"title":"eio_poll() example","source":"function res_cb($data, $result) {\n    var_dump($data);\n    var_dump($result);\n}\n\neio_nop(EIO_PRI_DEFAULT, \"res_cb\", \"1\");\neio_nop(EIO_PRI_DEFAULT, \"res_cb\", \"2\");\neio_nop(EIO_PRI_DEFAULT, \"res_cb\", \"3\");\n\nwhile (eio_nreqs()) {\n    \/\/ Some specific IPC or so\n    eio_poll();\n}","output":"string(1) \"1\"\nint(0)\nstring(1) \"3\"\nint(0)\nstring(1) \"2\"\nint(0)"}],"eio_read":[{"title":"eio_read() example","source":"\/\/ Open a temporary file and write some bytes there\n$temp_filename = \"eio-temp-file.tmp\";\n$fp = fopen($temp_filename, \"w\");\nfwrite($fp, \"1234567890\");\nfclose($fp);\n\n\/* Is called when eio_read() is done *\/\nfunction my_read_cb($data, $result) {\n    global $temp_filename;\n\n \/\/ Output read bytes\n    var_dump($result);\n\n \/\/ Close file\n    eio_close($data);\n    eio_event_loop();\n\n \/\/ Remove temporary file\n    @unlink($temp_filename);\n}\n\n\/* Is called when eio_open() is done *\/\nfunction my_file_opened_callback($data, $result) {\n \/\/ $result should contain the file descriptor\n    if ($result > 0) {\n  \/\/ Read 5 bytes starting from third\n        eio_read($result, 5, 2, EIO_PRI_DEFAULT, \"my_read_cb\", $result);\n        eio_event_loop();\n    } else {\n  \/\/ eio_open() failed\n        unlink($data);\n    }\n}\n\n\/\/ Open the file for reading and writing\neio_open($temp_filename, EIO_O_RDWR, NULL,\n    EIO_PRI_DEFAULT, \"my_file_opened_callback\", $temp_filename);\neio_event_loop();","output":"string(5) \"34567\""}],"eio_readdir":[{"title":"eio_readdir() example","source":"\/* Is called when eio_readdir() finishes *\/\nfunction my_readdir_callback($data, $result) {\n    echo __FUNCTION__, \" called\\n\";\n    echo \"data: \"; var_dump($data);\n    echo \"result: \"; var_dump($result);\n    echo \"\\n\";\n}\n\neio_readdir(\"\/var\/spool\/news\", EIO_READDIR_STAT_ORDER | EIO_READDIR_DIRS_FIRST,\n  EIO_PRI_DEFAULT, \"my_readdir_callback\");\neio_event_loop();","output":"my_readdir_callback called\ndata: NULL\nresult: array(2) {\n [\"names\"]=>\n  array(7) {\n   [0]=>\n    string(7) \"archive\"\n    [1]=>\n    string(8) \"articles\"\n    [2]=>\n    string(8) \"incoming\"\n    [3]=>\n    string(7) \"innfeed\"\n    [4]=>\n    string(8) \"outgoing\"\n    [5]=>\n    string(8) \"overview\"\n    [6]=>\n    string(3) \"tmp\"\n  }\n [\"dents\"]=>\n  array(7) {\n   [0]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(7)\n      \"archive\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393265)\n    }\n   [1]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(8)\n      \"articles\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393266)\n    }\n   [2]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(8)\n      \"incoming\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393267)\n    }\n   [3]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(7)\n      \"innfeed\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393269)\n    }\n   [4]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(8)\n      \"outgoing\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393270)\n    }\n   [5]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(8)\n      \"overview\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393271)\n    }\n   [6]=>\n    array(3)\n    {\n     [\"name\"]=>\n      string(3)\n      \"tmp\"\n      [\"type\"]=>\n      int(4)\n      [\"inode\"]=>\n      int(393272)\n    }\n  }\n}"}],"eio_readlink":[{"title":"eio_readlink() example","source":"$filename = dirname(__FILE__).\"\/symlink.dat\";\ntouch($filename);\n$link = dirname(__FILE__).\"\/symlink.link\";\n$hardlink = dirname(__FILE__).\"\/hardlink.link\";\n\nfunction my_hardlink_cb($data, $result) {\n    global $link, $filename;\n    var_dump(file_exists($data) && !is_link($data));\n    @unlink($data);\n\n    eio_symlink($filename, $link, EIO_PRI_DEFAULT, \"my_symlink_cb\", $link);\n}\n\nfunction my_symlink_cb($data, $result) {\n    global $link, $filename;\n    var_dump(file_exists($data) && is_link($data));\n\n    if (!eio_readlink($data, EIO_PRI_DEFAULT, \"my_readlink_cb\", NULL)) {\n        @unlink($link);\n        @unlink($filename);\n    }\n}\n\nfunction my_readlink_cb($data, $result) {\n    global $filename, $link;\n    var_dump($result);\n\n    @unlink($link);\n    @unlink($filename);\n}\n\neio_link($filename, $hardlink, EIO_PRI_DEFAULT, \"my_hardlink_cb\", $hardlink);\neio_event_loop();","output":"bool(true)\nbool(true)\nstring(16) \"\/tmp\/symlink.dat\""}],"eio_realpath":[{"title":"eio_realpath() example","source":"var_dump(getcwd());\n\nfunction my_realpath_allback($data, $result) {\n    var_dump($result);\n}\n\neio_realpath(\"..\/\", EIO_PRI_DEFAULT, \"my_realpath_allback\");\neio_event_loop();","output":"string(12) \"\/home\/ruslan\"\nstring(5) \"\/home\""}],"eio_rename":[{"title":"eio_rename() example","source":"$filename = dirname(__FILE__).\"\/eio-temp-file.dat\";\ntouch($filename);\n$new_filename = dirname(__FILE__).\"\/eio-temp-file-new.dat\";\n\nfunction my_rename_cb($data, $result) {\n    global $filename, $new_filename;\n\n    if ($result == 0 && !file_exists($filename) && file_exists($new_filename)) {\n        @unlink($new_filename);\n        echo \"eio_rename_ok\";\n    } else {\n        @unlink($filename);\n    }\n}\n\neio_rename($filename, $new_filename, EIO_PRI_DEFAULT, \"my_rename_cb\", $filename);\neio_event_loop();","output":"eio_rename_ok"}],"eio_rmdir":[{"title":"eio_rmdir() example","source":"$temp_dirname = \"eio-temp-dir\";\nmkdir($temp_dirname);\n\nfunction my_rmdir_callback($data, $result) {\n    if ($result == 0 && !file_exists($data)) {\n        echo \"eio_rmdir_ok\";\n    } else if (file_exists($data)) {\n        rmdir($data);\n    }\n}\n\n\neio_rmdir($temp_dirname, EIO_PRI_DEFAULT, \"my_rmdir_callback\", $temp_dirname);\neio_event_loop();","output":"eio_rmdir_ok"}],"eio_stat":[{"title":"eio_stat() example","source":"$tmp_filename = \"eio-file.tmp\";\ntouch($tmp_filename);\n\nfunction my_res_cb($data, $result) {\n    var_dump($data);\n    var_dump($result);\n}\n\nfunction my_open_cb($data, $result) {\n    eio_close($result);\n    eio_event_loop();\n\n    @unlink($data);\n}\n\neio_stat($tmp_filename, EIO_PRI_DEFAULT, \"my_res_cb\", \"eio_stat\");\neio_open($tmp_filename, EIO_O_RDONLY, NULL,\n EIO_PRI_DEFAULT, \"my_open_cb\", $tmp_filename);\neio_event_loop();","output":"string(8) \"eio_stat\"\narray(12) {\n  [\"st_dev\"]=>\n  int(2050)\n  [\"st_ino\"]=>\n  int(2489173)\n  [\"st_mode\"]=>\n  int(33188)\n  [\"st_nlink\"]=>\n  int(1)\n  [\"st_uid\"]=>\n  int(1000)\n  [\"st_gid\"]=>\n  int(100)\n  [\"st_rdev\"]=>\n  int(0)\n  [\"st_blksize\"]=>\n  int(4096)\n  [\"st_blocks\"]=>\n  int(0)\n  [\"st_atime\"]=>\n  int(1318250380)\n  [\"st_mtime\"]=>\n  int(1318250380)\n  [\"st_ctime\"]=>\n  int(1318250380)\n}"}],"eio_statvfs":[{"title":"eio_statvfs() example","source":"$tmp_filename = '\/tmp\/eio-file.tmp';\ntouch($tmp_filename);\n\nfunction my_statvfs_callback($data, $result) {\n    var_dump($data);\n    var_dump($result);\n\n @unlink($data);\n}\n\neio_statvfs($tmp_filename, EIO_PRI_DEFAULT, \"my_statvfs_callback\", $tmp_filename);\neio_event_loop();","output":"string(17) \"\/tmp\/eio-file.tmp\"\narray(11) {\n  [\"f_bsize\"]=>\n  int(4096)\n  [\"f_frsize\"]=>\n  int(4096)\n  [\"f_blocks\"]=>\n  int(262144)\n  [\"f_bfree\"]=>\n  int(262111)\n  [\"f_bavail\"]=>\n  int(262111)\n  [\"f_files\"]=>\n  int(1540815)\n  [\"f_ffree\"]=>\n  int(1540743)\n  [\"f_favail\"]=>\n  int(1540743)\n  [\"f_fsid\"]=>\n  int(0)\n  [\"f_flag\"]=>\n  int(4102)\n  [\"f_namemax\"]=>\n  int(255)\n}"}],"eio_symlink":[{"title":"eio_symlink() example","source":"$filename = dirname(__FILE__).\"\/symlink.dat\";\ntouch($filename);\n$link = dirname(__FILE__).\"\/symlink.link\";\n\nfunction my_symlink_cb($data, $result) {\n    global $link, $filename;\n    var_dump(file_exists($data) && is_link($data));\n\n    if (!eio_readlink($data, EIO_PRI_DEFAULT, \"my_readlink_cb\", NULL)) {\n        @unlink($link);\n        @unlink($filename);\n    }\n}\n\nfunction my_readlink_cb($data, $result) {\n    global $filename, $link;\n    var_dump($result);\n\n    @unlink($link);\n    @unlink($filename);\n}\n\neio_symlink($filename, $link, EIO_PRI_DEFAULT, \"my_symlink_cb\", $link);\neio_event_loop();","output":"bool(true)\nstring(16) \"\/tmp\/symlink.dat\""}],"empty":[{"title":"A simple empty() \/ isset() comparison.","source":"$var = 0;\n\n\/\/ Evaluates to true because $var is empty\nif (empty($var)) {\n    echo '$var is either 0, empty, or not set at all';\n}\n\n\/\/ Evaluates as true because $var is set\nif (isset($var)) {\n    echo '$var is set even though it is empty';\n}","output":null},{"title":"empty() on String Offsets","source":"$expected_array_got_string = 'somestring';\nvar_dump(empty($expected_array_got_string['some_key']));\nvar_dump(empty($expected_array_got_string[0]));\nvar_dump(empty($expected_array_got_string['0']));\nvar_dump(empty($expected_array_got_string[0.5]));\nvar_dump(empty($expected_array_got_string['0.5']));\nvar_dump(empty($expected_array_got_string['0 Mostel']));","output":"bool(false)\nbool(false)\nbool(false)\nbool(false)\nbool(false)\nbool(false)"}],"enchant_broker_describe":[{"title":"List the backends provided by the given broker","source":"$r = enchant_broker_init();\n$bprovides = enchant_broker_describe($r);\necho \"Current broker provides the following backend(s):\\n\";\nprint_r($bprovides);","output":"Current broker provides the following backend(s):\nArray\n(\n    [0] => Array\n        (\n            [name] => aspell\n            [desc] => Aspell Provider\n            [file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n        )\n\n    [1] => Array\n        (\n            [name] => hspell\n            [desc] => Hspell Provider\n            [file] => \/usr\/lib\/enchant\/libenchant_hspell.so\n        )\n\n    [2] => Array\n        (\n            [name] => ispell\n            [desc] => Ispell Provider\n            [file] => \/usr\/lib\/enchant\/libenchant_ispell.so\n        )\n\n    [3] => Array\n        (\n            [name] => myspell\n            [desc] => Myspell Provider\n            [file] => \/usr\/lib\/enchant\/libenchant_myspell.so\n        )\n\n)"}],"enchant_broker_dict_exists":[{"title":"A enchant_broker_dict_exists() example","source":"$tag = 'en_US';\n$r = enchant_broker_init();\nif (enchant_broker_dict_exists($r,$tag)) {\n    echo $tag . \" dictionary found.\\n\";\n}","output":null}],"enchant_broker_list_dicts":[{"title":"List all available dictionaries for one broker","source":"$r = enchant_broker_init();\n$dicts = enchant_broker_list_dicts($r);\nprint_r($dicts);","output":"Array\n(\n    [0] => Array\n        (\n            [lang_tag] => de\n            [provider_name] => aspell\n            [provider_desc] => Aspell Provider\n            [provider_file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n        )\n\n    [1] => Array\n        (\n            [lang_tag] => de_DE\n            [provider_name] => aspell\n            [provider_desc] => Aspell Provider\n            [provider_file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n        )\n\n    [3] => Array\n        (\n            [lang_tag] => en\n            [provider_name] => aspell\n            [provider_desc] => Aspell Provider\n            [provider_file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n        )\n\n    [4] => Array\n        (\n            [lang_tag] => en_GB\n            [provider_name] => aspell\n            [provider_desc] => Aspell Provider\n            [provider_file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n        )\n\n    [5] => Array\n        (\n            [lang_tag] => en_US\n            [provider_name] => aspell\n            [provider_desc] => Aspell Provider\n            [provider_file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n        )\n\n    [6] => Array\n        (\n            [lang_tag] => hi_IN\n            [provider_name] => myspell\n            [provider_desc] => Myspell Provider\n            [provider_file] => \/usr\/lib\/enchant\/libenchant_myspell.so\n        )\n\n)"}],"enchant_broker_request_dict":[{"title":"A enchant_broker_request_dict() example","source":"$tag = 'en_US';\n$broker = enchant_broker_init();\nif (enchant_broker_dict_exists($broker,$tag)) {\n    $dict = enchant_broker_request_dict($r, $tag);\n}","output":null}],"enchant_dict_add_to_personal":[{"title":"Adding a word to a PWL","source":"$filename = '.\/my_word_list.pwl';\n$word = 'Supercalifragilisticexpialidocious';\n\n$broker = enchant_broker_init();\n$dict = enchant_broker_request_pwl_dict($broker, $filename);\n\nenchant_dict_add_to_personal($dict, $word);\n\nenchant_broker_free($broker);","output":null}],"enchant_dict_describe":[{"title":"A enchant_dict_describe() example","source":"$tag = 'en_US';\n$broker = enchant_broker_init();\nif (enchant_broker_dict_exists($broker,$tag)) {\n    $dict = enchant_broker_request_dict($r, $tag);\n    $dict_details = enchant_dict_describe($dict);\n    print_r($dict_details);\n}","output":"Array\n(\n    [lang] => en_US\n    [name] => aspell\n    [desc] => Aspell Provider\n    [file] => \/usr\/lib\/enchant\/libenchant_aspell.so\n)"}],"enchant_dict_quick_check":[{"title":"A enchant_dict_quick_check() example","source":"$tag = 'en_US';\n$r = enchant_broker_init();\n\nif (enchant_broker_dict_exists($r,$tag)) {\n    $d = enchant_broker_request_dict($r, $tag);\n    enchant_dict_quick_check($d, 'soong', $suggs);\n    print_r($suggs);\n}","output":"Array\n(\n    [0] => song\n    [1] => snog\n    [2] => soon\n    [3] => Sang\n    [4] => Sung\n    [5] => sang\n    [6] => sung\n    [7] => sponge\n    [8] => spongy\n    [9] => snag\n    [10] => snug\n    [11] => sonic\n    [12] => sing\n    [13] => songs\n    [14] => Son\n    [15] => Sonja\n    [16] => Synge\n    [17] => son\n    [18] => Sejong\n    [19] => sarong\n    [20] => sooner\n    [21] => Sony\n    [22] => sown\n    [23] => scone\n    [24] => song's\n)"}],"enchant_dict_suggest":[{"title":"A enchant_dict_suggest() example","source":"$tag = 'en_US';\n$r = enchant_broker_init();\nif (enchant_broker_dict_exists($r,$tag)) {\n    $d = enchant_broker_request_dict($r, $tag);\n\n    $wordcorrect = enchant_dict_check($d, \"soong\");\n    if (!$wordcorrect) {\n        $suggs = enchant_dict_suggest($d, \"soong\");\n        echo \"Suggestions for 'soong':\";\n        print_r($suggs);\n    }\n    enchant_broker_free_dict($d);\n}\nenchant_broker_free($r);","output":null}],"end":[{"title":"end() example","source":"$fruits = array('apple', 'banana', 'cranberry');\necho end($fruits); \/\/ cranberry","output":null}],"ereg_replace":[{"title":"ereg_replace() example","source":"$string = \"This is a test\";\necho str_replace(\" is\", \" was\", $string);\necho ereg_replace(\"( )is\", \"\\\\1was\", $string);\necho ereg_replace(\"(( )is)\", \"\\\\2was\", $string);","output":null},{"title":"ereg_replace() example","source":"\/* This will not work as expected. *\/\n$num = 4;\n$string = \"This string has four words.\";\n$string = ereg_replace('four', $num, $string);\necho $string;   \/* Output: 'This string has   words.' *\/\n\n\/* This will work. *\/\n$num = '4';\n$string = \"This string has four words.\";\n$string = ereg_replace('four', $num, $string);\necho $string;   \/* Output: 'This string has 4 words.' *\/","output":null},{"title":"Replace URLs with links","source":"$text = ereg_replace(\"[[:alpha:]]+:\/\/[^<>[:space:]]+[[:alnum:]\/]\",\n                     '<a href=\"\\\\0\">\\\\0<\/a>', $text);","output":null}],"ereg":[{"title":"ereg() example","source":"if (ereg (\"([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})\", $date, $regs)) {\n    echo \"$regs[3].$regs[2].$regs[1]\";\n} else {\n    echo \"Invalid date format: $date\";\n}","output":null}],"eregi_replace":[{"title":"Highlight search results","source":"$pattern = '(>[^<]*)('. quotemeta($_GET['search']) .')';\n$replacement = '\\\\1<span class=\"search\">\\\\2<\/span>';\n$body = eregi_replace($pattern, $replacement, $body);","output":null}],"eregi":[{"title":"eregi() example","source":"$string = 'XYZ';\nif (eregi('z', $string)) {\n    echo \"'$string' contains a 'z' or 'Z'!\";\n}","output":null}],"error_clear_last":[{"title":"An error_clear_last() example","source":"var_dump(error_get_last());\nerror_clear_last();\nvar_dump(error_get_last());\n\n@$a = $b;\n\nvar_dump(error_get_last());\nerror_clear_last();\nvar_dump(error_get_last());","output":"NULL\nNULL\narray(4) {\n  [\"type\"]=>\n  int(8)\n  [\"message\"]=>\n  string(21) \"Undefined variable: b\"\n  [\"file\"]=>\n  string(9) \"%s\"\n  [\"line\"]=>\n  int(6)\n}\nNULL"}],"error_get_last":[{"title":"An error_get_last() example","source":"echo $a;\nprint_r(error_get_last());","output":"Array\n(\n    [type] => 8\n    [message] => Undefined variable: a\n    [file] => C:\\WWW\\index.php\n    [line] => 2\n)"}],"error_log":[{"title":"error_log() examples","source":"\/\/ Send notification through the server log if we can not\n\/\/ connect to the database.\nif (!Ora_Logon($username, $password)) {\n    error_log(\"Oracle database not available!\", 0);\n}\n\n\/\/ Notify administrator by email if we run out of FOO\nif (!($foo = allocate_new_foo())) {\n    error_log(\"Big trouble, we're all out of FOOs!\", 1,\n               \"operator@example.com\");\n}\n\n\/\/ another way to call error_log():\nerror_log(\"You messed up!\", 3, \"\/var\/tmp\/my-errors.log\");","output":null}],"error_reporting":[{"title":"error_reporting() examples","source":"\/\/ Turn off all error reporting\nerror_reporting(0);\n\n\/\/ Report simple running errors\nerror_reporting(E_ERROR | E_WARNING | E_PARSE);\n\n\/\/ Reporting E_NOTICE can be good too (to report uninitialized\n\/\/ variables or catch variable name misspellings ...)\nerror_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);\n\n\/\/ Report all errors except E_NOTICE\nerror_reporting(E_ALL & ~E_NOTICE);\n\n\/\/ Report all PHP errors (see changelog)\nerror_reporting(E_ALL);\n\n\/\/ Report all PHP errors\nerror_reporting(-1);\n\n\/\/ Same as error_reporting(E_ALL);\nini_set('error_reporting', E_ALL);","output":null}],"escapeshellarg":[{"title":"escapeshellarg() example","source":"system('ls '.escapeshellarg($dir));","output":null}],"escapeshellcmd":[{"title":"escapeshellcmd() example","source":"\/\/ We allow arbitrary number of arguments intentionally here.\n$command = '.\/configure '.$_POST['configure_options'];\n\n$escaped_command = escapeshellcmd($command);\n \nsystem($escaped_command);","output":null}],"eval":[{"title":"eval() example - simple text merge","source":"$string = 'cup';\n$name = 'coffee';\n$str = 'This is a $string with my $name in it.';\necho $str. \"\\n\";\neval(\"\\$str = \\\"$str\\\";\");\necho $str. \"\\n\";","output":"This is a $string with my $name in it.\nThis is a cup with my coffee in it."}],"exec":[{"title":"An exec() example","source":"\/\/ outputs the username that owns the running php\/httpd process\n\/\/ (on a system with the \"whoami\" executable in the path)\necho exec('whoami');","output":null}],"exif_imagetype":[{"title":"exif_imagetype() example","source":"if (exif_imagetype('image.gif') != IMAGETYPE_GIF) {\n    echo 'The picture is not a gif';\n}","output":null}],"exif_read_data":[{"title":"exif_read_data() example","source":"echo \"test1.jpg:<br \/>\\n\";\n$exif = exif_read_data('tests\/test1.jpg', 'IFD0');\necho $exif===false ? \"No header data found.<br \/>\\n\" : \"Image contains headers<br \/>\\n\";\n\n$exif = exif_read_data('tests\/test2.jpg', 0, true);\necho \"test2.jpg:<br \/>\\n\";\nforeach ($exif as $key => $section) {\n    foreach ($section as $name => $val) {\n        echo \"$key.$name: $val<br \/>\\n\";\n    }\n}","output":"test1.jpg:\nNo header data found.\ntest2.jpg:\nFILE.FileName: test2.jpg\nFILE.FileDateTime: 1017666176\nFILE.FileSize: 1240\nFILE.FileType: 2\nFILE.SectionsFound: ANY_TAG, IFD0, THUMBNAIL, COMMENT\nCOMPUTED.html: width=\"1\" height=\"1\"\nCOMPUTED.Height: 1\nCOMPUTED.Width: 1\nCOMPUTED.IsColor: 1\nCOMPUTED.ByteOrderMotorola: 1\nCOMPUTED.UserComment: Exif test image.\nCOMPUTED.UserCommentEncoding: ASCII\nCOMPUTED.Copyright: Photo (c) M.Boerger, Edited by M.Boerger.\nCOMPUTED.Copyright.Photographer: Photo (c) M.Boerger\nCOMPUTED.Copyright.Editor: Edited by M.Boerger.\nIFD0.Copyright: Photo (c) M.Boerger\nIFD0.UserComment: ASCII\nTHUMBNAIL.JPEGInterchangeFormat: 134\nTHUMBNAIL.JPEGInterchangeFormatLength: 523\nCOMMENT.0: Comment #1.\nCOMMENT.1: Comment #2.\nCOMMENT.2: Comment #3end\nTHUMBNAIL.JPEGInterchangeFormat: 134\nTHUMBNAIL.Thumbnail.Height: 1\nTHUMBNAIL.Thumbnail.Height: 1"}],"exif_tagname":[{"title":"exif_tagname() example","source":"echo \"256: \".exif_tagname(256).PHP_EOL;\necho \"257: \".exif_tagname(257).PHP_EOL;","output":"256: ImageWidth\n257: ImageLength"}],"exif_thumbnail":[{"title":"exif_thumbnail() example","source":"if (array_key_exists('file', $_REQUEST)) {\n    $image = exif_thumbnail($_REQUEST['file'], $width, $height, $type);\n} else {\n    $image = false;\n}\nif ($image!==false) {\n    header('Content-type: ' .image_type_to_mime_type($type));\n    echo $image;\n    exit;\n} else {\n    \/\/ no thumbnail available, handle the error here\n    echo 'No thumbnail available';\n}","output":null}],"exp":[{"title":"exp() example","source":"echo exp(12) . \"\\n\";\necho exp(5.7);","output":"1.6275E+005\n298.87"}],"expect_expectl":[{"title":"expect_expectl() example","source":"\/\/ Copies file from remote host:\nini_set(\"expect.timeout\", 30);\n\n$stream = fopen(\"expect:\/\/scp user@remotehost:\/var\/log\/messages \/home\/user\/messages.txt\", \"r\");\n\n$cases = array(\n    \/\/ array(pattern, value to return if pattern matched)\n    array(\"password:\", \"asked for password\"),\n    array(\"yes\/no)?\",  \"asked for yes\/no\")\n);\n\nwhile (true) {\n    switch (expect_expectl($stream, $cases)) {\n        case \"asked for password\":\n            fwrite($stream, \"my password\\n\");\n            break;\n        case \"asked for yes\/no\":\n            fwrite($stream, \"yes\\n\");\n            break;\n        case EXP_TIMEOUT:\n        case EXP_EOF:\n            break 2; \/\/ break both the switch statement and the while loop\n        default:\n            die \"Error has occurred!\";\n    }\n}\n\nfclose($stream);","output":null}],"expect_popen":[{"title":"expect_popen() example","source":"\/\/ Login to the PHP.net CVS repository:\n$stream = expect_popen (\"cvs -d :pserver:anonymous@cvs.php.net:\/repository login\");\nsleep (3);\nfwrite ($stream, \"phpfi\\n\");\nfclose ($stream);","output":null}],"explode":[{"title":"explode() examples","source":"\/\/ Example 1\n$pizza  = \"piece1 piece2 piece3 piece4 piece5 piece6\";\n$pieces = explode(\" \", $pizza);\necho $pieces[0]; \/\/ piece1\necho $pieces[1]; \/\/ piece2\n\n\/\/ Example 2\n$data = \"foo:*:1023:1000::\/home\/foo:\/bin\/sh\";\nlist($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(\":\", $data);\necho $user; \/\/ foo\necho $pass; \/\/ *","output":null},{"title":"explode() return examples","source":"\/* \n   A string that doesn't contain the delimiter will simply\n   return a one-length array of the original string.\n*\/\n$input1 = \"hello\";\n$input2 = \"hello,there\";\n$input3 = ',';\nvar_dump( explode( ',', $input1 ) );\nvar_dump( explode( ',', $input2 ) );\nvar_dump( explode( ',', $input3 ) );","output":"array(1)\n(\n    [0] => string(5) \"hello\"\n)\narray(2)\n(\n    [0] => string(5) \"hello\"\n    [1] => string(5) \"there\"\n)\narray(2)\n(\n    [0] => string(0) \"\"\n    [1] => string(0) \"\"\n)"},{"title":"limit parameter examples","source":"$str = 'one|two|three|four';\n\n\/\/ positive limit\nprint_r(explode('|', $str, 2));\n\n\/\/ negative limit (since PHP 5.1)\nprint_r(explode('|', $str, -1));","output":"Array\n(\n    [0] => one\n    [1] => two|three|four\n)\nArray\n(\n    [0] => one\n    [1] => two\n    [2] => three\n)"}],"extension_loaded":[{"title":"extension_loaded() example","source":"if (!extension_loaded('gd')) {\n    if (!dl('gd.so')) {\n        exit;\n    }\n}","output":null}],"extract":[{"title":"extract() example","source":"\/* Suppose that $var_array is an array returned from\n   wddx_deserialize *\/\n\n$size = \"large\";\n$var_array = array(\"color\" => \"blue\",\n                   \"size\"  => \"medium\",\n                   \"shape\" => \"sphere\");\nextract($var_array, EXTR_PREFIX_SAME, \"wddx\");\n\necho \"$color, $size, $shape, $wddx_size\\n\";","output":"blue, large, sphere, medium"}],"ezmlm_hash":[{"title":"Calculating the hash and subscribing a user","source":"$user = \"joecool@example.com\";\n$hash = ezmlm_hash($user);\n$query = sprintf(\"INSERT INTO sample VALUES (%s, '%s')\", $hash, $user);\n$db->query($query); \/\/ using PHPLIB db interface","output":null}],"fann_create_train_from_callback":[{"title":"fann_create_train_from_callback() example","source":"function create_train_callback($num_data, $num_input, $num_output) {\n    return array(\n        \"input\" => array_fill(0, $num_input, 1),\n        \"output\" => array_fill(0, $num_output, 1),\n    );\n}\n\n$num_data = 3;\n$num_input = 2;\n$num_output = 1;\n$train_data = fann_create_train_from_callback($num_data, $num_input, $num_output, \"create_train_callback\");\nif ($train_data) {\n    \/\/ Do something with $train_data\n}","output":null}],"fann_read_train_from_file":[{"title":"fann_read_train_from_file() example","source":"$train_data = fann_read_train_from_file(\"xor.data\");\nif ($train_data) {\n    \/\/ Do something with $train_data for XOR function\n}","output":null}],"fbsql_close":[{"title":"fbsql_close() example","source":"$link = fbsql_connect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\necho \"Connected successfully\";\nfbsql_close($link);","output":null}],"fbsql_connect":[{"title":"fbsql_connect() example","source":"$link = fbsql_connect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\necho \"Connected successfully\";\nfbsql_close($link);","output":null}],"fbsql_create_blob":[{"title":"fbsql_create_blob() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\n$filename = \"blobfile.bin\";\n$fp = fopen($filename, \"rb\");\n$blobdata = fread($fp, filesize($filename));\nfclose($fp);\n\n$blobHandle = fbsql_create_blob($blobdata, $link);\n\n$sql = \"INSERT INTO BLOB_TABLE (BLOB_COLUMN) VALUES ($blobHandle);\";\n$rs = fbsql_query($sql, $link);","output":null}],"fbsql_create_clob":[{"title":"fbsql_create_clob() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\n$filename = \"clob_file.txt\";\n$fp = fopen($filename, \"rb\");\n$clobdata = fread($fp, filesize($filename));\nfclose($fp);\n\n$clobHandle = fbsql_create_clob($clobdata, $link);\n\n$sql = \"INSERT INTO CLOB_TABLE (CLOB_COLUMN) VALUES ($clobHandle);\";\n$rs = fbsql_query($sql, $link);","output":null}],"fbsql_create_db":[{"title":"fbsql_create_db() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\nif (fbsql_create_db(\"my_db\")) {\n    echo \"Database created successfully\\n\";\n} else {\n    printf(\"Error creating database: %s\\n\", fbsql_error());\n}","output":null}],"fbsql_data_seek":[{"title":"fbsql_data_seek() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\n\nfbsql_select_db(\"samp_db\")\n    or die(\"Could not select database\");\n\n$query = \"SELECT last_name, first_name FROM friends;\";\n$result = fbsql_query($query)\n    or die(\"Query failed\");\n\n\/\/ fetch rows in reverse order\n\nfor ($i = fbsql_num_rows($result) - 1; $i >=0; $i--) {\n    if (!fbsql_data_seek($result, $i)) {\n        printf(\"Cannot seek to row %d\\n\", $i);\n        continue;\n    }\n\n    if (!($row = fbsql_fetch_object($result)))\n        continue;\n\n    echo $row->last_name . $row->first_name . \"<br \/>\\n\";\n}\n\nfbsql_free_result($result);","output":null}],"fbsql_database_password":[{"title":"fbsql_create_clob() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\nfbsql_database_password($link, \"secret db password\");\nfbsql_select_db($database, $link);","output":null}],"fbsql_errno":[{"title":"fbsql_errno() Example","source":"fbsql_connect(\"marliesle\");\necho fbsql_errno() . \": \" . fbsql_error() . \"<br \/>\";\nfbsql_select_db(\"nonexistentdb\");\necho fbsql_errno() . \": \" . fbsql_error() . \"<br \/>\";\n$conn = fbsql_query(\"SELECT * FROM nonexistenttable;\");\necho fbsql_errno() . \": \" . fbsql_error() . \"<br \/>\";","output":null}],"fbsql_error":[{"title":"fbsql_error() Example","source":"fbsql_connect(\"marliesle\");\necho fbsql_errno() . \": \" . fbsql_error() . \"<br \/>\";\nfbsql_select_db(\"nonexistentdb\");\necho fbsql_errno() . \": \" . fbsql_error() . \"<br \/>\";\n$conn = fbsql_query(\"SELECT * FROM nonexistenttable;\");\necho fbsql_errno() . \": \" . fbsql_error() . \"<br \/>\";","output":null}],"fbsql_fetch_array":[{"title":null,"source":"Fetch a result row as an associative array, a numeric array, or both\n fbsql_error\n fbsql_fetch_assoc\n FrontBase Functions\n PHP Manual\n\n \n  fbsql_fetch_array\n  (PHP 4 >= 4.0.6, PHP 5, PHP 7)fbsql_fetch_array — Fetch a result row as an associative array, a numeric array, or both\n\n \n \n \n  Description\n  \n   array fbsql_fetch_array\n    ( resource $result\n   [, int $result_type\n  ] )\n\n  \n   fbsql_fetch_array() is a combination of\n   fbsql_fetch_row() and \n   fbsql_fetch_assoc().\n  \n  \n   An important thing to note is that using\n   fbsql_fetch_array() is NOT significantly\n   slower than using fbsql_fetch_row(), while it\n   provides a significant added value.\n  \n \n\n\n \n  Parameters\n  \n   \n\nresult\n\nA result identifier\nreturned by fbsql_query() or\nfbsql_db_query().\n\n    \n     \nresult_type\n\n     \n\n      \n       A constant and can take the following values: \n       FBSQL_ASSOC, FBSQL_NUM, or\n       FBSQL_BOTH.\n      \n      \n       When using FBSQL_BOTH, in addition to storing the\n       data in the numeric indices of the result array, it also stores the\n       data in associative indices, using the field names as keys.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns an array that corresponds to the fetched row, or FALSE\n   if there are no more rows.\n  \n  \n   If two or more columns of the result have the same field names,\n   the last column will take precedence. To access the other column(s)\n   of the same name, you must the numeric index of the column or\n   make an alias for the column.\n   \n    \nselect t1.f1 as foo t2.f1 as bar from t1, t2\n\n    \n\n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fbsql_fetch_array() example\n    \n\n<?php\nfbsql_connect($host, $user, $password);\n$result = fbsql_db_query(\"database\", \"select user_id, fullname from table\");\nwhile ($row = fbsql_fetch_array($result)) {\n    echo \"user_id: \" . $row[\"user_id\"] . \"<br \/>\\n\";\n    echo \"user_id: \" . $row[0] . \"<br \/>\\n\";\n    echo \"fullname: \" . $row[\"fullname\"] . \"<br \/>\\n\";\n    echo \"fullname: \" . $row[1] . \"<br \/>\\n\";\n}\nfbsql_free_result($result);\n?>\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   fbsql_fetch_row() - Get a result row as an enumerated array\n    fbsql_fetch_assoc() - Fetch a result row as an associative array\n    fbsql_fetch_object() - Fetch a result row as an object\n   \n\n\n\n fbsql_error\n fbsql_fetch_assoc\n FrontBase Functions\n PHP Manual","output":null},{"title":"fbsql_fetch_array() example","source":"fbsql_connect($host, $user, $password);\n$result = fbsql_db_query(\"database\", \"select user_id, fullname from table\");\nwhile ($row = fbsql_fetch_array($result)) {\n    echo \"user_id: \" . $row[\"user_id\"] . \"<br \/>\\n\";\n    echo \"user_id: \" . $row[0] . \"<br \/>\\n\";\n    echo \"fullname: \" . $row[\"fullname\"] . \"<br \/>\\n\";\n    echo \"fullname: \" . $row[1] . \"<br \/>\\n\";\n}\nfbsql_free_result($result);","output":null}],"fbsql_fetch_assoc":[{"title":"fbsql_fetch_assoc() example","source":"fbsql_connect($host, $user, $password);\n$result = fbsql_db_query(\"database\", \"select * from table\");\nwhile ($row = fbsql_fetch_assoc($result)) {\n    echo $row[\"user_id\"];\n    echo $row[\"fullname\"];\n}\nfbsql_free_result($result);","output":null}],"fbsql_fetch_field":[{"title":"fbsql_fetch_field() example","source":"fbsql_connect($host, $user, $password)\n    or die(\"Could not connect\");\n$result = fbsql_db_query(\"database\", \"select * from table\")\n    or die(\"Query failed\");\n# get column metadata\n$i = 0;\nwhile ($i < fbsql_num_fields($result)) {\n    echo \"Information for column $i:<br \/>\\n\";\n    $meta = fbsql_fetch_field($result);\n    if (!$meta) {\n        echo \"No information available<br \/>\\n\";\n    }\n    echo \"<pre>\nmax_length:   $meta->max_length\nname:         $meta->name\nnot_null:     $meta->not_null\ntable:        $meta->table\ntype:         $meta->type\n<\/pre>\";\n    $i++;\n}\nfbsql_free_result($result);","output":null}],"fbsql_fetch_object":[{"title":"fbsql_fetch_object() example","source":"fbsql_connect($host, $user, $password);\n$result = fbsql_db_query(\"database\", \"select * from table\");\nwhile ($row = fbsql_fetch_object($result)) {\n    echo $row->user_id;\n    echo $row->fullname;\n}\nfbsql_free_result($result);","output":null}],"fbsql_field_name":[{"title":"fbsql_field_name() example","source":"\/\/ The users table consists of three fields:\n\/\/   user_id\n\/\/   username\n\/\/   password.\n\n$res = fbsql_db_query(\"users\", \"select * from users\", $link);\n\necho fbsql_field_name($res, 0) . \"\\n\";\necho fbsql_field_name($res, 2);","output":"user_id\npassword"}],"fbsql_field_type":[{"title":"fbsql_field_type() example","source":"fbsql_connect(\"localhost\", \"_SYSTEM\", \"\");\nfbsql_select_db(\"wisconsin\");\n$result = fbsql_query(\"SELECT * FROM onek;\");\n$fields = fbsql_num_fields($result);\n$rows   = fbsql_num_rows($result);\n$i = 0;\n$table = fbsql_field_table($result, $i);\necho \"Your '\" . $table . \"' table has \" . $fields . \" fields and \" . $rows . \" records <br \/>\";\necho \"The table has the following fields <br \/>\";\nwhile ($i < $fields) {\n    $type  = fbsql_field_type($result, $i);\n    $name  = fbsql_field_name($result, $i);\n    $len   = fbsql_field_len($result, $i);\n    $flags = fbsql_field_flags($result, $i);\n    echo $type . \" \" . $name . \" \" . $len . \" \" . $flags . \"<br \/>\";\n    $i++;\n}\nfbsql_close();","output":null}],"fbsql_list_dbs":[{"title":"fbsql_list_dbs() example","source":"$link = fbsql_connect('localhost', 'myname', 'secret');\n$db_list = fbsql_list_dbs($link);\n\nwhile ($row = fbsql_fetch_object($db_list)) {\n    echo $row->Database . \"\\n\";\n}","output":"database1\ndatabase2\ndatabase3\n..."}],"fbsql_list_fields":[{"title":"fbsql_list_fields() example","source":"$link = fbsql_connect('localhost', 'myname', 'secret');\n\n$fields = fbsql_list_fields(\"database1\", \"table1\", $link);\n$columns = fbsql_num_fields($fields);\n\nfor ($i = 0; $i < $columns; $i++) {\n    echo fbsql_field_name($fields, $i) . \"\\n\";;\n}","output":"field1\nfield2\nfield3\n..."}],"fbsql_next_result":[{"title":"fbsql_next_result() example","source":"$link = fbsql_connect(\"localhost\", \"_SYSTEM\", \"secret\");\nfbsql_select_db(\"MyDB\", $link);\n$SQL = \"Select * from table1; select * from table2;\";\n$rs = fbsql_query($SQL, $link);\ndo {\n    while ($row = fbsql_fetch_row($rs)) {\n    }\n} while (fbsql_next_result($rs));\nfbsql_free_result($rs);\nfbsql_close($link);","output":null}],"fbsql_num_rows":[{"title":"fbsql_num_rows() example","source":"$link = fbsql_connect(\"localhost\", \"username\", \"password\");\nfbsql_select_db(\"database\", $link);\n\n$result = fbsql_query(\"SELECT * FROM table1;\", $link);\n$num_rows = fbsql_num_rows($result);\n\necho \"$num_rows Rows\\n\";","output":null}],"fbsql_query":[{"title":"fbsql_query() example","source":"$result = fbsql_query(\"SELECT * WHERE 1=1\")\n    or die (\"Invalid query\");","output":null},{"title":"fbsql_query() example","source":"$result = fbsql_query (\"SELECT my_col FROM my_tbl;\")\n    or die (\"Invalid query\");","output":null}],"fbsql_read_blob":[{"title":"fbsql_read_blob() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\n$sql = \"SELECT BLOB_COLUMN FROM BLOB_TABLE;\";\n$rs = fbsql_query($sql, $link);\n$row_data = fbsql_fetch_row($rs);\n\/\/ $row_data[0] will now contain the blob data for the first row\nfbsql_free_result($rs);\n\n$rs = fbsql_query($sql, $link);\nfbsql_set_lob_mode($rs, FBSQL_LOB_HANDLE);\n$row_data = fbsql_fetch_row($rs);\n\/\/ $row_data[0] will now contain a handle to the BLOB data in the first row\n$blob_data = fbsql_read_blob($row_data[0]);\nfbsql_free_result($rs);","output":null}],"fbsql_read_clob":[{"title":"fbsql_read_clob() example","source":"$link = fbsql_pconnect(\"localhost\", \"_SYSTEM\", \"secret\")\n    or die(\"Could not connect\");\n$sql = \"SELECT CLOB_COLUMN FROM CLOB_TABLE;\";\n$rs = fbsql_query($sql, $link);\n$row_data = fbsql_fetch_row($rs);\n\/\/ $row_data[0] will now contain the clob data for the first row\nfbsql_free_result($rs);\n\n$rs = fbsql_query($sql, $link);\nfbsql_set_lob_mode($rs, FBSQL_LOB_HANDLE);\n$row_data = fbsql_fetch_row($rs);\n\/\/ $row_data[0] will now contain a handle to the CLOB data in the first row\n$clob_data = fbsql_read_clob($row_data[0]);\nfbsql_free_result($rs);","output":null}],"fbsql_table_name":[{"title":"fbsql_table_name() example","source":"fbsql_connect(\"localhost\", \"_SYSTEM\", \"\");\n$result = fbsql_list_tables(\"wisconsin\");\n$i = 0;\nwhile ($i < fbsql_num_rows($result)) {\n    $tb_names[$i] = fbsql_table_name($result, $i);\n    echo $tb_names[$i] . \"<br \/>\";\n    $i++;\n}","output":null}],"fclose":[{"title":"A simple fclose() example","source":"$handle = fopen('somefile.txt', 'r');\n\nfclose($handle);","output":null}],"fdf_add_doc_javascript":[{"title":"Adding JavaScript code to a FDF","source":"$fdf = fdf_create();\nfdf_add_doc_javascript($fdf, \"PlusOne\", \"function PlusOne(x)\\r{\\r  return x+1;\\r}\\r\");\nfdf_save($fdf);","output":"%FDF-1.2\n%âãÏÓ\n1 0 obj\n<<\n\/FDF << \/JavaScript << \/Doc [ (PlusOne)(function PlusOne\\(x\\)\\r{\\r  return x+1;\\r}\\r)] >> >>\n>>\nendobj\ntrailer\n<<\n\/Root 1 0 R\n\n>>\n%%EOF"}],"fdf_create":[{"title":"Populating a PDF document","source":"$outfdf = fdf_create();\nfdf_set_value($outfdf, \"volume\", $volume, 0);\n\nfdf_set_file($outfdf, \"http:\/testfdf\/resultlabel.pdf\");\nfdf_save($outfdf, \"outtest.fdf\");\nfdf_close($outfdf);\nHeader(\"Content-type: application\/vnd.fdf\");\n$fp = fopen(\"outtest.fdf\", \"r\");\nfpassthru($fp);\nunlink(\"outtest.fdf\");","output":null}],"fdf_get_attachment":[{"title":"Storing an uploaded file","source":"$fdf = fdf_open_string($HTTP_FDF_DATA);\n  $data = fdf_get_attachment($fdf, \"filename\", \"\/tmpdir\");\n  echo \"The uploaded file is stored in $data[path]\";","output":null}],"fdf_next_field_name":[{"title":"Detecting all fieldnames in a FDF","source":"$fdf = fdf_open($HTTP_FDF_DATA);\nfor ($field = fdf_next_field_name($fdf);\n    $field != \"\";\n    $field = fdf_next_field_name($fdf, $field)) {\n    echo \"field: $field\\n\";\n}","output":null}],"fdf_open_string":[{"title":"Accessing the form data","source":"$fdf = fdf_open_string($HTTP_FDF_DATA);\n\/* ... *\/\nfdf_close($fdf);","output":null}],"fdf_open":[{"title":"Accessing the form data","source":"\/\/ Save the FDF data into a temp file\n$fdffp = fopen(\"test.fdf\", \"w\");\nfwrite($fdffp, $HTTP_FDF_DATA, strlen($HTTP_FDF_DATA));\nfclose($fdffp);\n\n\/\/ Open temp file and evaluate data\n$fdf = fdf_open(\"test.fdf\");\n\/* ... *\/\nfdf_close($fdf);","output":null}],"fdf_save_string":[{"title":"Retrieving FDF as a string","source":"$fdf = fdf_create();\nfdf_set_value($fdf, \"foo\", \"bar\");\n$str = fdf_save_string($fdf);\nfdf_close($fdf);\necho $str;","output":"%FDF-1.2\n%âãÏÓ\n1 0 obj\n<<\n\/FDF << \/Fields 2 0 R >>\n>>\nendobj\n2 0 obj\n[\n<< \/T (foo)\/V (bar)>>\n]\nendobj\ntrailer\n<<\n\/Root 1 0 R\n\n>>\n%%EOF"}],"fdf_set_file":[{"title":"Passing FDF data to a second form","source":"\/* set content type for Adobe FDF *\/\n  fdf_header();\n\n  \/* start new fdf *\/\n  $fdf = fdf_create();\n\n  \/* set field \"foo\" to value \"bar\" *\/\n  fdf_set_value($fdf, \"foo\", \"bar\");\n\n  \/* tell client to display FDF data using \"fdf_form.pdf\" *\/\n  fdf_set_file($fdf, \"http:\/\/www.example.com\/fdf_form.pdf\");\n\n  \/* output fdf *\/\n  fdf_save($fdf);\n\n  \/* clean up *\/\n  fdf_close($fdf);","output":null}],"feof":[{"title":"Handling timeouts with feof()","source":"function safe_feof($fp, &$start = NULL) {\n $start = microtime(true);\n\n return feof($fp);\n}\n\n\/* Assuming $fp is previously opened by fsockopen() *\/\n\n$start = NULL;\n$timeout = ini_get('default_socket_timeout');\n\nwhile(!safe_feof($fp, $start) && (microtime(true) - $start) < $timeout)\n{\n \/* Handle *\/\n}","output":null},{"title":"feof() example with an invalid file pointer","source":"\/\/ if file can not be read or doesn't exist fopen function returns FALSE\n$file = @fopen(\"no_such_file\", \"r\");\n\n\/\/ FALSE from fopen will issue warning and result in infinite loop here\nwhile (!feof($file)) {\n}\n\nfclose($file);","output":null}],"fflush":[{"title":"File write example using fflush()","source":"$filename = 'bar.txt';\n\n$file = fopen($filename, 'r+');\nrewind($file);\nfwrite($file, 'Foo');\nfflush($file);\nftruncate($file, ftell($file));\nfclose($file);","output":null}],"fgetc":[{"title":"A fgetc() example","source":"$fp = fopen('somefile.txt', 'r');\nif (!$fp) {\n    echo 'Could not open file somefile.txt';\n}\nwhile (false !== ($char = fgetc($fp))) {\n    echo \"$char\\n\";\n}","output":null}],"fgetcsv":[{"title":"Read and print the entire contents of a CSV file","source":"$row = 1;\nif (($handle = fopen(\"test.csv\", \"r\")) !== FALSE) {\n    while (($data = fgetcsv($handle, 1000, \",\")) !== FALSE) {\n        $num = count($data);\n        echo \"<p> $num fields in line $row: <br \/><\/p>\\n\";\n        $row++;\n        for ($c=0; $c < $num; $c++) {\n            echo $data[$c] . \"<br \/>\\n\";\n        }\n    }\n    fclose($handle);\n}","output":null}],"fgets":[{"title":"Reading a file line by line","source":"$handle = @fopen(\"\/tmp\/inputfile.txt\", \"r\");\nif ($handle) {\n    while (($buffer = fgets($handle, 4096)) !== false) {\n        echo $buffer;\n    }\n    if (!feof($handle)) {\n        echo \"Error: unexpected fgets() fail\\n\";\n    }\n    fclose($handle);\n}","output":null}],"fgetss":[{"title":"Reading a PHP file line-by-line","source":"$str = <<<EOD\n<html><body>\n <p>Welcome! Today is the <?php echo(date('jS')); ?> of <?= date('F'); ?>.<\/p>\n<\/body><\/html>\nText outside of the HTML block.\nEOD;\nfile_put_contents('sample.php', $str);\n\n$handle = @fopen(\"sample.php\", \"r\");\nif ($handle) {\n    while (!feof($handle)) {\n        $buffer = fgetss($handle, 4096);\n        echo $buffer;\n    }\n    fclose($handle);\n}","output":"Welcome! Today is the  of .\n\nText outside of the HTML block."}],"file_exists":[{"title":"Testing whether a file exists","source":"$filename = '\/path\/to\/foo.txt';\n\nif (file_exists($filename)) {\n    echo \"The file $filename exists\";\n} else {\n    echo \"The file $filename does not exist\";\n}","output":null}],"file_get_contents":[{"title":"Get and output the source of the homepage of a website","source":"$homepage = file_get_contents('http:\/\/www.example.com\/');\necho $homepage;","output":null},{"title":"Searching within the include_path","source":"\/\/ <= PHP 5\n$file = file_get_contents('.\/people.txt', true);\n\/\/ > PHP 5\n$file = file_get_contents('.\/people.txt', FILE_USE_INCLUDE_PATH);","output":null},{"title":"Reading a section of a file","source":"\/\/ Read 14 characters starting from the 21st character\n$section = file_get_contents('.\/people.txt', NULL, NULL, 20, 14);\nvar_dump($section);","output":"string(14) \"lle Bjori Ro\""},{"title":"Using stream contexts","source":"\/\/ Create a stream\n$opts = array(\n  'http'=>array(\n    'method'=>\"GET\",\n    'header'=>\"Accept-language: en\\r\\n\" .\n              \"Cookie: foo=bar\\r\\n\"\n  )\n);\n\n$context = stream_context_create($opts);\n\n\/\/ Open the file using the HTTP headers set above\n$file = file_get_contents('http:\/\/www.example.com\/', false, $context);","output":null}],"file_put_contents":[{"title":"Simple usage example","source":"$file = 'people.txt';\n\/\/ Open the file to get existing content\n$current = file_get_contents($file);\n\/\/ Append a new person to the file\n$current .= \"John Smith\\n\";\n\/\/ Write the contents back to the file\nfile_put_contents($file, $current);","output":null},{"title":"Using flags","source":"$file = 'people.txt';\n\/\/ The new person to add to the file\n$person = \"John Smith\\n\";\n\/\/ Write the contents to the file, \n\/\/ using the FILE_APPEND flag to append the content to the end of the file\n\/\/ and the LOCK_EX flag to prevent anyone else writing to the file at the same time\nfile_put_contents($file, $person, FILE_APPEND | LOCK_EX);","output":null}],"file":[{"title":"file() example","source":"\/\/ Get a file into an array.  In this example we'll go through HTTP to get\n\/\/ the HTML source of a URL.\n$lines = file('http:\/\/www.example.com\/');\n\n\/\/ Loop through our array, show HTML source as HTML source; and line numbers too.\nforeach ($lines as $line_num => $line) {\n    echo \"Line #<b>{$line_num}<\/b> : \" . htmlspecialchars($line) . \"<br \/>\\n\";\n}\n\n\/\/ Another example, let's get a web page into a string.  See also file_get_contents().\n$html = implode('', file('http:\/\/www.example.com\/'));\n\n\/\/ Using the optional flags parameter since PHP 5\n$trimmed = file('somefile.txt', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);","output":null}],"fileatime":[{"title":"fileatime() example","source":"\/\/ outputs e.g.  somefile.txt was last accessed: December 29 2002 22:16:23.\n\n$filename = 'somefile.txt';\nif (file_exists($filename)) {\n    echo \"$filename was last accessed: \" . date(\"F d Y H:i:s.\", fileatime($filename));\n}","output":null}],"filectime":[{"title":"A filectime() example","source":"\/\/ outputs e.g.  somefile.txt was last changed: December 29 2002 22:16:23.\n\n$filename = 'somefile.txt';\nif (file_exists($filename)) {\n    echo \"$filename was last changed: \" . date(\"F d Y H:i:s.\", filectime($filename));\n}","output":null}],"filegroup":[{"title":"Finding the group of a file","source":"$filename = 'index.php';\nprint_r(posix_getgrgid(filegroup($filename)));","output":null}],"fileinode":[{"title":"Comparing the inode of a file with the current file","source":"$filename = 'index.php';\nif (getmyinode() == fileinode($filename)) {\n    echo 'You are checking the current file.';\n}","output":null}],"filemtime":[{"title":"filemtime() example","source":"\/\/ outputs e.g.  somefile.txt was last modified: December 29 2002 22:16:23.\n\n$filename = 'somefile.txt';\nif (file_exists($filename)) {\n    echo \"$filename was last modified: \" . date (\"F d Y H:i:s.\", filemtime($filename));\n}","output":null}],"fileowner":[{"title":"Finding the owner of a file","source":"$filename = 'index.php';\nprint_r(posix_getpwuid(fileowner($filename)));","output":null}],"fileperms":[{"title":"Display permissions as an octal value","source":"echo substr(sprintf('%o', fileperms('\/tmp')), -4);\necho substr(sprintf('%o', fileperms('\/etc\/passwd')), -4);","output":"1777\n0644"},{"title":"Display full permissions","source":"$perms = fileperms('\/etc\/passwd');\n\nswitch ($perms & 0xF000) {\n    case 0xC000: \/\/ socket\n        $info = 's';\n        break;\n    case 0xA000: \/\/ symbolic link\n        $info = 'l';\n        break;\n    case 0x8000: \/\/ regular\n        $info = 'r';\n        break;\n    case 0x6000: \/\/ block special\n        $info = 'b';\n        break;\n    case 0x4000: \/\/ directory\n        $info = 'd';\n        break;\n    case 0x2000: \/\/ character special\n        $info = 'c';\n        break;\n    case 0x1000: \/\/ FIFO pipe\n        $info = 'p';\n        break;\n    default: \/\/ unknown\n        $info = 'u';\n}\n\n\/\/ Owner\n$info .= (($perms & 0x0100) ? 'r' : '-');\n$info .= (($perms & 0x0080) ? 'w' : '-');\n$info .= (($perms & 0x0040) ?\n            (($perms & 0x0800) ? 's' : 'x' ) :\n            (($perms & 0x0800) ? 'S' : '-'));\n\n\/\/ Group\n$info .= (($perms & 0x0020) ? 'r' : '-');\n$info .= (($perms & 0x0010) ? 'w' : '-');\n$info .= (($perms & 0x0008) ?\n            (($perms & 0x0400) ? 's' : 'x' ) :\n            (($perms & 0x0400) ? 'S' : '-'));\n\n\/\/ World\n$info .= (($perms & 0x0004) ? 'r' : '-');\n$info .= (($perms & 0x0002) ? 'w' : '-');\n$info .= (($perms & 0x0001) ?\n            (($perms & 0x0200) ? 't' : 'x' ) :\n            (($perms & 0x0200) ? 'T' : '-'));\n\necho $info;","output":"-rw-r--r--"}],"filesize":[{"title":"filesize() example","source":"\/\/ outputs e.g.  somefile.txt: 1024 bytes\n\n$filename = 'somefile.txt';\necho $filename . ': ' . filesize($filename) . ' bytes';","output":null}],"filetype":[{"title":"filetype() example","source":"echo filetype('\/etc\/passwd');  \/\/ file\necho filetype('\/etc\/');        \/\/ dir","output":null}],"filter_input_array":[{"title":"A filter_input_array() example","source":"error_reporting(E_ALL | E_STRICT);\n\/* data actually came from POST\n$_POST = array(\n    'product_id'    => 'libgd<script>',\n    'component'     => '10',\n    'versions'      => '2.0.33',\n    'testscalar'    => array('2', '23', '10', '12'),\n    'testarray'     => '2',\n);\n*\/\n\n$args = array(\n    'product_id'   => FILTER_SANITIZE_ENCODED,\n    'component'    => array('filter'    => FILTER_VALIDATE_INT,\n                            'flags'     => FILTER_REQUIRE_ARRAY, \n                            'options'   => array('min_range' => 1, 'max_range' => 10)\n                           ),\n    'versions'     => FILTER_SANITIZE_ENCODED,\n    'doesnotexist' => FILTER_VALIDATE_INT,\n    'testscalar'   => array(\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags'  => FILTER_REQUIRE_SCALAR,\n                           ),\n    'testarray'    => array(\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags'  => FILTER_REQUIRE_ARRAY,\n                           )\n\n);\n\n$myinputs = filter_input_array(INPUT_POST, $args);\n\nvar_dump($myinputs);\necho \"\\n\";","output":"array(6) {\n  [\"product_id\"]=>\n  string(17) \"libgd%3Cscript%3E\"\n  [\"component\"]=>\n  array(1) {\n    [0]=>\n    int(10)\n  }\n  [\"versions\"]=>\n  string(6) \"2.0.33\"\n  [\"doesnotexist\"]=>\n  NULL\n  [\"testscalar\"]=>\n  bool(false)\n  [\"testarray\"]=>\n  array(1) {\n    [0]=>\n    int(2)\n  }\n}"}],"filter_input":[{"title":"A filter_input() example","source":"$search_html = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_SPECIAL_CHARS);\n$search_url = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_ENCODED);\necho \"You have searched for $search_html.\\n\";\necho \"<a href='?search=$search_url'>Search again.<\/a>\";","output":"You have searched for Me &#38; son.\n<a href='?search=Me%20%26%20son'>Search again.<\/a>"}],"filter_list":[{"title":"A filter_list() example","source":"print_r(filter_list());","output":"Array\n(\n    [0] => int\n    [1] => boolean\n    [2] => float\n    [3] => validate_regexp\n    [4] => validate_url\n    [5] => validate_email\n    [6] => validate_ip\n    [7] => string\n    [8] => stripped\n    [9] => encoded\n    [10] => special_chars\n    [11] => unsafe_raw\n    [12] => email\n    [13] => url\n    [14] => number_int\n    [15] => number_float\n    [16] => magic_quotes\n    [17] => callback\n)"}],"filter_var_array":[{"title":"A filter_var_array() example","source":"error_reporting(E_ALL | E_STRICT);\n$data = array(\n    'product_id'    => 'libgd<script>',\n    'component'     => '10',\n    'versions'      => '2.0.33',\n    'testscalar'    => array('2', '23', '10', '12'),\n    'testarray'     => '2',\n);\n\n$args = array(\n    'product_id'   => FILTER_SANITIZE_ENCODED,\n    'component'    => array('filter'    => FILTER_VALIDATE_INT,\n                            'flags'     => FILTER_FORCE_ARRAY, \n                            'options'   => array('min_range' => 1, 'max_range' => 10)\n                           ),\n    'versions'     => FILTER_SANITIZE_ENCODED,\n    'doesnotexist' => FILTER_VALIDATE_INT,\n    'testscalar'   => array(\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags'  => FILTER_REQUIRE_SCALAR,\n                           ),\n    'testarray'    => array(\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags'  => FILTER_FORCE_ARRAY,\n                           )\n\n);\n\n$myinputs = filter_var_array($data, $args);\n\nvar_dump($myinputs);\necho \"\\n\";","output":"array(6) {\n  [\"product_id\"]=>\n  string(17) \"libgd%3Cscript%3E\"\n  [\"component\"]=>\n  array(1) {\n    [0]=>\n    int(10)\n  }\n  [\"versions\"]=>\n  string(6) \"2.0.33\"\n  [\"doesnotexist\"]=>\n  NULL\n  [\"testscalar\"]=>\n  bool(false)\n  [\"testarray\"]=>\n  array(1) {\n    [0]=>\n    int(2)\n  }\n}"}],"filter_var":[{"title":"A filter_var() example","source":"var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));\nvar_dump(filter_var('http:\/\/example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));","output":"string(15) \"bob@example.com\"\nbool(false)"}],"finfo_buffer":[{"title":"A finfo_buffer() example","source":"$finfo = new finfo(FILEINFO_MIME);\necho $finfo->buffer($_POST[\"script\"]) . \"\\n\";","output":"application\/x-sh; charset=us-ascii"}],"finfo_file":[{"title":"A finfo_file() example","source":"$finfo = finfo_open(FILEINFO_MIME_TYPE); \/\/ return mime type ala mimetype extension\nforeach (glob(\"*\") as $filename) {\n    echo finfo_file($finfo, $filename) . \"\\n\";\n}\nfinfo_close($finfo);","output":"text\/html\nimage\/gif\napplication\/vnd.ms-excel"}],"finfo_open":[{"title":"Object oriented style","source":"$finfo = new finfo(FILEINFO_MIME, \"\/usr\/share\/misc\/magic\"); \/\/ return mime type ala mimetype extension\n\n\/* get mime-type for a specific file *\/\n$filename = \"\/usr\/local\/something.txt\";\necho $finfo->file($filename);","output":null},{"title":"Procedural style","source":"$finfo = finfo_open(FILEINFO_MIME, \"\/usr\/share\/misc\/magic\"); \/\/ return mime type ala mimetype extension\n\nif (!$finfo) {\n    echo \"Opening fileinfo database failed\";\n    exit();\n}\n\n\/* get mime-type for a specific file *\/\n$filename = \"\/usr\/local\/something.txt\";\necho finfo_file($finfo, $filename);\n\n\/* close connection *\/\nfinfo_close($finfo);","output":null}],"floatval":[{"title":"floatval() Example","source":"$var = '122.34343The';\n$float_value_of_var = floatval($var);\necho $float_value_of_var; \/\/ 122.34343","output":null},{"title":"floatval() non-numeric leftmost characters Example","source":"$var = 'The122.34343';\n$float_value_of_var = floatval($var);\necho $float_value_of_var; \/\/ 0","output":null}],"flock":[{"title":"flock() example","source":"$fp = fopen(\"\/tmp\/lock.txt\", \"r+\");\n\nif (flock($fp, LOCK_EX)) {  \/\/ acquire an exclusive lock\n    ftruncate($fp, 0);      \/\/ truncate file\n    fwrite($fp, \"Write something here\\n\");\n    fflush($fp);            \/\/ flush output before releasing the lock\n    flock($fp, LOCK_UN);    \/\/ release the lock\n} else {\n    echo \"Couldn't get the lock!\";\n}\n\nfclose($fp);","output":null},{"title":"flock() using the LOCK_NB option","source":"$fp = fopen('\/tmp\/lock.txt', 'r+');\n\n\/* Activate the LOCK_NB option on an LOCK_EX operation *\/\nif(!flock($fp, LOCK_EX | LOCK_NB)) {\n    echo 'Unable to obtain lock';\n    exit(-1);\n}\n\n\/* ... *\/\n\nfclose($fp);","output":null}],"floor":[{"title":"floor() example","source":"echo floor(4.3);   \/\/ 4\necho floor(9.999); \/\/ 9\necho floor(-3.14); \/\/ -4","output":null}],"fmod":[{"title":"Using fmod()","source":"$x = 5.7;\n$y = 1.3;\n$r = fmod($x, $y);\n\/\/ $r equals 0.5, because 4 * 1.3 + 0.5 = 5.7","output":null}],"fnmatch":[{"title":"Checking a color name against a shell wildcard pattern","source":"if (fnmatch(\"*gr[ae]y\", $color)) {\n  echo \"some form of gray ...\";\n}","output":null}],"fopen":[{"title":null,"source":"$handle = fopen(\"c:\\\\folder\\\\resource.txt\", \"r\");","output":null},{"title":"fopen() examples","source":"$handle = fopen(\"\/home\/rasmus\/file.txt\", \"r\");\n$handle = fopen(\"\/home\/rasmus\/file.gif\", \"wb\");\n$handle = fopen(\"http:\/\/www.example.com\/\", \"r\");\n$handle = fopen(\"ftp:\/\/user:password@example.com\/somefile.txt\", \"w\");","output":null}],"forward_static_call_array":[{"title":"forward_static_call_array() example","source":"class A\n{\n    const NAME = 'A';\n    public static function test() {\n        $args = func_get_args();\n        echo static::NAME, \" \".join(',', $args).\" \\n\";\n    }\n}\n\nclass B extends A\n{\n    const NAME = 'B';\n\n    public static function test() {\n        echo self::NAME, \"\\n\";\n        forward_static_call_array(array('A', 'test'), array('more', 'args'));\n        forward_static_call_array( 'test', array('other', 'args'));\n    }\n}\n\nB::test('foo');\n\nfunction test() {\n        $args = func_get_args();\n        echo \"C \".join(',', $args).\" \\n\";\n    }","output":"B\nB more,args \nC other,args"}],"forward_static_call":[{"title":"forward_static_call() example","source":"class A\n{\n    const NAME = 'A';\n    public static function test() {\n        $args = func_get_args();\n        echo static::NAME, \" \".join(',', $args).\" \\n\";\n    }\n}\n\nclass B extends A\n{\n    const NAME = 'B';\n\n    public static function test() {\n        echo self::NAME, \"\\n\";\n        forward_static_call(array('A', 'test'), 'more', 'args');\n        forward_static_call( 'test', 'other', 'args');\n    }\n}\n\nB::test('foo');\n\nfunction test() {\n        $args = func_get_args();\n        echo \"C \".join(',', $args).\" \\n\";\n    }","output":"B\nB more,args \nC other,args"}],"fpassthru":[{"title":"Using fpassthru() with binary files","source":"\/\/ open the file in a binary mode\n$name = '.\/img\/ok.png';\n$fp = fopen($name, 'rb');\n\n\/\/ send the right headers\nheader(\"Content-Type: image\/png\");\nheader(\"Content-Length: \" . filesize($name));\n\n\/\/ dump the picture and stop the script\nfpassthru($fp);\nexit;","output":null}],"fprintf":[{"title":"fprintf(): zero-padded integers","source":"if (!($fp = fopen('date.txt', 'w'))) {\n    return;\n}\n\nfprintf($fp, \"%04d-%02d-%02d\", $year, $month, $day);\n\/\/ will write the formatted ISO date to date.txt","output":null},{"title":"fprintf(): formatting currency","source":"if (!($fp = fopen('currency.txt', 'w'))) {\n    return;\n}\n\n$money1 = 68.75;\n$money2 = 54.35;\n$money = $money1 + $money2;\n\/\/ echo $money will output \"123.1\";\n$len = fprintf($fp, '%01.2f', $money);\n\/\/ will write \"123.10\" to currency.txt\n\necho \"wrote $len bytes to currency.txt\";\n\/\/ use the return value of fprintf to determine how many bytes we wrote","output":null}],"fputcsv":[{"title":"fputcsv() example","source":"$list = array (\n    array('aaa', 'bbb', 'ccc', 'dddd'),\n    array('123', '456', '789'),\n    array('\"aaa\"', '\"bbb\"')\n);\n\n$fp = fopen('file.csv', 'w');\n\nforeach ($list as $fields) {\n    fputcsv($fp, $fields);\n}\n\nfclose($fp);","output":"aaa,bbb,ccc,dddd\n123,456,789\n\"\"\"aaa\"\"\",\"\"\"bbb\"\"\""}],"fread":[{"title":"A simple fread() example","source":"\/\/ get contents of a file into a string\n$filename = \"\/usr\/local\/something.txt\";\n$handle = fopen($filename, \"r\");\n$contents = fread($handle, filesize($filename));\nfclose($handle);","output":null},{"title":"Binary fread() example","source":"$filename = \"c:\\\\files\\\\somepic.gif\";\n$handle = fopen($filename, \"rb\");\n$contents = fread($handle, filesize($filename));\nfclose($handle);","output":null},{"title":"Remote fread() examples","source":"\/\/ For PHP 5 and up\n$handle = fopen(\"http:\/\/www.example.com\/\", \"rb\");\n$contents = stream_get_contents($handle);\nfclose($handle);","output":null}],"fscanf":[{"title":"fscanf() Example","source":"$handle = fopen(\"users.txt\", \"r\");\nwhile ($userinfo = fscanf($handle, \"%s\\t%s\\t%s\\n\")) {\n    list ($name, $profession, $countrycode) = $userinfo;\n    \/\/... do something with the values\n}\nfclose($handle);","output":null},{"title":"Contents of users.txt","source":"Parses input from a file according to a format\n fread\n fseek\n Filesystem Functions\n PHP Manual\n\n \n  fscanf\n  (PHP 4 >= 4.0.1, PHP 5, PHP 7)fscanf — Parses input from a file according to a format\n\n \n \n \n  Description\n  \n   mixed fscanf\n    ( resource $handle\n   , string $format\n   [, mixed &$...\n  ] )\n\n  \n   The function fscanf() is similar to\n   sscanf(), but it takes its input from a file\n   associated with handle and interprets the\n   input according to the specified format, which is\n   described in the documentation for sprintf(). \n  \n  \n   Any whitespace in the format string matches any whitespace in the input\n   stream. This means that even a tab \\t in the format\n   string can match a single space character in the input stream.\n  \n  \n   Each call to fscanf() reads one line from the file.\n  \n \n\n\n \n  Parameters\n  \n   \nhandle\n\n     \n\n      A file system pointer resource\nthat is typically created using fopen().\n     \n\n    \n    \n     \nformat\n\n     \n\n      \n       The specified format as described in the \n       sprintf() documentation.\n      \n     \n\n    \n    \n     \n...\n\n     \n\n      \n       The optional assigned values.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   If only two parameters were passed to this function, the values parsed will be\n   returned as an array. Otherwise, if optional parameters are passed, the\n   function will return the number of assigned values. The optional\n   parameters must be passed by reference. \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 fscanf() Example\n    \n\n<?php\n$handle = fopen(\"users.txt\", \"r\");\nwhile ($userinfo = fscanf($handle, \"%s\\t%s\\t%s\\n\")) {\n    list ($name, $profession, $countrycode) = $userinfo;\n    \/\/... do something with the values\n}\nfclose($handle);\n?>\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Contents of users.txt\n    \njavier  argonaut        pe\nhiroshi sculptor        jp\nrobert  slacker us\nluigi   florist it\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   fread() - Binary-safe file read\n    fgets() - Gets line from file pointer\n    fgetss() - Gets line from file pointer and strip HTML tags\n    sscanf() - Parses input from a string according to a format\n    printf() - Output a formatted string\n    sprintf() - Return a formatted string\n   \n\n\n\n fread\n fseek\n Filesystem Functions\n PHP Manual","output":null}],"fseek":[{"title":"fseek() example","source":"$fp = fopen('somefile.txt', 'r');\n\n\/\/ read some data\n$data = fgets($fp, 4096);\n\n\/\/ move back to the beginning of the file\n\/\/ same as rewind($fp);\nfseek($fp, 0);","output":null}],"fsockopen":[{"title":"fsockopen() Example","source":"$fp = fsockopen(\"www.example.com\", 80, $errno, $errstr, 30);\nif (!$fp) {\n    echo \"$errstr ($errno)<br \/>\\n\";\n} else {\n    $out = \"GET \/ HTTP\/1.1\\r\\n\";\n    $out .= \"Host: www.example.com\\r\\n\";\n    $out .= \"Connection: Close\\r\\n\\r\\n\";\n    fwrite($fp, $out);\n    while (!feof($fp)) {\n        echo fgets($fp, 128);\n    }\n    fclose($fp);\n}","output":null},{"title":"Using UDP connection","source":"$fp = fsockopen(\"udp:\/\/127.0.0.1\", 13, $errno, $errstr);\nif (!$fp) {\n    echo \"ERROR: $errno - $errstr<br \/>\\n\";\n} else {\n    fwrite($fp, \"\\n\");\n    echo fread($fp, 26);\n    fclose($fp);\n}","output":null}],"fstat":[{"title":"fstat() example","source":"\/\/ open a file\n$fp = fopen(\"\/etc\/passwd\", \"r\");\n\n\/\/ gather statistics\n$fstat = fstat($fp);\n\n\/\/ close the file\nfclose($fp);\n\n\/\/ print only the associative part\nprint_r(array_slice($fstat, 13));","output":"Array\n(\n    [dev] => 771\n    [ino] => 488704\n    [mode] => 33188\n    [nlink] => 1\n    [uid] => 0\n    [gid] => 0\n    [rdev] => 0\n    [size] => 1114\n    [atime] => 1061067181\n    [mtime] => 1056136526\n    [ctime] => 1056136526\n    [blksize] => 4096\n    [blocks] => 8\n)"}],"ftell":[{"title":"ftell() example","source":"\/\/ opens a file and read some data\n$fp = fopen(\"\/etc\/passwd\", \"r\");\n$data = fgets($fp, 12);\n\n\/\/ where are we ?\necho ftell($fp); \/\/ 11\n\nfclose($fp);","output":null}],"ftp_alloc":[{"title":"ftp_alloc() example","source":"$file = \"\/home\/user\/myfile\";\n\n\/\/ connect to the server\n$conn_id = ftp_connect('ftp.example.com');\n$login_result = ftp_login($conn_id, 'anonymous', 'user@example.com');\n\nif (ftp_alloc($conn_id, filesize($file), $result)) {\n  echo \"Space successfully allocated on server.  Sending $file.\\n\";\n  ftp_put($conn_id, '\/incomming\/myfile', $file, FTP_BINARY);\n} else {\n  echo \"Unable to allocate space on server.  Server said: $result\\n\";\n}\n\nftp_close($conn_id);","output":null}],"ftp_cdup":[{"title":"ftp_cdup() example","source":"\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ change the current directory to html\nftp_chdir($conn_id, 'html');\n\necho ftp_pwd($conn_id); \/\/ \/html \n\n\/\/ return to the parent directory\nif (ftp_cdup($conn_id)) { \n  echo \"cdup successful\\n\";\n} else {\n  echo \"cdup not successful\\n\";\n}\n\necho ftp_pwd($conn_id); \/\/ \/\n\nftp_close($conn_id);","output":null}],"ftp_chdir":[{"title":"ftp_chdir() example","source":"\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server); \n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass); \n\n\/\/ check connection\nif ((!$conn_id) || (!$login_result)) {\n    die(\"FTP connection has failed !\");\n}\n\necho \"Current directory: \" . ftp_pwd($conn_id) . \"\\n\";\n\n\/\/ try to change the directory to somedir\nif (ftp_chdir($conn_id, \"somedir\")) {\n    echo \"Current directory is now: \" . ftp_pwd($conn_id) . \"\\n\";\n} else { \n    echo \"Couldn't change directory\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_chmod":[{"title":"ftp_chmod() example","source":"$file = 'public_html\/index.php';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to chmod $file to 644\nif (ftp_chmod($conn_id, 0644, $file) !== false) {\n echo \"$file chmoded successfully to 644\\n\";\n} else {\n echo \"could not chmod $file\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_close":[{"title":"ftp_close() example","source":"\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ print the current directory\necho ftp_pwd($conn_id); \/\/ \/\n\n\/\/ close this connection\nftp_close($conn_id);","output":null}],"ftp_connect":[{"title":"ftp_connect() example","source":"$ftp_server = \"ftp.example.com\";\n\n\/\/ set up a connection or die\n$conn_id = ftp_connect($ftp_server) or die(\"Couldn't connect to $ftp_server\");","output":null}],"ftp_delete":[{"title":"ftp_delete() example","source":"$file = 'public_html\/old.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to delete $file\nif (ftp_delete($conn_id, $file)) {\n echo \"$file deleted successful\\n\";\n} else {\n echo \"could not delete $file\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_exec":[{"title":"ftp_exec() example","source":"\/\/ variable initialization\n$command = 'ls -al >files.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ execute command\nif (ftp_exec($conn_id, $command)) {\n    echo \"$command executed successfully\\n\";\n} else {\n    echo \"could not execute $command\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_fget":[{"title":"ftp_fget() example","source":"\/\/ path to remote file\n$remote_file = 'somefile.txt';\n$local_file = 'localfile.txt';\n\n\/\/ open some file to write to\n$handle = fopen($local_file, 'w');\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to download $remote_file and save it to $handle\nif (ftp_fget($conn_id, $handle, $remote_file, FTP_ASCII, 0)) {\n echo \"successfully written to $local_file\\n\";\n} else {\n echo \"There was a problem while downloading $remote_file to $local_file\\n\";\n}\n\n\/\/ close the connection and the file handler\nftp_close($conn_id);\nfclose($handle);","output":null}],"ftp_fput":[{"title":"ftp_fput() example","source":"\/\/ open some file for reading\n$file = 'somefile.txt';\n$fp = fopen($file, 'r');\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to upload $file\nif (ftp_fput($conn_id, $file, $fp, FTP_ASCII)) {\n    echo \"Successfully uploaded $file\\n\";\n} else {\n    echo \"There was a problem while uploading $file\\n\";\n}\n\n\/\/ close the connection and the file handler\nftp_close($conn_id);\nfclose($fp);","output":null}],"ftp_get_option":[{"title":"ftp_get_option() example","source":"\/\/ Get the timeout of the given FTP stream\n$timeout = ftp_get_option($conn_id, FTP_TIMEOUT_SEC);","output":null}],"ftp_get":[{"title":"ftp_get() example","source":"\/\/ define some variables\n$local_file = 'local.zip';\n$server_file = 'server.zip';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to download $server_file and save to $local_file\nif (ftp_get($conn_id, $local_file, $server_file, FTP_BINARY)) {\n    echo \"Successfully written to $local_file\\n\";\n} else {\n    echo \"There was a problem\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_login":[{"title":"ftp_login() example","source":"$ftp_server = \"ftp.example.com\";\n$ftp_user = \"foo\";\n$ftp_pass = \"bar\";\n\n\/\/ set up a connection or die\n$conn_id = ftp_connect($ftp_server) or die(\"Couldn't connect to $ftp_server\"); \n\n\/\/ try to login\nif (@ftp_login($conn_id, $ftp_user, $ftp_pass)) {\n    echo \"Connected as $ftp_user@$ftp_server\\n\";\n} else {\n    echo \"Couldn't connect as $ftp_user\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_mdtm":[{"title":"ftp_mdtm() example","source":"$file = 'somefile.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/  get the last modified time\n$buff = ftp_mdtm($conn_id, $file);\n\nif ($buff != -1) {\n    \/\/ somefile.txt was last modified on: March 26 2003 14:16:41.\n    echo \"$file was last modified on : \" . date(\"F d Y H:i:s.\", $buff);\n} else {\n    echo \"Couldn't get mdtime\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_mkdir":[{"title":"ftp_mkdir() example","source":"$dir = 'www';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to create the directory $dir\nif (ftp_mkdir($conn_id, $dir)) {\n echo \"successfully created $dir\\n\";\n} else {\n echo \"There was a problem while creating $dir\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_nb_continue":[{"title":"ftp_nb_continue() example","source":"\/\/ Initate the download\n$ret = ftp_nb_get($my_connection, \"test\", \"README\", FTP_BINARY);\nwhile ($ret == FTP_MOREDATA) {\n\n   \/\/ Continue downloading...\n   $ret = ftp_nb_continue($my_connection);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error downloading the file...\";\n   exit(1);\n}","output":null}],"ftp_nb_fget":[{"title":"ftp_nb_fget() example","source":"\/\/ open some file for reading\n$file = 'index.php';\n$fp = fopen($file, 'w');\n\n$conn_id = ftp_connect($ftp_server);\n\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ Initate the download\n$ret = ftp_nb_fget($conn_id, $fp, $file, FTP_BINARY);\nwhile ($ret == FTP_MOREDATA) {\n\n   \/\/ Do whatever you want\n   echo \".\";\n\n   \/\/ Continue downloading...\n   $ret = ftp_nb_continue($conn_id);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error downloading the file...\";\n   exit(1);\n}\n\n\/\/ close filepointer\nfclose($fp);","output":null}],"ftp_nb_fput":[{"title":"ftp_nb_fput() example","source":"$file = 'index.php';\n\n$fp = fopen($file, 'r');\n\n$conn_id = ftp_connect($ftp_server);\n\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ Initate the upload\n$ret = ftp_nb_fput($conn_id, $file, $fp, FTP_BINARY);\nwhile ($ret == FTP_MOREDATA) {\n\n   \/\/ Do whatever you want\n   echo \".\";\n\n   \/\/ Continue upload...\n   $ret = ftp_nb_continue($conn_id);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error uploading the file...\";\n   exit(1);\n}\n\nfclose($fp);","output":null}],"ftp_nb_get":[{"title":"ftp_nb_get() example","source":"\/\/ Initate the download\n$ret = ftp_nb_get($my_connection, \"test\", \"README\", FTP_BINARY);\nwhile ($ret == FTP_MOREDATA) {\n   \n   \/\/ Do whatever you want\n   echo \".\";\n\n   \/\/ Continue downloading...\n   $ret = ftp_nb_continue($my_connection);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error downloading the file...\";\n   exit(1);\n}","output":null},{"title":"Resuming a download with ftp_nb_get()","source":"\/\/ Initate \n$ret = ftp_nb_get($my_connection, \"test\", \"README\", FTP_BINARY, \n                      filesize(\"test\"));\n\/\/ OR: $ret = ftp_nb_get($my_connection, \"test\", \"README\", \n\/\/                           FTP_BINARY, FTP_AUTORESUME);\nwhile ($ret == FTP_MOREDATA) {\n   \n   \/\/ Do whatever you want\n   echo \".\";\n\n   \/\/ Continue downloading...\n   $ret = ftp_nb_continue($my_connection);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error downloading the file...\";\n   exit(1);\n}","output":null},{"title":"Resuming a download at position 100 to a new file with ftp_nb_get()","source":"\/\/ Disable Autoseek\nftp_set_option($my_connection, FTP_AUTOSEEK, false);\n\n\/\/ Initiate\n$ret = ftp_nb_get($my_connection, \"newfile\", \"README\", FTP_BINARY, 100);\nwhile ($ret == FTP_MOREDATA) {\n\n   \/* ... *\/\n   \n   \/\/ Continue downloading...\n   $ret = ftp_nb_continue($my_connection);\n}","output":null}],"ftp_nb_put":[{"title":"ftp_nb_put() example","source":"\/\/ Initiate the Upload\n$ret = ftp_nb_put($my_connection, \"test.remote\", \"test.local\", FTP_BINARY);\nwhile ($ret == FTP_MOREDATA) {\n   \n   \/\/ Do whatever you want\n   echo \".\";\n\n   \/\/ Continue uploading...\n   $ret = ftp_nb_continue($my_connection);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error uploading the file...\";\n   exit(1);\n}","output":null},{"title":"Resuming an upload with ftp_nb_put()","source":"\/\/ Initiate\n$ret = ftp_nb_put($my_connection, \"test.remote\", \"test.local\", \n                      FTP_BINARY, ftp_size(\"test.remote\"));\n\/\/ OR: $ret = ftp_nb_put($my_connection, \"test.remote\", \"test.local\", \n\/\/                           FTP_BINARY, FTP_AUTORESUME);\n\nwhile ($ret == FTP_MOREDATA) {\n   \n   \/\/ Do whatever you want\n   echo \".\";\n\n   \/\/ Continue uploading...\n   $ret = ftp_nb_continue($my_connection);\n}\nif ($ret != FTP_FINISHED) {\n   echo \"There was an error uploading the file...\";\n   exit(1);\n}","output":null}],"ftp_nlist":[{"title":"ftp_nlist() example","source":"\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ get contents of the current directory\n$contents = ftp_nlist($conn_id, \".\");\n\n\/\/ output $contents\nvar_dump($contents);","output":"array(3) {\n  [0]=>\n  string(11) \"public_html\"\n  [1]=>\n  string(10) \"public_ftp\"\n  [2]=>\n  string(3) \"www\""}],"ftp_pasv":[{"title":"ftp_pasv() example","source":"$file = 'somefile.txt';\n$remote_file = 'readme.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ turn passive mode on\nftp_pasv($conn_id, true);\n\n\/\/ upload a file\nif (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {\n echo \"successfully uploaded $file\\n\";\n} else {\n echo \"There was a problem while uploading $file\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_put":[{"title":"ftp_put() example","source":"$file = 'somefile.txt';\n$remote_file = 'readme.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ upload a file\nif (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {\n echo \"successfully uploaded $file\\n\";\n} else {\n echo \"There was a problem while uploading $file\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_pwd":[{"title":"ftp_pwd() example","source":"\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ change directory to public_html\nftp_chdir($conn_id, 'public_html');\n\n\/\/ print current directory\necho ftp_pwd($conn_id); \/\/ \/public_html\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_raw":[{"title":"Using ftp_raw() to login to an FTP server manually.","source":"$fp = ftp_connect(\"ftp.example.com\");\n\n\/* This is the same as: \n   ftp_login($fp, \"joeblow\", \"secret\"); *\/\nftp_raw($fp, \"USER joeblow\");\nftp_raw($fp, \"PASS secret\");","output":null}],"ftp_rawlist":[{"title":"ftp_rawlist() example","source":"\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ get the file list for \/\n$buff = ftp_rawlist($conn_id, '\/');\n\n\/\/ close the connection\nftp_close($conn_id);\n\n\/\/ output the buffer\nvar_dump($buff);","output":"array(3) {\n  [0]=>\n  string(65) \"drwxr-x---   3 vincent  vincent      4096 Jul 12 12:16 public_ftp\"\n  [1]=>\n  string(66) \"drwxr-x---  15 vincent  vincent      4096 Nov  3 21:31 public_html\"\n  [2]=>\n  string(73) \"lrwxrwxrwx   1 vincent  vincent        11 Jul 12 12:16 www -> public_html\"\n}"}],"ftp_rename":[{"title":"ftp_rename() example","source":"$old_file = 'somefile.txt.bak';\n$new_file = 'somefile.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to rename $old_file to $new_file\nif (ftp_rename($conn_id, $old_file, $new_file)) {\n echo \"successfully renamed $old_file to $new_file\\n\";\n} else {\n echo \"There was a problem while renaming $old_file to $new_file\\n\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_rmdir":[{"title":"ftp_rmdir() example","source":"$dir = 'www\/';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ try to delete the directory $dir\nif (ftp_rmdir($conn_id, $dir)) {\n    echo \"Successfully deleted $dir\\n\";\n} else {\n    echo \"There was a problem while deleting $dir\\n\";\n}\n\nftp_close($conn_id);","output":null}],"ftp_set_option":[{"title":"ftp_set_option() example","source":"\/\/ Set the network timeout to 10 seconds\nftp_set_option($conn_id, FTP_TIMEOUT_SEC, 10);","output":null}],"ftp_site":[{"title":"Sending a SITE command to an ftp server","source":"\/\/ Connect to FTP server\n$conn = ftp_connect('ftp.example.com');\nif (!$conn) die('Unable to connect to ftp.example.com');\n\n\/\/ Login as \"user\" with password \"pass\"\nif (!ftp_login($conn, 'user', 'pass')) die('Error logging into ftp.example.com');\n\n\/\/ Issue: \"SITE CHMOD 0600 \/home\/user\/privatefile\" command to ftp server\nif (ftp_site($conn, 'CHMOD 0600 \/home\/user\/privatefile')) {\n   echo \"Command executed successfully.\\n\";\n} else {\n   die('Command failed.');\n}","output":null}],"ftp_size":[{"title":"ftp_size() example","source":"$file = 'somefile.txt';\n\n\/\/ set up basic connection\n$conn_id = ftp_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\n\/\/ get the size of $file\n$res = ftp_size($conn_id, $file);\n\nif ($res != -1) {\n    echo \"size of $file is $res bytes\";\n} else {\n    echo \"couldn't get the size\";\n}\n\n\/\/ close the connection\nftp_close($conn_id);","output":null}],"ftp_ssl_connect":[{"title":"ftp_ssl_connect() example","source":"\/\/ set up basic ssl connection\n$conn_id = ftp_ssl_connect($ftp_server);\n\n\/\/ login with username and password\n$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);\n\nif (!$login_result) {\n    \/\/ PHP will already have raised an E_WARNING level message in this case\n    die(\"can't login\");\n}\n\necho ftp_pwd($conn_id); \/\/ \/\n\n\/\/ close the ssl connection\nftp_close($conn_id);","output":null}],"ftp_systype":[{"title":"ftp_systype() example","source":"\/\/ ftp connection\n$ftp = ftp_connect('ftp.example.com');\nftp_login($ftp, 'user', 'password');\n\n\/\/ get the system type\nif ($type = ftp_systype($ftp)) {\n    echo \"Example.com is powered by $type\\n\";\n} else {\n    echo \"Couldn't get the systype\";\n}","output":"Example.com is powered by UNIX"}],"ftruncate":[{"title":"File truncation example","source":"$filename = 'lorem_ipsum.txt';\n\n$handle = fopen($filename, 'r+');\nftruncate($handle, rand(1, filesize($filename)));\nrewind($handle);\necho fread($handle, filesize($filename));\nfclose($handle);","output":null}],"func_get_arg":[{"title":"func_get_arg() example","source":"function foo()\n{\n     $numargs = func_num_args();\n     echo \"Number of arguments: $numargs\\n\";\n     if ($numargs >= 2) {\n         echo \"Second argument is: \" . func_get_arg(1) . \"\\n\";\n     }\n}\n\nfoo(1, 2, 3);","output":"Number of arguments: 3\nSecond argument is: 2"},{"title":"func_get_arg() example before and after PHP 5.3","source":"test.php\n<?php\nfunction foo() {\n    include '.\/fga.inc';\n}\n\nfoo('First arg', 'Second arg');\n?>\n\nfga.inc\n<?php\n\n$arg = func_get_arg(1);\nvar_export($arg);","output":"'Second arg'"},{"title":"func_get_arg() example of byref and byval arguments","source":"function byVal($arg) {\n    echo 'As passed     : ', var_export(func_get_arg(0)), PHP_EOL;\n    $arg = 'baz';\n    echo 'After change  : ', var_export(func_get_arg(0)), PHP_EOL;\n}\n\nfunction byRef(&$arg) {\n    echo 'As passed     : ', var_export(func_get_arg(0)), PHP_EOL;\n    $arg = 'baz';\n    echo 'After change  : ', var_export(func_get_arg(0)), PHP_EOL;\n}\n\n$arg = 'bar';\nbyVal($arg);\nbyRef($arg);","output":null}],"func_get_args":[{"title":"func_get_args() example","source":"function foo()\n{\n    $numargs = func_num_args();\n    echo \"Number of arguments: $numargs \\n\";\n    if ($numargs >= 2) {\n        echo \"Second argument is: \" . func_get_arg(1) . \"\\n\";\n    }\n    $arg_list = func_get_args();\n    for ($i = 0; $i < $numargs; $i++) {\n        echo \"Argument $i is: \" . $arg_list[$i] . \"\\n\";\n    }\n}\n\nfoo(1, 2, 3);","output":"Number of arguments: 3 \nSecond argument is: 2\nArgument 0 is: 1\nArgument 1 is: 2\nArgument 2 is: 3"},{"title":"func_get_args() example before and after PHP 5.3","source":"test.php\n<?php\nfunction foo() {\n    include '.\/fga.inc';\n}\n\nfoo('First arg', 'Second arg');\n?>\n\nfga.inc\n<?php\n\n$args = func_get_args();\nvar_export($args);","output":"array (\n  0 => 'First arg',\n  1 => 'Second arg',\n)"},{"title":"func_get_args() example of byref and byval arguments","source":"function byVal($arg) {\n    echo 'As passed     : ', var_export(func_get_args()), PHP_EOL;\n    $arg = 'baz';\n    echo 'After change  : ', var_export(func_get_args()), PHP_EOL;\n}\n\nfunction byRef(&$arg) {\n    echo 'As passed     : ', var_export(func_get_args()), PHP_EOL;\n    $arg = 'baz';\n    echo 'After change  : ', var_export(func_get_args()), PHP_EOL;\n}\n\n$arg = 'bar';\nbyVal($arg);\nbyRef($arg);","output":null}],"func_num_args":[{"title":"func_num_args() example","source":"function foo()\n{\n    $numargs = func_num_args();\n    echo \"Number of arguments: $numargs\\n\";\n}\n\nfoo(1, 2, 3);","output":"Number of arguments: 3"},{"title":"func_num_args() example before and after PHP 5.3","source":"test.php\n<?php\nfunction foo() {\n    include '.\/fna.php';\n}\n\nfoo('First arg', 'Second arg');\n?>\n\nfna.php\n<?php\n\n$num_args = func_num_args();\nvar_export($num_args);","output":2}],"function_exists":[{"title":"function_exists() example","source":"if (function_exists('imap_open')) {\n    echo \"IMAP functions are available.<br \/>\\n\";\n} else {\n    echo \"IMAP functions are not available.<br \/>\\n\";\n}","output":null}],"fwrite":[{"title":"A simple fwrite() example","source":"$filename = 'test.txt';\n$somecontent = \"Add this to the file\\n\";\n\n\/\/ Let's make sure the file exists and is writable first.\nif (is_writable($filename)) {\n\n    \/\/ In our example we're opening $filename in append mode.\n    \/\/ The file pointer is at the bottom of the file hence\n    \/\/ that's where $somecontent will go when we fwrite() it.\n    if (!$handle = fopen($filename, 'a')) {\n         echo \"Cannot open file ($filename)\";\n         exit;\n    }\n\n    \/\/ Write $somecontent to our opened file.\n    if (fwrite($handle, $somecontent) === FALSE) {\n        echo \"Cannot write to file ($filename)\";\n        exit;\n    }\n\n    echo \"Success, wrote ($somecontent) to file ($filename)\";\n\n    fclose($handle);\n\n} else {\n    echo \"The file $filename is not writable\";\n}","output":null}],"gc_enabled":[{"title":"A gc_enabled() example","source":"if(gc_enabled()) gc_collect_cycles();","output":null}],"gd_info":[{"title":"Using gd_info()","source":"var_dump(gd_info());","output":"array(10) {\n  [\"GD Version\"]=>\n  string(24) \"bundled (2.1.0 compatible)\"\n  [\"FreeType Support\"]=>\n  bool(false)\n  [\"T1Lib Support\"]=>\n  bool(false)\n  [\"GIF Read Support\"]=>\n  bool(true)\n  [\"GIF Create Support\"]=>\n  bool(false)\n  [\"JPEG Support\"]=>\n  bool(false)\n  [\"PNG Support\"]=>\n  bool(true)\n  [\"WBMP Support\"]=>\n  bool(true)\n  [\"XBM Support\"]=>\n  bool(false)\n  [\"WebP Support\"]=>\n  bool(false)\n}"}],"geoip_asnum_by_name":[{"title":"A geoip_asnum_by_name() example","source":"$asn = geoip_asnum_by_name('www.example.com');\n\nif ($asn) {\n    echo 'The ASN is: ' $asn;\n}","output":"The ASN is: AS15133 EdgeCast Networks, Inc"}],"geoip_continent_code_by_name":[{"title":"A geoip_continent_code_by_name() example","source":"$continent = geoip_continent_code_by_name('www.example.com');\nif ($continent) {\n    echo 'This host is located in: ' . $continent;\n}","output":"This host is located in: NA"}],"geoip_country_code_by_name":[{"title":"A geoip_country_code_by_name() example","source":"$country = geoip_country_code_by_name('www.example.com');\nif ($country) {\n    echo 'This host is located in: ' . $country;\n}","output":"This host is located in: US"}],"geoip_country_code3_by_name":[{"title":"A geoip_country_code3_by_name() example","source":"$country = geoip_country_code3_by_name('www.example.com');\nif ($country) {\n    echo 'This host is located in: ' . $country;\n}","output":"This host is located in: USA"}],"geoip_country_name_by_name":[{"title":"A geoip_country_name_by_name() example","source":"$country = geoip_country_name_by_name('www.example.com');\nif ($country) {\n    echo 'This host is located in: ' . $country;\n}","output":"This host is located in: United States"}],"geoip_database_info":[{"title":"A geoip_database_info() example","source":"print geoip_database_info(GEOIP_COUNTRY_EDITION);","output":"GEO-106FREE 20060801 Build 1 Copyright (c) 2006 MaxMind LLC All Rights Reserved"}],"geoip_db_avail":[{"title":"A geoip_db_avail() example","source":"if (geoip_db_avail(GEOIP_COUNTRY_EDITION))\n    print geoip_database_info(GEOIP_COUNTRY_EDITION);","output":"GEO-106FREE 20080801 Build 1 Copyright (c) 2006 MaxMind LLC All Rights Reserved"}],"geoip_db_filename":[{"title":"A geoip_db_filename() example","source":"print geoip_db_filename(GEOIP_COUNTRY_EDITION);","output":"\/usr\/share\/GeoIP\/GeoIP.dat"}],"geoip_db_get_all_info":[{"title":"A geoip_db_get_all_info() example","source":"$infos = geoip_db_get_all_info();\nif (is_array($infos)) {\n    var_dump($infos);\n}","output":"array(11) {\n  [1]=>\n  array(3) {\n    [\"available\"]=>\n    bool(true)\n    [\"description\"]=>\n    string(21) \"GeoIP Country Edition\"\n    [\"filename\"]=>\n    string(32) \"\/usr\/share\/GeoIP\/GeoIP.dat\"\n  }\n\n[ ... ]\n\n  [11]=>\n  array(3) {\n    [\"available\"]=>\n    bool(false)\n    [\"description\"]=>\n    string(25) \"GeoIP Domain Name Edition\"\n    [\"filename\"]=>\n    string(38) \"\/usr\/share\/GeoIP\/GeoIPDomain.dat\"\n  }\n}"},{"title":"A geoip_db_get_all_info() example","source":"$infos = geoip_db_get_all_info();\nif ($infos[GEOIP_COUNTRY_EDITION]['available']) {\n    echo $infos[GEOIP_COUNTRY_EDITION]['description'];\n}","output":"GeoIP Country Edition"}],"geoip_domain_by_name":[{"title":"A geoip_domain_by_name() example","source":"$domain = geoip_domain_by_name('61.106.139.1');\n\nif ($domain) {\n    echo 'The domain is: '. $domain;\n}","output":"The domain is: von.co.kr"}],"geoip_id_by_name":[{"title":"A geoip_id_by_name() example","source":"$netspeed = geoip_id_by_name('www.example.com');\n\necho 'The connection type is ';\n\nswitch ($netspeed) {\n    case GEOIP_DIALUP_SPEED:\n        echo 'dial-up';\n        break;\n    case GEOIP_CABLEDSL_SPEED:\n        echo 'cable or DSL';\n        break;\n    case GEOIP_CORPORATE_SPEED:\n        echo 'corporate';\n        break;\n    case GEOIP_UNKNOWN_SPEED:\n    default:\n        echo 'unknown';\n}","output":"The connection type is corporate"}],"geoip_isp_by_name":[{"title":"A geoip_isp_by_name() example","source":"$isp = geoip_isp_by_name('www.example.com');\nif ($isp) {\n    echo 'This host IP is from ISP: ' . $isp;\n}","output":"This host IP is from ISP: ICANN c\/o Internet Assigned Numbers Authority"}],"geoip_netspeedcell_by_name":[{"title":"A geoip_netspeedcell_by_name() example","source":"$netspeed = geoip_netspeedcell_by_name('www.example.com');\n\nif ($netspeed) {\n    echo 'The connection type is: '. $netspeed;\n}","output":"The connection type is: Corporate"}],"geoip_org_by_name":[{"title":"A geoip_org_by_name() example","source":"$org = geoip_org_by_name('www.example.com');\nif ($org) {\n    echo 'This host IP is allocated to: ' . $org;\n}","output":"This host IP is allocated to: ICANN c\/o Internet Assigned Numbers Authority"}],"geoip_record_by_name":[{"title":"A geoip_record_by_name() example","source":"$record = geoip_record_by_name('www.example.com');\nif ($record) {\n    print_r($record);\n}","output":"Array\n(\n    [continent_code] => NA\n    [country_code] => US\n    [country_code3] => USA\n    [country_name] => United States\n    [region] => CA\n    [city] => Marina Del Rey\n    [postal_code] => \n    [latitude] => 33.9776992798\n    [longitude] => -118.435096741\n    [dma_code] => 803\n    [area_code] => 310\n)"}],"geoip_region_by_name":[{"title":"A geoip_region_by_name() example","source":"$region = geoip_region_by_name('www.example.com');\nif ($region) {\n    print_r($region);\n}","output":"Array\n(\n    [country_code] => US\n    [region] => CA\n)"}],"geoip_region_name_by_code":[{"title":"A geoip_region_name_by_code() example using region code for US\/Canada","source":"$region = geoip_region_name_by_code('CA', 'QC');\nif ($region) {\n    echo 'Region name for CA\/QC is: ' . $region;\n}","output":"Region name for CA\/QC is: Quebec"},{"title":"A geoip_region_name_by_code() example using FIPS codes","source":"$region = geoip_region_name_by_code('JP', '01');\nif ($region) {\n    echo 'Region name for JP\/01 is: ' . $region;\n}","output":"Region name for JP\/01 is: Aichi"}],"geoip_setup_custom_directory":[{"title":"A geoip_setup_custom_directory() example","source":"geoip_setup_custom_directory('\/some\/other\/path');\n\nprint geoip_db_filename(GEOIP_COUNTRY_EDITION);","output":"\/some\/other\/path\/GeoIP.dat"}],"geoip_time_zone_by_country_and_region":[{"title":"A geoip_time_zone_by_country_and_region() example using region code for US\/Canada","source":"$timezone = geoip_time_zone_by_country_and_region('CA', 'QC');\nif ($timezone) {\n    echo 'Time zone for CA\/QC is: ' . $timezone;\n}","output":"Time zone for CA\/QC is: America\/Montreal"},{"title":"A geoip_time_zone_by_country_and_region() example using FIPS codes","source":"$timezone = geoip_time_zone_by_country_and_region('JP', '01');\nif ($timezone) {\n    echo 'Time zone for JP\/01 is: ' . $timezone;\n}","output":"Time zone for JP\/01 is: Asia\/Tokyo"}],"get_browser":[{"title":"Listing all information about the users browser","source":"echo $_SERVER['HTTP_USER_AGENT'] . \"\\n\\n\";\n\n$browser = get_browser(null, true);\nprint_r($browser);","output":"Mozilla\/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7) Gecko\/20040803 Firefox\/0.9.3\n\nArray\n(\n    [browser_name_regex] => ^mozilla\/5\\.0 (windows; .; windows nt 5\\.1; .*rv:.*) gecko\/.* firefox\/0\\.9.*$\n    [browser_name_pattern] => Mozilla\/5.0 (Windows; ?; Windows NT 5.1; *rv:*) Gecko\/* Firefox\/0.9*\n    [parent] => Firefox 0.9\n    [platform] => WinXP\n    [browser] => Firefox\n    [version] => 0.9\n    [majorver] => 0\n    [minorver] => 9\n    [cssversion] => 2\n    [frames] => 1\n    [iframes] => 1\n    [tables] => 1\n    [cookies] => 1\n    [backgroundsounds] =>\n    [vbscript] =>\n    [javascript] => 1\n    [javaapplets] => 1\n    [activexcontrols] =>\n    [cdf] =>\n    [aol] =>\n    [beta] => 1\n    [win16] =>\n    [crawler] =>\n    [stripper] =>\n    [wap] =>\n    [netclr] =>\n)"}],"get_called_class":[{"title":"Using get_called_class()","source":"class foo {\n    static public function test() {\n        var_dump(get_called_class());\n    }\n}\n\nclass bar extends foo {\n}\n\nfoo::test();\nbar::test();","output":"string(3) \"foo\"\nstring(3) \"bar\""}],"get_class_methods":[{"title":"get_class_methods() example","source":"class myclass {\n    \/\/ constructor\n    function myclass()\n    {\n        return(true);\n    }\n\n    \/\/ method 1\n    function myfunc1()\n    {\n        return(true);\n    }\n\n    \/\/ method 2\n    function myfunc2()\n    {\n        return(true);\n    }\n}\n\n$class_methods = get_class_methods('myclass');\n\/\/ or\n$class_methods = get_class_methods(new myclass());\n\nforeach ($class_methods as $method_name) {\n    echo \"$method_name\\n\";\n}","output":"myclass\nmyfunc1\nmyfunc2"}],"get_class_vars":[{"title":"get_class_vars() example","source":"class myclass {\n\n    var $var1; \/\/ this has no default value...\n    var $var2 = \"xyz\";\n    var $var3 = 100;\n    private $var4;\n\n    \/\/ constructor\n    function __construct() {\n        \/\/ change some properties\n        $this->var1 = \"foo\";\n        $this->var2 = \"bar\";\n        return true;\n    }\n\n}\n\n$my_class = new myclass();\n\n$class_vars = get_class_vars(get_class($my_class));\n\nforeach ($class_vars as $name => $value) {\n    echo \"$name : $value\\n\";\n}","output":"var1 :\nvar2 : xyz\nvar3 : 100"},{"title":"get_class_vars() and scoping behaviour","source":"function format($array)\n{\n    return implode('|', array_keys($array)) . \"\\r\\n\";\n}\n\nclass TestCase\n{\n    public $a    = 1;\n    protected $b = 2;\n    private $c   = 3;\n\n    public static function expose()\n    {\n        echo format(get_class_vars(__CLASS__));\n    }\n}\n\nTestCase::expose();\necho format(get_class_vars('TestCase'));","output":"\/\/ 5.0.0\na| * b| TestCase c\na| * b| TestCase c\n\n\/\/ 5.0.1 - 5.0.2\na|b|c\na|b|c\n\n\/\/ 5.0.3 +\na|b|c\na"}],"get_class":[{"title":"Using get_class()","source":"class foo {\n    function name()\n    {\n        echo \"My name is \" , get_class($this) , \"\\n\";\n    }\n}\n\n\/\/ create an object\n$bar = new foo();\n\n\/\/ external call\necho \"Its name is \" , get_class($bar) , \"\\n\";\n\n\/\/ internal call\n$bar->name();","output":"Its name is foo\nMy name is foo"},{"title":"Using get_class() in superclass","source":"abstract class bar {\n    public function __construct()\n    {\n        var_dump(get_class($this));\n        var_dump(get_class());\n    }\n}\n\nclass foo extends bar {\n}\n\nnew foo;","output":"string(3) \"foo\"\nstring(3) \"bar\""},{"title":"Using get_class() with namespaced classes","source":"namespace Foo\\Bar;\n\nclass Baz {\n    public function __construct()\n    {\n\n    }\n}\n\n$baz = new \\Foo\\Bar\\Baz;\n\nvar_dump(get_class($baz));","output":"string(11) \"Foo\\Bar\\Baz\""}],"get_current_user":[{"title":"get_current_user() example","source":"echo 'Current script owner: ' . get_current_user();","output":"Current script owner: SYSTEM"}],"get_declared_classes":[{"title":"get_declared_classes() example","source":"print_r(get_declared_classes());","output":"Array\n(\n    [0] => stdClass\n    [1] => __PHP_Incomplete_Class\n    [2] => Directory\n)"}],"get_declared_interfaces":[{"title":"get_declared_interfaces() example","source":"print_r(get_declared_interfaces());","output":"Array\n(\n    [0] => Traversable\n    [1] => IteratorAggregate\n    [2] => Iterator\n    [3] => ArrayAccess\n    [4] => reflector\n    [5] => RecursiveIterator\n    [6] => SeekableIterator\n)"}],"get_defined_constants":[{"title":"The above example will output something similar to:","source":"define(\"MY_CONSTANT\", 1);\nprint_r(get_defined_constants(true));","output":"Array\n(\n    [Core] => Array\n        (\n            [E_ERROR] => 1\n            [E_WARNING] => 2\n            [E_PARSE] => 4\n            [E_NOTICE] => 8\n            [E_CORE_ERROR] => 16\n            [E_CORE_WARNING] => 32\n            [E_COMPILE_ERROR] => 64\n            [E_COMPILE_WARNING] => 128\n            [E_USER_ERROR] => 256\n            [E_USER_WARNING] => 512\n            [E_USER_NOTICE] => 1024\n            [E_ALL] => 2047\n            [TRUE] => 1\n        )\n\n    [pcre] => Array\n        (\n            [PREG_PATTERN_ORDER] => 1\n            [PREG_SET_ORDER] => 2\n            [PREG_OFFSET_CAPTURE] => 256\n            [PREG_SPLIT_NO_EMPTY] => 1\n            [PREG_SPLIT_DELIM_CAPTURE] => 2\n            [PREG_SPLIT_OFFSET_CAPTURE] => 4\n            [PREG_GREP_INVERT] => 1\n        )\n\n    [user] => Array\n        (\n            [MY_CONSTANT] => 1\n        )\n\n)"},{"title":"get_defined_constants() Example","source":"print_r(get_defined_constants());","output":"Array\n(\n    [E_ERROR] => 1\n    [E_WARNING] => 2\n    [E_PARSE] => 4\n    [E_NOTICE] => 8\n    [E_CORE_ERROR] => 16\n    [E_CORE_WARNING] => 32\n    [E_COMPILE_ERROR] => 64\n    [E_COMPILE_WARNING] => 128\n    [E_USER_ERROR] => 256\n    [E_USER_WARNING] => 512\n    [E_USER_NOTICE] => 1024\n    [E_ALL] => 2047\n    [TRUE] => 1\n)"}],"get_defined_functions":[{"title":"get_defined_functions() example","source":"function myrow($id, $data)\n{\n    return \"<tr><th>$id<\/th><td>$data<\/td><\/tr>\\n\";\n}\n\n$arr = get_defined_functions();\n\nprint_r($arr);","output":"Array\n(\n    [internal] => Array\n        (\n            [0] => zend_version\n            [1] => func_num_args\n            [2] => func_get_arg\n            [3] => func_get_args\n            [4] => strlen\n            [5] => strcmp\n            [6] => strncmp\n            ...\n            [750] => bcscale\n            [751] => bccomp\n        )\n\n    [user] => Array\n        (\n            [0] => myrow\n        )\n\n)"}],"get_defined_vars":[{"title":"get_defined_vars() Example","source":"$b = array(1, 1, 2, 3, 5, 8);\n\n$arr = get_defined_vars();\n\n\/\/ print $b\nprint_r($arr[\"b\"]);\n\n\/* print path to the PHP interpreter (if used as a CGI)\n * e.g. \/usr\/local\/bin\/php *\/\necho $arr[\"_\"];\n\n\/\/ print the command-line parameters if any\nprint_r($arr[\"argv\"]);\n\n\/\/ print all the server vars\nprint_r($arr[\"_SERVER\"]);\n\n\/\/ print all the available keys for the arrays of variables\nprint_r(array_keys(get_defined_vars()));","output":null}],"get_extension_funcs":[{"title":"Prints the XML functions","source":"print_r(get_extension_funcs(\"xml\"));","output":"Array\n(\n    [0] => xml_parser_create\n    [1] => xml_parser_create_ns\n    [2] => xml_set_object\n    [3] => xml_set_element_handler\n    [4] => xml_set_character_data_handler\n    [5] => xml_set_processing_instruction_handler\n    [6] => xml_set_default_handler\n    [7] => xml_set_unparsed_entity_decl_handler\n    [8] => xml_set_notation_decl_handler\n    [9] => xml_set_external_entity_ref_handler\n    [10] => xml_set_start_namespace_decl_handler\n    [11] => xml_set_end_namespace_decl_handler\n    [12] => xml_parse\n    [13] => xml_parse_into_struct\n    [14] => xml_get_error_code\n    [15] => xml_error_string\n    [16] => xml_get_current_line_number\n    [17] => xml_get_current_column_number\n    [18] => xml_get_current_byte_index\n    [19] => xml_parser_free\n    [20] => xml_parser_set_option\n    [21] => xml_parser_get_option\n    [22] => utf8_encode\n    [23] => utf8_decode\n)"}],"get_headers":[{"title":"get_headers() example","source":"$url = 'http:\/\/www.example.com';\n\nprint_r(get_headers($url));\n\nprint_r(get_headers($url, 1));","output":"Array\n(\n    [0] => HTTP\/1.1 200 OK\n    [1] => Date: Sat, 29 May 2004 12:28:13 GMT\n    [2] => Server: Apache\/1.3.27 (Unix)  (Red-Hat\/Linux)\n    [3] => Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT\n    [4] => ETag: \"3f80f-1b6-3e1cb03b\"\n    [5] => Accept-Ranges: bytes\n    [6] => Content-Length: 438\n    [7] => Connection: close\n    [8] => Content-Type: text\/html\n)\n\nArray\n(\n    [0] => HTTP\/1.1 200 OK\n    [Date] => Sat, 29 May 2004 12:28:14 GMT\n    [Server] => Apache\/1.3.27 (Unix)  (Red-Hat\/Linux)\n    [Last-Modified] => Wed, 08 Jan 2003 23:11:55 GMT\n    [ETag] => \"3f80f-1b6-3e1cb03b\"\n    [Accept-Ranges] => bytes\n    [Content-Length] => 438\n    [Connection] => close\n    [Content-Type] => text\/html\n)"},{"title":"get_headers() using HEAD example","source":"\/\/ By default get_headers uses a GET request to fetch the headers. If you\n\/\/ want to send a HEAD request instead, you can do so using a stream context:\nstream_context_set_default(\n    array(\n        'http' => array(\n            'method' => 'HEAD'\n        )\n    )\n);\n$headers = get_headers('http:\/\/example.com');","output":null}],"get_html_translation_table":[{"title":"Translation Table Example","source":"var_dump(get_html_translation_table(HTML_ENTITIES, ENT_QUOTES | ENT_HTML5));","output":"array(1510) {\n  [\"\n\"]=>\n  string(9) \"&NewLine;\"\n  [\"!\"]=>\n  string(6) \"&excl;\"\n  [\"\"\"]=>\n  string(6) \"&quot;\"\n  [\"#\"]=>\n  string(5) \"&num;\"\n  [\"$\"]=>\n  string(8) \"&dollar;\"\n  [\"%\"]=>\n  string(8) \"&percnt;\"\n  [\"&\"]=>\n  string(5) \"&amp;\"\n  [\"'\"]=>\n  string(6) \"&apos;\"\n  \/\/ ...\n}"}],"get_include_path":[{"title":"get_include_path() example","source":"echo get_include_path();\n\n\/\/ Or using ini_get()\necho ini_get('include_path');","output":null}],"get_included_files":[{"title":"get_included_files() example","source":"\/\/ This file is abc.php\n\ninclude 'test1.php';\ninclude_once 'test2.php';\nrequire 'test3.php';\nrequire_once 'test4.php';\n\n$included_files = get_included_files();\n\nforeach ($included_files as $filename) {\n    echo \"$filename\\n\";\n}","output":"\/path\/to\/abc.php\n\/path\/to\/test1.php\n\/path\/to\/test2.php\n\/path\/to\/test3.php\n\/path\/to\/test4.php"}],"get_loaded_extensions":[{"title":"get_loaded_extensions() Example","source":"print_r(get_loaded_extensions());","output":"Array\n(\n   [0] => xml\n   [1] => wddx\n   [2] => standard\n   [3] => session\n   [4] => posix\n   [5] => pgsql\n   [6] => pcre\n   [7] => gd\n   [8] => ftp\n   [9] => db\n   [10] => calendar\n   [11] => bcmath\n)"}],"get_magic_quotes_gpc":[{"title":"get_magic_quotes_gpc() example","source":"\/\/ If magic quotes are enabled\necho $_POST['lastname'];             \/\/ O\\'reilly\necho addslashes($_POST['lastname']); \/\/ O\\\\\\'reilly\n\n\/\/ Usage across all PHP versions\nif (get_magic_quotes_gpc()) {\n    $lastname = stripslashes($_POST['lastname']);\n}\nelse {\n    $lastname = $_POST['lastname'];\n}\n\n\/\/ If using MySQL\n$lastname = mysql_real_escape_string($lastname);\n\necho $lastname; \/\/ O\\'reilly\n$sql = \"INSERT INTO lastnames (lastname) VALUES ('$lastname')\";","output":null}],"get_magic_quotes_runtime":[{"title":"get_magic_quotes_runtime() example","source":"\/\/ Check if magic_quotes_runtime is active\nif(get_magic_quotes_runtime())\n{\n    \/\/ Deactivate\n    set_magic_quotes_runtime(false);\n}","output":null}],"get_meta_tags":[{"title":"What get_meta_tags() parses","source":"Extracts all meta tag content attributes from a file and returns an array\n get_headers\n http_build_query\n URL Functions\n PHP Manual\n\n \n  get_meta_tags\n  (PHP 4, PHP 5, PHP 7)get_meta_tags — Extracts all meta tag content attributes from a file and returns an array\n\n \n\n \n  Description\n  \n   array get_meta_tags\n    ( string $filename\n   [, bool $use_include_path = false\n  ] )\n\n  \n   Opens filename and parses it line by line for\n   <meta> tags in the file. The parsing stops at\n   <\/head>.\n  \n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The path to the HTML file, as a string. This can be a local file or an\n       URL.\n      \n      \n       \n        Example #1 What get_meta_tags() parses\n        \n<meta name=\"author\" content=\"name\">\n<meta name=\"keywords\" content=\"php documentation\">\n<meta name=\"DESCRIPTION\" content=\"a php manual\">\n<meta name=\"geo.position\" content=\"49.33;-86.59\">\n<\/head> <!-- parsing stops here -->\n\n        \n\n       \n       (pay attention to line endings - PHP uses a native function to\n       parse the input, so a Mac file won't work on Unix).\n      \n     \n\n    \n    \n     \nuse_include_path\n\n     \n\n      \n       Setting use_include_path to TRUE will result\n       in PHP trying to open the file along the standard include path as per\n       the include_path directive.\n       This is used for local files, not URLs.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns an array with all the parsed meta tags.\n  \n  \n   The value of the name property becomes the key, the value of the content\n   property becomes the value of the returned array, so you can easily use\n   standard array functions to traverse it or access single values. \n   Special characters in the value of the name property are substituted with\n   '_', the rest is converted to lower case.  If two meta tags have the same\n   name, only the last one is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #2 What get_meta_tags() returns\n    \n\n<?php\n\/\/ Assuming the above tags are at www.example.com\n$tags = get_meta_tags('http:\/\/www.example.com\/');\n\n\/\/ Notice how the keys are all lowercase now, and\n\/\/ how . was replaced by _ in the key.\necho $tags['author'];       \/\/ name\necho $tags['keywords'];     \/\/ php documentation\necho $tags['description'];  \/\/ a php manual\necho $tags['geo_position']; \/\/ 49.33;-86.59\n?>\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    Only meta tags with name attributes will be parsed. Quotes are not required.\n   \n  \n \n\n\n \n  See Also\n  \n   htmlentities() - Convert all applicable characters to HTML entities\n    urlencode() - URL-encodes string\n   \n\n\n\n get_headers\n http_build_query\n URL Functions\n PHP Manual","output":null},{"title":"What get_meta_tags() returns","source":"\/\/ Assuming the above tags are at www.example.com\n$tags = get_meta_tags('http:\/\/www.example.com\/');\n\n\/\/ Notice how the keys are all lowercase now, and\n\/\/ how . was replaced by _ in the key.\necho $tags['author'];       \/\/ name\necho $tags['keywords'];     \/\/ php documentation\necho $tags['description'];  \/\/ a php manual\necho $tags['geo_position']; \/\/ 49.33;-86.59","output":null}],"get_object_vars":[{"title":"Use of get_object_vars()","source":"class foo {\n    private $a;\n    public $b = 1;\n    public $c;\n    private $d;\n    static $e;\n   \n    public function test() {\n        var_dump(get_object_vars($this));\n    }\n}\n\n$test = new foo;\nvar_dump(get_object_vars($test));\n\n$test->test();","output":"array(2) {\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  NULL\n}\narray(4) {\n  [\"a\"]=>\n  NULL\n  [\"b\"]=>\n  int(1)\n  [\"c\"]=>\n  NULL\n  [\"d\"]=>\n  NULL\n}"}],"get_parent_class":[{"title":"Using get_parent_class()","source":"class dad {\n    function dad()\n    {\n    \/\/ implements some logic\n    }\n}\n\nclass child extends dad {\n    function child()\n    {\n        echo \"I'm \" , get_parent_class($this) , \"'s son\\n\";\n    }\n}\n\nclass child2 extends dad {\n    function child2()\n    {\n        echo \"I'm \" , get_parent_class('child2') , \"'s son too\\n\";\n    }\n}\n\n$foo = new child();\n$bar = new child2();","output":"I'm dad's son\nI'm dad's son too"}],"get_resource_type":[{"title":"get_resource_type() example","source":"\/\/ prints: mysql link\n$c = mysql_connect();\necho get_resource_type($c) . \"\\n\";\n\n\/\/ prints: stream\n$fp = fopen(\"foo\", \"w\");\necho get_resource_type($fp) . \"\\n\";\n\n\/\/ prints: domxml document\n$doc = new_xmldoc(\"1.0\");\necho get_resource_type($doc->doc) . \"\\n\";","output":null}],"get_resources":[{"title":"Unfiltered get_resources()","source":"$fp = tmpfile();\nvar_dump(get_resources());","output":"array(1) {\n  [1]=>\n  resource(1) of type (stream)\n}"},{"title":"Filtered get_resources()","source":"$fp = tmpfile();\nvar_dump(get_resources('stream'));\nvar_dump(get_resources('curl'));","output":"array(1) {\n  [1]=>\n  resource(1) of type (stream)\n}\narray(0) {\n}"}],"getallheaders":[{"title":"getallheaders() example","source":"foreach (getallheaders() as $name => $value) {\n    echo \"$name: $value\\n\";\n}","output":null}],"getcwd":[{"title":"getcwd() example","source":"\/\/ current directory\necho getcwd() . \"\\n\";\n\nchdir('cvs');\n\n\/\/ current directory\necho getcwd() . \"\\n\";","output":"\/home\/didou\n\/home\/didou\/cvs"}],"getdate":[{"title":"getdate() example","source":"$today = getdate();\nprint_r($today);","output":"Array\n(\n    [seconds] => 40\n    [minutes] => 58\n    [hours]   => 21\n    [mday]    => 17\n    [wday]    => 2\n    [mon]     => 6\n    [year]    => 2003\n    [yday]    => 167\n    [weekday] => Tuesday\n    [month]   => June\n    [0]       => 1055901520\n)"}],"getenv":[{"title":"getenv() Example","source":"\/\/ Example use of getenv()\n$ip = getenv('REMOTE_ADDR');\n\n\/\/ Or simply use a Superglobal ($_SERVER or $_ENV)\n$ip = $_SERVER['REMOTE_ADDR'];\n\n\/\/ Safely get the value of an environment variable, ignoring whether \n\/\/ or not it was set by a SAPI or has been changed with putenv\n$ip = getenv('REMOTE_ADDR', true) ?: getenv('REMOTE_ADDR')","output":null}],"gethostbyaddr":[{"title":"A simple gethostbyaddr() example","source":"$hostname = gethostbyaddr($_SERVER['REMOTE_ADDR']);\n\necho $hostname;","output":null}],"gethostbyname":[{"title":"A simple gethostbyname() example","source":"$ip = gethostbyname('www.example.com');\n\necho $ip;","output":null}],"gethostbynamel":[{"title":"gethostbynamel() example","source":"$hosts = gethostbynamel('www.example.com');\nprint_r($hosts);","output":"Array\n(\n    [0] => 192.0.34.166\n)"}],"gethostname":[{"title":"A simple gethostname() example","source":"echo gethostname(); \/\/ may output e.g,: sandie\n\n\/\/ Or, an option that also works before PHP 5.3\necho php_uname('n'); \/\/ may output e.g,: sandie","output":null}],"getimagesize":[{"title":"getimagesize() and MIME types","source":"$size = getimagesize($filename);\n$fp = fopen($filename, \"rb\");\nif ($size && $fp) {\n    header(\"Content-type: {$size['mime']}\");\n    fpassthru($fp);\n    exit;\n} else {\n    \/\/ error\n}","output":null},{"title":"getimagesize() example","source":"list($width, $height, $type, $attr) = getimagesize(\"img\/flag.jpg\");\necho \"<img src=\\\"img\/flag.jpg\\\" $attr alt=\\\"getimagesize() example\\\" \/>\";","output":null},{"title":"getimagesize (URL)","source":"$size = getimagesize(\"http:\/\/www.example.com\/gifs\/logo.gif\");\n\n\/\/ if the file name has space in it, encode it properly\n$size = getimagesize(\"http:\/\/www.example.com\/gifs\/lo%20go.gif\");","output":null},{"title":"getimagesize() returning IPTC","source":"$size = getimagesize(\"testimg.jpg\", $info);\nif (isset($info[\"APP13\"])) {\n    $iptc = iptcparse($info[\"APP13\"]);\n    var_dump($iptc);\n}","output":null}],"getimagesizefromstring":[{"title":"getimagesizefromstring() example","source":"$img = '\/path\/to\/test.png';\n\n\/\/ Open as a file\n$size_info1 = getimagesize($img);\n\n\/\/ Or open as a string\n$data       = file_get_contents($img);\n$size_info2 = getimagesizefromstring($data);","output":null}],"getlastmod":[{"title":"getlastmod() example","source":"\/\/ outputs e.g. 'Last modified: March 04 1998 20:43:59.'\necho \"Last modified: \" . date (\"F d Y H:i:s.\", getlastmod());","output":null}],"getopt":[{"title":"getopt() example: The basics","source":"\/\/ Script example.php\n$options = getopt(\"f:hp:\");\nvar_dump($options);","output":"array(2) {\n  [\"f\"]=>\n  string(5) \"value\"\n  [\"h\"]=>\n  bool(false)\n}"},{"title":"getopt() example: Introducing long options","source":"\/\/ Script example.php\n$shortopts  = \"\";\n$shortopts .= \"f:\";  \/\/ Required value\n$shortopts .= \"v::\"; \/\/ Optional value\n$shortopts .= \"abc\"; \/\/ These options do not accept values\n\n$longopts  = array(\n    \"required:\",     \/\/ Required value\n    \"optional::\",    \/\/ Optional value\n    \"option\",        \/\/ No value\n    \"opt\",           \/\/ No value\n);\n$options = getopt($shortopts, $longopts);\nvar_dump($options);","output":"array(6) {\n  [\"f\"]=>\n  string(11) \"value for f\"\n  [\"v\"]=>\n  bool(false)\n  [\"a\"]=>\n  bool(false)\n  [\"required\"]=>\n  string(5) \"value\"\n  [\"optional\"]=>\n  string(14) \"optional value\"\n  [\"option\"]=>\n  bool(false)\n}"},{"title":"getopt() example: Passing multiple options as one","source":"\/\/ Script example.php\n$options = getopt(\"abc\");\nvar_dump($options);","output":"array(2) {\n  [\"a\"]=>\n  array(3) {\n    [0]=>\n    bool(false)\n    [1]=>\n    bool(false)\n    [2]=>\n    bool(false)\n  }\n  [\"c\"]=>\n  bool(false)\n}"},{"title":"getopt() example: Using optind","source":"\/\/ Script example.php\n$optind = null;\n$opts = getopt('a:b:', [], $optind);\n$pos_args = array_slice($argv, $optind);\nvar_dump($pos_args);","output":"array(1) {\n  [0]=>\n  string(4) \"test\"\n}"}],"getprotobyname":[{"title":"getprotobyname() example","source":"$protocol = 'tcp';\n$get_prot = getprotobyname($protocol);\nif ($get_prot === FALSE) {\n    echo 'Invalid Protocol';\n} else {\n    echo 'Protocol #' . $get_prot;\n}","output":null}],"getrusage":[{"title":"getrusage() example","source":"$dat = getrusage();\necho $dat[\"ru_oublock\"];       \/\/ number of block output operations\necho $dat[\"ru_inblock\"];       \/\/ number of block input operations\necho $dat[\"ru_msgsnd\"];        \/\/ number of IPC messages sent\necho $dat[\"ru_msgrcv\"];        \/\/ number of IPC messages received\necho $dat[\"ru_maxrss\"];        \/\/ maximum resident set size\necho $dat[\"ru_ixrss\"];         \/\/ integral shared memory size\necho $dat[\"ru_idrss\"];         \/\/ integral unshared data size\necho $dat[\"ru_minflt\"];        \/\/ number of page reclaims (soft page faults)\necho $dat[\"ru_majflt\"];        \/\/ number of page faults (hard page faults)\necho $dat[\"ru_nsignals\"];      \/\/ number of signals received\necho $dat[\"ru_nvcsw\"];         \/\/ number of voluntary context switches\necho $dat[\"ru_nivcsw\"];        \/\/ number of involuntary context switches\necho $dat[\"ru_nswap\"];         \/\/ number of swaps\necho $dat[\"ru_utime.tv_usec\"]; \/\/ user time used (microseconds)\necho $dat[\"ru_utime.tv_sec\"];  \/\/ user time used (seconds)\necho $dat[\"ru_stime.tv_usec\"]; \/\/ system time used (microseconds)","output":null}],"getservbyname":[{"title":"getservbyname() example","source":"$services = array('http', 'ftp', 'ssh', 'telnet', 'imap',\n'smtp', 'nicname', 'gopher', 'finger', 'pop3', 'www');\n\nforeach ($services as $service) {\n    $port = getservbyname($service, 'tcp');\n    echo $service . \": \" . $port . \"<br \/>\\n\";\n}","output":null}],"gettext":[{"title":"gettext()-check","source":"\/\/ Set language to German\nputenv('LC_ALL=de_DE');\nsetlocale(LC_ALL, 'de_DE');\n\n\/\/ Specify location of translation tables\nbindtextdomain(\"myPHPApp\", \".\/locale\");\n\n\/\/ Choose domain\ntextdomain(\"myPHPApp\");\n\n\/\/ Translation is looking for in .\/locale\/de_DE\/LC_MESSAGES\/myPHPApp.mo now\n\n\/\/ Print a test message\necho gettext(\"Welcome to My PHP Application\");\n\n\/\/ Or use the alias _() for gettext()\necho _(\"Have a nice day\");","output":null}],"gettimeofday":[{"title":"gettimeofday() example","source":"print_r(gettimeofday());\n\necho gettimeofday(true);","output":"Array\n(\n    [sec] => 1073504408\n    [usec] => 238215\n    [minuteswest] => 0\n    [dsttime] => 1\n)\n\n1073504408.23910"}],"gettype":[{"title":"gettype() example","source":"$data = array(1, 1., NULL, new stdClass, 'foo');\n\nforeach ($data as $value) {\n    echo gettype($value), \"\\n\";\n}","output":"integer\ndouble\nNULL\nobject\nstring"}],"glob":[{"title":"Convenient way how glob() can replace opendir() and friends.","source":"foreach (glob(\"*.txt\") as $filename) {\n    echo \"$filename size \" . filesize($filename) . \"\\n\";\n}","output":"funclist.txt size 44686\nfuncsummary.txt size 267625\nquickref.txt size 137820"}],"gmdate":[{"title":"gmdate() example","source":"echo date(\"M d Y H:i:s\", mktime(0, 0, 0, 1, 1, 1998));\necho gmdate(\"M d Y H:i:s\", mktime(0, 0, 0, 1, 1, 1998));","output":null}],"gmmktime":[{"title":"gmmktime() basic example","source":"\/\/ Prints: July 1, 2000 is on a Saturday\necho \"July 1, 2000 is on a \" . date(\"l\", gmmktime(0, 0, 0, 7, 1, 2000));","output":null}],"gmp_abs":[{"title":"gmp_abs() example","source":"$abs1 = gmp_abs(\"274982683358\");\n$abs2 = gmp_abs(\"-274982683358\");\n\necho gmp_strval($abs1) . \"\\n\";\necho gmp_strval($abs2) . \"\\n\";","output":"274982683358\n274982683358"}],"gmp_add":[{"title":"gmp_add() example","source":"$sum = gmp_add(\"123456789012345\", \"76543210987655\");\necho gmp_strval($sum) . \"\\n\";","output":200000000000000}],"gmp_and":[{"title":"gmp_and() example","source":"$and1 = gmp_and(\"0xfffffffff4\", \"0x4\");\n$and2 = gmp_and(\"0xfffffffff4\", \"0x8\");\necho gmp_strval($and1) . \"\\n\";\necho gmp_strval($and2) . \"\\n\";","output":"4\n0"}],"gmp_clrbit":[{"title":"gmp_clrbit() example","source":"$a = gmp_init(\"0xff\");\ngmp_clrbit($a, 0); \/\/ index starts at 0, least significant bit\necho gmp_strval($a) . \"\\n\";","output":254}],"gmp_cmp":[{"title":"gmp_cmp() example","source":"$cmp1 = gmp_cmp(\"1234\", \"1000\"); \/\/ greater than\n$cmp2 = gmp_cmp(\"1000\", \"1234\"); \/\/ less than\n$cmp3 = gmp_cmp(\"1234\", \"1234\"); \/\/ equal to\n\necho \"$cmp1 $cmp2 $cmp3\\n\";","output":"1 -1 0"}],"gmp_com":[{"title":"gmp_com() example","source":"$com = gmp_com(\"1234\");\necho gmp_strval($com) . \"\\n\";","output":-1235}],"gmp_div_q":[{"title":"gmp_div_q() example","source":"$div1 = gmp_div_q(\"100\", \"5\");\necho gmp_strval($div1) . \"\\n\";\n\n$div2 = gmp_div_q(\"1\", \"3\");\necho gmp_strval($div2) . \"\\n\";\n\n$div3 = gmp_div_q(\"1\", \"3\", GMP_ROUND_PLUSINF);\necho gmp_strval($div3) . \"\\n\";\n\n$div4 = gmp_div_q(\"-1\", \"4\", GMP_ROUND_PLUSINF);\necho gmp_strval($div4) . \"\\n\";\n\n$div5 = gmp_div_q(\"-1\", \"4\", GMP_ROUND_MINUSINF);\necho gmp_strval($div5) . \"\\n\";","output":"20\n0\n1\n0\n-1"}],"gmp_div_qr":[{"title":"Division of GMP numbers","source":"$a = gmp_init(\"0x41682179fbf5\");\n$res = gmp_div_qr($a, \"0xDEFE75\");\nprintf(\"Result is: q - %s, r - %s\",\n       gmp_strval($res[0]), gmp_strval($res[1]));","output":null}],"gmp_div_r":[{"title":"gmp_div_r() example","source":"$div = gmp_div_r(\"105\", \"20\");\necho gmp_strval($div) . \"\\n\";","output":5}],"gmp_divexact":[{"title":"gmp_divexact() example","source":"$div1 = gmp_divexact(\"10\", \"2\");\necho gmp_strval($div1) . \"\\n\";\n\n$div2 = gmp_divexact(\"10\", \"3\"); \/\/ bogus result\necho gmp_strval($div2) . \"\\n\";","output":"5\n2863311534"}],"gmp_export":[{"title":"gmp_export() example","source":"$number = gmp_init(16705);\necho gmp_export($number) . \"\\n\";","output":"AA"}],"gmp_fact":[{"title":"gmp_fact() example","source":"$fact1 = gmp_fact(5); \/\/ 5 * 4 * 3 * 2 * 1\necho gmp_strval($fact1) . \"\\n\";\n\n$fact2 = gmp_fact(50); \/\/ 50 * 49 * 48, ... etc\necho gmp_strval($fact2) . \"\\n\";","output":"120\n30414093201713378043612608166064768844377641568960512000000000000"}],"gmp_gcd":[{"title":"gmp_gcd() example","source":"$gcd = gmp_gcd(\"12\", \"21\");\necho gmp_strval($gcd) . \"\\n\";","output":3}],"gmp_gcdext":[{"title":"Solving a linear Diophantine equation","source":"\/\/ Solve the equation a*s + b*t = g\n\/\/ where a = 12, b = 21, g = gcd(12, 21) = 3\n$a = gmp_init(12);\n$b = gmp_init(21);\n$g = gmp_gcd($a, $b);\n$r = gmp_gcdext($a, $b);\n\n$check_gcd = (gmp_strval($g) == gmp_strval($r['g']));\n$eq_res = gmp_add(gmp_mul($a, $r['s']), gmp_mul($b, $r['t']));\n$check_res = (gmp_strval($g) == gmp_strval($eq_res));\n\nif ($check_gcd && $check_res) {\n    $fmt = \"Solution: %d*%d + %d*%d = %d\\n\";\n    printf($fmt, gmp_strval($a), gmp_strval($r['s']), gmp_strval($b),\n    gmp_strval($r['t']), gmp_strval($r['g']));\n} else {\n    echo \"Error while solving the equation\\n\";\n}\n\n\/\/ output: Solution: 12*2 + 21*-1 = 3","output":null}],"gmp_hamdist":[{"title":"gmp_hamdist() example","source":"$ham1 = gmp_init(\"1001010011\", 2);\n$ham2 = gmp_init(\"1011111100\", 2);\necho gmp_hamdist($ham1, $ham2) . \"\\n\";\n\n\/* hamdist is equivalent to: *\/\necho gmp_popcount(gmp_xor($ham1, $ham2)) . \"\\n\";","output":"6\n6"}],"gmp_import":[{"title":"gmp_import() example","source":"$number = gmp_import(\"\\0\");\necho gmp_strval($number) . \"\\n\";\n\n$number = gmp_import(\"\\0\\1\\2\");\necho gmp_strval($number) . \"\\n\";","output":"0\n258"}],"gmp_init":[{"title":"Creating GMP number","source":"$a = gmp_init(123456);\n$b = gmp_init(\"0xFFFFDEBACDFEDF7200\");","output":null}],"gmp_intval":[{"title":"gmp_intval() example","source":"\/\/ displays correct result\necho gmp_intval(\"2147483647\") . \"\\n\";\n\n\/\/ displays wrong result, above PHP integer limit\necho gmp_intval(\"2147483648\") . \"\\n\";\n\n\/\/ displays correct result\necho gmp_strval(\"2147483648\") . \"\\n\";","output":"2147483647\n2147483647\n2147483648"}],"gmp_invert":[{"title":"gmp_invert() example","source":"echo gmp_invert(\"5\", \"10\"); \/\/ no inverse, outputs nothing, result is FALSE\n$invert = gmp_invert(\"5\", \"11\");\necho gmp_strval($invert) . \"\\n\";","output":9}],"gmp_jacobi":[{"title":"gmp_jacobi() example","source":"echo gmp_jacobi(\"1\", \"3\") . \"\\n\";\necho gmp_jacobi(\"2\", \"3\") . \"\\n\";","output":"1\n0"}],"gmp_legendre":[{"title":"gmp_legendre() example","source":"echo gmp_legendre(\"1\", \"3\") . \"\\n\";\necho gmp_legendre(\"2\", \"3\") . \"\\n\";","output":"1\n0"}],"gmp_mod":[{"title":"gmp_mod() example","source":"$mod = gmp_mod(\"8\", \"3\");\necho gmp_strval($mod) . \"\\n\";","output":2}],"gmp_mul":[{"title":"gmp_mul() example","source":"$mul = gmp_mul(\"12345678\", \"2000\");\necho gmp_strval($mul) . \"\\n\";","output":24691356000}],"gmp_neg":[{"title":"gmp_neg() example","source":"$neg1 = gmp_neg(\"1\");\necho gmp_strval($neg1) . \"\\n\";\n$neg2 = gmp_neg(\"-1\");\necho gmp_strval($neg2) . \"\\n\";","output":"-1\n1"}],"gmp_nextprime":[{"title":"gmp_nextprime() example","source":"$prime1 = gmp_nextprime(10); \/\/ next prime number greater than 10\n$prime2 = gmp_nextprime(-1000); \/\/ next prime number greater than -1000\n\necho gmp_strval($prime1) . \"\\n\";\necho gmp_strval($prime2) . \"\\n\";","output":"11\n-997"}],"gmp_or":[{"title":"gmp_or() example","source":"$or1 = gmp_or(\"0xfffffff2\", \"4\");\necho gmp_strval($or1, 16) . \"\\n\";\n$or2 = gmp_or(\"0xfffffff2\", \"2\");\necho gmp_strval($or2, 16) . \"\\n\";","output":"fffffff6\nfffffff2"}],"gmp_perfect_square":[{"title":"gmp_perfect_square() example","source":"\/\/ 3 * 3, perfect square\nvar_dump(gmp_perfect_square(\"9\"));\n\n\/\/ not a perfect square\nvar_dump(gmp_perfect_square(\"7\"));\n\n\/\/ 1234567890 * 1234567890, perfect square\nvar_dump(gmp_perfect_square(\"1524157875019052100\"));","output":"bool(true)\nbool(false)\nbool(true)"}],"gmp_popcount":[{"title":"gmp_popcount() example","source":"$pop1 = gmp_init(\"10000101\", 2); \/\/ 3 1's\necho gmp_popcount($pop1) . \"\\n\";\n$pop2 = gmp_init(\"11111110\", 2); \/\/ 7 1's\necho gmp_popcount($pop2) . \"\\n\";","output":"3\n7"}],"gmp_pow":[{"title":"gmp_pow() example","source":"$pow1 = gmp_pow(\"2\", 31);\necho gmp_strval($pow1) . \"\\n\";\n$pow2 = gmp_pow(\"0\", 0);\necho gmp_strval($pow2) . \"\\n\";\n$pow3 = gmp_pow(\"2\", -1); \/\/ Negative exp, generates warning\necho gmp_strval($pow3) . \"\\n\";","output":"2147483648\n1"}],"gmp_powm":[{"title":"gmp_powm() example","source":"$pow1 = gmp_powm(\"2\", \"31\", \"2147483649\");\necho gmp_strval($pow1) . \"\\n\";","output":2147483648}],"gmp_prob_prime":[{"title":"gmp_prob_prime() example","source":"\/\/ definitely not a prime\necho gmp_prob_prime(\"6\") . \"\\n\";\n\n\/\/ probably a prime\necho gmp_prob_prime(\"1111111111111111111\") . \"\\n\";\n\n\/\/ definitely a prime\necho gmp_prob_prime(\"11\") . \"\\n\";","output":"0\n1\n2"}],"gmp_random_bits":[{"title":"gmp_random_bits() example","source":"$rand1 = gmp_random_bits(3); \/\/ random number from 0 to 7\n$rand2 = gmp_random_bits(5); \/\/ random number from 0 to 31\n\necho gmp_strval($rand1) . \"\\n\";\necho gmp_strval($rand2) . \"\\n\";","output":"3\n15"}],"gmp_random_range":[{"title":"gmp_random_range() example","source":"$rand1 = gmp_random_range(0, 100);    \/\/ random number between 0 and 100\n$rand2 = gmp_random_range(-100, -10); \/\/ random number between -100 and -10\n\necho gmp_strval($rand1) . \"\\n\";\necho gmp_strval($rand2) . \"\\n\";","output":"42\n-67"}],"gmp_random_seed":[{"title":"gmp_random_seed() example","source":"\/\/ set the seed\ngmp_random_seed(100);\n\nvar_dump(gmp_strval(gmp_random(1)));\n\n\/\/ set the seed to something else\ngmp_random_seed(gmp_init(-100));\n\nvar_dump(gmp_strval(gmp_random_bits(10)));\n\n\/\/ set the seed to something invalid\nvar_dump(gmp_random_seed('not a number'));","output":"string(20) \"15370156633245019617\"\nstring(3) \"683\"\n\nWarning: gmp_random_seed(): Unable to convert variable to GMP - string is not an integer in %s on line %d\nbool(false)"}],"gmp_random":[{"title":"gmp_random() example","source":"$rand1 = gmp_random(1); \/\/ random number from 0 to 1 * bits per limb\n$rand2 = gmp_random(2); \/\/ random number from 0 to 2 * bits per limb\n\necho gmp_strval($rand1) . \"\\n\";\necho gmp_strval($rand2) . \"\\n\";","output":"1915834968\n8642564075890328087"}],"gmp_scan0":[{"title":"gmp_scan0() example","source":"\/\/ \"0\" bit is found at position 3. index starts at 0\n$s1 = gmp_init(\"10111\", 2);\necho gmp_scan0($s1, 0) . \"\\n\";\n\n\/\/ \"0\" bit is found at position 7. index starts at 5\n$s2 = gmp_init(\"101110000\", 2);\necho gmp_scan0($s2, 5) . \"\\n\";","output":"3\n7"}],"gmp_scan1":[{"title":"gmp_scan1() example","source":"\/\/ \"1\" bit is found at position 3. index starts at 0\n$s1 = gmp_init(\"01000\", 2);\necho gmp_scan1($s1, 0) . \"\\n\";\n\n\/\/ \"1\" bit is found at position 9. index starts at 5\n$s2 = gmp_init(\"01000001111\", 2);\necho gmp_scan1($s2, 5) . \"\\n\";","output":"3\n9"}],"gmp_setbit":[{"title":"gmp_setbit() example - 0 index","source":"$a = gmp_init(\"2\"); \/\/\necho gmp_strval($a), ' -> 0b', gmp_strval($a, 2), \"\\n\";\ngmp_setbit($a, 0); \/\/ 0b10 now becomes 0b11\necho gmp_strval($a), ' -> 0b', gmp_strval($a, 2), \"\\n\";","output":"2 -> 0b10\n3 -> 0b11"},{"title":"gmp_setbit() example - 1 index","source":"$a = gmp_init(\"0xfd\");\necho gmp_strval($a), ' -> 0b', gmp_strval($a, 2), \"\\n\";\ngmp_setbit($a, 1); \/\/ index starts at 0\necho gmp_strval($a), ' -> 0b', gmp_strval($a, 2), \"\\n\";","output":"253 -> 0b11111101\n255 -> 0b11111111"},{"title":"gmp_setbit() example - clearing a bit","source":"$a = gmp_init(\"0xff\");\necho gmp_strval($a), ' -> 0b', gmp_strval($a, 2), \"\\n\";\ngmp_setbit($a, 0, false); \/\/ clear bit at index 0\necho gmp_strval($a), ' -> 0b', gmp_strval($a, 2), \"\\n\";","output":"255 -> 0b11111111\n254 -> 0b11111110"}],"gmp_sign":[{"title":"gmp_sign() example","source":"\/\/ positive\necho gmp_sign(\"500\") . \"\\n\";\n\n\/\/ negative\necho gmp_sign(\"-500\") . \"\\n\";\n\n\/\/ zero\necho gmp_sign(\"0\") . \"\\n\";","output":"1\n-1\n0"}],"gmp_sqrt":[{"title":"gmp_sqrt() example","source":"$sqrt1 = gmp_sqrt(\"9\");\n$sqrt2 = gmp_sqrt(\"7\");\n$sqrt3 = gmp_sqrt(\"1524157875019052100\");\n\necho gmp_strval($sqrt1) . \"\\n\";\necho gmp_strval($sqrt2) . \"\\n\";\necho gmp_strval($sqrt3) . \"\\n\";","output":"3\n2\n1234567890"}],"gmp_sqrtrem":[{"title":"gmp_sqrtrem() example","source":"list($sqrt1, $sqrt1rem) = gmp_sqrtrem(\"9\");\nlist($sqrt2, $sqrt2rem) = gmp_sqrtrem(\"7\");\nlist($sqrt3, $sqrt3rem) = gmp_sqrtrem(\"1048576\");\n\necho gmp_strval($sqrt1) . \", \" . gmp_strval($sqrt1rem) . \"\\n\";\necho gmp_strval($sqrt2) . \", \" . gmp_strval($sqrt2rem) . \"\\n\";\necho gmp_strval($sqrt3) . \", \" . gmp_strval($sqrt3rem) . \"\\n\";","output":"3, 0\n2, 3\n1024, 0"}],"gmp_strval":[{"title":"Converting a GMP number to a string","source":"$a = gmp_init(\"0x41682179fbf5\");\nprintf(\"Decimal: %s, 36-based: %s\", gmp_strval($a), gmp_strval($a,36));","output":null}],"gmp_sub":[{"title":"gmp_sub() example","source":"$sub = gmp_sub(\"281474976710656\", \"4294967296\"); \/\/ 2^48 - 2^32\necho gmp_strval($sub) . \"\\n\";","output":281470681743360}],"gmp_testbit":[{"title":"gmp_testbit() example","source":"$n = gmp_init(\"1000000\");\nvar_dump(gmp_testbit($n, 1));\ngmp_setbit($n, 1);\nvar_dump(gmp_testbit($n, 1));","output":"bool(false)\nbool(true)"}],"gmp_xor":[{"title":"gmp_xor() example","source":"$xor1 = gmp_init(\"1101101110011101\", 2);\n$xor2 = gmp_init(\"0110011001011001\", 2);\n\n$xor3 = gmp_xor($xor1, $xor2);\n\necho gmp_strval($xor3, 2) . \"\\n\";","output":1011110111000100}],"gmstrftime":[{"title":"gmstrftime() example","source":"setlocale(LC_TIME, 'en_US');\necho strftime(\"%b %d %Y %H:%M:%S\", mktime(20, 0, 0, 12, 31, 98)) . \"\\n\";\necho gmstrftime(\"%b %d %Y %H:%M:%S\", mktime(20, 0, 0, 12, 31, 98)) . \"\\n\";","output":null}],"gnupg_adddecryptkey":[{"title":"Procedural gnupg_adddecryptkey() example","source":"$res = gnupg_init();\ngnupg_adddecryptkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");","output":null},{"title":"OO gnupg_adddecryptkey() example","source":"$gpg = new gnupg();\n$gpg -> adddecryptkey(\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");","output":null}],"gnupg_addencryptkey":[{"title":"Procedural gnupg_addencryptkey() example","source":"$res = gnupg_init();\ngnupg_addencryptkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\");","output":null},{"title":"OO gnupg_addencryptkey() example","source":"$gpg = new gnupg();\n$gpg -> addencryptkey(\"8660281B6051D071D94B5B230549F9DC851566DC\");","output":null}],"gnupg_addsignkey":[{"title":"Procedural gnupg_addsignkey() example","source":"$res = gnupg_init();\ngnupg_addsignkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");","output":null},{"title":"OO gnupg_addsignkey() example","source":"$gpg = new gnupg();\n$gpg -> addsignkey(\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");","output":null}],"gnupg_cleardecryptkeys":[{"title":"Procedural gnupg_cleardecryptkeys() example","source":"$res = gnupg_init();\ngnupg_cleardecryptkeys($res);","output":null},{"title":"OO gnupg_cleardecryptkeys() example","source":"$gpg = new gnupg();\n$gpg -> cleardecryptkeys();","output":null}],"gnupg_clearencryptkeys":[{"title":"Procedural gnupg_clearencryptkeys() example","source":"$res = gnupg_init();\ngnupg_clearencryptkeys($res);","output":null},{"title":"OO gnupg_clearencryptkeys() example","source":"$gpg = new gnupg();\n$gpg -> clearencryptkeys();","output":null}],"gnupg_clearsignkeys":[{"title":"Procedural gnupg_clearsignkeys() example","source":"$res = gnupg_init();\ngnupg_clearsignkeys($res);","output":null},{"title":"OO gnupg_clearsignkeys() example","source":"$gpg = new gnupg();\n$gpg -> clearsignkeys();","output":null}],"gnupg_decrypt":[{"title":"Procedural gnupg_decrypt() example","source":"$res = gnupg_init();\ngnupg_adddecryptkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$plain = gnupg_decrypt($res,$encrypted_text);\necho $plain;","output":null},{"title":"OO gnupg_encrypt() example","source":"$gpg = new gnupg();\n$gpg -> adddecryptkey(\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$plain = $gpg -> decrypt($encrypted_text);\necho $plain;","output":null}],"gnupg_decryptverify":[{"title":"Procedural gnupg_decryptverify() example","source":"$plaintext = \"\";\n$res = gnupg_init();\ngnupg_adddecryptkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$info = gnupg_decryptverify($res,$text,$plaintext);\nprint_r($info);","output":null},{"title":"OO gnupg_decryptverify() example","source":"$plaintext = \"\";\n$gpg = new gnupg();\n$gpg -> adddecryptkey(\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$info = $gpg -> decryptverify($text,$plaintext);\nprint_r($info);","output":null}],"gnupg_encrypt":[{"title":"Procedural gnupg_encrypt() example","source":"$res = gnupg_init();\ngnupg_addencryptkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\");\n$enc = gnupg_encrypt($res, \"just a test\");\necho $enc;","output":null},{"title":"OO gnupg_encrypt() example","source":"$gpg = new gnupg();\n$gpg -> addencryptkey(\"8660281B6051D071D94B5B230549F9DC851566DC\");\n$enc = $gpg -> encrypt(\"just a test\");\necho $enc;","output":null}],"gnupg_encryptsign":[{"title":"Procedural gnupg_encryptsign() example","source":"$res = gnupg_init();\ngnupg_addencryptkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\");\ngnupg_addsignkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$enc = gnupg_encryptsign($res, \"just a test\");\necho $enc;","output":null},{"title":"OO gnupg_encryptsign() example","source":"$gpg = new gnupg();\n$gpg -> addencryptkey(\"8660281B6051D071D94B5B230549F9DC851566DC\");\n$gpg -> addsignkey(\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$enc = $gpg -> encryptsign(\"just a test\");\necho $enc;","output":null}],"gnupg_export":[{"title":"Procedural gnupg_export() example","source":"$res = gnupg_init();\n$export = gnupg_export($res,\"8660281B6051D071D94B5B230549F9DC851566DC\");\necho $export;","output":null},{"title":"OO gnupg_export() example","source":"$gpg = new gnupg();\n$export = $gpg -> export(\"8660281B6051D071D94B5B230549F9DC851566DC\");","output":null}],"gnupg_geterror":[{"title":"Procedural gnupg_geterror() example","source":"$res = gnupg_init();\necho gnupg_geterror($res);","output":null},{"title":"OO gnupg_geterror() example","source":"$gpg = new gnupg();\necho $gpg -> geterror();","output":null}],"gnupg_getprotocol":[{"title":"Procedural gnupg_getprotocol() example","source":"$res = gnupg_init();\necho gnupg_getprotocol($res);","output":null},{"title":"OO gnupg_getprotocol() example","source":"$gpg = new gnupg();\necho $gpg -> getprotocol();","output":null}],"gnupg_import":[{"title":"Procedural gnupg_import() example","source":"$res = gnupg_init();\n$info = gnupg_import($res,$keydata);\nprint_r($info);","output":null},{"title":"OO gnupg_import() example","source":"$gpg = new gnupg();\n$info = $gpg -> import($keydata);\nprint_r($info);","output":null}],"gnupg_init":[{"title":"Procedural gnupg_init() example","source":"$res = gnupg_init();","output":null},{"title":"OO gnupg initializer example","source":"$gpg = new gnupg();","output":null}],"gnupg_keyinfo":[{"title":"Procedural gnupg_keyinfo() example","source":"$res = gnupg_init();\n$info = gnupg_keyinfo($res, 'test');\nprint_r($info);","output":null},{"title":"OO gnupg_keyinfo() example","source":"$gpg = new gnupg();\n$info = $gpg -> keyinfo(\"test\");\nprint_r($info);","output":null}],"gnupg_setarmor":[{"title":"Procedural gnupg_setarmor() example","source":"$res = gnupg_init();\ngnupg_setarmor($res,1); \/\/ enable armored output;\ngnupg_setarmor($res,0); \/\/ disable armored output;","output":null},{"title":"OO gnupg_setarmor() example","source":"$gpg = new gnupg();\n$gpg -> setarmor(1); \/\/ enable armored output;\n$gpg -> setarmor(0); \/\/ disable armored output;","output":null}],"gnupg_seterrormode":[{"title":"Procedural gnupg_seterrormode() example","source":"$res = gnupg_init();\ngnupg_seterrormode($res,GNUPG_ERROR_WARNING); \/\/ raise a PHP-Warning in case of an error","output":null},{"title":"OO gnupg_seterrormode() example","source":"$gpg = new gnupg();\n$gpg -> seterrormode(gnupg::ERROR_EXCEPTION); \/\/ throw an exception in case of an error","output":null}],"gnupg_setsignmode":[{"title":"Procedural gnupg_setsignmode() example","source":"$res = gnupg_init();\ngnupg_setsignmode($res,GNUPG_SIG_MODE_DETACH); \/\/ produce a detached signature","output":null},{"title":"OO gnupg_setsignmode() example","source":"$gpg = new gnupg();\n$gpg -> setsignmode(gnupg::SIG_MODE_DETACH); \/\/ produce a detached signature","output":null}],"gnupg_sign":[{"title":"Procedural gnupg_sign() example","source":"$res = gnupg_init();\ngnupg_addsignkey($res,\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$signed = gnupg_sign($res, \"just a test\");\necho $signed;","output":null},{"title":"OO gnupg_sign() example","source":"$gpg = new gnupg();\n$gpg->addsignkey(\"8660281B6051D071D94B5B230549F9DC851566DC\",\"test\");\n$signed = $gpg->sign(\"just a test\");\necho $signed;","output":null}],"gnupg_verify":[{"title":"Procedural gnupg_verify() example","source":"$plaintext = \"\";\n$res = gnupg_init();\n\/\/ clearsigned\n$info = gnupg_verify($res,$signed_text,false,$plaintext);\nprint_r($info);\n\/\/ detached signature\n$info = gnupg_verify($res,$signed_text,$signature);\nprint_r($info);","output":null},{"title":"OO gnupg_verify() example","source":"$plaintext = \"\";\n$gpg = new gnupg();\n\/\/ clearsigned\n$info = $gpg -> verify($signed_text,false,$plaintext);\nprint_r($info);\n\/\/ detached signature\n$info = $gpg -> verify($signed_text,$signature);\nprint_r($info);","output":null}],"gopher_parsedir":[{"title":"Hypothetical output from gopher:\/\/gopher.example.com\/","source":"Translate a gopher formatted directory entry into an associative array.\n Gopher Functions\n Gupnp\n Gopher Functions\n PHP Manual\n\n \n  gopher_parsedir\n  (PECL net_gopher >= 0.1)gopher_parsedir — Translate a gopher formatted directory entry into an associative array.\n\n \n\n \n  Description\n  \n   array gopher_parsedir\n    ( string $dirent\n   )\n\n  \n   gopher_parsedir() parses a gopher formatted directory\n   entry into an associative array.\n  \n  \n   While gopher returns text\/plain documents for\n   actual document requests. A request to a directory (such as \/) will\n   return specially encoded series of lines with each line being one\n   directory entry or information line.\n  \n \n\n\n \n  Parameters\n  \n   \ndirent\n\n     \n\n      \n       The directory entry.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns an associative array whose components are: \n   \n     \n      type - One of the \n      GOPHER_XXX constants.\n     \n    \n    \n     \n      title - The name of the resource.\n     \n    \n    \n     \n      path - The path of the resource.\n     \n    \n    \n     \n      host - The domain name of the host that has\n      this document (or directory).\n     \n    \n    \n     \n      port - The port at which to connect on\n      host.\n     \n    \n   \n   Upon failure, the additional data entry of the\n   returned array will hold the parsed line.\n  \n \n\n \n \n  Examples\n  \n    \n    Example #1 Hypothetical output from gopher:\/\/gopher.example.com\/\n    \n\n0All about my gopher site.               \/allabout.txt               gopher.example.com    70\n9A picture of my cat.                    \/pics\/cat.png               gopher.example.com    70\n1A collection of my writings.            \/stories                    gopher.example.com    70\nhThe HTTP version of this site.          URL:http:\/\/www.example.com  gopher.example.com    70\n1Mirror of this site in Spain.           \/                           gopher.ejemplo.co.es  70\niWelcome to my gopher site.                                          error.host            1\niPlease select one of the options above                              error.host            1\niSend complaints to \/dev\/null                                        error.host            1\niLong live gopher!                                                   error.host            1\n\n    \n   \n  \n  \n   In the example above, the root directory at gopher.example.com knows about\n   one DOCUMENT identified by 0 located at\n   gopher:\/\/gopher.example.com:70\/allabout.txt.  It also knows\n   about two other directory (which have their own listing files) at\n   gopher:\/\/gopher.exmaple.com:70\/stories and at\n   gopher:\/\/gopher.ejemplo.co.es:70\/.\n   In addition there is a binary file, a link to an HTTP url, and several\n   informative lines.\n  \n  \n   By passing each line of the directory listing into \n   gopher_parsedir(), an associative array is formed containing\n   a parsed out version of the data.\n  \n  \n   \n    Example #2 Using gopher_parsedir()\n    \n\n<?php\n$directory = file(\"gopher:\/\/gopher.example.com\");\n\nforeach($directory as $dirent) {\n    print_r(gopher_parsedir($dirent));\n}\n?>\n\n\n    \n\n    The above example will output:\n    \n\nArray (\n  [type] => 0\n  [title] => All about my gopher site.\n  [path] => \/allabout.txt\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 9\n  [title] => A picture of my cat.\n  [path] => \/pics\/cat.png\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 1\n  [title] => A collection of my writings.\n  [path] => \/stories\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 254\n  [title] => The HTTP version of this site.\n  [path] => URL:http:\/\/www.example.com\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 1\n  [title] => Mirror of this site in Spain.\n  [path] => \/\n  [host] => gopher.ejemplo.co.es\n  [port] => 70\n)\nArray (\n  [type] => 255\n  [title] => Welcome to my gopher site.\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\nArray (\n  [type] => 255\n  [title] => Please select one of the options above.\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\nArray (\n  [type] => 255\n  [title] => Send complaints to \/dev\/null\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\nArray (\n  [type] => 255\n  [title] => Long live gopher!\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\n\n    \n   \n  \n \n\n\n Gopher Functions\n Gupnp\n Gopher Functions\n PHP Manual","output":"0All about my gopher site.               \/allabout.txt               gopher.example.com    70\n9A picture of my cat.                    \/pics\/cat.png               gopher.example.com    70\n1A collection of my writings.            \/stories                    gopher.example.com    70\nhThe HTTP version of this site.          URL:http:\/\/www.example.com  gopher.example.com    70\n1Mirror of this site in Spain.           \/                           gopher.ejemplo.co.es  70\niWelcome to my gopher site.                                          error.host            1\niPlease select one of the options above                              error.host            1\niSend complaints to \/dev\/null                                        error.host            1\niLong live gopher!                                                   error.host            1"},{"title":"Using gopher_parsedir()","source":"$directory = file(\"gopher:\/\/gopher.example.com\");\n\nforeach($directory as $dirent) {\n    print_r(gopher_parsedir($dirent));\n}","output":"Array (\n  [type] => 0\n  [title] => All about my gopher site.\n  [path] => \/allabout.txt\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 9\n  [title] => A picture of my cat.\n  [path] => \/pics\/cat.png\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 1\n  [title] => A collection of my writings.\n  [path] => \/stories\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 254\n  [title] => The HTTP version of this site.\n  [path] => URL:http:\/\/www.example.com\n  [host] => gopher.example.com\n  [port] => 70\n)\nArray (\n  [type] => 1\n  [title] => Mirror of this site in Spain.\n  [path] => \/\n  [host] => gopher.ejemplo.co.es\n  [port] => 70\n)\nArray (\n  [type] => 255\n  [title] => Welcome to my gopher site.\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\nArray (\n  [type] => 255\n  [title] => Please select one of the options above.\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\nArray (\n  [type] => 255\n  [title] => Send complaints to \/dev\/null\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)\nArray (\n  [type] => 255\n  [title] => Long live gopher!\n  [path] =>\n  [host] => error.host\n  [port] => 1\n)"}],"grapheme_extract":[{"title":"grapheme_extract() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n\nprint urlencode(grapheme_extract( $char_a_ring_nfd . $char_o_diaeresis_nfd, 1, GRAPHEME_EXTR_COUNT, 2));","output":null}],"grapheme_stripos":[{"title":"grapheme_stripos() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n$char_O_diaeresis_nfd = \"O\\xCC\\x88\"; \/\/ 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6) normalization form \"D\"\n\nprint grapheme_stripos( $char_a_ring_nfd . $char_a_ring_nfd . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd);","output":null}],"grapheme_stristr":[{"title":"grapheme_stristr() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n$char_O_diaeresis_nfd = \"O\\xCC\\x88\"; \/\/ 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6) normalization form \"D\"\n\nprint urlencode(grapheme_stristr( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_a_ring_nfd, $char_O_diaeresis_nfd));","output":null}],"grapheme_strlen":[{"title":"grapheme_strlen() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n\nprint grapheme_strlen( 'abc' . $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_a_ring_nfd);","output":null}],"grapheme_strpos":[{"title":"grapheme_strpos() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n\nprint grapheme_strpos( $char_a_ring_nfd . $char_a_ring_nfd . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd);","output":null}],"grapheme_strripos":[{"title":"grapheme_strripos() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n$char_O_diaeresis_nfd = \"O\\xCC\\x88\"; \/\/ 'LATIN CAPITAL LETTER O WITH DIAERESIS' (U+00D6) normalization form \"D\"\n\nprint grapheme_strripos( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd);","output":null}],"grapheme_strrpos":[{"title":"grapheme_strrpos() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n\nprint grapheme_strrpos( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd);","output":null}],"grapheme_strstr":[{"title":"grapheme_strstr() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n\nprint urlencode(grapheme_stristr( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_a_ring_nfd, $char_o_diaeresis_nfd));","output":null}],"grapheme_substr":[{"title":"grapheme_substr() example","source":"$char_a_ring_nfd = \"a\\xCC\\x8A\";  \/\/ 'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form \"D\"\n$char_o_diaeresis_nfd = \"o\\xCC\\x88\"; \/\/ 'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) normalization form \"D\"\n\nprint urlencode(grapheme_substr( \"ao\" . $char_a_ring_nfd . \"bc\" . $char_o_diaeresis_nfd . \"O\", 2, -1 ));","output":null}],"gregoriantojd":[{"title":"Calendar functions","source":"$jd = GregorianToJD(10, 11, 1970);\necho \"$jd\\n\";\n$gregorian = JDToGregorian($jd);\necho \"$gregorian\\n\";","output":null}],"gupnp_context_get_host_ip":[{"title":"Create new UPnP context and get IP address of the host","source":"\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* Get IP address for the UPnP context *\/\n$ip = gupnp_context_get_host_ip($context);\necho $ip;","output":null}],"gupnp_context_get_port":[{"title":"Create new UPnP context and get port number","source":"\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* Get the port number for the UPnP context *\/\n$port = gupnp_context_get_port($context);\necho $port;","output":null}],"gupnp_context_host_path":[{"title":"Create new UPnP context and set host path","source":"\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* Host current directory *\/\ngupnp_context_host_path($context, \".\/web\", \"\");","output":null}],"gupnp_context_new":[{"title":"Create new UPnP context","source":"\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}","output":null}],"gupnp_context_timeout_add":[{"title":"Create new UPnP context and set callback","source":"$user_data = \"user data\";\n\nfunction timeout_cb($arg)\n{\n    printf(\"Call timeout_cb, user data: '%s'\", $arg);\n    return true;\n}\n\n\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* Create root device *\/\n$dev = gupnp_root_device_new($context, \"\/devicedesc.xml\");\n\n\/* Set callback for timeout *\/\ngupnp_context_timeout_add($context, 5000, \"timeout_cb\", $user_data);\n\n\/* Run the main loop *\/\ngupnp_root_device_start($dev);","output":null}],"gupnp_control_point_browse_start":[{"title":"Create new UPnP context and start browsing","source":"function device_proxy_available_cb($proxy, $arg)\n{\n    $info = gupnp_device_info_get($proxy);\n\n    $type = $info['device_type'];\n    $location = $info['location'];\n\n    printf(\"Device available:\\n\");\n    printf(\"type:     %s\\n\", $type);\n    printf(\"location: %s\\n\", $location);\n}\n\n\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* We're interested in everything *\/\n$cp = gupnp_control_point_new($context, \"ssdp:all\");\n\ngupnp_control_point_callback_set($cp, \n    GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE, 'device_proxy_available_cb');\n\n\/* Start for browsing *\/\ngupnp_control_point_browse_start($cp);","output":null}],"gupnp_control_point_callback_set":[{"title":"Create new UPnP context and start browsing","source":"function device_proxy_available_cb($proxy, $arg)\n{\n    $info = gupnp_device_info_get($proxy);\n\n    $type = $info['device_type'];\n    $location = $info['location'];\n\n    printf(\"Device available:\\n\");\n    printf(\"type:     %s\\n\", $type);\n    printf(\"location: %s\\n\", $location);\n}\n\n\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* We're interested in everything *\/\n$cp = gupnp_control_point_new($context, \"ssdp:all\");\n\ngupnp_control_point_callback_set($cp, \n    GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE, 'device_proxy_available_cb');\n\n\/* Start for browsing *\/\ngupnp_control_point_browse_start($cp);","output":null}],"gupnp_device_info_get_service":[{"title":"Create new UPnP context and get device info service","source":"\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* Create root device *\/\n$location = \"\/BinaryLight1.xml\";\n$dev = gupnp_root_device_new($context, $location);\n\n\/* Set root device is available *\/\ngupnp_root_device_set_available($dev, true);\n\n\/* Get the switch service from the root device *\/\n$service_type = \"urn:schemas-upnp-org:service:SwitchPower:1\";\n$service = gupnp_device_info_get_service($dev, $service_type);\nif (!$service) {\n    die(\"Cannot get SwitchPower1 service\\n\");\n}","output":null}],"gupnp_root_device_new":[{"title":"Create new UPnP context and get device info service","source":"\/* Create the UPnP context *\/\n$context = gupnp_context_new();\n\nif (!$context) {\n die(\"Error creating the GUPnP context\\n\");\n}\n\n\/* Create root device *\/\n$location = \"\/BinaryLight1.xml\";\n$dev = gupnp_root_device_new($context, $location);","output":null}],"gzclose":[{"title":"gzclose() example","source":"$gz = gzopen('somefile.gz','w9');\ngzputs ($gz, 'I was added to somefile.gz');\ngzclose($gz);","output":null}],"gzcompress":[{"title":"gzcompress() example","source":"$compressed = gzcompress('Compress me', 9);\necho $compressed;","output":null}],"gzdeflate":[{"title":"gzdeflate() example","source":"$compressed = gzdeflate('Compress me', 9);\necho $compressed;","output":null}],"gzencode":[{"title":"Creating a gzip file","source":"$data = implode(\"\", file(\"bigfile.txt\"));\n$gzdata = gzencode($data, 9);\n$fp = fopen(\"bigfile.txt.gz\", \"w\");\nfwrite($fp, $gzdata);\nfclose($fp);","output":null}],"gzeof":[{"title":"gzeof() example","source":"$gz = gzopen('somefile.gz', 'r');\nwhile (!gzeof($gz)) {\n  echo gzgetc($gz);\n}\ngzclose($gz);","output":null}],"gzfile":[{"title":"gzfile() example","source":"$lines = gzfile('somefile.gz');\nforeach ($lines as $line) {\n    echo $line;\n}","output":null}],"gzgetc":[{"title":"gzgetc() example","source":"$gz = gzopen('somefile.gz', 'r');\nwhile (!gzeof($gz)) {\n  echo gzgetc($gz);\n}\ngzclose($gz);","output":null}],"gzgets":[{"title":"gzgets() example","source":"$handle = gzopen('somefile.gz', 'r');\nwhile (!gzeof($handle)) {\n   $buffer = gzgets($handle, 4096);\n   echo $buffer;\n}\ngzclose($handle);","output":null}],"gzgetss":[{"title":"gzgetss() example","source":"$handle = gzopen('somefile.gz', 'r');\nwhile (!gzeof($handle)) {\n   $buffer = gzgetss($handle, 4096);\n   echo $buffer;\n}\ngzclose($handle);","output":null}],"gzinflate":[{"title":"gzinflate() example","source":"$compressed   = gzdeflate('Compress me', 9);\n$uncompressed = gzinflate($compressed);\necho $uncompressed;","output":null}],"gzopen":[{"title":"gzopen() Example","source":"$fp = gzopen(\"\/tmp\/file.gz\", \"r\");","output":null}],"gzpassthru":[{"title":"gzpassthru() example","source":"$fp = gzopen('file.gz', 'r');\ngzpassthru($fp);\ngzclose($fp);","output":null}],"gzread":[{"title":"gzread() example","source":"\/\/ get contents of a gz-file into a string\n$filename = \"\/usr\/local\/something.txt.gz\";\n$zd = gzopen($filename, \"r\");\n$contents = gzread($zd, 10000);\ngzclose($zd);","output":null}],"gzseek":[{"title":"gzseek() example","source":"$gz = gzopen('somefile.gz', 'r');\ngzseek($gz,2);\necho gzgetc($gz);\ngzclose($gz);","output":null}],"gzuncompress":[{"title":"gzuncompress() example","source":"$compressed   = gzcompress('Compress me', 9);\n$uncompressed = gzuncompress($compressed);\necho $uncompressed;","output":null}],"gzwrite":[{"title":"gzwrite() example","source":"$string = 'Some information to compress';\n$gz = gzopen('somefile.gz','w9');\ngzwrite($gz, $string);\ngzclose($gz);","output":null}],"__halt_compiler":[{"title":"A __halt_compiler() example","source":"\/\/ open this file\n$fp = fopen(__FILE__, 'r');\n\n\/\/ seek file pointer to data\nfseek($fp, __COMPILER_HALT_OFFSET__);\n\n\/\/ and output it\nvar_dump(stream_get_contents($fp));\n\n\/\/ the end of the script execution\n__halt_compiler(); the installation data (eg. tar, gz, PHP, etc.)","output":null}],"hash_algos":[{"title":"hash_algos() example","source":"print_r(hash_algos());","output":"Array\n(\n    [0] => md2\n    [1] => md4\n    [2] => md5\n    [3] => sha1\n    [4] => sha224\n    [5] => sha256\n    [6] => sha384\n    [7] => sha512\n    [8] => ripemd128\n    [9] => ripemd160\n    [10] => ripemd256\n    [11] => ripemd320\n    [12] => whirlpool\n    [13] => tiger128,3\n    [14] => tiger160,3\n    [15] => tiger192,3\n    [16] => tiger128,4\n    [17] => tiger160,4\n    [18] => tiger192,4\n    [19] => snefru\n    [20] => snefru256\n    [21] => gost\n    [22] => gost-crypto\n    [23] => adler32\n    [24] => crc32\n    [25] => crc32b\n    [26] => fnv132\n    [27] => fnv1a32\n    [28] => fnv164\n    [29] => fnv1a64\n    [30] => joaat\n    [31] => haval128,3\n    [32] => haval160,3\n    [33] => haval192,3\n    [34] => haval224,3\n    [35] => haval256,3\n    [36] => haval128,4\n    [37] => haval160,4\n    [38] => haval192,4\n    [39] => haval224,4\n    [40] => haval256,4\n    [41] => haval128,5\n    [42] => haval160,5\n    [43] => haval192,5\n    [44] => haval224,5\n    [45] => haval256,5\n)"}],"hash_copy":[{"title":"hash_copy() example","source":"$context = hash_init(\"md5\");\nhash_update($context, \"data\");\n\n\/* copy context to be able to continue using it *\/\n$copy_context = hash_copy($context);\n\necho hash_final($context), \"\\n\";\n\nhash_update($copy_context, \"data\");\necho hash_final($copy_context), \"\\n\";","output":"8d777f385d3dfec8815d20f7496026dc\n511ae0b1c13f95e5f08f1a0dd3da3d93"}],"hash_equals":[{"title":"example","source":"$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');\n$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');\n$incorrect = crypt('apple',  '$2a$07$usesomesillystringforsalt$');\n\nvar_dump(hash_equals($expected, $correct));\nvar_dump(hash_equals($expected, $incorrect));","output":"bool(true)\nbool(false)"}],"hash_file":[{"title":"Using hash_file()","source":"\/* Create a file to calculate hash of *\/\nfile_put_contents('example.txt', 'The quick brown fox jumped over the lazy dog.');\n\necho hash_file('md5', 'example.txt');","output":"5c6ffbdd40d9556b73a21e63c3e0e904"}],"hash_final":[{"title":"hash_final() example","source":"$ctx = hash_init('sha1');\nhash_update($ctx, 'The quick brown fox jumped over the lazy dog.');\necho hash_final($ctx);","output":"c0854fb9fb03c41cce3802cb0d220529e6eef94e"}],"hash_hkdf":[{"title":"hash_hkdf() example","source":"\/\/ Generate a random key, and salt to strengthen it during derivation.\n$inputKey = random_bytes(32);\n$salt = random_bytes(16);\n\n\/\/ Derive a pair of separate keys, using the same input created above.\n$encryptionKey = hash_hkdf('sha256', $inputKey, 32, 'aes-256-encryption', $salt);\n$authenticationKey = hash_hkdf('sha256', $inputKey, 32, 'sha-256-authentication', $salt);\n\nvar_dump($encryptionKey !== $authenticationKey); \/\/ bool(true)","output":null}],"hash_hmac_file":[{"title":"hash_hmac_file() example","source":"\/* Create a file to calculate hash of *\/\nfile_put_contents('example.txt', 'The quick brown fox jumped over the lazy dog.');\n\necho hash_hmac_file('md5', 'example.txt', 'secret');","output":"7eb2b5c37443418fc77c136dd20e859c"}],"hash_hmac":[{"title":"hash_hmac() example","source":"echo hash_hmac('ripemd160', 'The quick brown fox jumped over the lazy dog.', 'secret');","output":"b8e7ae12510bdfb1812e463a7f086122cf37e4f7"}],"hash_init":[{"title":"Incremental hashing example","source":"$ctx = hash_init('md5');\nhash_update($ctx, 'The quick brown fox ');\nhash_update($ctx, 'jumped over the lazy dog.');\necho hash_final($ctx);","output":"5c6ffbdd40d9556b73a21e63c3e0e904"}],"hash_pbkdf2":[{"title":"hash_pbkdf2() example, basic usage","source":"$password = \"password\";\n$iterations = 1000;\n\n\/\/ Generate a random IV using mcrypt_create_iv(),\n\/\/ openssl_random_pseudo_bytes() or another suitable source of randomness\n$salt = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);\n\n$hash = hash_pbkdf2(\"sha256\", $password, $salt, $iterations, 20);\necho $hash;","output":"120fb6cffcf8b32c43e7"}],"hash_update_stream":[{"title":"hash_update_stream() example","source":"$fp = tmpfile();\nfwrite($fp, 'The quick brown fox jumped over the lazy dog.');\nrewind($fp);\n\n$ctx = hash_init('md5');\nhash_update_stream($ctx, $fp);\necho hash_final($ctx);","output":"5c6ffbdd40d9556b73a21e63c3e0e904"}],"hash":[{"title":"A hash() example","source":"echo hash('ripemd160', 'The quick brown fox jumped over the lazy dog.');","output":"ec457d0a974c48d5685a7efa03d137dc8bbde7e3"},{"title":"Calculate pre PHP-5.4 tiger hashes with PHP-5.4 and higher","source":"function old_tiger($data = \"\", $width=192, $rounds = 3) {\n    return substr(\n        implode(\n            array_map(\n                function ($h) {\n                    return str_pad(bin2hex(strrev($h)), 16, \"0\");\n                },\n                str_split(hash(\"tiger192,$rounds\", $data, true), 8)\n            )\n        ),\n        0, 48-(192-$width)\/4\n    );\n}\necho hash('tiger192,3', 'a-string'), PHP_EOL;\necho old_tiger('a-string'), PHP_EOL;","output":"146a7492719b3564094efe7abbd40a7416fd900179d02773\n64359b7192746a14740ad4bb7afe4e097327d0790190fd16"}],"header_register_callback":[{"title":"header_register_callback() example","source":"header('Content-Type: text\/plain');\nheader('X-Test: foo');\n\nfunction foo() {\n foreach (headers_list() as $header) {\n   if (strpos($header, 'X-Powered-By:') !== false) {\n     header_remove('X-Powered-By');\n   }\n   header_remove('X-Test');\n }\n}\n\n$result = header_register_callback('foo');\necho \"a\";","output":"Content-Type: text\/plain\n\na"}],"header_remove":[{"title":"Unsetting specific header.","source":"header(\"X-Foo: Bar\");\nheader(\"X-Bar: Baz\");\nheader_remove(\"X-Foo\");","output":"X-Bar: Baz"},{"title":"Unsetting all previously set headers.","source":"header(\"X-Foo: Bar\");\nheader(\"X-Bar: Baz\");\nheader_remove();","output":null}],"header":[{"title":null,"source":"<html>\n<?php\n\/* This will give an error. Note the output\n * above, which is before the header() call *\/\nheader('Location: http:\/\/www.example.com\/');\nexit;","output":null},{"title":null,"source":"header(\"HTTP\/1.0 404 Not Found\");","output":null},{"title":null,"source":"header(\"Location: http:\/\/www.example.com\/\"); \/* Redirect browser *\/\n\n\/* Make sure that code below does not get executed when we redirect. *\/\nexit;","output":null},{"title":null,"source":"header('WWW-Authenticate: Negotiate');\nheader('WWW-Authenticate: NTLM', false);","output":null},{"title":"Download dialog","source":"\/\/ We'll be outputting a PDF\nheader('Content-Type: application\/pdf');\n\n\/\/ It will be called downloaded.pdf\nheader('Content-Disposition: attachment; filename=\"downloaded.pdf\"');\n\n\/\/ The PDF source is in original.pdf\nreadfile('original.pdf');","output":null},{"title":"Caching directives","source":"header(\"Cache-Control: no-cache, must-revalidate\"); \/\/ HTTP\/1.1\nheader(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\"); \/\/ Date in the past","output":null},{"title":null,"source":"\/* Redirect to a different page in the current directory that was requested *\/\n$host  = $_SERVER['HTTP_HOST'];\n$uri   = rtrim(dirname($_SERVER['PHP_SELF']), '\/\\\\');\n$extra = 'mypage.php';\nheader(\"Location: http:\/\/$host$uri\/$extra\");\nexit;","output":null}],"headers_list":[{"title":"Examples using headers_list()","source":"\/* setcookie() will add a response header on its own *\/\nsetcookie('foo', 'bar');\n\n\/* Define a custom response header\n   This will be ignored by most clients *\/\nheader(\"X-Sample-Test: foo\");\n\n\/* Specify plain text content in our response *\/\nheader('Content-type: text\/plain');\n\n\/* What headers are going to be sent? *\/\nvar_dump(headers_list());","output":"array(4) {\n  [0]=>\n  string(23) \"X-Powered-By: PHP\/5.1.3\"\n  [1]=>\n  string(19) \"Set-Cookie: foo=bar\"\n  [2]=>\n  string(18) \"X-Sample-Test: foo\"\n  [3]=>\n  string(24) \"Content-type: text\/plain\"\n}"}],"headers_sent":[{"title":"Examples using headers_sent()","source":"\/\/ If no headers are sent, send one\nif (!headers_sent()) {\n    header('Location: http:\/\/www.example.com\/');\n    exit;\n}\n\n\/\/ An example using the optional file and line parameters\n\/\/ Note that $filename and $linenum are passed in for later use.\n\/\/ Do not assign them values beforehand.\nif (!headers_sent($filename, $linenum)) {\n    header('Location: http:\/\/www.example.com\/');\n    exit;\n\n\/\/ You would most likely trigger an error here.\n} else {\n\n    echo \"Headers already sent in $filename on line $linenum\\n\" .\n          \"Cannot redirect, for now please click this <a \" .\n          \"href=\\\"http:\/\/www.example.com\\\">link<\/a> instead\\n\";\n    exit;\n}","output":null}],"hex2bin":[{"title":"hex2bin() example","source":"$hex = hex2bin(\"6578616d706c65206865782064617461\");\nvar_dump($hex);","output":"string(16) \"example hex data\""}],"hexdec":[{"title":"hexdec() example","source":"var_dump(hexdec(\"See\"));\nvar_dump(hexdec(\"ee\"));\n\/\/ both print \"int(238)\"\n\nvar_dump(hexdec(\"that\")); \/\/ print \"int(10)\"\nvar_dump(hexdec(\"a0\")); \/\/ print \"int(160)\"","output":null}],"highlight_string":[{"title":"highlight_string() example","source":"highlight_string('<?php phpinfo(); ?>');","output":"<code><span style=\"color: #000000\">\n<span style=\"color: #0000BB\">&lt;?php phpinfo<\/span><span style=\"color: #007700\">(); <\/span><span style=\"color: #0000BB\">?&gt;<\/span>\n<\/span>\n<\/code>"}],"html_entity_decode":[{"title":"Decoding HTML entities","source":"$orig = \"I'll \\\"walk\\\" the <b>dog<\/b> now\";\n\n$a = htmlentities($orig);\n\n$b = html_entity_decode($a);\n\necho $a; \/\/ I'll &quot;walk&quot; the &lt;b&gt;dog&lt;\/b&gt; now\n\necho $b; \/\/ I'll \"walk\" the <b>dog<\/b> now","output":null}],"htmlentities":[{"title":"A htmlentities() example","source":"$str = \"A 'quote' is <b>bold<\/b>\";\n\n\/\/ Outputs: A 'quote' is &lt;b&gt;bold&lt;\/b&gt;\necho htmlentities($str);\n\n\/\/ Outputs: A &#039;quote&#039; is &lt;b&gt;bold&lt;\/b&gt;\necho htmlentities($str, ENT_QUOTES);","output":null},{"title":"Usage of ENT_IGNORE","source":"$str = \"\\x8F!!!\";\n\n\/\/ Outputs an empty string\necho htmlentities($str, ENT_QUOTES, \"UTF-8\");\n\n\/\/ Outputs \"!!!\"\necho htmlentities($str, ENT_QUOTES | ENT_IGNORE, \"UTF-8\");","output":null}],"htmlspecialchars_decode":[{"title":"A htmlspecialchars_decode() example","source":"$str = \"<p>this -&gt; &quot;<\/p>\\n\";\n\necho htmlspecialchars_decode($str);\n\n\/\/ note that here the quotes aren't converted\necho htmlspecialchars_decode($str, ENT_NOQUOTES);","output":"<p>this -> \"<\/p>\n<p>this -> &quot;<\/p>"}],"htmlspecialchars":[{"title":"htmlspecialchars() example","source":"$new = htmlspecialchars(\"<a href='test'>Test<\/a>\", ENT_QUOTES);\necho $new; \/\/ &lt;a href=&#039;test&#039;&gt;Test&lt;\/a&gt;","output":null}],"http_build_query":[{"title":"Simple usage of http_build_query()","source":"$data = array(\n    'foo' => 'bar',\n    'baz' => 'boom',\n    'cow' => 'milk',\n    'php' => 'hypertext processor'\n);\n\necho http_build_query($data) . \"\\n\";\necho http_build_query($data, '', '&amp;');","output":"foo=bar&baz=boom&cow=milk&php=hypertext+processor\nfoo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor"},{"title":"http_build_query() with numerically index elements.","source":"$data = array('foo', 'bar', 'baz', 'boom', 'cow' => 'milk', 'php' => 'hypertext processor');\n\necho http_build_query($data) . \"\\n\";\necho http_build_query($data, 'myvar_');","output":"0=foo&1=bar&2=baz&3=boom&cow=milk&php=hypertext+processor\nmyvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_3=boom&cow=milk&php=hypertext+processor"},{"title":"http_build_query() with complex arrays","source":"$data = array(\n    'user' => array(\n        'name' => 'Bob Smith',\n        'age'  => 47,\n        'sex'  => 'M',\n        'dob'  => '5\/12\/1956'\n    ),\n    'pastimes' => array('golf', 'opera', 'poker', 'rap'),\n    'children' => array(\n        'bobby' => array('age'=>12, 'sex'=>'M'),\n        'sally' => array('age'=>8, 'sex'=>'F')\n    ),\n    'CEO'\n);\n\necho http_build_query($data, 'flags_');","output":"user%5Bname%5D=Bob+Smith&user%5Bage%5D=47&user%5Bsex%5D=M&\nuser%5Bdob%5D=5%2F12%2F1956&pastimes%5B0%5D=golf&pastimes%5B1%5D=opera&\npastimes%5B2%5D=poker&pastimes%5B3%5D=rap&children%5Bbobby%5D%5Bage%5D=12&\nchildren%5Bbobby%5D%5Bsex%5D=M&children%5Bsally%5D%5Bage%5D=8&\nchildren%5Bsally%5D%5Bsex%5D=F&flags_0=CEO"},{"title":"Using http_build_query() with an object","source":"class parentClass {\n    public    $pub      = 'publicParent';\n    protected $prot     = 'protectedParent';\n    private   $priv     = 'privateParent';\n    public    $pub_bar  = Null;\n    protected $prot_bar = Null;\n    private   $priv_bar = Null;\n\n    public function __construct(){\n        $this->pub_bar  = new childClass();\n        $this->prot_bar = new childClass();\n        $this->priv_bar = new childClass();\n    }\n}\n\nclass childClass {\n    public    $pub  = 'publicChild';\n    protected $prot = 'protectedChild';\n    private   $priv = 'privateChild';\n}\n\n$parent = new parentClass();\n\necho http_build_query($parent);","output":"pub=publicParent&pub_bar%5Bpub%5D=publicChild"}],"http_response_code":[{"title":"Using http_response_code() in a web server environment","source":"\/\/ Get the current response code and set a new one\nvar_dump(http_response_code(404));\n\n\/\/ Get the new response code\nvar_dump(http_response_code());","output":"int(200)\nint(404)"},{"title":"Using http_response_code() in a CLI environment","source":"\/\/ Get the current default response code\nvar_dump(http_response_code());\n\n\/\/ Set a response code\nvar_dump(http_response_code(201));\n\n\/\/ Get the new response code\nvar_dump(http_response_code());","output":"bool(false)\nbool(true)\nint(201)"}],"ibase_blob_get":[{"title":"ibase_blob_get() example","source":"$result    = ibase_query(\"SELECT blob_value FROM table\");\n$data      = ibase_fetch_object($result);\n$blob_data = ibase_blob_info($data->BLOB_VALUE);\n$blob_hndl = ibase_blob_open($data->BLOB_VALUE);\necho         ibase_blob_get($blob_hndl, $blob_data[0]);","output":null}],"ibase_connect":[{"title":"ibase_connect() example","source":"$host = 'localhost:\/path\/to\/your.gdb';\n\n$dbh = ibase_connect($host, $username, $password);\n$stmt = 'SELECT * FROM tblname';\n$sth = ibase_query($dbh, $stmt);\nwhile ($row = ibase_fetch_object($sth)) {\n    echo $row->email, \"\\n\";\n}\nibase_free_result($sth);\nibase_close($dbh);","output":null}],"ibase_execute":[{"title":"ibase_execute() example","source":"$dbh = ibase_connect($host, $username, $password);\n\n$updates = array(\n    1 => 'Eric',\n    5 => 'Filip',\n    7 => 'Larry'\n);\n\n$query = ibase_prepare($dbh, \"UPDATE FOO SET BAR = ? WHERE BAZ = ?\");\n\nforeach ($updates as $baz => $bar) {\n    ibase_execute($query, $bar, $baz);\n}","output":null}],"ibase_fetch_object":[{"title":"ibase_fetch_object() example","source":"$dbh = ibase_connect($host, $username, $password);\n$stmt = 'SELECT * FROM tblname';\n$sth = ibase_query($dbh, $stmt);\nwhile ($row = ibase_fetch_object($sth)) {\n    echo $row->email . \"\\n\";\n}\nibase_close($dbh);","output":null}],"ibase_field_info":[{"title":"ibase_field_info() example","source":"$rs = ibase_query(\"SELECT * FROM tablename\");\n$coln = ibase_num_fields($rs);\nfor ($i = 0; $i < $coln; $i++) {\n    $col_info = ibase_field_info($rs, $i);\n    echo \"name: \". $col_info['name']. \"\\n\";\n    echo \"alias: \". $col_info['alias']. \"\\n\";\n    echo \"relation: \". $col_info['relation']. \"\\n\";\n    echo \"length: \". $col_info['length']. \"\\n\";\n    echo \"type: \". $col_info['type']. \"\\n\";\n}","output":null}],"ibase_name_result":[{"title":"ibase_name_result() example","source":"$result = ibase_query(\"SELECT field1,field2 FROM table FOR UPDATE\");\nibase_name_result($result, \"my_cursor\");\n\n$updateqry = ibase_prepare(\"UPDATE table SET field2 = ? WHERE CURRENT OF my_cursor\");\n\nfor ($i = 0; ibase_fetch_row($result); ++$i) {\n    ibase_execute($updateqry, $i);\n}","output":null}],"ibase_num_fields":[{"title":"ibase_num_fields() example","source":"$rs = ibase_query(\"SELECT * FROM tablename\");\n$coln = ibase_num_fields($rs);\nfor ($i = 0; $i < $coln; $i++) {\n    $col_info = ibase_field_info($rs, $i);\n    echo \"name: \" . $col_info['name'] . \"\\n\";\n    echo \"alias: \" . $col_info['alias'] . \"\\n\";\n    echo \"relation: \" . $col_info['relation'] . \"\\n\";\n    echo \"length: \" . $col_info['length'] . \"\\n\";\n    echo \"type: \" . $col_info['type'] . \"\\n\";\n}","output":null}],"ibase_query":[{"title":"ibase_query() example","source":"$host = 'localhost:\/path\/to\/your.gdb';\n\n$dbh = ibase_connect($host, $username, $password);\n$stmt = 'SELECT * FROM tblname';\n\n$sth = ibase_query($dbh, $stmt) or die(ibase_errmsg());","output":null}],"iconv_get_encoding":[{"title":"iconv_get_encoding() example","source":"<pre>\n<?php\niconv_set_encoding(\"internal_encoding\", \"UTF-8\");\niconv_set_encoding(\"output_encoding\", \"ISO-8859-1\");\nvar_dump(iconv_get_encoding('all'));\n?>\n<\/pre>","output":"Array\n(\n    [input_encoding] => ISO-8859-1\n    [output_encoding] => ISO-8859-1\n    [internal_encoding] => UTF-8\n)"}],"iconv_mime_decode_headers":[{"title":"iconv_mime_decode_headers() example","source":"$headers_string = <<<EOF\nSubject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\nTo: example@example.com\nDate: Thu, 1 Jan 1970 00:00:00 +0000\nMessage-Id: <example@example.com>\nReceived: from localhost (localhost [127.0.0.1]) by localhost\n    with SMTP id example for <example@example.com>;\n    Thu, 1 Jan 1970 00:00:00 +0000 (UTC)\n    (envelope-from example-return-0000-example=example.com@example.com)\nReceived: (qmail 0 invoked by uid 65534); 1 Thu 2003 00:00:00 +0000\n\nEOF;\n\n$headers =  iconv_mime_decode_headers($headers_string, 0, \"ISO-8859-1\");\nprint_r($headers);","output":"Array\n(\n    [Subject] => Prüfung Prüfung\n    [To] => example@example.com\n    [Date] => Thu, 1 Jan 1970 00:00:00 +0000\n    [Message-Id] => <example@example.com>\n    [Received] => Array\n        (\n            [0] => from localhost (localhost [127.0.0.1]) by localhost with SMTP id example for <example@example.com>; Thu, 1 Jan 1970 00:00:00 +0000 (UTC) (envelope-from example-return-0000-example=example.com@example.com)\n            [1] => (qmail 0 invoked by uid 65534); 1 Thu 2003 00:00:00 +0000\n        )\n\n)"}],"iconv_mime_decode":[{"title":"iconv_mime_decode() example","source":"\/\/ This yields \"Subject: Prüfung Prüfung\"\necho iconv_mime_decode(\"Subject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\",\n                       0, \"ISO-8859-1\");","output":null}],"iconv_mime_encode":[{"title":"iconv_mime_encode() example","source":"$preferences = array(\n    \"input-charset\" => \"ISO-8859-1\",\n    \"output-charset\" => \"UTF-8\",\n    \"line-length\" => 76,\n    \"line-break-chars\" => \"\\n\"\n);\n$preferences[\"scheme\"] = \"Q\";\n\/\/ This yields \"Subject: =?UTF-8?Q?Pr=C3=BCfung=20Pr=C3=BCfung?=\"\necho iconv_mime_encode(\"Subject\", \"Prüfung Prüfung\", $preferences);\n\n$preferences[\"scheme\"] = \"B\";\n\/\/ This yields \"Subject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\"\necho iconv_mime_encode(\"Subject\", \"Prüfung Prüfung\", $preferences);","output":null}],"iconv_set_encoding":[{"title":"iconv_set_encoding() example","source":"iconv_set_encoding(\"internal_encoding\", \"UTF-8\");\niconv_set_encoding(\"output_encoding\", \"ISO-8859-1\");","output":null}],"iconv":[{"title":"iconv() example","source":"$text = \"This is the Euro symbol '€'.\";\n\necho 'Original : ', $text, PHP_EOL;\necho 'TRANSLIT : ', iconv(\"UTF-8\", \"ISO-8859-1\/\/TRANSLIT\", $text), PHP_EOL;\necho 'IGNORE   : ', iconv(\"UTF-8\", \"ISO-8859-1\/\/IGNORE\", $text), PHP_EOL;\necho 'Plain    : ', iconv(\"UTF-8\", \"ISO-8859-1\", $text), PHP_EOL;","output":"Original : This is the Euro symbol '€'.\nTRANSLIT : This is the Euro symbol 'EUR'.\nIGNORE   : This is the Euro symbol ''.\nPlain    :\nNotice: iconv(): Detected an illegal character in input string in .\\iconv-example.php on line 7"}],"id3_get_frame_long_name":[{"title":"id3_get_frame_long_name() example","source":"$longName = id3_get_frame_long_name(\"TOLY\");\necho $longName;","output":"Original lyricist(s)\/text writer(s)"}],"id3_get_frame_short_name":[{"title":"id3_get_frame_short_name() example","source":"$shortName = id3_get_frame_short_name(\"TOLY\");\necho $shortName;","output":"originalLyricist"}],"id3_get_genre_id":[{"title":"id3_get_genre_id() example","source":"$id = id3_get_genre_id(\"Alternative\");\necho $id;","output":20}],"id3_get_genre_list":[{"title":"id3_get_genre_list() example","source":"$genres = id3_get_genre_list();\nprint_r($genres);","output":"Array\n(\n    [0] => Blues\n    [1] => Classic Rock\n    [2] => Country\n    [3] => Dance\n    [4] => Disco\n    [5] => Funk\n    [6] => Grunge\n    [7] => Hip-Hop\n    [8] => Jazz\n    [9] => Metal\n    [10] => New Age\n    [11] => Oldies\n    [12] => Other\n    [13] => Pop\n    [14] => R&B\n    [15] => Rap\n    [16] => Reggae\n    [17] => Rock\n    [18] => Techno\n    [19] => Industrial\n    [20] => Alternative\n    [21] => Ska\n    [22] => Death Metal\n    [23] => Pranks\n    [24] => Soundtrack\n    [25] => Euro-Techno\n    [26] => Ambient\n    [27] => Trip-Hop\n    [28] => Vocal\n    [29] => Jazz+Funk\n    [30] => Fusion\n    [31] => Trance\n    [32] => Classical\n    [33] => Instrumental\n    [34] => Acid\n    [35] => House\n    [36] => Game\n    [37] => Sound Clip\n    [38] => Gospel\n    [39] => Noise\n    [40] => Alternative Rock\n    [41] => Bass\n    [42] => Soul\n    [43] => Punk\n    [44] => Space\n    [45] => Meditative\n    [46] => Instrumental Pop\n    [47] => Instrumental Rock\n    [48] => Ethnic\n    [49] => Gothic\n    [50] => Darkwave\n    [51] => Techno-Industrial\n    [52] => Electronic\n    [53] => Pop-Folk\n    [54] => Eurodance\n    [55] => Dream\n    [56] => Southern Rock\n    [57] => Comedy\n    [58] => Cult\n    [59] => Gangsta\n    [60] => Top 40\n    [61] => Christian Rap\n    [62] => Pop\/Funk\n    [63] => Jungle\n    [64] => Native US\n    [65] => Cabaret\n    [66] => New Wave\n    [67] => Psychadelic\n    [68] => Rave\n    [69] => Showtunes\n    [70] => Trailer\n    [71] => Lo-Fi\n    [72] => Tribal\n    [73] => Acid Punk\n    [74] => Acid Jazz\n    [75] => Polka\n    [76] => Retro\n    [77] => Musical\n    [78] => Rock & Roll\n    [79] => Hard Rock\n    [80] => Folk\n    [81] => Folk-Rock\n    [82] => National Folk\n    [83] => Swing\n    [84] => Fast Fusion\n    [85] => Bebob\n    [86] => Latin\n    [87] => Revival\n    [88] => Celtic\n    [89] => Bluegrass\n    [90] => Avantgarde\n    [91] => Gothic Rock\n    [92] => Progressive Rock\n    [93] => Psychedelic Rock\n    [94] => Symphonic Rock\n    [95] => Slow Rock\n    [96] => Big Band\n    [97] => Chorus\n    [98] => Easy Listening\n    [99] => Acoustic\n    [100] => Humour\n    [101] => Speech\n    [102] => Chanson\n    [103] => Opera\n    [104] => Chamber Music\n    [105] => Sonata\n    [106] => Symphony\n    [107] => Booty Bass\n    [108] => Primus\n    [109] => Porn Groove\n    [110] => Satire\n    [111] => Slow Jam\n    [112] => Club\n    [113] => Tango\n    [114] => Samba\n    [115] => Folklore\n    [116] => Ballad\n    [117] => Power Ballad\n    [118] => Rhytmic Soul\n    [119] => Freestyle\n    [120] => Duet\n    [121] => Punk Rock\n    [122] => Drum Solo\n    [123] => Acapella\n    [124] => Euro-House\n    [125] => Dance Hall\n    [126] => Goa\n    [127] => Drum & Bass\n    [128] => Club-House\n    [129] => Hardcore\n    [130] => Terror\n    [131] => Indie\n    [132] => BritPop\n    [133] => Negerpunk\n    [134] => Polsk Punk\n    [135] => Beat\n    [136] => Christian Gangsta\n    [137] => Heavy Metal\n    [138] => Black Metal\n    [139] => Crossover\n    [140] => Contemporary C\n    [141] => Christian Rock\n    [142] => Merengue\n    [143] => Salsa\n    [144] => Thrash Metal\n    [145] => Anime\n    [146] => JPop\n    [147] => SynthPop\n)"}],"id3_get_genre_name":[{"title":"id3_get_genre_name() example","source":"$genre = id3_get_genre_name(20);\necho $genre;","output":"Alternative"}],"id3_get_tag":[{"title":"id3_get_tag() example","source":"$tag = id3_get_tag( \"path\/to\/example.mp3\" );\nprint_r($tag);","output":"Array\n(\n    [title] => DN-38416\n    [artist] => Re:\\Legion\n    [album] => Reflections\n    [year] => 2004\n    [genre] => 19\n)"},{"title":"id3_get_tag() example","source":"$tag = id3_get_tag( \"path\/to\/example2.mp3\", ID3_V2_3 );\nprint_r($tag);","output":"Array\n(\n    [copyright] => Dirty Mac\n    [originalArtist] => Dirty Mac\n    [composer] => Marcus Götze\n    [artist] => Dirty Mac\n    [title] => Little Big Man\n    [album] => Demo-Tape\n    [track] => 5\/12\n    [genre] => (17)Rock\n    [year] => 2001\n)"}],"id3_get_version":[{"title":"id3_get_version() example","source":"$version = id3_get_version( \"path\/to\/example.mp3\" );\nif ($version & ID3_V1_0) {\n    echo \"Contains a 1.x tag\\n\";\n}\nif ($version & ID3_V1_1) {\n    echo \"Contains a 1.1 tag\\n\";\n}\nif ($version & ID3_V2) {\n    echo \"Contains a 2.x tag\\n\";\n}","output":"Contains a 1.x tag\nContains a 1.1 tag"}],"id3_remove_tag":[{"title":"id3_remove_tag() example","source":"$result = id3_remove_tag( \"path\/to\/example.mp3\", ID3_V1_0 );\nif ($result === true) {\n    echo \"Tag successfully removed\\n\";\n}","output":"Tag successfully removed"}],"id3_set_tag":[{"title":"id3_set_tag() example","source":"$data = array(\n              \"title\" => \"Re:Start\",\n              \"artist\" => \"Re:\\Legion\",\n              \"comment\" => \"A nice track\"\n             );\n$result = id3_set_tag( \"path\/to\/example.mp3\", $data, ID3_V1_0 );\nif ($result === true) {\n    echo \"Tag successfully updated\\n\";\n}","output":"Tag successfully updated"}],"idate":[{"title":"idate() example","source":"$timestamp = strtotime('1st January 2004'); \/\/1072915200\n\n\/\/ this prints the year in a two digit format\n\/\/ however, as this would start with a \"0\", it\n\/\/ only prints \"4\"\necho idate('y', $timestamp);","output":null}],"idn_to_ascii":[{"title":"idn_to_ascii() example","source":"echo idn_to_ascii('täst.de');","output":null}],"idn_to_utf8":[{"title":"idn_to_utf8() example","source":"echo idn_to_utf8('xn--tst-qla.de');","output":null}],"ifx_affected_rows":[{"title":"Informix affected rows","source":"$rid = ifx_prepare(\"select * from emp\n                     where name like \" . $name, $connid);\nif (! $rid) {\n    \/* ... error ... *\/\n}\n$rowcount = ifx_affected_rows($rid);\nif ($rowcount > 1000) {\n    printf (\"Too many rows in result set (%d)\\n<br \/>\", $rowcount);\n    die (\"Please restrict your query<br \/>\\n\");\n}","output":null}],"ifx_close":[{"title":"Closing a Informix connection","source":"$conn_id = ifx_connect (\"mydb@ol_srv\", \"itsme\", \"mypassword\");\n\/* ... some queries and stuff ... *\/\nifx_close($conn_id);","output":null}],"ifx_connect":[{"title":"Connect to a Informix database","source":"$conn_id = ifx_connect (\"mydb@ol_srv1\", \"imyself\", \"mypassword\");","output":null}],"ifx_do":[{"title":"ifx_do() Example","source":"$conn = fx_connect( \"db\", \"user\", \"password\" );\n$result = ifx_prepare(\"SELECT customer_num, company FROM customer\", $conn);\nifx_do($result);","output":null}],"ifx_errormsg":[{"title":"ifx_errormsg() example","source":"printf(\"%s\\n<br>\", ifx_errormsg(-201));","output":null}],"ifx_fetch_row":[{"title":"Informix fetch rows","source":"$rid = ifx_prepare (\"select * from emp where name like \" . $name,\n                     $connid, IFX_SCROLL);\nif (! $rid) {\n    \/* ... error ... *\/\n}\n$rowcount = ifx_affected_rows($rid);\nif ($rowcount > 1000) {\n    printf (\"Too many rows in result set (%d)\\n<br \/>\", $rowcount);\n    die (\"Please restrict your query<br \/>\\n\");\n}\nif (! ifx_do ($rid)) {\n   \/* ... error ... *\/\n}\n$row = ifx_fetch_row ($rid, \"NEXT\");\nwhile (is_array($row)) {\n    for (reset($row); $fieldname=key($row); next($row)) {\n        $fieldvalue = $row[$fieldname];\n        printf (\"%s = %s,\", $fieldname, $fieldvalue);\n    }\n    printf(\"\\n<br \/>\");\n    $row = ifx_fetch_row($rid, \"NEXT\");\n}\nifx_free_result ($rid);","output":null}],"ifx_fieldproperties":[{"title":"Informix SQL fieldproperties","source":"$properties = ifx_fieldproperties($resultid);\nif (!isset($properties)) {\n    \/* ... error ... *\/\n}\nforeach ($properties as $fname => $val) {\n    echo \"$fname:\\t property = $val\\n\";\n}","output":null}],"ifx_fieldtypes":[{"title":"Fieldnames and SQL fieldtypes","source":"$types = ifx_fieldtypes($resultid);\nif (is_array($types)) {\n    foreach ($types as $fname => $val) {\n        echo \"$fname:\\t type = $val\\n\";\n    }\n}","output":null}],"ifx_getsqlca":[{"title":"Retrieve Informix sqlca.sqlerrd[x] values","source":"\/* assume the first column of 'sometable' is a serial *\/\n$qid = ifx_query(\"insert into sometable\n                  values (0, '2nd column', 'another column') \", $connid);\nif (!$qid) {\n    \/* ... error ... *\/\n}\n$sqlca = ifx_getsqlca($qid);\n$serial_value = $sqlca[\"sqlerrd1\"];\necho \"The serial value of the inserted row is : $serial_value<br \/>\\n\";","output":null}],"ifx_htmltbl_result":[{"title":"Informix results as HTML table","source":"$rid = ifx_prepare (\"select * from emp where name like \" . $name,\n                     $connid, IFX_SCROLL);\nif (! $rid) {\n    \/* ... error ... *\/\n}\n$rowcount = ifx_affected_rows ($rid);\nif ($rowcount > 1000) {\n    printf (\"Too many rows in result set (%d)\\n<br \/>\", $rowcount);\n    die (\"Please restrict your query<br \/>\\n\");\n}\nif (! ifx_do($rid)) {\n    \/* ... error ... *\/\n}\n\nifx_htmltbl_result ($rid, \"border=\\\"2\\\"\");\n\nifx_free_result($rid);","output":null}],"ifx_num_fields":[{"title":"ifx_num_fields() Example","source":"$conn_id = ifx_connect(\"db\", \"user\", \"password\");\n$res_id = ifx_query(\"select * from systables\", $conn_id);\necho ifx_num_fields($res_id);","output":null}],"ifx_query":[{"title":"Show all rows of the \"orders\" table as a HTML table","source":"ifx_textasvarchar(1);      \/\/ use \"text mode\" for blobs\n$res_id = ifx_query(\"select * from orders\", $conn_id);\nif (! $res_id) {\n    printf(\"Can't select orders : %s\\n<br \/>%s<br \/>\\n\", ifx_error(), ifx_errormsg());\n    die;\n}\nifx_htmltbl_result($res_id, \"border=\\\"1\\\"\");\nifx_free_result($res_id);","output":null},{"title":"Insert some values into the \"catalog\" table","source":"\/\/ create blob id's for a byte and text column\n$textid = ifx_create_blob(0, 0, \"Text column in memory\");\n$byteid = ifx_create_blob(1, 0, \"Byte column in memory\");\n\n\/\/ store blob id's in a blobid array\n$blobidarray[] = $textid;\n$blobidarray[] = $byteid;\n\n\/\/ launch query\n$query = \"insert into catalog (stock_num, manu_code, \" .\n         \"cat_descr,cat_picture) values(1,'HRO',?,?)\";\n$res_id = ifx_query($query, $conn_id, $blobidarray);\nif (! $res_id) {\n    \/* ... error ... *\/\n}\n\n\/\/ free result id\nifx_free_result($res_id);","output":null}],"ignore_user_abort":[{"title":"A ignore_user_abort() example","source":"\/\/ Ignore user aborts and allow the script\n\/\/ to run forever\nignore_user_abort(true);\nset_time_limit(0);\n\necho 'Testing connection handling in PHP';\n\n\/\/ Run a pointless loop that sometime \n\/\/ hopefully will make us click away from \n\/\/ page or click the \"Stop\" button.\nwhile(1)\n{\n    \/\/ Did the connection fail?\n    if(connection_status() != CONNECTION_NORMAL)\n    {\n        break;\n    }\n\n    \/\/ Sleep for 10 seconds\n    sleep(10);\n}\n\n\/\/ If this is reached, then the 'break' \n\/\/ was triggered from inside the while loop\n\n\/\/ So here we can log, or perform any other tasks\n\/\/ we need without actually being dependent on the \n\/\/ browser.","output":null}],"image_type_to_extension":[{"title":"image_type_to_extension() example","source":"\/\/ Create image instance\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Save image\nimagepng($im, '.\/test' . image_type_to_extension(IMAGETYPE_PNG));\nimagedestroy($im);","output":null}],"image_type_to_mime_type":[{"title":"image_type_to_mime_type() example","source":"header(\"Content-type: \" . image_type_to_mime_type(IMAGETYPE_PNG));","output":null}],"image2wbmp":[{"title":"image2wbmp() example","source":"$file = 'php.png';\n$image = imagecreatefrompng($file);\n\nheader('Content-Type: ' . image_type_to_mime_type(IMAGETYPE_WBMP));\nimage2wbmp($image); \/\/ output the stream directly\nimagedestroy($image);","output":null}],"imageaffinematrixconcat":[{"title":"imageaffinematrixconcat() example","source":"$m1 = imageaffinematrixget(IMG_AFFINE_TRANSLATE, array('x' = 2, 'y' => 3));\n$m2 = imageaffinematrixget(IMG_AFFINE_SCALE, array('x' = 4, 'y' => 5));\n$matrix = imageaffinematrixconcat($m1, $m2);\nprint_r($matrix);","output":"Array\n(\n    [0] => 4\n    [1] => 0\n    [2] => 0\n    [3] => 5\n    [4] => 8\n    [5] => 15\n)"}],"imageaffinematrixget":[{"title":"imageaffinematrixget() example","source":"$matrix = imageaffinematrixget(IMG_AFFINE_TRANSLATE, array('x' = 2, 'y' => 3));\nprint_r($matrix);","output":"Array\n(\n    [0] => 1\n    [1] => 0\n    [2] => 0\n    [3] => 1\n    [4] => 2\n    [5] => 3\n)"}],"imagealphablending":[{"title":"imagealphablending() usage example","source":"\/\/ Create image\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Set alphablending to on\nimagealphablending($im, true);\n\n\/\/ Draw a square\nimagefilledrectangle($im, 30, 30, 70, 70, imagecolorallocate($im, 255, 0, 0));\n\n\/\/ Output\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imageantialias":[{"title":"A comparison of two lines, one with anti-aliasing switched on","source":"\/\/ Setup an anti-aliased image and a normal image\n$aa = imagecreatetruecolor(400, 100);\n$normal = imagecreatetruecolor(200, 100);\n\n\/\/ Switch antialiasing on for one image\nimageantialias($aa, true);\n\n\/\/ Allocate colors\n$red = imagecolorallocate($normal, 255, 0, 0);\n$red_aa = imagecolorallocate($aa, 255, 0, 0);\n\n\/\/ Draw two lines, one with AA enabled\nimageline($normal, 0, 0, 200, 100, $red);\nimageline($aa, 0, 0, 200, 100, $red_aa);\n\n\/\/ Merge the two images side by side for output (AA: left, Normal: Right)\nimagecopymerge($aa, $normal, 200, 0, 0, 0, 200, 100, 100);\n\n\/\/ Output image\nheader('Content-type: image\/png');\n\nimagepng($aa);\nimagedestroy($aa);\nimagedestroy($normal);","output":null}],"imagearc":[{"title":"Drawing a circle with imagearc()","source":"\/\/ create a 200*200 image\n$img = imagecreatetruecolor(200, 200);\n\n\/\/ allocate some colors\n$white = imagecolorallocate($img, 255, 255, 255);\n$red   = imagecolorallocate($img, 255,   0,   0);\n$green = imagecolorallocate($img,   0, 255,   0);\n$blue  = imagecolorallocate($img,   0,   0, 255);\n\n\/\/ draw the head\nimagearc($img, 100, 100, 200, 200,  0, 360, $white);\n\/\/ mouth\nimagearc($img, 100, 100, 150, 150, 25, 155, $red);\n\/\/ left and then the right eye\nimagearc($img,  60,  75,  50,  50,  0, 360, $green);\nimagearc($img, 140,  75,  50,  50,  0, 360, $blue);\n\n\/\/ output image in the browser\nheader(\"Content-type: image\/png\");\nimagepng($img);\n\n\/\/ free memory\nimagedestroy($img);","output":null}],"imagebmp":[{"title":"Saving a BMP file","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\n\nimagestring($im, 1, 5, 5,  'BMP with PHP', $text_color);\n\n\/\/ Save the image\nimagebmp($im, 'php.bmp');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imagechar":[{"title":"imagechar() example","source":"$im = imagecreate(100, 100);\n\n$string = 'PHP';\n\n$bg = imagecolorallocate($im, 255, 255, 255);\n$black = imagecolorallocate($im, 0, 0, 0);\n\n\/\/ prints a black \"P\" in the top left corner\nimagechar($im, 1, 0, 0, $string, $black);\n\nheader('Content-type: image\/png');\nimagepng($im);","output":null}],"imagecharup":[{"title":"imagecharup() example","source":"$im = imagecreate(100, 100);\n\n$string = 'Note that the first letter is a N';\n\n$bg = imagecolorallocate($im, 255, 255, 255);\n$black = imagecolorallocate($im, 0, 0, 0);\n\n\/\/ prints a black \"Z\" on a white background\nimagecharup($im, 3, 10, 10, $string, $black);\n\nheader('Content-type: image\/png');\nimagepng($im);","output":null}],"imagecolorallocate":[{"title":"imagecolorallocate() example","source":"$im = imagecreate(100, 100);\n\n\/\/ sets background to red\n$background = imagecolorallocate($im, 255, 0, 0);\n\n\/\/ sets some colors\n$white = imagecolorallocate($im, 255, 255, 255);\n$black = imagecolorallocate($im, 0, 0, 0);\n\n\/\/ hexadecimal way\n$white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\n$black = imagecolorallocate($im, 0x00, 0x00, 0x00);","output":null}],"imagecolorallocatealpha":[{"title":"Example of using imagecolorallocatealpha()","source":"$size = 300;\n$image=imagecreatetruecolor($size, $size);\n\n\/\/ something to get a white background with black border\n$back = imagecolorallocate($image, 255, 255, 255);\n$border = imagecolorallocate($image, 0, 0, 0);\nimagefilledrectangle($image, 0, 0, $size - 1, $size - 1, $back);\nimagerectangle($image, 0, 0, $size - 1, $size - 1, $border);\n\n$yellow_x = 100;\n$yellow_y = 75;\n$red_x    = 120;\n$red_y    = 165;\n$blue_x   = 187;\n$blue_y   = 125;\n$radius   = 150;\n\n\/\/ allocate colors with alpha values\n$yellow = imagecolorallocatealpha($image, 255, 255, 0, 75);\n$red    = imagecolorallocatealpha($image, 255, 0, 0, 75);\n$blue   = imagecolorallocatealpha($image, 0, 0, 255, 75);\n\n\/\/ drawing 3 overlapped circle\nimagefilledellipse($image, $yellow_x, $yellow_y, $radius, $radius, $yellow);\nimagefilledellipse($image, $red_x, $red_y, $radius, $radius, $red);\nimagefilledellipse($image, $blue_x, $blue_y, $radius, $radius, $blue);\n\n\/\/ don't forget to output a correct header!\nheader('Content-Type: image\/png');\n\n\/\/ and finally, output the result\nimagepng($image);\nimagedestroy($image);","output":null}],"imagecolorat":[{"title":"Access distinct RGB values","source":"$im = imagecreatefrompng(\"php.png\");\n$rgb = imagecolorat($im, 10, 15);\n$r = ($rgb >> 16) & 0xFF;\n$g = ($rgb >> 8) & 0xFF;\n$b = $rgb & 0xFF;\n\nvar_dump($r, $g, $b);","output":"int(119)\nint(123)\nint(180)"},{"title":"Human-readable RGB values using imagecolorsforindex()","source":"$im = imagecreatefrompng(\"php.png\");\n$rgb = imagecolorat($im, 10, 15);\n\n$colors = imagecolorsforindex($im, $rgb);\n\nvar_dump($colors);","output":"array(4) {\n  [\"red\"]=>\n  int(119)\n  [\"green\"]=>\n  int(123)\n  [\"blue\"]=>\n  int(180)\n  [\"alpha\"]=>\n  int(127)\n}"}],"imagecolorclosest":[{"title":"Search for a set of colors in an image","source":"\/\/ Start with an image and convert it to a palette-based image\n$im = imagecreatefrompng('figures\/imagecolorclosest.png');\nimagetruecolortopalette($im, false, 255);\n\n\/\/ Search colors (RGB)\n$colors = array(\n    array(254, 145, 154),\n    array(153, 145, 188),\n    array(153, 90, 145),\n    array(255, 137, 92)\n);\n\n\/\/ Loop through each search and find the closest color in the palette.\n\/\/ Return the search number, the search RGB and the converted RGB match\nforeach($colors as $id => $rgb)\n{\n    $result = imagecolorclosest($im, $rgb[0], $rgb[1], $rgb[2]);\n    $result = imagecolorsforindex($im, $result);\n    $result = \"({$result['red']}, {$result['green']}, {$result['blue']})\";\n\n    echo \"#$id: Search ($rgb[0], $rgb[1], $rgb[2]); Closest match: $result.\\n\";\n}\n\nimagedestroy($im);","output":"#0: Search (254, 145, 154); Closest match: (252, 150, 148).\n#1: Search (153, 145, 188); Closest match: (148, 150, 196).\n#2: Search (153, 90, 145); Closest match: (148, 90, 156).\n#3: Search (255, 137, 92); Closest match: (252, 150, 92)."}],"imagecolorclosestalpha":[{"title":"Search for a set of colors in an image","source":"\/\/ Start with an image and convert it to a palette-based image\n$im = imagecreatefrompng('figures\/imagecolorclosest.png');\nimagetruecolortopalette($im, false, 255);\n\n\/\/ Search colors (RGB)\n$colors = array(\n    array(254, 145, 154, 50),\n    array(153, 145, 188, 127),\n    array(153, 90, 145, 0),\n    array(255, 137, 92, 84)\n);\n\n\/\/ Loop through each search and find the closest color in the palette.\n\/\/ Return the search number, the search RGB and the converted RGB match\nforeach($colors as $id => $rgb)\n{\n    $result = imagecolorclosestalpha($im, $rgb[0], $rgb[1], $rgb[2], $rgb[3]);\n    $result = imagecolorsforindex($im, $result);\n    $result = \"({$result['red']}, {$result['green']}, {$result['blue']}, {$result['alpha']})\";\n\n    echo \"#$id: Search ($rgb[0], $rgb[1], $rgb[2], $rgb[3]); Closest match: $result.\\n\";\n}\n\nimagedestroy($im);","output":"#0: Search (254, 145, 154, 50); Closest match: (252, 150, 148, 0).\n#1: Search (153, 145, 188, 127); Closest match: (148, 150, 196, 0).\n#2: Search (153, 90, 145, 0); Closest match: (148, 90, 156, 0).\n#3: Search (255, 137, 92, 84); Closest match: (252, 150, 92, 0)."}],"imagecolorclosesthwb":[{"title":"Example of using imagecolorclosesthwb()","source":"$im = imagecreatefromgif('php.gif');\n\necho 'HWB: ' . imagecolorclosesthwb($im, 116, 115, 152);\n\nimagedestroy($im);","output":"HWB: 33"}],"imagecolordeallocate":[{"title":"Using imagecolordeallocate()","source":"$white = imagecolorallocate($im, 255, 255, 255);\nimagecolordeallocate($im, $white);","output":null}],"imagecolorexact":[{"title":"Get colors from the GD logo","source":"\/\/ Setup an image\n$im = imagecreatefrompng('.\/gdlogo.png');\n\n$colors   = Array();\n$colors[] = imagecolorexact($im, 255, 0, 0);\n$colors[] = imagecolorexact($im, 0, 0, 0);\n$colors[] = imagecolorexact($im, 255, 255, 255);\n$colors[] = imagecolorexact($im, 100, 255, 52);\n\nprint_r($colors);\n\n\/\/ Free from memory\nimagedestroy($im);","output":"Array\n(\n    [0] => 16711680\n    [1] => 0\n    [2] => 16777215\n    [3] => 6618932\n)"}],"imagecolorexactalpha":[{"title":"Get colors from the GD logo","source":"\/\/ Setup an image\n$im = imagecreatefrompng('.\/gdlogo.png');\n\n$colors   = Array();\n$colors[] = imagecolorexactalpha($im, 255, 0, 0, 0);\n$colors[] = imagecolorexactalpha($im, 0, 0, 0, 127);\n$colors[] = imagecolorexactalpha($im, 255, 255, 255, 55);\n$colors[] = imagecolorexactalpha($im, 100, 255, 52, 20);\n\nprint_r($colors);\n\n\/\/ Free from memory\nimagedestroy($im);","output":"Array\n(\n    [0] => 16711680\n    [1] => 2130706432\n    [2] => 939524095\n    [3] => 342163252\n)"}],"imagecolormatch":[{"title":"imagecolormatch() example","source":"\/\/ Setup the true color and palette images\n$im1 = imagecreatefrompng('.\/gdlogo.png');\n$im2 = imagecreate(imagesx($im1), imagesy($im1));\n\n\/\/ Add some colors to $im2\n$colors   = Array();\n$colors[] = imagecolorallocate($im2, 255, 36, 74);\n$colors[] = imagecolorallocate($im2, 40, 0, 240);\n$colors[] = imagecolorallocate($im2, 82, 100, 255);\n$colors[] = imagecolorallocate($im2, 84, 63, 44);\n\n\/\/ Match these colors with the true color image\nimagecolormatch($im1, $im2);\n\n\/\/ Free from memory\nimagedestroy($im1);\nimagedestroy($im2);","output":null}],"imagecolorresolve":[{"title":"Using imagecoloresolve() to get colors from an image","source":"\/\/ Load an image\n$im = imagecreatefromgif('phplogo.gif');\n\n\/\/ Get closest colors from the image\n$colors = array();\n$colors[] = imagecolorresolve($im, 255, 255, 255);\n$colors[] = imagecolorresolve($im, 0, 0, 200);\n\n\/\/ Output\nprint_r($colors);\n\nimagedestroy($im);","output":"Array\n(\n    [0] => 89\n    [1] => 85\n)"}],"imagecolorresolvealpha":[{"title":"Using imagecoloresolvealpha() to get colors from an image","source":"\/\/ Load an image\n$im = imagecreatefromgif('phplogo.gif');\n\n\/\/ Get closest colors from the image\n$colors = array();\n$colors[] = imagecolorresolvealpha($im, 255, 255, 255, 0);\n$colors[] = imagecolorresolvealpha($im, 0, 0, 200, 127);\n\n\/\/ Output\nprint_r($colors);\n\nimagedestroy($im);","output":"Array\n(\n    [0] => 89\n    [1] => 85\n)"}],"imagecolorset":[{"title":"imagecolorset() example","source":"\/\/ Create a 300x100 image\n$im = imagecreate(300, 100);\n\n\/\/ Set the background to be red\nimagecolorallocate($im, 255, 0, 0);\n\n\/\/ Get the color index for the background\n$bg = imagecolorat($im, 0, 0);\n\n\/\/ Set the backgrund to be blue\nimagecolorset($im, $bg, 0, 0, 255);\n\n\/\/ Output the image to the browser\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagecolorsforindex":[{"title":"imagecolorsforindex() example","source":"\/\/ open an image\n$im = imagecreatefrompng('nexen.png');\n\n\/\/ get a color\n$start_x = 40;\n$start_y = 50;\n$color_index = imagecolorat($im, $start_x, $start_y);\n\n\/\/ make it human readable\n$color_tran = imagecolorsforindex($im, $color_index);\n\n\/\/ what is it ?\nprint_r($color_tran);","output":"Array\n(\n   [red] => 226\n   [green] => 222\n   [blue] => 252\n   [alpha] => 0\n)"}],"imagecolorstotal":[{"title":"Getting total number of colors in an image using imagecolorstotal()","source":"\/\/ Create image instance\n$im = imagecreatefromgif('php.gif');\n\necho 'Total colors in image: ' . imagecolorstotal($im);\n\n\/\/ Free image\nimagedestroy($im);","output":"Total colors in image: 128"}],"imagecolortransparent":[{"title":"imagecolortransparent() example","source":"\/\/ Create a 55x30 image\n$im = imagecreatetruecolor(55, 30);\n$red = imagecolorallocate($im, 255, 0, 0);\n$black = imagecolorallocate($im, 0, 0, 0);\n\n\/\/ Make the background transparent\nimagecolortransparent($im, $black);\n\n\/\/ Draw a red rectangle\nimagefilledrectangle($im, 4, 4, 50, 25, $red);\n\n\/\/ Save the image\nimagepng($im, '.\/imagecolortransparent.png');\nimagedestroy($im);","output":null}],"imageconvolution":[{"title":"Embossing the PHP.net logo","source":"$image = imagecreatefromgif('http:\/\/www.php.net\/images\/php.gif');\n\n$emboss = array(array(2, 0, 0), array(0, -1, 0), array(0, 0, -1));\nimageconvolution($image, $emboss, 1, 127);\n\nheader('Content-Type: image\/png');\nimagepng($image, null, 9);","output":null},{"title":"Gaussian blur","source":"$image = imagecreatetruecolor(180,40);\n\n\/\/ Writes the text and apply a gaussian blur on the image\nimagestring($image, 5, 10, 8, 'Gaussian Blur Text', 0x00ff00);\n$gaussian = array(array(1.0, 2.0, 1.0), array(2.0, 4.0, 2.0), array(1.0, 2.0, 1.0));\nimageconvolution($image, $gaussian, 16, 0);\n\n\/\/ Rewrites the text for comparison\nimagestring($image, 5, 10, 18, 'Gaussian Blur Text', 0x00ff00);\n\nheader('Content-Type: image\/png');\nimagepng($image, null, 9);","output":null}],"imagecopy":[{"title":"Cropping the PHP.net logo","source":"\/\/ Create image instances\n$src = imagecreatefromgif('php.gif');\n$dest = imagecreatetruecolor(80, 40);\n\n\/\/ Copy\nimagecopy($dest, $src, 0, 0, 20, 13, 80, 40);\n\n\/\/ Output and free from memory\nheader('Content-Type: image\/gif');\nimagegif($dest);\n\nimagedestroy($dest);\nimagedestroy($src);","output":null}],"imagecopymerge":[{"title":"Merging two copies of the PHP.net logo with 75% transparency","source":"\/\/ Create image instances\n$dest = imagecreatefromgif('php.gif');\n$src = imagecreatefromgif('php.gif');\n\n\/\/ Copy and merge\nimagecopymerge($dest, $src, 10, 10, 0, 0, 100, 47, 75);\n\n\/\/ Output and free from memory\nheader('Content-Type: image\/gif');\nimagegif($dest);\n\nimagedestroy($dest);\nimagedestroy($src);","output":null}],"imagecopymergegray":[{"title":"imagecopymergegray() usage","source":"\/\/ Create image instances\n$dest = imagecreatefromgif('php.gif');\n$src = imagecreatefromgif('php.gif');\n\n\/\/ Copy and merge - Gray = 20%\nimagecopymergegray($dest, $src, 10, 10, 0, 0, 100, 47, 20);\n\n\/\/ Output and free from memory\nheader('Content-Type: image\/gif');\nimagegif($dest);\n\nimagedestroy($dest);\nimagedestroy($src);","output":null}],"imagecopyresampled":[{"title":"Simple example","source":"\/\/ The file\n$filename = 'test.jpg';\n$percent = 0.5;\n\n\/\/ Content type\nheader('Content-Type: image\/jpeg');\n\n\/\/ Get new dimensions\nlist($width, $height) = getimagesize($filename);\n$new_width = $width * $percent;\n$new_height = $height * $percent;\n\n\/\/ Resample\n$image_p = imagecreatetruecolor($new_width, $new_height);\n$image = imagecreatefromjpeg($filename);\nimagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);\n\n\/\/ Output\nimagejpeg($image_p, null, 100);","output":null},{"title":"Resampling an image proportionally","source":"\/\/ The file\n$filename = 'test.jpg';\n\n\/\/ Set a maximum height and width\n$width = 200;\n$height = 200;\n\n\/\/ Content type\nheader('Content-Type: image\/jpeg');\n\n\/\/ Get new dimensions\nlist($width_orig, $height_orig) = getimagesize($filename);\n\n$ratio_orig = $width_orig\/$height_orig;\n\nif ($width\/$height > $ratio_orig) {\n   $width = $height*$ratio_orig;\n} else {\n   $height = $width\/$ratio_orig;\n}\n\n\/\/ Resample\n$image_p = imagecreatetruecolor($width, $height);\n$image = imagecreatefromjpeg($filename);\nimagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);\n\n\/\/ Output\nimagejpeg($image_p, null, 100);","output":null}],"imagecopyresized":[{"title":"Resizing an image","source":"\/\/ File and new size\n$filename = 'test.jpg';\n$percent = 0.5;\n\n\/\/ Content type\nheader('Content-Type: image\/jpeg');\n\n\/\/ Get new sizes\nlist($width, $height) = getimagesize($filename);\n$newwidth = $width * $percent;\n$newheight = $height * $percent;\n\n\/\/ Load\n$thumb = imagecreatetruecolor($newwidth, $newheight);\n$source = imagecreatefromjpeg($filename);\n\n\/\/ Resize\nimagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);\n\n\/\/ Output\nimagejpeg($thumb);","output":null}],"imagecreate":[{"title":"Creating a new GD image stream and outputting an image.","source":"header(\"Content-Type: image\/png\");\n$im = @imagecreate(110, 20)\n    or die(\"Cannot Initialize new GD image stream\");\n$background_color = imagecolorallocate($im, 0, 0, 0);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  \"A Simple Text String\", $text_color);\nimagepng($im);\nimagedestroy($im);","output":null}],"imagecreatefrombmp":[{"title":"Convert an BMP image to a PNG image using imagecreatefrombmp()","source":"\/\/ Load the BMP file\n$im = imagecreatefrombmp('.\/example.bmp');\n\n\/\/ Convert it to a PNG file with default settings\nimagepng($im, '.\/example.png');\nimagedestroy($im);","output":null}],"imagecreatefromgd":[{"title":"imagecreatefromgd() example","source":"\/\/ Load the gd image\n$im = @imagecreatefromgd('.\/test.gd');\n\n\/\/ Test if the image was loaded\nif(!is_resource($im))\n{\n     die('Unable to load gd image!');\n}\n\n\/\/ Do image operations here\n\n\/\/ Save the image\nimagegd($im, '.\/test_updated.gd');\nimagedestroy($im);","output":null}],"imagecreatefromgd2":[{"title":"imagecreatefromgd2() example","source":"\/\/ Load the gd2 image\n$im = imagecreatefromgd2('.\/test.gd2');\n\n\/\/ Apply an effect on the image, in this \n\/\/ case negate the image if PHP 5+\nif(function_exists('imagefilter'))\n{\n    imagefilter($im, IMG_FILTER_NEGATE);\n}\n\n\/\/ Save the image\nimagegd2($im, '.\/test_updated.gd2');\nimagedestroy($im);","output":null}],"imagecreatefromgd2part":[{"title":"imagecreatefromgd2part() example","source":"\/\/ For this example we need the image size before\n$image = getimagesize('.\/test.gd2');\n\n\/\/ Create the image instance now we got the image \n\/\/ sizes\n$im = imagecreatefromgd2part('.\/test.gd2', 4, 4, ($image[0] \/ 2) - 6, ($image[1] \/ 2) - 6);\n\n\/\/ Do an image operation, in this case we emboss the \n\/\/ image if PHP 5+\nif(function_exists('imagefilter'))\n{\n    imagefilter($im, IMG_FILTER_EMBOSS);\n}\n\n\/\/ Save optimized image\nimagegd2($im, '.\/test_emboss.gd2');\nimagedestroy($im);","output":null}],"imagecreatefromgif":[{"title":"Example to handle an error during loading of a GIF","source":"function LoadGif($imgname)\n{\n    \/* Attempt to open *\/\n    $im = @imagecreatefromgif($imgname);\n\n    \/* See if it failed *\/\n    if(!$im)\n    {\n        \/* Create a blank image *\/\n        $im = imagecreatetruecolor (150, 30);\n        $bgc = imagecolorallocate ($im, 255, 255, 255);\n        $tc = imagecolorallocate ($im, 0, 0, 0);\n\n        imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);\n\n        \/* Output an error message *\/\n        imagestring ($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);\n    }\n\n    return $im;\n}\n\nheader('Content-Type: image\/gif');\n\n$img = LoadGif('bogus.image');\n\nimagegif($img);\nimagedestroy($img);","output":null}],"imagecreatefromjpeg":[{"title":"Example to handle an error during loading of a JPEG","source":"function LoadJpeg($imgname)\n{\n    \/* Attempt to open *\/\n    $im = @imagecreatefromjpeg($imgname);\n\n    \/* See if it failed *\/\n    if(!$im)\n    {\n        \/* Create a black image *\/\n        $im  = imagecreatetruecolor(150, 30);\n        $bgc = imagecolorallocate($im, 255, 255, 255);\n        $tc  = imagecolorallocate($im, 0, 0, 0);\n\n        imagefilledrectangle($im, 0, 0, 150, 30, $bgc);\n\n        \/* Output an error message *\/\n        imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);\n    }\n\n    return $im;\n}\n\nheader('Content-Type: image\/jpeg');\n\n$img = LoadJpeg('bogus.image');\n\nimagejpeg($img);\nimagedestroy($img);","output":null}],"imagecreatefrompng":[{"title":"Example to handle an error during loading of a PNG","source":"function LoadPNG($imgname)\n{\n    \/* Attempt to open *\/\n    $im = @imagecreatefrompng($imgname);\n\n    \/* See if it failed *\/\n    if(!$im)\n    {\n        \/* Create a blank image *\/\n        $im  = imagecreatetruecolor(150, 30);\n        $bgc = imagecolorallocate($im, 255, 255, 255);\n        $tc  = imagecolorallocate($im, 0, 0, 0);\n\n        imagefilledrectangle($im, 0, 0, 150, 30, $bgc);\n\n        \/* Output an error message *\/\n        imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);\n    }\n\n    return $im;\n}\n\nheader('Content-Type: image\/png');\n\n$img = LoadPNG('bogus.image');\n\nimagepng($img);\nimagedestroy($img);","output":null}],"imagecreatefromstring":[{"title":"imagecreatefromstring() example","source":"$data = 'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAMAAAB\/2U7WAAAABl'\n       . 'BMVEUAAAD\/\/\/+l2Z\/dAAAASUlEQVR4XqWQUQoAIAxC2\/0vXZDr'\n       . 'EX4IJTRkb7lobNUStXsB0jIXIAMSsQnWlsV+wULF4Avk9fLq2r'\n       . '8a5HSE35Q3eO2XP1A1wQkZSgETvDtKdQAAAABJRU5ErkJggg==';\n$data = base64_decode($data);\n\n$im = imagecreatefromstring($data);\nif ($im !== false) {\n    header('Content-Type: image\/png');\n    imagepng($im);\n    imagedestroy($im);\n}\nelse {\n    echo 'An error occurred.';\n}","output":null}],"imagecreatefromwbmp":[{"title":"Example to handle an error during loading of a WBMP","source":"function LoadWBMP($imgname)\n{\n    \/* Attempt to open *\/\n    $im = @imagecreatefromwbmp($imgname);\n\n    \/* See if it failed *\/\n    if(!$im)\n    {\n        \/* Create a blank image *\/\n        $im  = imagecreatetruecolor(150, 30);\n        $bgc = imagecolorallocate($im, 255, 255, 255);\n        $tc  = imagecolorallocate($im, 0, 0, 0);\n\n        imagefilledrectangle($im, 0, 0, 150, 30, $bgc);\n\n        \/* Output an error message *\/\n        imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);\n    }\n\n    return $im;\n}\n\nheader('Content-Type: image\/vnd.wap.wbmp');\n\n$img = LoadWBMP('bogus.image');\n\nimagewbmp($img);\nimagedestroy($img);","output":null}],"imagecreatefromwebp":[{"title":"Convert an WebP image to a jpeg image using imagecreatefromwebp()","source":"\/\/ Load the WebP file\n$im = imagecreatefromwebp('.\/example.webp');\n\n\/\/ Convert it to a jpeg file with 100% quality\nimagejpeg($im, '.\/example.jpeg', 100);\nimagedestroy($im);","output":null}],"imagecreatefromxbm":[{"title":"Convert an XBM image to a png image using imagecreatefromxbm()","source":"\/\/ Load the xbm file\n$xbm = imagecreatefromxbm('.\/example.xbm');\n\n\/\/ Convert it to a png file\nimagepng($xbm, '.\/example.png');\nimagedestroy($xbm);","output":null}],"imagecreatefromxpm":[{"title":"Creating an image instance using imagecreatefromxpm()","source":"\/\/ Check for XPM support\nif(!(imagetypes() & IMG_XPM))\n{\n    die('Support for xpm was not found!');\n}\n\n\/\/ Create the image instance\n$xpm = imagecreatefromxpm('.\/example.xpm');\n\n\/\/ Do image operations here\n\n\/\/ PHP has no support for writing xpm images\n\/\/ so in this case we save the image as a \n\/\/ jpeg file with 100% quality\nimagejpeg($xpm, '.\/example.jpg', 100);\nimagedestroy($xpm);","output":null}],"imagecreatetruecolor":[{"title":"Creating a new GD image stream and outputting an image.","source":"header ('Content-Type: image\/png');\n$im = @imagecreatetruecolor(120, 20)\n      or die('Cannot Initialize new GD image stream');\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\nimagepng($im);\nimagedestroy($im);","output":null}],"imagecrop":[{"title":"imagecrop() example","source":"$im = imagecreatefrompng('example.png');\n$size = min(imagesx($im), imagesy($im));\n$im2 = imagecrop($im, ['x' => 0, 'y' => 0, 'width' => $size, 'height' => $size]);\nif ($im2 !== FALSE) {\n    imagepng($im2, 'example-cropped.png');\n}","output":null}],"imagecropauto":[{"title":"Proper handling of auto-cropping","source":"$cropped = imagecropauto($im, IMG_CROP_DEFAULT);\nif ($cropped !== false) { \/\/ in case a new image resource was returned\n    imagedestroy($im);    \/\/ we destroy the original image\n    $im = $cropped;       \/\/ and assign the cropped image to $im\n}","output":null}],"imagedashedline":[{"title":"imagedashedline() example","source":"\/\/ Create a 100x100 image\n$im = imagecreatetruecolor(100, 100);\n$white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\n\n\/\/ Draw a vertical dashed line\nimagedashedline($im, 50, 25, 50, 75, $white);\n\n\/\/ Save the image\nimagepng($im, '.\/dashedline.png');\nimagedestroy($im);","output":null},{"title":"Alternative to imagedashedline()","source":"\/\/ Create a 100x100 image\n$im = imagecreatetruecolor(100, 100);\n$white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\n\n\/\/ Define our style: First 4 pixels is white and the \n\/\/ next 4 is transparent. This creates the dashed line effect\n$style = Array(\n                $white, \n                $white, \n                $white, \n                $white, \n                IMG_COLOR_TRANSPARENT, \n                IMG_COLOR_TRANSPARENT, \n                IMG_COLOR_TRANSPARENT, \n                IMG_COLOR_TRANSPARENT\n                );\n\nimagesetstyle($im, $style);\n\n\/\/ Draw the dashed line\nimageline($im, 50, 25, 50, 75, IMG_COLOR_STYLED);\n\n\/\/ Save the image\nimagepng($im, '.\/imageline.png');\nimagedestroy($im);","output":null}],"imagedestroy":[{"title":"Using imagedestroy() example","source":"\/\/ create a 100 x 100 image\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ alter or save the image\n\n\/\/ frees image from memory\nimagedestroy($im);","output":null}],"imageellipse":[{"title":"imageellipse() example","source":"\/\/ Create a blank image.\n$image = imagecreatetruecolor(400, 300);\n\n\/\/ Select the background color.\n$bg = imagecolorallocate($image, 0, 0, 0);\n\n\/\/ Fill the background with the color selected above.\nimagefill($image, 0, 0, $bg);\n\n\/\/ Choose a color for the ellipse.\n$col_ellipse = imagecolorallocate($image, 255, 255, 255);\n\n\/\/ Draw the ellipse.\nimageellipse($image, 200, 150, 300, 200, $col_ellipse);\n\n\/\/ Output the image.\nheader(\"Content-type: image\/png\");\nimagepng($image);","output":null}],"imagefill":[{"title":"imagefill() example","source":"$im = imagecreatetruecolor(100, 100);\n\n\/\/ sets background to red\n$red = imagecolorallocate($im, 255, 0, 0);\nimagefill($im, 0, 0, $red);\n\nheader('Content-type: image\/png');\nimagepng($im);\nimagedestroy($im);","output":null}],"imagefilledarc":[{"title":"Creating a 3D looking pie","source":"\/\/ create image\n$image = imagecreatetruecolor(100, 100);\n\n\/\/ allocate some colors\n$white    = imagecolorallocate($image, 0xFF, 0xFF, 0xFF);\n$gray     = imagecolorallocate($image, 0xC0, 0xC0, 0xC0);\n$darkgray = imagecolorallocate($image, 0x90, 0x90, 0x90);\n$navy     = imagecolorallocate($image, 0x00, 0x00, 0x80);\n$darknavy = imagecolorallocate($image, 0x00, 0x00, 0x50);\n$red      = imagecolorallocate($image, 0xFF, 0x00, 0x00);\n$darkred  = imagecolorallocate($image, 0x90, 0x00, 0x00);\n\n\/\/ make the 3D effect\nfor ($i = 60; $i > 50; $i--) {\n   imagefilledarc($image, 50, $i, 100, 50, 0, 45, $darknavy, IMG_ARC_PIE);\n   imagefilledarc($image, 50, $i, 100, 50, 45, 75 , $darkgray, IMG_ARC_PIE);\n   imagefilledarc($image, 50, $i, 100, 50, 75, 360 , $darkred, IMG_ARC_PIE);\n}\n\nimagefilledarc($image, 50, 50, 100, 50, 0, 45, $navy, IMG_ARC_PIE);\nimagefilledarc($image, 50, 50, 100, 50, 45, 75 , $gray, IMG_ARC_PIE);\nimagefilledarc($image, 50, 50, 100, 50, 75, 360 , $red, IMG_ARC_PIE);\n\n\n\/\/ flush image\nheader('Content-type: image\/png');\nimagepng($image);\nimagedestroy($image);","output":null}],"imagefilledellipse":[{"title":"imagefilledellipse() example","source":"\/\/ create a blank image\n$image = imagecreatetruecolor(400, 300);\n\n\/\/ fill the background color\n$bg = imagecolorallocate($image, 0, 0, 0);\n\n\/\/ choose a color for the ellipse\n$col_ellipse = imagecolorallocate($image, 255, 255, 255);\n\n\/\/ draw the white ellipse\nimagefilledellipse($image, 200, 150, 300, 200, $col_ellipse);\n\n\/\/ output the picture\nheader(\"Content-type: image\/png\");\nimagepng($image);","output":null}],"imagefilledpolygon":[{"title":"imagefilledpolygon() example","source":"\/\/ set up array of points for polygon\n$values = array(\n            40,  50,  \/\/ Point 1 (x, y)\n            20,  240, \/\/ Point 2 (x, y)\n            60,  60,  \/\/ Point 3 (x, y)\n            240, 20,  \/\/ Point 4 (x, y)\n            50,  40,  \/\/ Point 5 (x, y)\n            10,  10   \/\/ Point 6 (x, y)\n            );\n\n\/\/ create image\n$image = imagecreatetruecolor(250, 250);\n\n\/\/ allocate colors\n$bg   = imagecolorallocate($image, 0, 0, 0);\n$blue = imagecolorallocate($image, 0, 0, 255);\n\n\/\/ fill the background\nimagefilledrectangle($image, 0, 0, 249, 249, $bg);\n\n\/\/ draw a polygon\nimagefilledpolygon($image, $values, 6, $blue);\n\n\/\/ flush image\nheader('Content-type: image\/png');\nimagepng($image);\nimagedestroy($image);","output":null}],"imagefilledrectangle":[{"title":"imagefilledrectangle() usage","source":"\/\/ Create a 55x30 image\n$im = imagecreatetruecolor(55, 30);\n$white = imagecolorallocate($im, 255, 255, 255);\n\n\/\/ Draw a white rectangle\nimagefilledrectangle($im, 4, 4, 50, 25, $white);\n\n\/\/ Save the image\nimagepng($im, '.\/imagefilledrectangle.png');\nimagedestroy($im);","output":null}],"imagefilltoborder":[{"title":"Filling an ellipse with a color","source":"\/\/ Create the image handle, set the background to white\n$im = imagecreatetruecolor(100, 100);\nimagefilledrectangle($im, 0, 0, 100, 100, imagecolorallocate($im, 255, 255, 255));\n\n\/\/ Draw an ellipse to fill with a black border\nimageellipse($im, 50, 50, 50, 50, imagecolorallocate($im, 0, 0, 0));\n\n\/\/ Set the border and fill colors\n$border = imagecolorallocate($im, 0, 0, 0);\n$fill = imagecolorallocate($im, 255, 0, 0);\n\n\/\/ Fill the selection\nimagefilltoborder($im, 50, 50, $border, $fill);\n\n\/\/ Output and free memory\nheader('Content-type: image\/png');\nimagepng($im);\nimagedestroy($im);","output":null}],"imagefilter":[{"title":"imagefilter() grayscale example","source":"$im = imagecreatefrompng('dave.png');\n\nif($im && imagefilter($im, IMG_FILTER_GRAYSCALE))\n{\n    echo 'Image converted to grayscale.';\n\n    imagepng($im, 'dave.png');\n}\nelse\n{\n    echo 'Conversion to grayscale failed.';\n}\n\nimagedestroy($im);","output":null},{"title":"imagefilter() brightness example","source":"$im = imagecreatefrompng('sean.png');\n\nif($im && imagefilter($im, IMG_FILTER_BRIGHTNESS, 20))\n{\n    echo 'Image brightness changed.';\n\n    imagepng($im, 'sean.png');\n    imagedestroy($im);\n}\nelse\n{\n    echo 'Image brightness change failed.';\n}","output":null},{"title":"imagefilter() colorize example","source":"$im = imagecreatefrompng('philip.png');\n\n\/* R, G, B, so 0, 255, 0 is green *\/\nif($im && imagefilter($im, IMG_FILTER_COLORIZE, 0, 255, 0))\n{\n    echo 'Image successfully shaded green.';\n\n    imagepng($im, 'philip.png');\n    imagedestroy($im);\n}\nelse\n{\n    echo 'Green shading failed.';\n}","output":null},{"title":"imagefilter() negate example","source":"\/\/ Define our negate function so its portable for \n\/\/ php versions without imagefilter()\nfunction negate($im)\n{\n    if(function_exists('imagefilter'))\n    {\n        return imagefilter($im, IMG_FILTER_NEGATE);\n    }\n\n    for($x = 0; $x < imagesx($im); ++$x)\n    {\n        for($y = 0; $y < imagesy($im); ++$y)\n        {\n            $index = imagecolorat($im, $x, $y);\n            $rgb = imagecolorsforindex($index);\n            $color = imagecolorallocate($im, 255 - $rgb['red'], 255 - $rgb['green'], 255 - $rgb['blue']);\n\n            imagesetpixel($im, $x, $y, $color);\n        }\n    }\n\n    return(true);\n}\n\n$im = imagecreatefromjpeg('kalle.jpg');\n\nif($im && negate($im))\n{\n    echo 'Image successfully converted to negative colors.';\n\n    imagejpeg($im, 'kalle.jpg', 100);\n    imagedestroy($im);\n}\nelse\n{\n    echo 'Converting to negative colors failed.';\n}","output":null},{"title":"imagefilter() pixelate example","source":"\/\/ Load the PHP logo, we need to create two instances \n\/\/ to show the differences\n$logo1 = imagecreatefrompng('.\/php.png');\n$logo2 = imagecreatefrompng('.\/php.png');\n\n\/\/ Create the image instance we want to show the \n\/\/ differences on\n$output = imagecreatetruecolor(imagesx($logo1) * 2, imagesy($logo1));\n\n\/\/ Apply pixelation to each instance, with a block \n\/\/ size of 3\nimagefilter($logo1, IMG_FILTER_PIXELATE, 3);\nimagefilter($logo2, IMG_FILTER_PIXELATE, 3, true);\n\n\/\/ Merge the differences onto the output image\nimagecopy($output, $logo1, 0, 0, 0, 0, imagesx($logo1) - 1, imagesy($logo1) - 1);\nimagecopy($output, $logo2, imagesx($logo2), 0, 0, 0, imagesx($logo2) - 1, imagesy($logo2) - 1);\nimagedestroy($logo1);\nimagedestroy($logo2);\n\n\/\/ Output the differences\nheader('Content-Type: image\/png');\nimagepng($output);\nimagedestroy($output);","output":null}],"imageflip":[{"title":"Flips an image vertically","source":"\/\/ File\n$filename = 'phplogo.png';\n\n\/\/ Content type\nheader('Content-type: image\/png');\n\n\/\/ Load\n$im = imagecreatefrompng($filename);\n\n\/\/ Flip it vertically\nimageflip($im, IMG_FLIP_VERTICAL);\n\n\/\/ Output\nimagejpeg($im);\nimagedestroy($im);","output":null},{"title":"Flips the image horizontally","source":"\/\/ File\n$filename = 'phplogo.png';\n\n\/\/ Content type\nheader('Content-type: image\/png');\n\n\/\/ Load\n$im = imagecreatefrompng($filename);\n\n\/\/ Flip it horizontally\nimageflip($im, IMG_FLIP_HORIZONTAL);\n\n\/\/ Output\nimagejpeg($im);\nimagedestroy($im);","output":null}],"imagefontheight":[{"title":"Using imagefontheight() on built-in fonts","source":"echo 'Font height: ' . imagefontheight(4);","output":"Font height: 16"},{"title":"Using imagefontheight() together with imageloadfont()","source":"\/\/ Load a .gdf font\n$font = imageloadfont('anonymous.gdf');\n\necho 'Font height: ' . imagefontheight($font);","output":"Font height: 43"}],"imagefontwidth":[{"title":"Using imagefontwidth() on built-in fonts","source":"echo 'Font width: ' . imagefontwidth(4);","output":"Font width: 8"},{"title":"Using imagefontwidth() together with imageloadfont()","source":"\/\/ Load a .gdf font\n$font = imageloadfont('anonymous.gdf');\n\necho 'Font width: ' . imagefontwidth($font);","output":"Font width: 23"}],"imageftbbox":[{"title":"imageftbbox() example","source":"\/\/ Create a 300x150 image\n$im = imagecreatetruecolor(300, 150);\n$black = imagecolorallocate($im, 0, 0, 0);\n$white = imagecolorallocate($im, 255, 255, 255);\n\n\/\/ Set the background to be white\nimagefilledrectangle($im, 0, 0, 299, 299, $white);\n\n\/\/ Path to our font file\n$font = '.\/arial.ttf';\n\n\/\/ First we create our bounding box\n$bbox = imageftbbox(10, 0, $font, 'The PHP Documentation Group');\n\n\/\/ This is our cordinates for X and Y\n$x = $bbox[0] + (imagesx($im) \/ 2) - ($bbox[4] \/ 2) - 5;\n$y = $bbox[1] + (imagesy($im) \/ 2) - ($bbox[5] \/ 2) - 5;\n\nimagefttext($im, 10, 0, $x, $y, $black, $font, 'The PHP Documentation Group');\n\n\/\/ Output to browser\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagefttext":[{"title":"imagefttext() example","source":"\/\/ Create a 300x100 image\n$im = imagecreatetruecolor(300, 100);\n$red = imagecolorallocate($im, 0xFF, 0x00, 0x00);\n$black = imagecolorallocate($im, 0x00, 0x00, 0x00);\n\n\/\/ Make the background red\nimagefilledrectangle($im, 0, 0, 299, 99, $red);\n\n\/\/ Path to our ttf font file\n$font_file = '.\/arial.ttf';\n\n\/\/ Draw the text 'PHP Manual' using font size 13\nimagefttext($im, 13, 0, 105, 55, $black, $font_file, 'PHP Manual');\n\n\/\/ Output image to the browser\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagegammacorrect":[{"title":"imagegammacorrect() usage","source":"\/\/ Create image instance\n$im = imagecreatefromgif('php.gif');\n\n\/\/ Correct gamma, out = 1.537\nimagegammacorrect($im, 1.0, 1.537);\n\n\/\/ Save and free image\nimagegif($im, '.\/php_gamma_corrected.gif');\nimagedestroy($im);","output":null}],"imagegd":[{"title":"Outputting a GD image","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  \"A Simple Text String\", $text_color);\n\n\/\/ Output the image\nimagegd($im);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Saving a GD image","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  \"A Simple Text String\", $text_color);\n\n\/\/ Save the gd image\n\/\/ The file format for GD images is .gd, see http:\/\/www.libgd.org\/GdFileFormats\nimagegd($im, 'simple.gd');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imagegd2":[{"title":"Outputting a GD2 image","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  \"A Simple Text String\", $text_color);\n\n\/\/ Output the image\nimagegd2($im);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Saving a GD2 image","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  \"A Simple Text String\", $text_color);\n\n\/\/ Save the gd2 image\n\/\/ The file format for GD2 images is .gd2, see http:\/\/www.libgd.org\/GdFileFormats\nimagegd2($im, 'simple.gd2');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imagegetclip":[{"title":"imagegetclip() example","source":"$im = imagecreate(100, 100);\nimagesetclip($im, 10,10, 89,89);\nprint_r(imagegetclip($im));","output":"Array\n(\n    [0] => 10\n    [1] => 10\n    [2] => 89\n    [3] => 89\n)"}],"imagegif":[{"title":"Outputting an image using imagegif()","source":"\/\/ Create a new image instance\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Make the background white\nimagefilledrectangle($im, 0, 0, 99, 99, 0xFFFFFF);\n\n\/\/ Draw a text string on the image\nimagestring($im, 3, 40, 20, 'GD Library', 0xFFBA00);\n\n\/\/ Output the image to browser\nheader('Content-Type: image\/gif');\n\nimagegif($im);\nimagedestroy($im);","output":null},{"title":"Converting a PNG image to GIF using imagegif()","source":"\/\/ Load the PNG\n$png = imagecreatefrompng('.\/php.png');\n\n\/\/ Save the image as a GIF\nimagegif($png, '.\/php.gif');\n\n\/\/ Free from memory\nimagedestroy($png);\n\n\/\/ We're done\necho 'Converted PNG image to GIF with success!';","output":null},{"title":null,"source":"\/\/ Create a new image instance\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Do some image operations here\n\n\/\/ Handle output\nif(function_exists('imagegif'))\n{\n    \/\/ For GIF\n    header('Content-Type: image\/gif');\n\n    imagegif($im);\n}\nelseif(function_exists('imagejpeg'))\n{\n    \/\/ For JPEG\n    header('Content-Type: image\/jpeg');\n\n    imagejpeg($im, NULL, 100);\n}\nelseif(function_exists('imagepng'))\n{\n    \/\/ For PNG\n    header('Content-Type: image\/png');\n\n    imagepng($im);\n}\nelseif(function_exists('imagewbmp'))\n{\n    \/\/ For WBMP\n    header('Content-Type: image\/vnd.wap.wbmp');\n\n    imagewbmp($im);\n}\nelse\n{\n    imagedestroy($im);\n\n    die('No image support in this PHP server');\n}\n\n\/\/ If image support was found for one of these\n\/\/ formats, then free it from memory\nif($im)\n{\n    imagedestroy($im);\n}","output":null},{"title":null,"source":"if(imagetypes() & IMG_GIF)\n{\n    header('Content-Type: image\/gif');\n    imagegif($im);\n}\nelseif(imagetypes() & IMG_JPG)\n{\n    \/* ... etc. *\/\n}","output":null}],"imagegrabscreen":[{"title":"imagegrabscreen() example","source":"$im = imagegrabscreen();\nimagepng($im, \"myscreenshot.png\");\nimagedestroy($im);","output":null}],"imagegrabwindow":[{"title":"imagegrabwindow() example","source":"$browser = new COM(\"InternetExplorer.Application\");\n$handle = $browser->HWND;\n$browser->Visible = true;\n$im = imagegrabwindow($handle);\n$browser->Quit();\nimagepng($im, \"iesnap.png\");\nimagedestroy($im);","output":null}],"imageinterlace":[{"title":"Turn on interlacing using imageinterlace()","source":"\/\/ Create an image instance\n$im = imagecreatefromgif('php.gif');\n\n\/\/ Enable interlancing\nimageinterlace($im, true);\n\n\/\/ Save the interlaced image\nimagegif($im, '.\/php_interlaced.gif');\nimagedestroy($im);","output":null}],"imageistruecolor":[{"title":"Simple detection of true color image instances using imageistruecolor()","source":"\/\/ $im is an image instance\n\n\/\/ Check if image is a true color image or not\nif(!imageistruecolor($im))\n{\n    \/\/ Create a new true color image instance\n    $tc = imagecreatetruecolor(imagesx($im), imagesy($im));\n\n    \/\/ Copy over the pixels\n    imagecopy($tc, $im, 0, 0, 0, 0, imagesx($im), imagesy($im));\n    imagedestroy($im);\n\n    $im = $tc;\n    $tc = NULL;\n\n    \/\/ OR use imagepalettetotruecolor()\n}\n\n\/\/ Continue working with image instance","output":null}],"imagejpeg":[{"title":"Outputting a JPEG image to the browser","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Set the content type header - in this case image\/jpeg\nheader('Content-Type: image\/jpeg');\n\n\/\/ Output the image\nimagejpeg($im);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Saving a JPEG image to a file","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Save the image as 'simpletext.jpg'\nimagejpeg($im, 'simpletext.jpg');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Outputting the image at 75% quality to the browser","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Set the content type header - in this case image\/jpeg\nheader('Content-Type: image\/jpeg');\n\n\/\/ Skip the to parameter using NULL, then set the quality to 75%\nimagejpeg($im, NULL, 75);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imagelayereffect":[{"title":"imagelayereffect() example","source":"\/\/ Setup an image\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Set a background\nimagefilledrectangle($im, 0, 0, 100, 100, imagecolorallocate($im, 220, 220, 220));\n\n\/\/ Apply the overlay alpha blending flag\nimagelayereffect($im, IMG_EFFECT_OVERLAY);\n\n\/\/ Draw two grey ellipses\nimagefilledellipse($im, 50, 50, 40, 40, imagecolorallocate($im, 100, 255, 100));\nimagefilledellipse($im, 50, 50, 50, 80, imagecolorallocate($im, 100, 100, 255));\nimagefilledellipse($im, 50, 50, 80, 50, imagecolorallocate($im, 255, 100, 100));\n\n\/\/ Output\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imageline":[{"title":"Drawing a thick line","source":"function imagelinethick($image, $x1, $y1, $x2, $y2, $color, $thick = 1)\n{\n    \/* this way it works well only for orthogonal lines\n    imagesetthickness($image, $thick);\n    return imageline($image, $x1, $y1, $x2, $y2, $color);\n    *\/\n    if ($thick == 1) {\n        return imageline($image, $x1, $y1, $x2, $y2, $color);\n    }\n    $t = $thick \/ 2 - 0.5;\n    if ($x1 == $x2 || $y1 == $y2) {\n        return imagefilledrectangle($image, round(min($x1, $x2) - $t), round(min($y1, $y2) - $t), round(max($x1, $x2) + $t), round(max($y1, $y2) + $t), $color);\n    }\n    $k = ($y2 - $y1) \/ ($x2 - $x1); \/\/y = kx + q\n    $a = $t \/ sqrt(1 + pow($k, 2));\n    $points = array(\n        round($x1 - (1+$k)*$a), round($y1 + (1-$k)*$a),\n        round($x1 - (1-$k)*$a), round($y1 - (1+$k)*$a),\n        round($x2 + (1+$k)*$a), round($y2 - (1-$k)*$a),\n        round($x2 + (1-$k)*$a), round($y2 + (1+$k)*$a),\n    );\n    imagefilledpolygon($image, $points, 4, $color);\n    return imagepolygon($image, $points, 4, $color);\n}","output":null}],"imageloadfont":[{"title":"imageloadfont() usage example","source":"\/\/ Create a new image instance\n$im = imagecreatetruecolor(50, 20);\n$black = imagecolorallocate($im, 0, 0, 0);\n$white = imagecolorallocate($im, 255, 255, 255);\n\n\/\/ Make the background white\nimagefilledrectangle($im, 0, 0, 49, 19, $white);\n\n\/\/ Load the gd font and write 'Hello'\n$font = imageloadfont('.\/04b.gdf');\nimagestring($im, $font, 0, 0, 'Hello', $black);\n\n\/\/ Output to browser\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imageopenpolygon":[{"title":"imageopenpolygon() example","source":"\/\/ Create a blank image\n$image = imagecreatetruecolor(400, 300);\n\n\/\/ Allocate a color for the polygon\n$col_poly = imagecolorallocate($image, 255, 255, 255);\n\n\/\/ Draw the polygon\nimageopenpolygon($image, array(\n        0,   0,\n        100, 200,\n        300, 200\n    ),\n    3,\n    $col_poly);\n\n\/\/ Output the picture to the browser\nheader('Content-type: image\/png');\n\nimagepng($image);\nimagedestroy($image);","output":null}],"imagepalettecopy":[{"title":"imagepalettecopy() example","source":"\/\/ Create two palette images\n$palette1 = imagecreate(100, 100);\n$palette2 = imagecreate(100, 100);\n\n\/\/ Allocate the background to be \n\/\/ green in the first palette image\n$green = imagecolorallocate($palette1, 0, 255, 0);\n\n\/\/ Copy the palette from image 1 to image 2\nimagepalettecopy($palette2, $palette1);\n\n\/\/ Since the palette is now copied we can use the \n\/\/ green color allocated to image 1 without using \n\/\/ imagecolorallocate() twice\nimagefilledrectangle($palette2, 0, 0, 99, 99, $green);\n\n\/\/ Output image to the browser\nheader('Content-type: image\/png');\n\nimagepng($palette2);\nimagedestroy($palette1);\nimagedestroy($palette2);","output":null}],"imagepalettetotruecolor":[{"title":"Converts any image resource to true color","source":"\/\/ Backwards compatiblity\nif(!function_exists('imagepalettetotruecolor'))\n{\n    function imagepalettetotruecolor(&$src)\n    {\n        if(imageistruecolor($src))\n        {\n            return(true);\n        }\n\n        $dst = imagecreatetruecolor(imagesx($src), imagesy($src));\n\n        imagecopy($dst, $src, 0, 0, 0, 0, imagesx($src), imagesy($src));\n        imagedestroy($src);\n\n        $src = $dst;\n\n        return(true);\n    }\n}\n\n\/\/ Helper closure\n$typeof = function() use($im)\n{\n    echo 'typeof($im) = ' . (imageistruecolor($im) ? 'true color' : 'palette'), PHP_EOL;\n};\n\n\/\/ Create a palette based image\n$im = imagecreate(100, 100);\n$typeof();\n\n\/\/ Convert it to true color\nimagepalettetotruecolor($im);\n$typeof();\n\n\/\/ Free the memory\nimagedestroy($im);","output":"typeof($im) = palette\ntypeof($im) = true color"}],"imagepng":[{"title":null,"source":"$im = imagecreatefrompng(\"test.png\");\n\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagepolygon":[{"title":"imagepolygon() example","source":"\/\/ Create a blank image\n$image = imagecreatetruecolor(400, 300);\n\n\/\/ Allocate a color for the polygon\n$col_poly = imagecolorallocate($image, 255, 255, 255);\n\n\/\/ Draw the polygon\nimagepolygon($image, array(\n        0,   0,\n        100, 200,\n        300, 200\n    ),\n    3,\n    $col_poly);\n\n\/\/ Output the picture to the browser\nheader('Content-type: image\/png');\n\nimagepng($image);\nimagedestroy($image);","output":null}],"imagepsencodefont":[{"title":"imagepsencodefont() example","source":"\/\/ Load a .pfb font file\n$font = imagepsloadfont('.\/px3l.pfb');\n\n\/\/ Tell T1lib to use ISO Latin 1 encoding\nimagepsencode($font, '.\/IsoLatin1.enc');\n\n\/\/ Do any operations with the font here\n\n\/\/ Free the font from memory\nimagepsfreefont($font);","output":null}],"imagepsextendfont":[{"title":"imagepsextendfont() example","source":"\/\/ Load a .pfb font file\n$font = imagepsloadfont('.\/px3l.pfb');\n\n\/\/ Extend the font by 2.5\nimagepsextendfont($font, 2.5);\n\n\/\/ Do any operations with the font here\n\n\/\/ Free the font from memory\nimagepsfreefont($font);","output":null}],"imagepsfreefont":[{"title":"imagepsfreefont() example","source":"\/\/ Load a .pfb font file\n$font = imagepsloadfont('.\/bchbi.pfb');\n\n\/\/ Do any operations with the font here\n\n\/\/ Free the font from memory\nimagepsfreefont($font);","output":null}],"imagepsloadfont":[{"title":"imagepsloadfont() example","source":"\/\/ Create a new image instance\n$im = imagecreatetruecolor(350, 45);\n\n\/\/ Allocate colors and fill the background\n$black = imagecolorallocate($im, 0, 0, 0);\n$white = imagecolorallocate($im, 255, 255, 255);\nimagefilledrectangle($im, 0, 0, 349, 44, $white);\n\n\/\/ Load a font, write to the image and free the font from memory\n$font = imagepsloadfont(\"bchbi.pfb\");\nimagepstext($im, \"Testing... It worked!\", $font, 32, $white, $black, 32, 32);\nimagepsfreefont($font);\n\n\/\/ Output the image\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagepsslantfont":[{"title":"imagepsslantfont() example","source":"\/\/ Load a .pfb font file\n$font = imagepsloadfont('.\/px3l.pfb');\n\n\/\/ Slant the font by 22.5\nimagepsslantfont($font, 22.5);\n\n\/\/ Do any operations with the font here\n\n\/\/ Free the font from memory\nimagepsfreefont($font);","output":null}],"imagepstext":[{"title":"imagepstext() usage","source":"\/\/ Create image handle\n$im = imagecreatetruecolor(200, 200);\n\n\/\/ Allocate colors\n$black = imagecolorallocate($im, 0, 0, 0);\n$white = imagecolorallocate($im, 255, 255, 255);\n\n\/\/ Load the PostScript Font\n$font = imagepsloadfont('font.pfm');\n\n\/\/ Write the font to the image\nimagepstext($im, 'Sample text is simple', $font, 12, $black, $white, 50, 50);\n\n\/\/ Output and free memory\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagerectangle":[{"title":"Simple imagerectangle() example","source":"\/\/ Create a 200 x 200 image\n$canvas = imagecreatetruecolor(200, 200);\n\n\/\/ Allocate colors\n$pink = imagecolorallocate($canvas, 255, 105, 180);\n$white = imagecolorallocate($canvas, 255, 255, 255);\n$green = imagecolorallocate($canvas, 132, 135, 28);\n\n\/\/ Draw three rectangles each with its own color\nimagerectangle($canvas, 50, 50, 150, 150, $pink);\nimagerectangle($canvas, 45, 60, 120, 100, $white);\nimagerectangle($canvas, 100, 120, 75, 160, $green);\n\n\/\/ Output and free from memory\nheader('Content-Type: image\/jpeg');\n\nimagejpeg($canvas);\nimagedestroy($canvas);","output":null}],"imageresolution":[{"title":"Setting and getting the resolution of an image","source":"$im = imagecreatetruecolor(100, 100);\nimageresolution($im, 200);\nprint_r(imageresolution($im));\nimageresolution($im, 300, 72);\nprint_r(imageresolution($im));","output":"Array\n(\n    [0] => 200\n    [1] => 200\n)\nArray\n(\n    [0] => 300\n    [1] => 72\n)"}],"imagerotate":[{"title":"Rotate an image 180 degrees","source":"\/\/ File and rotation\n$filename = 'test.jpg';\n$degrees = 180;\n\n\/\/ Content type\nheader('Content-type: image\/jpeg');\n\n\/\/ Load\n$source = imagecreatefromjpeg($filename);\n\n\/\/ Rotate\n$rotate = imagerotate($source, $degrees, 0);\n\n\/\/ Output\nimagejpeg($rotate);\n\n\/\/ Free the memory\nimagedestroy($source);\nimagedestroy($rotate);","output":null}],"imagesavealpha":[{"title":"imagesavealpha() example","source":"\/\/ Load a png image with alpha channels\n$png = imagecreatefrompng('.\/alphachannel_example.png');\n\n\/\/ Do required operations\n\n\/\/ Turn off alpha blending and set alpha flag\nimagealphablending($png, false);\nimagesavealpha($png, true);\n\n\/\/ Output image to browser\nheader('Content-Type: image\/png');\n\nimagepng($png);\nimagedestroy($png);","output":null}],"imagesetbrush":[{"title":"imagesetbrush() example","source":"\/\/ Load a mini php logo\n$php = imagecreatefrompng('.\/php.png');\n\n\/\/ Create the main image, 100x100\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Fill the background with white\n$white = imagecolorallocate($im, 255, 255, 255);\nimagefilledrectangle($im, 0, 0, 299, 99, $white);\n\n\/\/ Set the brush\nimagesetbrush($im, $php);\n\n\/\/ Draw a couple of brushes, each overlaying each\nimageline($im, 50, 50, 50, 60, IMG_COLOR_BRUSHED);\n\n\/\/ Output image to the browser\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);\nimagedestroy($php);","output":null}],"imagesetinterpolation":[{"title":"imagesetinterpolation() example","source":"\/\/ Load an image\n$im = imagecreate(500, 500);\n\n\/\/ By default interpolation is IMG_BILINEAR_FIXED, switch \n\/\/ to use the 'Mitchell' filter:\nimagesetinterpolation($im, IMG_MITCHELL);\n\n\/\/ Continue to work with $im ...","output":null}],"imagesetpixel":[{"title":"imagesetpixel() example","source":"$x = 200;\n$y = 200;\n\n$gd = imagecreatetruecolor($x, $y);\n \n$corners[0] = array('x' => 100, 'y' =>  10);\n$corners[1] = array('x' =>   0, 'y' => 190);\n$corners[2] = array('x' => 200, 'y' => 190);\n\n$red = imagecolorallocate($gd, 255, 0, 0); \n\nfor ($i = 0; $i < 100000; $i++) {\n  imagesetpixel($gd, round($x),round($y), $red);\n  $a = rand(0, 2);\n  $x = ($x + $corners[$a]['x']) \/ 2;\n  $y = ($y + $corners[$a]['y']) \/ 2;\n}\n \nheader('Content-Type: image\/png');\nimagepng($gd);","output":null}],"imagesetstyle":[{"title":"imagesetstyle() example","source":"header(\"Content-type: image\/jpeg\");\n$im  = imagecreatetruecolor(100, 100);\n$w   = imagecolorallocate($im, 255, 255, 255);\n$red = imagecolorallocate($im, 255, 0, 0);\n\n\/* Draw a dashed line, 5 red pixels, 5 white pixels *\/\n$style = array($red, $red, $red, $red, $red, $w, $w, $w, $w, $w);\nimagesetstyle($im, $style);\nimageline($im, 0, 0, 100, 100, IMG_COLOR_STYLED);\n\n\/* Draw a line of happy faces using imagesetbrush() with imagesetstyle *\/\n$style = array($w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $red);\nimagesetstyle($im, $style);\n\n$brush = imagecreatefrompng(\"http:\/\/www.libpng.org\/pub\/png\/images\/smile.happy.png\");\n$w2 = imagecolorallocate($brush, 255, 255, 255);\nimagecolortransparent($brush, $w2);\nimagesetbrush($im, $brush);\nimageline($im, 100, 0, 0, 100, IMG_COLOR_STYLEDBRUSHED);\n\nimagejpeg($im);\nimagedestroy($im);","output":null}],"imagesetthickness":[{"title":"imagesetthickness() example","source":"\/\/ Create a 200x100 image\n$im = imagecreatetruecolor(200, 100);\n$white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\n$black = imagecolorallocate($im, 0x00, 0x00, 0x00);\n\n\/\/ Set the background to be white\nimagefilledrectangle($im, 0, 0, 299, 99, $white);\n\n\/\/ Set the line thickness to 5\nimagesetthickness($im, 5);\n\n\/\/ Draw the rectangle\nimagerectangle($im, 14, 14, 185, 85, $black);\n\n\/\/ Output image to the browser\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagesettile":[{"title":"imagesettile() example","source":"\/\/ Load an external image\n$zend = imagecreatefromgif('.\/zend.gif');\n\n\/\/ Create a 200x200 image\n$im = imagecreatetruecolor(200, 200);\n\n\/\/ Set the tile\nimagesettile($im, $zend);\n\n\/\/ Make the image repeat\nimagefilledrectangle($im, 0, 0, 199, 199, IMG_COLOR_TILED);\n\n\/\/ Output image to the browser\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);\nimagedestroy($zend);","output":null}],"imagestring":[{"title":"imagestring() example","source":"\/\/ Create a 100*30 image\n$im = imagecreate(100, 30);\n\n\/\/ White background and blue text\n$bg = imagecolorallocate($im, 255, 255, 255);\n$textcolor = imagecolorallocate($im, 0, 0, 255);\n\n\/\/ Write the string at the top left\nimagestring($im, 5, 0, 0, 'Hello world!', $textcolor);\n\n\/\/ Output the image\nheader('Content-type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagestringup":[{"title":"imagestringup() example","source":"\/\/ create a 100*100 image\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Write the text\n$textcolor = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);\nimagestringup($im, 3, 40, 80, 'gd library', $textcolor);\n\n\/\/ Save the image\nimagepng($im, '.\/stringup.png');\nimagedestroy($im);","output":null}],"imagesx":[{"title":"Using imagesx()","source":"\/\/ create a 300*200 image\n$img = imagecreatetruecolor(300, 200);\n\necho imagesx($img); \/\/ 300","output":null}],"imagesy":[{"title":"Using imagesy()","source":"\/\/ create a 300*200 image\n$img = imagecreatetruecolor(300, 200);\n\necho imagesy($img); \/\/ 200","output":null}],"imagetruecolortopalette":[{"title":"Converting a true color image to a palette-based image","source":"\/\/ Create a new true color image\n$im = imagecreatetruecolor(100, 100);\n\n\/\/ Convert to palette-based with no dithering and 255 colors\nimagetruecolortopalette($im, false, 255);\n\n\/\/ Save the image\nimagepng($im, '.\/paletteimage.png');\nimagedestroy($im);","output":null}],"imagettfbbox":[{"title":"imagettfbbox() example","source":"\/\/ Create a 300x150 image\n$im = imagecreatetruecolor(300, 150);\n$black = imagecolorallocate($im, 0, 0, 0);\n$white = imagecolorallocate($im, 255, 255, 255);\n\n\/\/ Set the background to be white\nimagefilledrectangle($im, 0, 0, 299, 299, $white);\n\n\/\/ Path to our font file\n$font = '.\/arial.ttf';\n\n\/\/ First we create our bounding box for the first text\n$bbox = imagettfbbox(10, 45, $font, 'Powered by PHP ' . phpversion());\n\n\/\/ This is our cordinates for X and Y\n$x = $bbox[0] + (imagesx($im) \/ 2) - ($bbox[4] \/ 2) - 25;\n$y = $bbox[1] + (imagesy($im) \/ 2) - ($bbox[5] \/ 2) - 5;\n\n\/\/ Write it\nimagettftext($im, 10, 45, $x, $y, $black, $font, 'Powered by PHP ' . phpversion());\n\n\/\/ Create the next bounding box for the second text\n$bbox = imagettfbbox(10, 45, $font, 'and Zend Engine ' . zend_version());\n\n\/\/ Set the cordinates so its next to the first text\n$x = $bbox[0] + (imagesx($im) \/ 2) - ($bbox[4] \/ 2) + 10;\n$y = $bbox[1] + (imagesy($im) \/ 2) - ($bbox[5] \/ 2) - 5;\n\n\/\/ Write it\nimagettftext($im, 10, 45, $x, $y, $black, $font, 'and Zend Engine ' . zend_version());\n\n\/\/ Output to browser\nheader('Content-Type: image\/png');\n\nimagepng($im);\nimagedestroy($im);","output":null}],"imagettftext":[{"title":"imagettftext() example","source":"\/\/ Set the content-type\nheader('Content-Type: image\/png');\n\n\/\/ Create the image\n$im = imagecreatetruecolor(400, 30);\n\n\/\/ Create some colors\n$white = imagecolorallocate($im, 255, 255, 255);\n$grey = imagecolorallocate($im, 128, 128, 128);\n$black = imagecolorallocate($im, 0, 0, 0);\nimagefilledrectangle($im, 0, 0, 399, 29, $white);\n\n\/\/ The text to draw\n$text = 'Testing...';\n\/\/ Replace path by your own font path\n$font = 'arial.ttf';\n\n\/\/ Add some shadow to the text\nimagettftext($im, 20, 0, 11, 21, $grey, $font, $text);\n\n\/\/ Add the text\nimagettftext($im, 20, 0, 10, 20, $black, $font, $text);\n\n\/\/ Using imagepng() results in clearer text compared with imagejpeg()\nimagepng($im);\nimagedestroy($im);","output":null}],"imagetypes":[{"title":"Checking for PNG support","source":"if (imagetypes() & IMG_PNG) {\n    echo \"PNG Support is enabled\";\n}","output":null}],"imagewbmp":[{"title":"Outputting a WBMP image","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Set the content type header - in this case image\/vnd.wap.wbmp\n\/\/ Hint: see image_type_to_mime_type() for content-types\nheader('Content-Type: image\/vnd.wap.wbmp');\n\n\/\/ Output the image\nimagewbmp($im);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Saving the WBMP image","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Save the image\nimagewbmp($im, 'simpletext.wbmp');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Outputting the image with a different foreground","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Set the content type header - in this case image\/vnd.wap.wbmp\n\/\/ Hint: see image_type_to_mime_type() for content-types\nheader('Content-Type: image\/vnd.wap.wbmp');\n\n\/\/ Set a replacement foreground color\n$foreground_color = imagecolorallocate($im, 255, 0, 0);\n\nimagewbmp($im, NULL, $foreground_color);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imagewebp":[{"title":"Saving an WebP file","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\n\nimagestring($im, 1, 5, 5,  'WebP with PHP', $text_color);\n\n\/\/ Save the image\nimagewebp($im, 'php.webp');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imagexbm":[{"title":"Saving an XBM file","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Save the image\nimagexbm($im, 'simpletext.xbm');\n\n\/\/ Free up memory\nimagedestroy($im);","output":null},{"title":"Saving an XBM file with a different foreground color","source":"\/\/ Create a blank image and add some text\n$im = imagecreatetruecolor(120, 20);\n$text_color = imagecolorallocate($im, 233, 14, 91);\nimagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n\/\/ Set a replacement foreground color\n$foreground_color = imagecolorallocate($im, 255, 0, 0);\n\n\/\/ Save the image\nimagexbm($im, NULL, $foreground_color);\n\n\/\/ Free up memory\nimagedestroy($im);","output":null}],"imap_append":[{"title":"imap_append() example","source":"$stream = imap_open(\"{imap.example.org}INBOX.Drafts\", \"username\", \"password\");\n\n$check = imap_check($stream);\necho \"Msg Count before append: \". $check->Nmsgs . \"\\n\";\n\nimap_append($stream, \"{imap.example.org}INBOX.Drafts\"\n                   , \"From: me@example.com\\r\\n\"\n                   . \"To: you@example.com\\r\\n\"\n                   . \"Subject: test\\r\\n\"\n                   . \"\\r\\n\"\n                   . \"this is a test message, please ignore\\r\\n\"\n                   );\n\n$check = imap_check($stream);\necho \"Msg Count after append : \". $check->Nmsgs . \"\\n\";\n\nimap_close($stream);","output":null}],"imap_check":[{"title":"imap_check() example","source":"$imap_obj = imap_check($imap_stream);\nvar_dump($imap_obj);","output":"object(stdClass)(5) {\n  [\"Date\"]=>\n  string(37) \"Wed, 10 Dec 2003 17:56:54 +0100 (CET)\"\n  [\"Driver\"]=>\n  string(4) \"imap\"\n  [\"Mailbox\"]=>\n  string(54)\n  \"{www.example.com:143\/imap\/user=\"foo@example.com\"}INBOX\"\n  [\"Nmsgs\"]=>\n  int(1)\n  [\"Recent\"]=>\n  int(0)\n}"}],"imap_createmailbox":[{"title":"imap_createmailbox() example","source":"$mbox = imap_open(\"{imap.example.org}\", \"username\", \"password\", OP_HALFOPEN)\n     or die(\"can't connect: \" . imap_last_error());\n\n$name1 = \"phpnewbox\";\n$name2 = imap_utf7_encode(\"phpnewböx\"); \/\/ phpnewb&w7Y-x\n\n$newname = $name1;\n\necho \"Newname will be '$name1'<br \/>\\n\";\n\n\/\/ we will now create a new mailbox \"phptestbox\" in your inbox folder,\n\/\/ check its status after creation and finally remove it to restore\n\/\/ your inbox to its initial state\n\nif (@imap_createmailbox($mbox, imap_utf7_encode(\"{imap.example.org}INBOX.$newname\"))) {\n    $status = @imap_status($mbox, \"{imap.example.org}INBOX.$newname\", SA_ALL);\n    if ($status) {\n        echo \"your new mailbox '$name1' has the following status:<br \/>\\n\";\n        echo \"Messages:   \" . $status->messages    . \"<br \/>\\n\";\n        echo \"Recent:     \" . $status->recent      . \"<br \/>\\n\";\n        echo \"Unseen:     \" . $status->unseen      . \"<br \/>\\n\";\n        echo \"UIDnext:    \" . $status->uidnext     . \"<br \/>\\n\";\n        echo \"UIDvalidity:\" . $status->uidvalidity . \"<br \/>\\n\";\n\n        if (imap_renamemailbox($mbox, \"{imap.example.org}INBOX.$newname\", \"{imap.example.org}INBOX.$name2\")) {\n            echo \"renamed new mailbox from '$name1' to '$name2'<br \/>\\n\";\n            $newname = $name2;\n        } else {\n            echo \"imap_renamemailbox on new mailbox failed: \" . imap_last_error() . \"<br \/>\\n\";\n        }\n    } else {\n        echo \"imap_status on new mailbox failed: \" . imap_last_error() . \"<br \/>\\n\";\n    }\n\n    if (@imap_deletemailbox($mbox, \"{imap.example.org}INBOX.$newname\")) {\n        echo \"new mailbox removed to restore initial state<br \/>\\n\";\n    } else {\n        echo \"imap_deletemailbox on new mailbox failed: \" . implode(\"<br \/>\\n\", imap_errors()) . \"<br \/>\\n\";\n    }\n\n} else {\n    echo \"could not create new mailbox: \" . implode(\"<br \/>\\n\", imap_errors()) . \"<br \/>\\n\";\n}\n\nimap_close($mbox);","output":null}],"imap_delete":[{"title":"imap_delete() example","source":"$mbox = imap_open(\"{imap.example.org}INBOX\", \"username\", \"password\")\n    or die(\"Can't connect: \" . imap_last_error());\n\n$check = imap_mailboxmsginfo($mbox);\necho \"Messages before delete: \" . $check->Nmsgs . \"<br \/>\\n\";\n\nimap_delete($mbox, 1);\n\n$check = imap_mailboxmsginfo($mbox);\necho \"Messages after  delete: \" . $check->Nmsgs . \"<br \/>\\n\";\n\nimap_expunge($mbox);\n\n$check = imap_mailboxmsginfo($mbox);\necho \"Messages after expunge: \" . $check->Nmsgs . \"<br \/>\\n\";\n\nimap_close($mbox);","output":null}],"imap_fetch_overview":[{"title":"imap_fetch_overview() example","source":"$mbox = imap_open(\"{imap.example.org:143}INBOX\", \"username\", \"password\")\n     or die(\"can't connect: \" . imap_last_error());\n\n$MC = imap_check($mbox);\n\n\/\/ Fetch an overview for all messages in INBOX\n$result = imap_fetch_overview($mbox,\"1:{$MC->Nmsgs}\",0);\nforeach ($result as $overview) {\n    echo \"#{$overview->msgno} ({$overview->date}) - From: {$overview->from}\n    {$overview->subject}\\n\";\n}\nimap_close($mbox);","output":null}],"imap_gc":[{"title":"imap_gc() example","source":"$mbox = imap_open(\"{imap.example.org:143}\", \"username\", \"password\");\n\nimap_gc($mbox, IMAP_GC_ELT);","output":null}],"imap_get_quota":[{"title":"imap_get_quota() example","source":"$mbox = imap_open(\"{imap.example.org}\", \"mailadmin\", \"password\", OP_HALFOPEN)\n      or die(\"can't connect: \" . imap_last_error());\n\n$quota_value = imap_get_quota($mbox, \"user.kalowsky\");\nif (is_array($quota_value)) {\n    echo \"Usage level is: \" . $quota_value['usage'];\n    echo \"Limit level is: \" . $quota_value['limit'];\n}\n\nimap_close($mbox);","output":null},{"title":"imap_get_quota() 4.3 or greater example","source":"$mbox = imap_open(\"{imap.example.org}\", \"mailadmin\", \"password\", OP_HALFOPEN)\n      or die(\"can't connect: \" . imap_last_error());\n\n$quota_values = imap_get_quota($mbox, \"user.kalowsky\");\nif (is_array($quota_values)) {\n   $storage = $quota_values['STORAGE'];\n   echo \"STORAGE usage level is: \" .  $storage['usage'];\n   echo \"STORAGE limit level is: \" .  $storage['limit'];\n\n   $message = $quota_values['MESSAGE'];\n   echo \"MESSAGE usage level is: \" .  $message['usage'];\n   echo \"MESSAGE limit is: \" .  $message['limit'];\n\n   \/* ...  *\/\n}\n\nimap_close($mbox);","output":null}],"imap_get_quotaroot":[{"title":"imap_get_quotaroot() example","source":"$mbox = imap_open(\"{imap.example.org}\", \"kalowsky\", \"password\", OP_HALFOPEN)\n      or die(\"can't connect: \" . imap_last_error());\n\n$quota = imap_get_quotaroot($mbox, \"INBOX\");\nif (is_array($quota)) {\n   $storage = $quota['STORAGE'];\n   echo \"STORAGE usage level is: \" .  $storage['usage'];\n   echo \"STORAGE limit level is: \" .  $storage['limit'];\n\n   $message = $quota['MESSAGE'];\n   echo \"MESSAGE usage level is: \" .  $message['usage'];\n   echo \"MESSAGE limit level is: \" .  $message['limit'];\n\n   \/* ...  *\/\n\n}\n\nimap_close($mbox);","output":null}],"imap_getacl":[{"title":"imap_getacl() example","source":"print_r(imap_getacl($conn_id, 'user.joecool'));","output":"Array\n(\n    [asubfolder] => lrswipcda\n    [anothersubfolder] => lrswipcda\n)"}],"imap_getmailboxes":[{"title":"imap_getmailboxes() example","source":"$mbox = imap_open(\"{imap.example.org}\", \"username\", \"password\", OP_HALFOPEN)\n      or die(\"can't connect: \" . imap_last_error());\n\n$list = imap_getmailboxes($mbox, \"{imap.example.org}\", \"*\");\nif (is_array($list)) {\n    foreach ($list as $key => $val) {\n        echo \"($key) \";\n        echo imap_utf7_decode($val->name) . \",\";\n        echo \"'\" . $val->delimiter . \"',\";\n        echo $val->attributes . \"<br \/>\\n\";\n    }\n} else {\n    echo \"imap_getmailboxes failed: \" . imap_last_error() . \"\\n\";\n}\n\nimap_close($mbox);","output":null}],"imap_list":[{"title":"imap_list() example","source":"$mbox = imap_open(\"{imap.example.org}\", \"username\", \"password\", OP_HALFOPEN)\n      or die(\"can't connect: \" . imap_last_error());\n\n$list = imap_list($mbox, \"{imap.example.org}\", \"*\");\nif (is_array($list)) {\n    foreach ($list as $val) {\n        echo imap_utf7_decode($val) . \"\\n\";\n    }\n} else {\n    echo \"imap_list failed: \" . imap_last_error() . \"\\n\";\n}\n\nimap_close($mbox);","output":null}],"imap_mail_compose":[{"title":"imap_mail_compose() example","source":"$envelope[\"from\"]= \"joe@example.com\";\n$envelope[\"to\"]  = \"foo@example.com\";\n$envelope[\"cc\"]  = \"bar@example.com\";\n\n$part1[\"type\"] = TYPEMULTIPART;\n$part1[\"subtype\"] = \"mixed\";\n\n$filename = \"\/tmp\/imap.c.gz\";\n$fp = fopen($filename, \"r\");\n$contents = fread($fp, filesize($filename));\nfclose($fp);\n\n$part2[\"type\"] = TYPEAPPLICATION;\n$part2[\"encoding\"] = ENCBINARY;\n$part2[\"subtype\"] = \"octet-stream\";\n$part2[\"description\"] = basename($filename);\n$part2[\"contents.data\"] = $contents;\n\n$part3[\"type\"] = TYPETEXT;\n$part3[\"subtype\"] = \"plain\";\n$part3[\"description\"] = \"description3\";\n$part3[\"contents.data\"] = \"contents.data3\\n\\n\\n\\t\";\n\n$body[1] = $part1;\n$body[2] = $part2;\n$body[3] = $part3;\n\necho nl2br(imap_mail_compose($envelope, $body));","output":null}],"imap_mailboxmsginfo":[{"title":"imap_mailboxmsginfo() example","source":"$mbox = imap_open(\"{imap.example.org}INBOX\", \"username\", \"password\")\n      or die(\"can't connect: \" . imap_last_error());\n\n$check = imap_mailboxmsginfo($mbox);\n\nif ($check) {\n    echo \"Date: \"     . $check->Date    . \"<br \/>\\n\" ;\n    echo \"Driver: \"   . $check->Driver  . \"<br \/>\\n\" ;\n    echo \"Mailbox: \"  . $check->Mailbox . \"<br \/>\\n\" ;\n    echo \"Messages: \" . $check->Nmsgs   . \"<br \/>\\n\" ;\n    echo \"Recent: \"   . $check->Recent  . \"<br \/>\\n\" ;\n    echo \"Unread: \"   . $check->Unread  . \"<br \/>\\n\" ;\n    echo \"Deleted: \"  . $check->Deleted . \"<br \/>\\n\" ;\n    echo \"Size: \"     . $check->Size    . \"<br \/>\\n\" ;\n} else {\n    echo \"imap_mailboxmsginfo() failed: \" . imap_last_error() . \"<br \/>\\n\";\n}\n\nimap_close($mbox);","output":null}],"imap_mime_header_decode":[{"title":"imap_mime_header_decode() example","source":"$text = \"=?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@example.com>\";\n\n$elements = imap_mime_header_decode($text);\nfor ($i=0; $i<count($elements); $i++) {\n    echo \"Charset: {$elements[$i]->charset}\\n\";\n    echo \"Text: {$elements[$i]->text}\\n\\n\";\n}","output":"Charset: ISO-8859-1\nText: Keld Jørn Simonsen\n\nCharset: default\nText:  <keld@example.com>"}],"imap_open":[{"title":"Different use of imap_open()","source":"\/\/ To connect to an IMAP server running on port 143 on the local machine,\n\/\/ do the following:\n$mbox = imap_open(\"{localhost:143}INBOX\", \"user_id\", \"password\");\n\n\/\/ To connect to a POP3 server on port 110 on the local server, use:\n$mbox = imap_open (\"{localhost:110\/pop3}INBOX\", \"user_id\", \"password\");\n\n\/\/ To connect to an SSL IMAP or POP3 server, add \/ssl after the protocol\n\/\/ specification:\n$mbox = imap_open (\"{localhost:993\/imap\/ssl}INBOX\", \"user_id\", \"password\");\n\n\/\/ To connect to an SSL IMAP or POP3 server with a self-signed certificate,\n\/\/ add \/ssl\/novalidate-cert after the protocol specification:\n$mbox = imap_open (\"{localhost:995\/pop3\/ssl\/novalidate-cert}\", \"user_id\", \"password\");\n\n\/\/ To connect to an NNTP server on port 119 on the local server, use:\n$nntp = imap_open (\"{localhost:119\/nntp}comp.test\", \"\", \"\");\n\/\/ To connect to a remote server replace \"localhost\" with the name or the\n\/\/ IP address of the server you want to connect to.","output":null},{"title":"imap_open() example","source":"$mbox = imap_open(\"{imap.example.org:143}\", \"username\", \"password\");\n\necho \"<h1>Mailboxes<\/h1>\\n\";\n$folders = imap_listmailbox($mbox, \"{imap.example.org:143}\", \"*\");\n\nif ($folders == false) {\n    echo \"Call failed<br \/>\\n\";\n} else {\n    foreach ($folders as $val) {\n        echo $val . \"<br \/>\\n\";\n    }\n}\n\necho \"<h1>Headers in INBOX<\/h1>\\n\";\n$headers = imap_headers($mbox);\n\nif ($headers == false) {\n    echo \"Call failed<br \/>\\n\";\n} else {\n    foreach ($headers as $val) {\n        echo $val . \"<br \/>\\n\";\n    }\n}\n\nimap_close($mbox);","output":null}],"imap_ping":[{"title":"imap_ping() Example","source":"$imap = imap_open(\"{imap.example.org}\", \"mailadmin\", \"password\");\n\n\/\/ after some sleeping\nif (!imap_ping($imap)) {\n    \/\/ do some stuff to reconnect\n}","output":null}],"imap_reopen":[{"title":"imap_reopen() example","source":"$mbox = imap_open(\"{imap.example.org:143}INBOX\", \"username\", \"password\") or die(implode(\", \", imap_errors()));\n\/\/ ...\nimap_reopen($mbox, \"{imap.example.org:143}INBOX.Sent\") or die(implode(\", \", imap_errors()));\n\/\/ ..","output":null}],"imap_rfc822_parse_adrlist":[{"title":"imap_rfc822_parse_adrlist() example","source":"$address_string = \"Joe Doe <doe@example.com>, postmaster@example.com, root\";\n$address_array  = imap_rfc822_parse_adrlist($address_string, \"example.com\");\nif (!is_array($address_array) || count($address_array) < 1) {\n    die(\"something is wrong\\n\");\n}\n\nforeach ($address_array as $id => $val) {\n    echo \"# $id\\n\";\n    echo \"  mailbox : \" . $val->mailbox . \"\\n\";\n    echo \"  host    : \" . $val->host . \"\\n\";\n    echo \"  personal: \" . $val->personal . \"\\n\";\n    echo \"  adl     : \" . $val->adl . \"\\n\";\n}","output":"# 0\n  mailbox : doe\n  host    : example.com\n  personal: Joe Doe\n  adl     : \n# 1\n  mailbox : postmaster\n  host    : example.com\n  personal: \n  adl     : \n# 2\n  mailbox : root\n  host    : example.com\n  personal: \n  adl     :"}],"imap_rfc822_write_address":[{"title":"imap_rfc822_write_address() example","source":"echo imap_rfc822_write_address(\"hartmut\", \"example.com\", \"Hartmut Holzgraefe\");","output":"Hartmut Holzgraefe <hartmut@example.com>"}],"imap_search":[{"title":"imap_search() example","source":"$conn   = imap_open('{imap.example.com:993\/imap\/ssl}INBOX', 'foo@example.com', 'pass123', OP_READONLY);\n\n$some   = imap_search($conn, 'SUBJECT \"HOWTO be Awesome\" SINCE \"8 August 2008\"', SE_UID);\n$msgnos = imap_search($conn, 'ALL');\n$uids   = imap_search($conn, 'ALL', SE_UID);\n\nprint_r($some);\nprint_r($msgnos);\nprint_r($uids);","output":"Array\n(\n    [0] => 4\n    [1] => 6\n    [2] => 11\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4] => 5\n    [5] => 6\n)\nArray\n(\n    [0] => 1\n    [1] => 4\n    [2] => 6\n    [3] => 8\n    [4] => 11\n    [5] => 12\n)"}],"imap_set_quota":[{"title":"imap_set_quota() example","source":"$mbox = imap_open(\"{imap.example.org:143}\", \"mailadmin\", \"password\");\n\nif (!imap_set_quota($mbox, \"user.kalowsky\", 3000)) {\n    echo \"Error in setting quota\\n\";\n    return;\n}\n\nimap_close($mbox);","output":null}],"imap_setflag_full":[{"title":"imap_setflag_full() example","source":"$mbox = imap_open(\"{imap.example.org:143}\", \"username\", \"password\")\n     or die(\"can't connect: \" . imap_last_error());\n\n$status = imap_setflag_full($mbox, \"2,5\", \"\\\\Seen \\\\Flagged\");\n\necho gettype($status) . \"\\n\";\necho $status . \"\\n\";\n\nimap_close($mbox);","output":null}],"imap_status":[{"title":"imap_status() example","source":"$mbox = imap_open(\"{imap.example.com}\", \"username\", \"password\", OP_HALFOPEN)\n      or die(\"can't connect: \" . imap_last_error());\n\n$status = imap_status($mbox, \"{imap.example.org}INBOX\", SA_ALL);\nif ($status) {\n  echo \"Messages:   \" . $status->messages    . \"<br \/>\\n\";\n  echo \"Recent:     \" . $status->recent      . \"<br \/>\\n\";\n  echo \"Unseen:     \" . $status->unseen      . \"<br \/>\\n\";\n  echo \"UIDnext:    \" . $status->uidnext     . \"<br \/>\\n\";\n  echo \"UIDvalidity:\" . $status->uidvalidity . \"<br \/>\\n\";\n} else {\n  echo \"imap_status failed: \" . imap_last_error() . \"\\n\";\n}\n\nimap_close($mbox);","output":null}],"imap_thread":[{"title":"imap_thread() Example","source":"\/\/ Here we're outputting the threads of a newsgroup, in HTML\n\n$nntp = imap_open('{news.example.com:119\/nntp}some.newsgroup', '', '');\n$threads = imap_thread($nntp);\n\nforeach ($threads as $key => $val) {\n  $tree = explode('.', $key);\n  if ($tree[1] == 'num') {\n    $header = imap_headerinfo($nntp, $val);\n    echo \"<ul>\\n\\t<li>\" . $header->fromaddress . \"\\n\";\n  } elseif ($tree[1] == 'branch') {\n    echo \"\\t<\/li>\\n<\/ul>\\n\";\n  }\n}\n\nimap_close($nntp);","output":null}],"imap_timeout":[{"title":"imap_timeout() example","source":"echo \"The current read timeout is \" . imap_timeout(IMAP_READTIMEOUT) . \"\\n\";","output":null}],"import_request_variables":[{"title":"import_request_variables() example","source":"\/\/ This will import GET and POST vars\n\/\/ with an \"rvar_\" prefix\nimport_request_variables(\"gp\", \"rvar_\");\n\necho $rvar_foo;","output":null}],"in_array":[{"title":"in_array() example","source":"$os = array(\"Mac\", \"NT\", \"Irix\", \"Linux\");\nif (in_array(\"Irix\", $os)) {\n    echo \"Got Irix\";\n}\nif (in_array(\"mac\", $os)) {\n    echo \"Got mac\";\n}","output":"Got Irix"},{"title":"in_array() with strict example","source":"$a = array('1.10', 12.4, 1.13);\n\nif (in_array('12.4', $a, true)) {\n    echo \"'12.4' found with strict check\\n\";\n}\n\nif (in_array(1.13, $a, true)) {\n    echo \"1.13 found with strict check\\n\";\n}","output":"1.13 found with strict check"},{"title":"in_array() with an array as needle","source":"$a = array(array('p', 'h'), array('p', 'r'), 'o');\n\nif (in_array(array('p', 'h'), $a)) {\n    echo \"'ph' was found\\n\";\n}\n\nif (in_array(array('f', 'i'), $a)) {\n    echo \"'fi' was found\\n\";\n}\n\nif (in_array('o', $a)) {\n    echo \"'o' was found\\n\";\n}","output":"'ph' was found\n  'o' was found"}],"inet_ntop":[{"title":"inet_ntop() Example","source":"$packed = chr(127) . chr(0) . chr(0) . chr(1);\n$expanded = inet_ntop($packed);\n\n\/* Outputs: 127.0.0.1 *\/\necho $expanded;\n\n$packed = str_repeat(chr(0), 15) . chr(1);\n$expanded = inet_ntop($packed);\n\n\/* Outputs: ::1 *\/\necho $expanded;","output":null}],"inet_pton":[{"title":"inet_pton() Example","source":"$in_addr = inet_pton('127.0.0.1');\n \n$in6_addr = inet_pton('::1');","output":null}],"ingres_charset":[{"title":"ingres_charset() - Get the installation character set","source":"$link = ingres_connect($database, $user, $password);\n\necho ingres_charset($link) . \"\\n\";\n\ningres_close($link);","output":null}],"ingres_connect":[{"title":"Open a connection to an Ingres database","source":"$link = ingres_connect(\"mydb\", \"user\", \"pass\")\n    or die(\"Could not connect\");\necho \"Connected successfully\";\ningres_close($link);","output":null}],"ingres_cursor":[{"title":"Get cursor name for a query resource","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_prepare($link, \"select * from table\");\n\n$cursor_name = ingres_cursor($result);\n\necho $cursor_name;","output":null}],"ingres_errno":[{"title":"Get the last Ingres error number generated","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link, \"select * from table\");\n\n$error_code = ingres_errno($link);\n\nif ( $error_code != 0 ) {\n   echo \"An error occurred - \" . $error_code;\n}","output":null}],"ingres_error":[{"title":"Get a message for the last error generated","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link, \"select * from table\");\n\n$error_text = ingres_error();\n\nif (!is_null($error_text)) {\n   echo \"An error occurred - \" . $error_text;\n}","output":null}],"ingres_errsqlstate":[{"title":"Get the last SQLSTATE error code generated","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link, \"select * from table\");\n\n$error_sqlstate = ingres_errsqlstate($link);\n\nif (!is_null($error_sqlstate)) {\n   echo \"An error occurred - \" . $error_sqlstate;\n}","output":null}],"ingres_escape_string":[{"title":"Escape special characters for use in a query","source":"$link = ingres_connect($database, $user, $password);\n\n$last_name = \"O'Connor\";\n\n$sql = sprintf(\"select * from user_profile where up_last = '%s'\", ingres_escape_string( $link, $last_name));\n\n$result = ingres_query($link, $sql);\n\nwhile ($user = ingres_fetch_object($result))\n{\n  echo $user->up_first . '<BR\/>';\n}\n\ningres_commit($link);\n\ningres_close($link);","output":null}],"ingres_fetch_array":[{"title":null,"source":"$result = ingres_query($link, \"select ap_place as city, ap_ccode as country from airport where ap_iatacode = 'VLL'\"); \n$result = ingres_fetch_array($result);\n$foo = $result[\"city\"];\n$bar = $result[\"country\"];","output":null},{"title":"Fetch a row of result into an array","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link,\"select * from table\");\nwhile ($row = ingres_fetch_array($result)) {\n    echo $row[\"user_id\"];  \/\/ using associative array\n    echo $row[\"fullname\"];\n    echo $row[1];          \/\/ using enumerated array\n    echo $row[2];\n}","output":null}],"ingres_fetch_assoc":[{"title":"Fetch a row into an associative array","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link,\"select * from table\");\nwhile ($row = ingres_fetch_assoc($result)) {\n    echo $row[\"user_id\"];  \/\/ using associative array\n    echo $row[\"fullname\"];\n}","output":null}],"ingres_fetch_object":[{"title":"Fetch a row into an object","source":"$link = ingres_connect($database, $user, $password);\n$result = ingres_query($link, \"select * from table\");\nwhile ($row = ingres_fetch_object($result)) {\n    echo $row->user_id;\n    echo $row->fullname;\n}","output":null}],"ingres_fetch_proc_return":[{"title":"Get the return value from a procedure call","source":"$link = ingres_connect($database);\n\nif ( ingres_errno() != 0 ) {\n    $error_text = ingres_error();\n    die($error_text);\n}\n\n$result = ingres_query($link, \"execute procedure php_proc (value = 1000)\");\n\nif ( ingres_errno() != 0 ) {\n    $error_text = ingres_error();\n    die($error_text);\n}\n\necho \"return value - \" . ingres_fetch_proc_return($result) . \"\\n\";\n\ningres_close($link);","output":null}],"ingres_fetch_row":[{"title":"Fetch a row of result into an enumerated array","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link, \"select * from table\");\nwhile ($row = ingres_fetch_row($result)) {\n    echo $row[1];\n    echo $row[2];\n}","output":null}],"ingres_free_result":[{"title":"Free a result resource","source":"$link = ingres_connect($database, $user, $password);\n\n$result = ingres_query($link, \"select * from table\");\n\nwhile ($row = ingres_fetch_row($result)) {\n    echo $row[1];\n    echo $row[2];\n}\ningres_free_result($result);\n\ningres_close($link)","output":null}],"ingres_query":[{"title":"Send a simple select","source":"$link = ingres_connect(\"demodb\");\n\n$result = ingres_query($link, \"select * from user_profile\");\nwhile ($row = ingres_fetch_row($result)) {\n    echo $row[1];\n    echo $row[2];\n}","output":null},{"title":"Passing query parameters to ingres_query()","source":"$link = ingres_connect(\"demodb\");\n\n$params[] = \"Emma\";\n$query = \"select * from user_profile where up_first = ?\";\n$result = ingres_query($link, $query, $params);\nwhile ($row = ingres_fetch_row($result)) {\n    echo $row[1];\n    echo $row[2];\n}","output":null},{"title":"Inserting a BLOB with parameter types","source":"$link = ingres_connect(\"demodb\");\n\n\/\/Open a photo\n$fh = fopen(\"photo.jpg\",\"r\");\n$blob_data = stream_get_contents($fh);\nfclose($fh);\n\n\/\/Prepare parameters\n$params[] = $blob_data;\n$params[] = 1201;\n\n\/\/Define parameter types\n$param_types = \"Bi\";\n\n$query = \"update user_profile set up_image = ? where up_id = ?\";\n$result = ingres_query($link, $query , $params, $param_types);\n\nif (ingres_errno())\n{\n    echo ingres_errno() . \"-\" . ingres_error() . \"\\n\";\n}\n\ningres_commit($link);\n\ningres_close($link);","output":null}],"ingres_result_seek":[{"title":"Position the cursor on the 3rd row","source":"$result=ingres_query($link, \"select * from airport where ap_ccode = 'ES' order by ap_place asc\");\n\n\/* goto row 3 *\/\nif (!ingres_result_seek($result, 3))\n{\n    echo ingres_errno() . \" - \" . ingres_error . \"\\n\";\n    die(\"i died\");\n}\nelse\n{\n    $airport = ingres_fetch_object ($result);\n    {\n        echo $airport->ap_iatacode . \" - \" .  $airport->ap_name . \"\\n\";\n    }\n}\n\ningres_commit($link);","output":null}],"ingres_set_environment":[{"title":"Set date_format to ISO4","source":"$options = array( \"date_format\" => INGRES_DATE_ISO4 );\n\nif (ingres_set_environment($link, $options))\n{\n    $result=ingres_query($link,\"select date('now') as date\");\n\n    while ( $object = ingres_fetch_object ($result) ) {\n        echo $object->date.\"\\n\";\n    }\n}","output":null},{"title":"Set timezone to HONG-KONG","source":"$options = array( \"timezone\" => \"HONG-KONG\");\n\nif (ingres_set_environment($link, $options))\n{\n    $result=ingres_query($link,\"select date('now') as date\");\n\n    while ( $object = ingres_fetch_object ($result) ) {\n        echo $object->date.\"\\n\";\n    }\n}","output":null}],"ingres_unbuffered_query":[{"title":"Issue a simple un-buffered select","source":"$link = ingres_connect(\"demodb\");\n\n$result = ingres_unbuffered_query($link, \"select * from user_profile\");\nwhile ($row = ingres_fetch_row($result)) {\n    echo $row[1];\n    echo $row[2];\n}","output":null},{"title":"Passing query parameters to ingres_unbuffered_query()","source":"$link = ingres_connect(\"demodb\");\n\n$params[] = \"Emma\";\n$query = \"select * from user_profile where up_first = ?\";\n$result = ingres_unbuffered_query($link, $query, $params);\nwhile ($row = ingres_fetch_row($result)) {\n    echo $row[1];\n    echo $row[2];\n}","output":null},{"title":"Inserting a BLOB with parameter types","source":"$link = ingres_connect(\"demodb\");\n\n\/\/Open a photo\n$fh = fopen(\"photo.jpg\",\"r\");\n$blob_data = stream_get_contents($fh);\nfclose($fh);\n\n\/\/Prepare parameters\n$params[] = $blob_data;\n$params[] = 1201;\n\n\/\/Define parameter types\n$param_types = \"Bi\";\n\n$query = \"update user_profile set up_image = ? where up_id = ?\";\n$result = ingres_unbuffered_query($link, $query , $params, $param_types);\n\nif (ingres_errno())\n{\n    echo ingres_errno() . \"-\" . ingres_error() . \"\\n\";\n}","output":null}],"ini_get_all":[{"title":"ini_get_all() examples","source":"print_r(ini_get_all(\"pcre\"));\nprint_r(ini_get_all());","output":"Array\n(\n    [pcre.backtrack_limit] => Array\n        (\n            [global_value] => 100000\n            [local_value] => 100000\n            [access] => 7\n        )\n\n    [pcre.recursion_limit] => Array\n        (\n            [global_value] => 100000\n            [local_value] => 100000\n            [access] => 7\n        )\n\n)\nArray\n(\n    [allow_call_time_pass_reference] => Array\n        (\n            [global_value] => 0\n            [local_value] => 0\n            [access] => 6\n        )\n\n    [allow_url_fopen] => Array\n        (\n            [global_value] => 1\n            [local_value] => 1\n            [access] => 4\n        )\n\n    ...\n\n)"},{"title":"Disabling details","source":"print_r(ini_get_all(\"pcre\", false)); \/\/ Added in PHP 5.3.0\nprint_r(ini_get_all(null, false)); \/\/ Added in PHP 5.3.0","output":"Array\n(\n    [pcre.backtrack_limit] => 100000\n    [pcre.recursion_limit] => 100000\n)\nArray\n(\n    [allow_call_time_pass_reference] => 0\n    [allow_url_fopen] => 1\n    ...\n)"}],"ini_get":[{"title":"A few ini_get() examples","source":"\/*\nOur php.ini contains the following settings:\n\ndisplay_errors = On\nregister_globals = Off\npost_max_size = 8M\n*\/\n\necho 'display_errors = ' . ini_get('display_errors') . \"\\n\";\necho 'register_globals = ' . ini_get('register_globals') . \"\\n\";\necho 'post_max_size = ' . ini_get('post_max_size') . \"\\n\";\necho 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . \"\\n\";\necho 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));\n\nfunction return_bytes($val) {\n    $val = trim($val);\n    $last = strtolower($val[strlen($val)-1]);\n    switch($last) {\n        \/\/ The 'G' modifier is available since PHP 5.1.0\n        case 'g':\n            $val *= 1024;\n        case 'm':\n            $val *= 1024;\n        case 'k':\n            $val *= 1024;\n    }\n\n    return $val;\n}","output":"display_errors = 1\nregister_globals = 0\npost_max_size = 8M\npost_max_size+1 = 9\npost_max_size in bytes = 8388608"}],"ini_restore":[{"title":"ini_restore() example","source":"$setting = 'y2k_compliance';\n\necho 'Current value for \\'' . $setting . '\\': ' . ini_get($setting), PHP_EOL;\n\nini_set($setting, ini_get($setting) ? 0 : 1);\necho 'New value for \\'' . $setting . '\\': ' . ini_get($setting), PHP_EOL;\n\nini_restore($setting);\necho 'Original value for \\'' . $setting . '\\': ' . ini_get($setting), PHP_EOL;","output":"Current value for 'y2k_compliance': 1\nNew value for 'y2k_compliance': 0\nOriginal value for 'y2k_compliance': 1"}],"ini_set":[{"title":"Setting an ini option","source":"echo ini_get('display_errors');\n\nif (!ini_get('display_errors')) {\n    ini_set('display_errors', '1');\n}\n\necho ini_get('display_errors');","output":null}],"inotify_init":[{"title":"Example usage of inotify","source":"\/\/ Open an inotify instance\n$fd = inotify_init();\n\n\/\/ Watch __FILE__ for metadata changes (e.g. mtime)\n$watch_descriptor = inotify_add_watch($fd, __FILE__, IN_ATTRIB);\n\n\/\/ generate an event\ntouch(__FILE__);\n\n\/\/ Read events\n$events = inotify_read($fd);\nprint_r($events);\n\n\/\/ The following methods allows to use inotify functions without blocking on inotify_read():\n\n\/\/ - Using stream_select() on $fd:\n$read = array($fd);\n$write = null;\n$except = null;\nstream_select($read,$write,$except,0);\n\n\/\/ - Using stream_set_blocking() on $fd\nstream_set_blocking($fd, 0);\ninotify_read($fd); \/\/ Does no block, and return false if no events are pending\n\n\/\/ - Using inotify_queue_len() to check if event queue is not empty\n$queue_len = inotify_queue_len($fd); \/\/ If > 0, inotify_read() will not block\n\n\/\/ Stop watching __FILE__ for metadata changes\ninotify_rm_watch($fd, $watch_descriptor);\n\n\/\/ Close the inotify instance\n\/\/ This may have closed all watches if this was not already done\nfclose($fd);","output":"array(\n  array(\n    'wd' => 1,     \/\/ Equals $watch_descriptor\n    'mask' => 4,   \/\/ IN_ATTRIB bit is set\n    'cookie' => 0, \/\/ unique id to connect related events (e.g. \n                   \/\/ IN_MOVE_FROM and IN_MOVE_TO events)\n    'name' => '',  \/\/ the name of a file (e.g. if we monitored changes\n                   \/\/ in a directory)\n  ),\n);"}],"intdiv":[{"title":"intdiv() example","source":"var_dump(intdiv(3, 2));\nvar_dump(intdiv(-3, 2));\nvar_dump(intdiv(3, -2));\nvar_dump(intdiv(-3, -2));\nvar_dump(intdiv(PHP_INT_MAX, PHP_INT_MAX));\nvar_dump(intdiv(PHP_INT_MIN, PHP_INT_MIN));\nvar_dump(intdiv(PHP_INT_MIN, -1));\nvar_dump(intdiv(1, 0));","output":"int(1)\nint(-1)\nint(-1)\nint(1)\nint(1)\nint(1)\n\nFatal error: Uncaught ArithmeticError: Division of PHP_INT_MIN by -1 is not an integer in %s on line 8\nFatal error: Uncaught DivisionByZeroError: Division by zero in %s on line 9"}],"interface_exists":[{"title":"interface_exists() example","source":"\/\/ Check the interface exists before trying to use it\nif (interface_exists('MyInterface')) {\n    class MyClass implements MyInterface\n    {\n        \/\/ Methods\n    }\n}","output":null}],"intl_error_name":[{"title":"intl_error_name() example","source":"$coll     = collator_create( 'en_RU' );\n$err_code = collator_get_error_code( $coll );\n\nprintf( \"Symbolic name for %d is %s\\n.\", $err_code, intl_error_name( $err_code ) );","output":"Symbolic name for -128 is U_USING_FALLBACK_WARNING."}],"intl_is_failure":[{"title":"intl_is_failure() example","source":"function check( $err_code )\n{\n    var_export( intl_is_failure( $err_code ) );\n    echo \"\\n\";\n}\n\ncheck( U_ZERO_ERROR );\ncheck( U_USING_FALLBACK_WARNING );\ncheck( U_ILLEGAL_ARGUMENT_ERROR );","output":"false\nfalse\ntrue"}],"intval":[{"title":"intval() examples","source":"echo intval(42);                      \/\/ 42\necho intval(4.2);                     \/\/ 4\necho intval('42');                    \/\/ 42\necho intval('+42');                   \/\/ 42\necho intval('-42');                   \/\/ -42\necho intval(042);                     \/\/ 34\necho intval('042');                   \/\/ 42\necho intval(1e10);                    \/\/ 1410065408\necho intval('1e10');                  \/\/ 1\necho intval(0x1A);                    \/\/ 26\necho intval(42000000);                \/\/ 42000000\necho intval(420000000000000000000);   \/\/ 0\necho intval('420000000000000000000'); \/\/ 2147483647\necho intval(42, 8);                   \/\/ 42\necho intval('42', 8);                 \/\/ 34\necho intval(array());                 \/\/ 0\necho intval(array('foo', 'bar'));     \/\/ 1","output":null}],"ip2long":[{"title":"ip2long() Example","source":"$ip = gethostbyname('www.example.com');\n$out = \"The following URLs are equivalent:<br \/>\\n\";\n$out .= 'http:\/\/www.example.com\/, http:\/\/' . $ip . '\/, and http:\/\/' . sprintf(\"%u\", ip2long($ip)) . \"\/<br \/>\\n\";\necho $out;","output":null},{"title":"Displaying an IP address","source":"$ip   = gethostbyname('www.example.com');\n$long = ip2long($ip);\n\nif ($long == -1 || $long === FALSE) {\n    echo 'Invalid IP, please try again';\n} else {\n    echo $ip   . \"\\n\";            \/\/ 192.0.34.166\n    echo $long . \"\\n\";            \/\/ 3221234342 (-1073732954 on 32-bit systems, due to integer overflow)\n    printf(\"%u\\n\", ip2long($ip)); \/\/ 3221234342\n}","output":null}],"iptcembed":[{"title":"Embedding IPTC data into a JPEG","source":"\/\/ iptc_make_tag() function by Thies C. Arntzen\nfunction iptc_make_tag($rec, $data, $value)\n{\n    $length = strlen($value);\n    $retval = chr(0x1C) . chr($rec) . chr($data);\n\n    if($length < 0x8000)\n    {\n        $retval .= chr($length >> 8) .  chr($length & 0xFF);\n    }\n    else\n    {\n        $retval .= chr(0x80) . \n                   chr(0x04) . \n                   chr(($length >> 24) & 0xFF) . \n                   chr(($length >> 16) & 0xFF) . \n                   chr(($length >> 8) & 0xFF) . \n                   chr($length & 0xFF);\n    }\n\n    return $retval . $value;\n}\n\n\/\/ Path to jpeg file\n$path = '.\/phplogo.jpg';\n\n\/\/ Set the IPTC tags\n$iptc = array(\n    '2#120' => 'Test image',\n    '2#116' => 'Copyright 2008-2009, The PHP Group'\n);\n\n\/\/ Convert the IPTC tags into binary code\n$data = '';\n\nforeach($iptc as $tag => $string)\n{\n    $tag = substr($tag, 2);\n    $data .= iptc_make_tag(2, $tag, $string);\n}\n\n\/\/ Embed the IPTC data\n$content = iptcembed($data, $path);\n\n\/\/ Write the new image data out to the file.\n$fp = fopen($path, \"wb\");\nfwrite($fp, $content);\nfclose($fp);","output":null}],"iptcparse":[{"title":"iptcparse() used together with getimagesize()","source":"$size = getimagesize('.\/test.jpg', $info);\nif(isset($info['APP13']))\n{\n    $iptc = iptcparse($info['APP13']);\n    var_dump($iptc);\n}","output":null}],"is_a":[{"title":"is_a() example","source":"\/\/ define a class\nclass WidgetFactory\n{\n  var $oink = 'moo';\n}\n\n\/\/ create a new object\n$WF = new WidgetFactory();\n\nif (is_a($WF, 'WidgetFactory')) {\n  echo \"yes, \\$WF is still a WidgetFactory\\n\";\n}","output":null},{"title":"Using the instanceof operator in PHP 5","source":"if ($WF instanceof WidgetFactory) {\n    echo 'Yes, $WF is a WidgetFactory';\n}","output":null}],"is_array":[{"title":"Check that variable is an array","source":"$yes = array('this', 'is', 'an array');\n\necho is_array($yes) ? 'Array' : 'not an Array';\necho \"\\n\";\n\n$no = 'this is a string';\n\necho is_array($no) ? 'Array' : 'not an Array';","output":"Array\nnot an Array"}],"is_bool":[{"title":"is_bool() examples","source":"$a = false;\n$b = 0;\n\n\/\/ Since $a is a boolean, it will return true\nif (is_bool($a) === true) {\n    echo \"Yes, this is a boolean\";\n}\n\n\/\/ Since $b is not a boolean, it will return false\nif (is_bool($b) === false) {\n    echo \"No, this is not a boolean\";\n}","output":null}],"is_callable":[{"title":"is_callable() example","source":"\/\/  How to check a variable to see if it can be called\n\/\/  as a function.\n\n\/\/\n\/\/  Simple variable containing a function\n\/\/\n\nfunction someFunction() \n{\n}\n\n$functionVariable = 'someFunction';\n\nvar_dump(is_callable($functionVariable, false, $callable_name));  \/\/ bool(true)\n\necho $callable_name, \"\\n\";  \/\/ someFunction\n\n\/\/\n\/\/  Array containing a method\n\/\/\n\nclass someClass {\n\n  function someMethod() \n  {\n  }\n\n}\n\n$anObject = new someClass();\n\n$methodVariable = array($anObject, 'someMethod');\n\nvar_dump(is_callable($methodVariable, true, $callable_name));  \/\/  bool(true)\n\necho $callable_name, \"\\n\";  \/\/  someClass::someMethod","output":null},{"title":"is_callable() and constructors","source":"class Foo\n{\n    public function __construct() {}\n    public function foo() {}\n}\n\nvar_dump(\n    is_callable(array('Foo', '__construct')),\n    is_callable(array('Foo', 'foo'))\n);","output":"bool(false)\nbool(false)"}],"is_dir":[{"title":"is_dir() example","source":"var_dump(is_dir('a_file.txt'));\nvar_dump(is_dir('bogus_dir\/abc'));\n\nvar_dump(is_dir('..')); \/\/one dir up","output":"bool(false)\nbool(false)\nbool(true)"}],"is_executable":[{"title":"is_executable() example","source":"$file = '\/home\/vincent\/somefile.sh';\n\nif (is_executable($file)) {\n    echo $file.' is executable';\n} else {\n    echo $file.' is not executable';\n}","output":null}],"is_file":[{"title":"is_file() example","source":"var_dump(is_file('a_file.txt')) . \"\\n\";\nvar_dump(is_file('\/usr\/bin\/')) . \"\\n\";","output":"bool(true)\nbool(false)"}],"is_float":[{"title":"is_float() example","source":"var_dump(is_float(27.25));\nvar_dump(is_float('abc'));\nvar_dump(is_float(23));\nvar_dump(is_float(23.5));\nvar_dump(is_float(1e7));  \/\/Scientific Notation\nvar_dump(is_float(true));","output":"bool(true)\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nbool(false)"}],"is_int":[{"title":"is_int() example","source":"$values = array(23, \"23\", 23.5, \"23.5\", null, true, false);\nforeach ($values as $value) {\n    echo \"is_int(\";\n    var_export($value);\n    echo \") = \";\n    var_dump(is_int($value));\n}","output":"is_int(23) = bool(true)\nis_int('23') = bool(false)\nis_int(23.5) = bool(false)\nis_int('23.5') = bool(false)\nis_int(NULL) = bool(false)\nis_int(true) = bool(false)\nis_int(false) = bool(false)"}],"is_iterable":[{"title":"is_iterable() examples","source":"var_dump(is_iterable([1, 2, 3]));  \/\/ bool(true)\nvar_dump(is_iterable(new ArrayIterator([1, 2, 3])));  \/\/ bool(true)\nvar_dump(is_iterable((function () { yield 1; })()));  \/\/ bool(true)\nvar_dump(is_iterable(1));  \/\/ bool(false)\nvar_dump(is_iterable(new stdClass()));  \/\/ bool(false)","output":null}],"is_link":[{"title":"Create and confirm if a file is a symbolic link","source":"$link = 'uploads';\n\nif (is_link($link)) {\n    echo(readlink($link));\n} else {\n    symlink('uploads.php', $link);\n}","output":null}],"is_nan":[{"title":"is_nan() example","source":"\/\/ Invalid calculation, will return a \n\/\/ NaN value\n$nan = acos(8);\n\nvar_dump($nan, is_nan($nan));","output":"float(NAN)\nbool(true)"}],"is_null":[{"title":"is_null() example","source":"error_reporting(E_ALL);\n\n$foo = NULL;\nvar_dump(is_null($inexistent), is_null($foo));","output":"Notice: Undefined variable: inexistent in ...\nbool(true)\nbool(true)"}],"is_numeric":[{"title":"is_numeric() examples","source":"$tests = array(\n    \"42\",\n    1337,\n    0x539,\n    02471,\n    0b10100111001,\n    1337e0,\n    \"not numeric\",\n    array(),\n    9.1\n);\n\nforeach ($tests as $element) {\n    if (is_numeric($element)) {\n        echo \"'{$element}' is numeric\", PHP_EOL;\n    } else {\n        echo \"'{$element}' is NOT numeric\", PHP_EOL;\n    }\n}","output":"'42' is numeric\n'1337' is numeric\n'1337' is numeric\n'1337' is numeric\n'1337' is numeric\n'1337' is numeric\n'not numeric' is NOT numeric\n'Array' is NOT numeric\n'9.1' is numeric"}],"is_object":[{"title":"is_object() example","source":"\/\/ Declare a simple function to return an \n\/\/ array from our object\nfunction get_students($obj)\n{\n    if (!is_object($obj)) {\n        return false;\n    }\n\n    return $obj->students;\n}\n\n\/\/ Declare a new class instance and fill up \n\/\/ some values\n$obj = new stdClass();\n$obj->students = array('Kalle', 'Ross', 'Felipe');\n\nvar_dump(get_students(null));\nvar_dump(get_students($obj));","output":null}],"is_readable":[{"title":"is_readable() example","source":"$filename = 'test.txt';\nif (is_readable($filename)) {\n    echo 'The file is readable';\n} else {\n    echo 'The file is not readable';\n}","output":null}],"is_resource":[{"title":"is_resource() example","source":"$db_link = @mysql_connect('localhost', 'mysql_user', 'mysql_pass');\nif (!is_resource($db_link)) {\n    die('Can\\'t connect : ' . mysql_error());\n}","output":null}],"is_scalar":[{"title":"is_scalar() example","source":"function show_var($var) \n{\n    if (is_scalar($var)) {\n        echo $var;\n    } else {\n        var_dump($var);\n    }\n}\n$pi = 3.1416;\n$proteins = array(\"hemoglobin\", \"cytochrome c oxidase\", \"ferredoxin\");\n\nshow_var($pi);\nshow_var($proteins)","output":"3.1416\narray(3) {\n  [0]=>\n  string(10) \"hemoglobin\"\n  [1]=>\n  string(20) \"cytochrome c oxidase\"\n  [2]=>\n  string(10) \"ferredoxin\"\n}"}],"is_soap_fault":[{"title":"is_soap_fault() example","source":"$client = new SoapClient(\"some.wsdl\", array('exceptions' => 0));\n$result = $client->SomeFunction();\nif (is_soap_fault($result)) {\n    trigger_error(\"SOAP Fault: (faultcode: {$result->faultcode}, faultstring: {$result->faultstring})\", E_USER_ERROR);\n}","output":null},{"title":"SOAP's standard method for error reporting is exceptions","source":"try {\n    $client = new SoapClient(\"some.wsdl\");\n    $result = $client->SomeFunction(\/* ... *\/);\n} catch (SoapFault $fault) {\n    trigger_error(\"SOAP Fault: (faultcode: {$fault->faultcode}, faultstring: {$fault->faultstring})\", E_USER_ERROR);\n}","output":null}],"is_string":[{"title":"is_string() example","source":"$values = array(false, true, null, 'abc', '23', 23, '23.5', 23.5, '', ' ', '0', 0);\nforeach ($values as $value) {\n    echo \"is_string(\";\n    var_export($value);\n    echo \") = \";\n    echo var_dump(is_string($value));\n}","output":"is_string(false) = bool(false)\nis_string(true) = bool(false)\nis_string(NULL) = bool(false)\nis_string('abc') = bool(true)\nis_string('23') = bool(true)\nis_string(23) = bool(false)\nis_string('23.5') = bool(true)\nis_string(23.5) = bool(false)\nis_string('') = bool(true)\nis_string(' ') = bool(true)\nis_string('0') = bool(true)\nis_string(0) = bool(false)"}],"is_subclass_of":[{"title":"is_subclass_of() example","source":"\/\/ define a class\nclass WidgetFactory\n{\n  var $oink = 'moo';\n}\n\n\/\/ define a child class\nclass WidgetFactory_Child extends WidgetFactory\n{\n  var $oink = 'oink';\n}\n\n\/\/ create a new object\n$WF = new WidgetFactory();\n$WFC = new WidgetFactory_Child();\n\nif (is_subclass_of($WFC, 'WidgetFactory')) {\n  echo \"yes, \\$WFC is a subclass of WidgetFactory\\n\";\n} else {\n  echo \"no, \\$WFC is not a subclass of WidgetFactory\\n\";\n}\n\n\nif (is_subclass_of($WF, 'WidgetFactory')) {\n  echo \"yes, \\$WF is a subclass of WidgetFactory\\n\";\n} else {\n  echo \"no, \\$WF is not a subclass of WidgetFactory\\n\";\n}\n\n\n\/\/ usable only since PHP 5.0.3\nif (is_subclass_of('WidgetFactory_Child', 'WidgetFactory')) {\n  echo \"yes, WidgetFactory_Child is a subclass of WidgetFactory\\n\";\n} else {\n  echo \"no, WidgetFactory_Child is not a subclass of WidgetFactory\\n\";\n}","output":"yes, $WFC is a subclass of WidgetFactory\nno, $WF is not a subclass of WidgetFactory\nyes, WidgetFactory_Child is a subclass of WidgetFactory"},{"title":"is_subclass_of() using interface example","source":"\/\/ Define the Interface\ninterface MyInterface\n{\n  public function MyFunction();\n}\n\n\/\/ Define the class implementation of the interface\nclass MyClass implements MyInterface\n{\n  public function MyFunction()\n  {\n    return \"MyClass Implements MyInterface!\";\n  }\n}\n\n\/\/ Instantiate the object\n$my_object = new MyClass;\n\n\/\/ Works since 5.3.7\n\n\/\/ Test using the object instance of the class\nif (is_subclass_of($my_object, 'MyInterface')) {\n  echo \"Yes, \\$my_object is a subclass of MyInterface\\n\";\n} else {\n  echo \"No, \\$my_object is not a subclass of MyInterface\\n\";\n}\n\n\/\/ Test using a string of the class name\nif (is_subclass_of('MyClass', 'MyInterface')) {\n  echo \"Yes, MyClass is a subclass of MyInterface\\n\";\n} else {\n  echo \"No, MyClass is not a subclass of MyInterface\\n\";\n}","output":"Yes, $my_object is a subclass of MyInterface\nYes, MyClass is a subclass of MyInterface"}],"is_uploaded_file":[{"title":"is_uploaded_file() example","source":"if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {\n   echo \"File \". $_FILES['userfile']['name'] .\" uploaded successfully.\\n\";\n   echo \"Displaying contents\\n\";\n   readfile($_FILES['userfile']['tmp_name']);\n} else {\n   echo \"Possible file upload attack: \";\n   echo \"filename '\". $_FILES['userfile']['tmp_name'] . \"'.\";\n}","output":null}],"is_writable":[{"title":"is_writable() example","source":"$filename = 'test.txt';\nif (is_writable($filename)) {\n    echo 'The file is writable';\n} else {\n    echo 'The file is not writable';\n}","output":null}],"isset":[{"title":"isset() Examples","source":"$var = '';\n\n\/\/ This will evaluate to TRUE so the text will be printed.\nif (isset($var)) {\n    echo \"This var is set so I will print.\";\n}\n\n\/\/ In the next examples we'll use var_dump to output\n\/\/ the return value of isset().\n\n$a = \"test\";\n$b = \"anothertest\";\n\nvar_dump(isset($a));      \/\/ TRUE\nvar_dump(isset($a, $b)); \/\/ TRUE\n\nunset ($a);\n\nvar_dump(isset($a));     \/\/ FALSE\nvar_dump(isset($a, $b)); \/\/ FALSE\n\n$foo = NULL;\nvar_dump(isset($foo));   \/\/ FALSE","output":null},{"title":null,"source":"$a = array ('test' => 1, 'hello' => NULL, 'pie' => array('a' => 'apple'));\n\nvar_dump(isset($a['test']));            \/\/ TRUE\nvar_dump(isset($a['foo']));             \/\/ FALSE\nvar_dump(isset($a['hello']));           \/\/ FALSE\n\n\/\/ The key 'hello' equals NULL so is considered unset\n\/\/ If you want to check for NULL key values then try: \nvar_dump(array_key_exists('hello', $a)); \/\/ TRUE\n\n\/\/ Checking deeper array values\nvar_dump(isset($a['pie']['a']));        \/\/ TRUE\nvar_dump(isset($a['pie']['b']));        \/\/ FALSE\nvar_dump(isset($a['cake']['a']['b']));  \/\/ FALSE","output":null},{"title":"isset() on String Offsets","source":"$expected_array_got_string = 'somestring';\nvar_dump(isset($expected_array_got_string['some_key']));\nvar_dump(isset($expected_array_got_string[0]));\nvar_dump(isset($expected_array_got_string['0']));\nvar_dump(isset($expected_array_got_string[0.5]));\nvar_dump(isset($expected_array_got_string['0.5']));\nvar_dump(isset($expected_array_got_string['0 Mostel']));","output":"bool(true)\nbool(true)\nbool(true)\nbool(true)\nbool(true)\nbool(true)"}],"iterator_apply":[{"title":"iterator_apply() example","source":"function print_caps(Iterator $iterator) {\n    echo strtoupper($iterator->current()) . \"\\n\";\n    return TRUE;\n}\n\n$it = new ArrayIterator(array(\"Apples\", \"Bananas\", \"Cherries\"));\niterator_apply($it, \"print_caps\", array($it));","output":"APPLES\nBANANAS\nCHERRIES"}],"iterator_count":[{"title":"iterator_count() example","source":"$iterator = new ArrayIterator(array('recipe'=>'pancakes', 'egg', 'milk', 'flour'));\nvar_dump(iterator_count($iterator));","output":"int(4)"},{"title":"iterator_count() modifies position","source":"$iterator = new ArrayIterator(['one', 'two', 'three']);\nvar_dump($iterator->current());\nvar_dump(iterator_count($iterator));\nvar_dump($iterator->current());","output":"string(3) \"one\"\nint(3)\nNULL"},{"title":"iterator_count() in foreach loops","source":"$iterator = new ArrayIterator(['one', 'two', 'three']);\nforeach ($iterator as $key => $value) {\n    echo \"$key: $value (\", iterator_count($iterator), \")\\n\";\n}","output":"0: one (3)"}],"iterator_to_array":[{"title":"iterator_to_array() example","source":"$iterator = new ArrayIterator(array('recipe'=>'pancakes', 'egg', 'milk', 'flour'));\nvar_dump(iterator_to_array($iterator, true));\nvar_dump(iterator_to_array($iterator, false));","output":"array(4) {\n  [\"recipe\"]=>\n  string(8) \"pancakes\"\n  [0]=>\n  string(3) \"egg\"\n  [1]=>\n  string(4) \"milk\"\n  [2]=>\n  string(5) \"flour\"\n}\narray(4) {\n  [0]=>\n  string(8) \"pancakes\"\n  [1]=>\n  string(3) \"egg\"\n  [2]=>\n  string(4) \"milk\"\n  [3]=>\n  string(5) \"flour\"\n}"}],"jdtojewish":[{"title":"jdtojewish() Example","source":"echo jdtojewish(gregoriantojd(10, 8, 2002), true,\n       CAL_JEWISH_ADD_GERESHAYIM + CAL_JEWISH_ADD_ALAFIM + CAL_JEWISH_ADD_ALAFIM_GERESH);","output":null}],"jpeg2wbmp":[{"title":"jpeg2wbmp() example","source":"\/\/ Path to the target jpeg\n$path = '.\/test.jpg';\n\n\/\/ Get the image sizes\n$image = getimagesize($path);\n\n\/\/ Convert image\njpeg2wbmp($path, '.\/test.wbmp', $image[1], $image[0], 5);","output":null}],"json_decode":[{"title":"json_decode() examples","source":"$json = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json, true));","output":"object(stdClass)#1 (5) {\n    [\"a\"] => int(1)\n    [\"b\"] => int(2)\n    [\"c\"] => int(3)\n    [\"d\"] => int(4)\n    [\"e\"] => int(5)\n}\n\narray(5) {\n    [\"a\"] => int(1)\n    [\"b\"] => int(2)\n    [\"c\"] => int(3)\n    [\"d\"] => int(4)\n    [\"e\"] => int(5)\n}"},{"title":"Accessing invalid object properties","source":"$json = '{\"foo-bar\": 12345}';\n\n$obj = json_decode($json);\nprint $obj->{'foo-bar'}; \/\/ 12345","output":null},{"title":"common mistakes using json_decode()","source":"\/\/ the following strings are valid JavaScript but not valid JSON\n\n\/\/ the name and value must be enclosed in double quotes\n\/\/ single quotes are not valid \n$bad_json = \"{ 'bar': 'baz' }\";\njson_decode($bad_json); \/\/ null\n\n\/\/ the name must be enclosed in double quotes\n$bad_json = '{ bar: \"baz\" }';\njson_decode($bad_json); \/\/ null\n\n\/\/ trailing commas are not allowed\n$bad_json = '{ bar: \"baz\", }';\njson_decode($bad_json); \/\/ null","output":null},{"title":"depth errors","source":"\/\/ Encode the data.\n$json = json_encode(\n    array(\n        1 => array(\n            'English' => array(\n                'One',\n                'January'\n            ),\n            'French' => array(\n                'Une',\n                'Janvier'\n            )\n        )\n    )\n);\n\n\/\/ Define the errors.\n$constants = get_defined_constants(true);\n$json_errors = array();\nforeach ($constants[\"json\"] as $name => $value) {\n    if (!strncmp($name, \"JSON_ERROR_\", 11)) {\n        $json_errors[$value] = $name;\n    }\n}\n\n\/\/ Show the errors for different depths.\nforeach (range(4, 3, -1) as $depth) {\n    var_dump(json_decode($json, true, $depth));\n    echo 'Last error: ', $json_errors[json_last_error()], PHP_EOL, PHP_EOL;\n}","output":"array(1) {\n  [1]=>\n  array(2) {\n    [\"English\"]=>\n    array(2) {\n      [0]=>\n      string(3) \"One\"\n      [1]=>\n      string(7) \"January\"\n    }\n    [\"French\"]=>\n    array(2) {\n      [0]=>\n      string(3) \"Une\"\n      [1]=>\n      string(7) \"Janvier\"\n    }\n  }\n}\nLast error: JSON_ERROR_NONE\n\nNULL\nLast error: JSON_ERROR_DEPTH"},{"title":"json_decode() of large integers","source":"$json = '{\"number\": 12345678901234567890}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));","output":"object(stdClass)#1 (1) {\n  [\"number\"]=>\n  float(1.2345678901235E+19)\n}\nobject(stdClass)#1 (1) {\n  [\"number\"]=>\n  string(20) \"12345678901234567890\"\n}"}],"json_encode":[{"title":"A json_encode() example","source":"$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);\n\necho json_encode($arr);","output":"{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}"},{"title":"A json_encode() example showing some options in use","source":"$a = array('<foo>',\"'bar'\",'\"baz\"','&blong&', \"\\xc3\\xa9\");\n\necho \"Normal: \",  json_encode($a), \"\\n\";\necho \"Tags: \",    json_encode($a, JSON_HEX_TAG), \"\\n\";\necho \"Apos: \",    json_encode($a, JSON_HEX_APOS), \"\\n\";\necho \"Quot: \",    json_encode($a, JSON_HEX_QUOT), \"\\n\";\necho \"Amp: \",     json_encode($a, JSON_HEX_AMP), \"\\n\";\necho \"Unicode: \", json_encode($a, JSON_UNESCAPED_UNICODE), \"\\n\";\necho \"All: \",     json_encode($a, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE), \"\\n\\n\";\n\n$b = array();\n\necho \"Empty array output as array: \", json_encode($b), \"\\n\";\necho \"Empty array output as object: \", json_encode($b, JSON_FORCE_OBJECT), \"\\n\\n\";\n\n$c = array(array(1,2,3));\n\necho \"Non-associative array output as array: \", json_encode($c), \"\\n\";\necho \"Non-associative array output as object: \", json_encode($c, JSON_FORCE_OBJECT), \"\\n\\n\";\n\n$d = array('foo' => 'bar', 'baz' => 'long');\n\necho \"Associative array always output as object: \", json_encode($d), \"\\n\";\necho \"Associative array always output as object: \", json_encode($d, JSON_FORCE_OBJECT), \"\\n\\n\";","output":"Normal: [\"<foo>\",\"'bar'\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"]\nTags: [\"\\u003Cfoo\\u003E\",\"'bar'\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"]\nApos: [\"<foo>\",\"\\u0027bar\\u0027\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"]\nQuot: [\"<foo>\",\"'bar'\",\"\\u0022baz\\u0022\",\"&blong&\",\"\\u00e9\"]\nAmp: [\"<foo>\",\"'bar'\",\"\\\"baz\\\"\",\"\\u0026blong\\u0026\",\"\\u00e9\"]\nUnicode: [\"<foo>\",\"'bar'\",\"\\\"baz\\\"\",\"&blong&\",\"é\"]\nAll: [\"\\u003Cfoo\\u003E\",\"\\u0027bar\\u0027\",\"\\u0022baz\\u0022\",\"\\u0026blong\\u0026\",\"é\"]\n\nEmpty array output as array: []\nEmpty array output as object: {}\n\nNon-associative array output as array: [[1,2,3]]\nNon-associative array output as object: {\"0\":{\"0\":1,\"1\":2,\"2\":3}}\n\nAssociative array always output as object: {\"foo\":\"bar\",\"baz\":\"long\"}\nAssociative array always output as object: {\"foo\":\"bar\",\"baz\":\"long\"}"},{"title":"JSON_NUMERIC_CHECK option example","source":"echo \"Strings representing numbers automatically turned into numbers\".PHP_EOL;\n$numbers = array('+123123', '-123123', '1.2e3', '0.00001');\nvar_dump(\n $numbers,\n json_encode($numbers, JSON_NUMERIC_CHECK)\n);\necho \"Strings containing improperly formatted numbers\".PHP_EOL;\n$strings = array('+a33123456789', 'a123');\nvar_dump(\n $strings,\n json_encode($strings, JSON_NUMERIC_CHECK)\n);","output":"Strings representing numbers automatically turned into numbers\narray(4) {\n  [0]=>\n  string(7) \"+123123\"\n  [1]=>\n  string(7) \"-123123\"\n  [2]=>\n  string(5) \"1.2e3\"\n  [3]=>\n  string(7) \"0.00001\"\n}\nstring(28) \"[123123,-123123,1200,1.0e-5]\"\nStrings containing improperly formatted numbers\narray(2) {\n  [0]=>\n  string(13) \"+a33123456789\"\n  [1]=>\n  string(4) \"a123\"\n}\nstring(24) \"[\"+a33123456789\",\"a123\"]\""},{"title":"Sequential versus non-sequential array example","source":"echo \"Sequential array\".PHP_EOL;\n$sequential = array(\"foo\", \"bar\", \"baz\", \"blong\");\nvar_dump(\n $sequential,\n json_encode($sequential)\n);\n\necho PHP_EOL.\"Non-sequential array\".PHP_EOL;\n$nonsequential = array(1=>\"foo\", 2=>\"bar\", 3=>\"baz\", 4=>\"blong\");\nvar_dump(\n $nonsequential,\n json_encode($nonsequential)\n);\n\necho PHP_EOL.\"Sequential array with one key unset\".PHP_EOL;\nunset($sequential[1]);\nvar_dump(\n $sequential,\n json_encode($sequential)\n);","output":"Sequential array\narray(4) {\n  [0]=>\n  string(3) \"foo\"\n  [1]=>\n  string(3) \"bar\"\n  [2]=>\n  string(3) \"baz\"\n  [3]=>\n  string(5) \"blong\"\n}\nstring(27) \"[\"foo\",\"bar\",\"baz\",\"blong\"]\"\n\nNon-sequential array\narray(4) {\n  [1]=>\n  string(3) \"foo\"\n  [2]=>\n  string(3) \"bar\"\n  [3]=>\n  string(3) \"baz\"\n  [4]=>\n  string(5) \"blong\"\n}\nstring(43) \"{\"1\":\"foo\",\"2\":\"bar\",\"3\":\"baz\",\"4\":\"blong\"}\"\n\nSequential array with one key unset\narray(3) {\n  [0]=>\n  string(3) \"foo\"\n  [2]=>\n  string(3) \"baz\"\n  [3]=>\n  string(5) \"blong\"\n}\nstring(33) \"{\"0\":\"foo\",\"2\":\"baz\",\"3\":\"blong\"}\""},{"title":"JSON_PRESERVE_ZERO_FRACTION option example","source":"var_dump(json_encode(12.0, JSON_PRESERVE_ZERO_FRACTION));\nvar_dump(json_encode(12.0));","output":"string(4) \"12.0\"\nstring(2) \"12\""}],"json_last_error":[{"title":"json_last_error() example","source":"\/\/ A valid json string\n$json[] = '{\"Organization\": \"PHP Documentation Team\"}';\n\n\/\/ An invalid json string which will cause an syntax \n\/\/ error, in this case we used ' instead of \" for quotation\n$json[] = \"{'Organization': 'PHP Documentation Team'}\";\n\n\nforeach ($json as $string) {\n    echo 'Decoding: ' . $string;\n    json_decode($string);\n\n    switch (json_last_error()) {\n        case JSON_ERROR_NONE:\n            echo ' - No errors';\n        break;\n        case JSON_ERROR_DEPTH:\n            echo ' - Maximum stack depth exceeded';\n        break;\n        case JSON_ERROR_STATE_MISMATCH:\n            echo ' - Underflow or the modes mismatch';\n        break;\n        case JSON_ERROR_CTRL_CHAR:\n            echo ' - Unexpected control character found';\n        break;\n        case JSON_ERROR_SYNTAX:\n            echo ' - Syntax error, malformed JSON';\n        break;\n        case JSON_ERROR_UTF8:\n            echo ' - Malformed UTF-8 characters, possibly incorrectly encoded';\n        break;\n        default:\n            echo ' - Unknown error';\n        break;\n    }\n\n    echo PHP_EOL;\n}","output":"Decoding: {\"Organization\": \"PHP Documentation Team\"} - No errors\nDecoding: {'Organization': 'PHP Documentation Team'} - Syntax error, malformed JSON"},{"title":"json_last_error() with json_encode()","source":"\/\/ An invalid UTF8 sequence\n$text = \"\\xB1\\x31\";\n\n$json  = json_encode($text);\n$error = json_last_error();\n\nvar_dump($json, $error === JSON_ERROR_UTF8);","output":"string(4) \"null\"\nbool(true)"}],"kadm5_chpass_principal":[{"title":"Example of changing principal's password","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\nkadm5_chpass_principal($handle, \"burbach@GONICUS.LOCAL\", \"newpassword\");\n\nkadm5_destroy($handle);","output":null}],"kadm5_create_principal":[{"title":"Example of principal's creation","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\n$attributes = KRB5_KDB_REQUIRES_PRE_AUTH | KRB5_KDB_DISALLOW_PROXIABLE;\n$options = array(KADM5_PRINC_EXPIRE_TIME => 0,\n                 KADM5_POLICY => \"default\",\n                 KADM5_ATTRIBUTES => $attributes);\n\nkadm5_create_principal($handle, \"burbach@GONICUS.LOCAL\", \"password\", $options);\n\nkadm5_destroy($handle);","output":null}],"kadm5_delete_principal":[{"title":"kadm5_delete_principal() example","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\nkadm5_delete_principal($handle, \"burbach@GONICUS.LOCAL\");\n\nkadm5_destroy($handle);","output":null}],"kadm5_get_policies":[{"title":"kadm5_get_policies() example","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\nprint \"<h1>get_policies<\/h1>\\n\";\nforeach (kadm5_get_policies($handle) as $policy) {\n    echo \"$policy<br \/>\\n\";\n}\n\nkadm5_destroy($handle);","output":null}],"kadm5_get_principal":[{"title":"kadm5_get_principal() example","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\nprint \"<h1>get_principal burbach@GONICUS.LOCAL<\/h1>\\n\";\n\n$options = kadm5_get_principal($handle, \"burbach@GONICUS.LOCAL\" );\n\nforeach ($options as $key => $value) {\n    echo \"$key: $value<br \/>\\n\";\n}\n\nkadm5_destroy($handle);","output":null}],"kadm5_get_principals":[{"title":"kadm5_get_principals() example","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\nprint \"<h1>get_principals<\/h1>\\n\";\nforeach (kadm5_get_principals($handle) as $principal) {\n    echo \"$principal<br \/>\\n\";\n}\n\nkadm5_destroy($handle);","output":null}],"kadm5_init_with_password":[{"title":"KADM5 initialization example","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\n$attributes = KRB5_KDB_REQUIRES_PRE_AUTH | KRB5_KDB_DISALLOW_PROXIABLE;\n$options = array(KADM5_PRINC_EXPIRE_TIME => 0,\n                 KADM5_POLICY => \"default\",\n                 KADM5_ATTRIBUTES => $attributes);\n\nkadm5_create_principal($handle, \"burbach@GONICUS.LOCAL\", \"password\", $options);\n\nkadm5_destroy($handle);","output":null}],"kadm5_modify_principal":[{"title":"Example of modifying principal","source":"$handle = kadm5_init_with_password(\"afs-1\", \"GONICUS.LOCAL\", \"admin\/admin\", \"password\");\n\n$attributes = KRB5_KDB_REQUIRES_PRE_AUTH;\n$options = array(KADM5_PRINC_EXPIRE_TIME => 3451234,\n                 KADM5_POLICY => \"gonicus\",\n                 KADM5_ATTRIBUTES => $attributes);\n\nkadm5_modify_principal($handle, \"burbach@GONICUS.LOCAL\", $options);\n\nkadm5_destroy($handle);","output":null}],"key":[{"title":"key() example","source":"$array = array(\n    'fruit1' => 'apple',\n    'fruit2' => 'orange',\n    'fruit3' => 'grape',\n    'fruit4' => 'apple',\n    'fruit5' => 'apple');\n\n\/\/ this cycle echoes all associative array\n\/\/ key where value equals \"apple\"\nwhile ($fruit_name = current($array)) {\n    if ($fruit_name == 'apple') {\n        echo key($array).'<br \/>';\n    }\n    next($array);\n}","output":"fruit1<br \/>\nfruit4<br \/>\nfruit5<br \/>"}],"krsort":[{"title":"krsort() example","source":"$fruits = array(\"d\"=>\"lemon\", \"a\"=>\"orange\", \"b\"=>\"banana\", \"c\"=>\"apple\");\nkrsort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"d = lemon\nc = apple\nb = banana\na = orange"}],"ksort":[{"title":"ksort() example","source":"$fruits = array(\"d\"=>\"lemon\", \"a\"=>\"orange\", \"b\"=>\"banana\", \"c\"=>\"apple\");\nksort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"a = orange\nb = banana\nc = apple\nd = lemon"}],"lcfirst":[{"title":"lcfirst() example","source":"$foo = 'HelloWorld';\n$foo = lcfirst($foo);             \/\/ helloWorld\n\n$bar = 'HELLO WORLD!';\n$bar = lcfirst($bar);             \/\/ hELLO WORLD!\n$bar = lcfirst(strtoupper($bar)); \/\/ hELLO WORLD!","output":null}],"lchgrp":[{"title":"Changing the group of a symbolic link","source":"$target = 'output.php';\n$link = 'output.html';\nsymlink($target, $link);\n\nlchgrp($link, 8);","output":null}],"lchown":[{"title":"Changing the owner of a symbolic link","source":"$target = 'output.php';\n$link = 'output.html';\nsymlink($target, $link);\n\nlchown($link, 8);","output":null}],"ldap_add":[{"title":null,"source":"$entry[\"attribute1\"] = \"value\";\n$entry[\"attribute2\"][0] = \"value1\";\n$entry[\"attribute2\"][1] = \"value2\";","output":null},{"title":"Complete example with authenticated bind","source":"$ds = ldap_connect(\"localhost\");  \/\/ assuming the LDAP server is on this host\n\nif ($ds) {\n    \/\/ bind with appropriate dn to give update access\n    $r = ldap_bind($ds, \"cn=root, o=My Company, c=US\", \"secret\");\n\n    \/\/ prepare data\n    $info[\"cn\"] = \"John Jones\";\n    $info[\"sn\"] = \"Jones\";\n    $info[\"objectclass\"] = \"person\";\n\n    \/\/ add data to directory\n    $r = ldap_add($ds, \"cn=John Jones, o=My Company, c=US\", $info);\n\n    ldap_close($ds);\n} else {\n    echo \"Unable to connect to LDAP server\";\n}","output":null}],"ldap_bind":[{"title":"Using LDAP Bind","source":"\/\/ using ldap bind\n$ldaprdn  = 'uname';     \/\/ ldap rdn or dn\n$ldappass = 'password';  \/\/ associated password\n\n\/\/ connect to ldap server\n$ldapconn = ldap_connect(\"ldap.example.com\")\n    or die(\"Could not connect to LDAP server.\");\n\nif ($ldapconn) {\n\n    \/\/ binding to ldap server\n    $ldapbind = ldap_bind($ldapconn, $ldaprdn, $ldappass);\n\n    \/\/ verify binding\n    if ($ldapbind) {\n        echo \"LDAP bind successful...\";\n    } else {\n        echo \"LDAP bind failed...\";\n    }\n\n}","output":null},{"title":"Using LDAP Bind Anonymously","source":"\/\/using ldap bind anonymously\n\n\/\/ connect to ldap server\n$ldapconn = ldap_connect(\"ldap.example.com\")\n    or die(\"Could not connect to LDAP server.\");\n\nif ($ldapconn) {\n\n    \/\/ binding anonymously\n    $ldapbind = ldap_bind($ldapconn);\n\n    if ($ldapbind) {\n        echo \"LDAP bind anonymous successful...\";\n    } else {\n        echo \"LDAP bind anonymous failed...\";\n    }\n\n}","output":null}],"ldap_compare":[{"title":"Complete example of password check","source":"$ds=ldap_connect(\"localhost\");  \/\/ assuming the LDAP server is on this host\n\nif ($ds) {\n\n    \/\/ bind\n    if (ldap_bind($ds)) {\n\n        \/\/ prepare data\n        $dn = \"cn=Matti Meikku, ou=My Unit, o=My Company, c=FI\";\n        $value = \"secretpassword\";\n        $attr = \"password\";\n\n        \/\/ compare value\n        $r=ldap_compare($ds, $dn, $attr, $value);\n\n        if ($r === -1) {\n            echo \"Error: \" . ldap_error($ds);\n        } elseif ($r === true) {\n            echo \"Password correct.\";\n        } elseif ($r === false) {\n            echo \"Wrong guess! Password incorrect.\";\n        }\n\n    } else {\n        echo \"Unable to bind to LDAP server.\";\n    }\n\n    ldap_close($ds);\n\n} else {\n    echo \"Unable to connect to LDAP server.\";\n}","output":null}],"ldap_connect":[{"title":"Example of connecting to LDAP server.","source":"\/\/ LDAP variables\n$ldaphost = \"ldap.example.com\";  \/\/ your ldap servers\n$ldapport = 389;                 \/\/ your ldap server's port number\n\n\/\/ Connecting to LDAP\n$ldapconn = ldap_connect($ldaphost, $ldapport)\n          or die(\"Could not connect to $ldaphost\");","output":null},{"title":"Example of connecting securely to LDAP server.","source":"\/\/ make sure your host is the correct one\n\/\/ that you issued your secure certificate to\n$ldaphost = \"ldaps:\/\/ldap.example.com\/\";\n\n\/\/ Connecting to LDAP\n$ldapconn = ldap_connect($ldaphost)\n          or die(\"Could not connect to {$ldaphost}\");","output":null}],"ldap_control_paged_result":[{"title":"LDAP pagination","source":"\/\/ $ds is a valid link identifier (see ldap_connect)\n     ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);\n\n     $dn        = 'ou=example,dc=org';\n     $filter    = '(|(sn=Doe*)(givenname=John*))';\n     $justthese = array('ou', 'sn', 'givenname', 'mail');\n\n     \/\/ enable pagination with a page size of 1.\n     ldap_control_paged_result($ds, 1);\n\n     $sr = ldap_search($ds, $dn, $filter, $justthese);\n\n     $info = ldap_get_entries($ds, $sr);\n\n     echo $info['count'] . ' entries returned' . PHP_EOL;","output":null},{"title":"LDAP pagination","source":"\/\/ $ds is a valid link identifier (see ldap_connect)\n     ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3);\n\n     $dn        = 'ou=example,dc=org';\n     $filter    = '(|(sn=Doe*)(givenname=John*))';\n     $justthese = array('ou', 'sn', 'givenname', 'mail');\n\n     \/\/ enable pagination with a page size of 100.\n     $pageSize = 100;\n\n     $cookie = '';\n     do {\n         ldap_control_paged_result($ds, $pageSize, true, $cookie);\n\n         $result  = ldap_search($ds, $dn, $filter, $justthese);\n         $entries = ldap_get_entries($ds, $result);\n             \n         foreach ($entries as $e) {\n             echo $e['dn'] . PHP_EOL;\n         }\n\n         ldap_control_paged_result_response($ds, $result, $cookie);\n       \n     } while($cookie !== null && $cookie != '');","output":null}],"ldap_count_entries":[{"title":"ldap-count-entries() example","source":"\/\/ $ds is a valid link identifier (see ldap_connect)\n\n     $dn        = 'ou=example,dc=org';\n     $filter    = '(|(sn=Doe*)(givenname=John*))';\n     $justthese = array('ou', 'sn', 'givenname', 'mail');\n\n     $sr = ldap_search($ds, $dn, $filter, $justthese);\n\n     var_dump(ldap_count_entries($ds, $sr));","output":"int(1)"}],"ldap_err2str":[{"title":"Enumerating all LDAP error messages","source":"for ($i=0; $i<100; $i++) {\n    printf(\"Error $i: %s<br \/>\\n\", ldap_err2str($i));\n  }","output":null}],"ldap_errno":[{"title":"Generating and catching an error","source":"\/\/ This example contains an error, which we will catch.\n$ld = ldap_connect(\"localhost\");\n$bind = ldap_bind($ld);\n\/\/ syntax error in filter expression (errno 87),\n\/\/ must be \"objectclass=*\" to work.\n$res =  @ldap_search($ld, \"o=Myorg, c=DE\", \"objectclass\");\nif (!$res) {\n    echo \"LDAP-Errno: \" . ldap_errno($ld) . \"<br \/>\\n\";\n    echo \"LDAP-Error: \" . ldap_error($ld) . \"<br \/>\\n\";\n    die(\"Argh!<br \/>\\n\");\n}\n$info = ldap_get_entries($ld, $res);\necho $info[\"count\"] . \" matching entries.<br \/>\\n\";","output":null}],"ldap_get_attributes":[{"title":null,"source":"Get attributes from a search result entry\n ldap_free_result\n ldap_get_dn\n LDAP Functions\n PHP Manual\n\n \n  ldap_get_attributes\n  (PHP 4, PHP 5, PHP 7)ldap_get_attributes — Get attributes from a search result entry\n\n \n \n \n  Description\n  \n   array ldap_get_attributes\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   )\n\n  \n   Reads attributes and values from an entry in the search result. \n  \n  \n   Having located a specific entry in the directory, you can find out what\n   information is held for that entry by using this call. You would use this\n   call for an application which \"browses\" directory entries and\/or where you\n   do not know the structure of the directory entries. In many applications\n   you will be searching for a specific attribute such as an email address or\n   a surname, and won't care what other data is held.\n   \n    \n\nreturn_value[\"count\"] = number of attributes in the entry\nreturn_value[0] = first attribute\nreturn_value[n] = nth attribute\n\nreturn_value[\"attribute\"][\"count\"] = number of values for attribute\nreturn_value[\"attribute\"][0] = first value of the attribute\nreturn_value[\"attribute\"][i] = (i+1)th value of the attribute\n\n    \n\n   \n  \n \n\n\n \n  Parameters\n  \n   \nlink_identifier\n\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n    \n     \nresult_entry_identifier\n\n     \n\n      \n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a complete entry information in a multi-dimensional array\n   on success and FALSE on error.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 \n     Show the list of attributes held for a particular directory entry\n    \n    \n\n<?php\n\/\/ $ds is the link identifier for the directory\n\n\/\/ $sr is a valid search result from a prior call to\n\/\/ one of the ldap directory search calls\n\n$entry = ldap_first_entry($ds, $sr);\n\n$attrs = ldap_get_attributes($ds, $entry);\n\necho $attrs[\"count\"] . \" attributes held for this entry:<p>\";\n\nfor ($i=0; $i < $attrs[\"count\"]; $i++) {\n    echo $attrs[$i] . \"<br \/>\";\n}\n?>\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   ldap_first_attribute() - Return first attribute\n    ldap_next_attribute() - Get the next attribute in result\n   \n\n\n\n ldap_free_result\n ldap_get_dn\n LDAP Functions\n PHP Manual","output":"return_value[\"count\"] = number of attributes in the entry\nreturn_value[0] = first attribute\nreturn_value[n] = nth attribute\n\nreturn_value[\"attribute\"][\"count\"] = number of values for attribute\nreturn_value[\"attribute\"][0] = first value of the attribute\nreturn_value[\"attribute\"][i] = (i+1)th value of the attribute"},{"title":"Show the list of attributes held for a particular directory entry","source":"\/\/ $ds is the link identifier for the directory\n\n\/\/ $sr is a valid search result from a prior call to\n\/\/ one of the ldap directory search calls\n\n$entry = ldap_first_entry($ds, $sr);\n\n$attrs = ldap_get_attributes($ds, $entry);\n\necho $attrs[\"count\"] . \" attributes held for this entry:<p>\";\n\nfor ($i=0; $i < $attrs[\"count\"]; $i++) {\n    echo $attrs[$i] . \"<br \/>\";\n}","output":null}],"ldap_get_entries":[{"title":null,"source":"Get all result entries\n ldap_get_dn\n ldap_get_option\n LDAP Functions\n PHP Manual\n\n \n  ldap_get_entries\n  (PHP 4, PHP 5, PHP 7)ldap_get_entries — Get all result entries\n\n \n \n \n  Description\n  \n   array ldap_get_entries\n    ( resource $link_identifier\n   , resource $result_identifier\n   )\n\n  \n   Reads multiple entries from the given result, and then reading the\n   attributes and multiple values.\n  \n \n\n\n \n  Parameters\n  \n   \nlink_identifier\n\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n    \n     \nresult_identifier\n\n     \n\n      \n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a complete result information in a multi-dimensional array on\n   success and FALSE on error.\n  \n  \n   The structure of the array is as follows.\n   The attribute index is converted to lowercase. (Attributes are\n   case-insensitive for directory servers, but not when used as\n   array indices.)\n   \n    \n\nreturn_value[\"count\"] = number of entries in the result\nreturn_value[0] : refers to the details of first entry\n\nreturn_value[i][\"dn\"] =  DN of the ith entry in the result\n\nreturn_value[i][\"count\"] = number of attributes in ith entry\nreturn_value[i][j] = NAME of the jth attribute in the ith entry in the result\n\nreturn_value[i][\"attribute\"][\"count\"] = number of values for\n                                        attribute in ith entry\nreturn_value[i][\"attribute\"][j] = jth value of attribute in ith entry\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   ldap_first_entry() - Return first result id\n    ldap_next_entry() - Get next result entry\n   \n\n\n\n ldap_get_dn\n ldap_get_option\n LDAP Functions\n PHP Manual","output":"return_value[\"count\"] = number of entries in the result\nreturn_value[0] : refers to the details of first entry\n\nreturn_value[i][\"dn\"] =  DN of the ith entry in the result\n\nreturn_value[i][\"count\"] = number of attributes in ith entry\nreturn_value[i][j] = NAME of the jth attribute in the ith entry in the result\n\nreturn_value[i][\"attribute\"][\"count\"] = number of values for\n                                        attribute in ith entry\nreturn_value[i][\"attribute\"][j] = jth value of attribute in ith entry"}],"ldap_get_option":[{"title":"Check protocol version","source":"\/\/ $ds is a valid link identifier for a directory server\nif (ldap_get_option($ds, LDAP_OPT_PROTOCOL_VERSION, $version)) {\n    echo \"Using protocol version $version\\n\";\n} else {\n    echo \"Unable to determine protocol version\\n\";\n}","output":null}],"ldap_get_values":[{"title":null,"source":"Get all values from a result entry\n ldap_get_values_len\n ldap_list\n LDAP Functions\n PHP Manual\n\n \n  ldap_get_values\n  (PHP 4, PHP 5, PHP 7)ldap_get_values — Get all values from a result entry\n\n \n \n \n  Description\n  \n   array ldap_get_values\n    ( resource $link_identifier\n   , resource $result_entry_identifier\n   , string $attribute\n   )\n\n  \n   Reads all the values of the attribute in the entry in the result.\n  \n  \n   This call needs a result_entry_identifier,\n   so needs to be preceded by one of the ldap search calls and one\n   of the calls to get an individual entry.\n  \n  \n   You application will either be hard coded to look for certain\n   attributes (such as \"surname\" or \"mail\") or you will have to use\n   the ldap_get_attributes() call to work out\n   what attributes exist for a given entry.\n  \n \n\n\n \n  Parameters\n  \n   \nlink_identifier\n\n     \n\n      \n       An LDAP link identifier, returned by ldap_connect().\n      \n     \n\n    \n    \n     \nresult_entry_identifier\n\n     \n\n      \n      \n     \n\n    \n    \n     \nattribute\n\n     \n\n      \n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns an array of values for the attribute on success and FALSE on\n   error. The number of values can be found by indexing \"count\" in the\n   resultant array. Individual values are accessed by integer index in the\n   array.  The first index is 0.\n  \n  \n   LDAP allows more than one entry for an attribute, so it can, for example,\n   store a number of email addresses for one person's directory entry all\n   labeled with the attribute \"mail\"\n   \n    \n    return_value[\"count\"] = number of values for attribute\n    return_value[0] = first value of attribute\n    return_value[i] = ith value of attribute\n    \n   \n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 List all values of the \"mail\" attribute for a\n     directory entry \n    \n\n<?php\n\/\/ $ds is a valid link identifier for a directory server\n\n\/\/ $sr is a valid search result from a prior call to\n\/\/     one of the ldap directory search calls\n\n\/\/ $entry is a valid entry identifier from a prior call to\n\/\/        one of the calls that returns a directory entry\n\n$values = ldap_get_values($ds, $entry, \"mail\");\n\necho $values[\"count\"] . \" email addresses for this entry.<br \/>\";\n\nfor ($i=0; $i < $values[\"count\"]; $i++) {\n    echo $values[$i] . \"<br \/>\";\n}\n?>\n\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   ldap_get_values_len() - Get all binary values from a result entry\n   \n\n\n\n ldap_get_values_len\n ldap_list\n LDAP Functions\n PHP Manual","output":null},{"title":"List all values of the \"mail\" attribute for a directory entry","source":"\/\/ $ds is a valid link identifier for a directory server\n\n\/\/ $sr is a valid search result from a prior call to\n\/\/     one of the ldap directory search calls\n\n\/\/ $entry is a valid entry identifier from a prior call to\n\/\/        one of the calls that returns a directory entry\n\n$values = ldap_get_values($ds, $entry, \"mail\");\n\necho $values[\"count\"] . \" email addresses for this entry.<br \/>\";\n\nfor ($i=0; $i < $values[\"count\"]; $i++) {\n    echo $values[$i] . \"<br \/>\";\n}","output":null}],"ldap_list":[{"title":"Produce a list of all organizational units of an organization","source":"\/\/ $ds is a valid link identifier for a directory server\n\n$basedn = \"o=My Company, c=US\";\n$justthese = array(\"ou\");\n\n$sr = ldap_list($ds, $basedn, \"ou=*\", $justthese);\n\n$info = ldap_get_entries($ds, $sr);\n\nfor ($i=0; $i < $info[\"count\"]; $i++) {\n    echo $info[$i][\"ou\"][0];\n}","output":null}],"ldap_modify_batch":[{"title":"Add a telephone number to a contact","source":"$dn = \"cn=John Smith,ou=Wizards,dc=example,dc=com\";\n$modifs = [\n    [\n        \"attrib\"  => \"telephoneNumber\",\n        \"modtype\" => LDAP_MODIFY_BATCH_ADD,\n        \"values\"  => [\"+1 555 555 1717\"],\n    ],\n];\nldap_modify_batch($connection, $dn, $modifs);","output":null},{"title":"Rename a user","source":"$dn = \"cn=John Smith,ou=Wizards,dc=example,dc=com\";\n$modifs = [\n    [\n        \"attrib\"  => \"sn\",\n        \"modtype\" => LDAP_MODIFY_BATCH_REPLACE,\n        \"values\"  => [\"Smith-Jones\"],\n    ],\n    [\n        \"attrib\"  => \"givenName\",\n        \"modtype\" => LDAP_MODIFY_BATCH_REPLACE,\n        \"values\"  => [\"Jack\"],\n    ],\n];\nldap_modify_batch($connection, $dn, $modifs);\nldap_rename($connection, $dn, \"cn=Jack Smith-Jones\", NULL, TRUE);","output":null},{"title":"Add two e-mail addresses to a user","source":"$dn = \"cn=Jack Smith-Jones,ou=Wizards,dc=example,dc=com\";\n$modifs = [\n    [\n        \"attrib\"  => \"mail\",\n        \"modtype\" => LDAP_MODIFY_BATCH_ADD,\n        \"values\"  => [\n            \"jack.smith@example.com\",\n            \"jack.smith-jones@example.com\",\n        ],\n    ],\n];\nldap_modify_batch($connection, $dn, $modifs);","output":null},{"title":"Change a user's password","source":"$dn = \"cn=Jack Smith-Jones,ou=Wizards,dc=example,dc=com\";\n$modifs = [\n    [\n        \"attrib\"  => \"userPassword\",\n        \"modtype\" => LDAP_MODIFY_BATCH_REMOVE,\n        \"values\"  => [\"Tr0ub4dor&3\"],\n    ],\n    [\n        \"attrib\"  => \"userPassword\",\n        \"modtype\" => LDAP_MODIFY_BATCH_ADD,\n        \"values\"  => [\"correct horse battery staple\"],\n    ],\n];\nldap_modify_batch($connection, $dn, $modifs);","output":null},{"title":"Change a user's password (Active Directory)","source":"function adifyPw($pw)\n{\n    return iconv(\"UTF-8\", \"UTF-16LE\", '\"' . $pw . '\"');\n}\n\n$dn = \"cn=Jack Smith-Jones,ou=Wizards,dc=ad,dc=example,dc=com\";\n$modifs = [\n    [\n        \"attrib\"  => \"unicodePwd\",\n        \"modtype\" => LDAP_MODIFY_BATCH_REMOVE,\n        \"values\"  => [adifyPw(\"Tr0ub4dor&3\")],\n    ],\n    [\n        \"attrib\"  => \"unicodePwd\",\n        \"modtype\" => LDAP_MODIFY_BATCH_ADD,\n        \"values\"  => [adifyPw(\"correct horse battery staple\")],\n    ],\n];\nldap_modify_batch($connection, $dn, $modifs);","output":null}],"ldap_parse_result":[{"title":"ldap_parse_result() example","source":"$result = ldap_search($link, \"cn=userref,dc=my-domain,dc=com\", \"(cn=user*)\");\n$errcode = $dn = $errmsg = $refs =  null;\nif (ldap_parse_result($link, $result, $errcode, $dn, $errmsg, $refs)) {\n    \/\/ do something with $errcode, $dn, $errmsg and $refs\n}","output":null}],"ldap_search":[{"title":"LDAP search","source":"\/\/ $ds is a valid link identifier for a directory server\n\n\/\/ $person is all or part of a person's name, eg \"Jo\"\n\n$dn = \"o=My Company, c=US\";\n$filter=\"(|(sn=$person*)(givenname=$person*))\";\n$justthese = array(\"ou\", \"sn\", \"givenname\", \"mail\");\n\n$sr=ldap_search($ds, $dn, $filter, $justthese);\n\n$info = ldap_get_entries($ds, $sr);\n\necho $info[\"count\"].\" entries returned\\n\";","output":null}],"ldap_set_option":[{"title":"Set protocol version","source":"\/\/ $ds is a valid link identifier for a directory server\nif (ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) {\n    echo \"Using LDAPv3\";\n} else {\n    echo \"Failed to set protocol version to 3\";\n}","output":null},{"title":"Set server controls","source":"\/\/ $ds is a valid link identifier for a directory server\n\/\/ control with no value\n$ctrl1 = array(\"oid\" => \"1.2.752.58.10.1\", \"iscritical\" => true);\n\/\/ iscritical defaults to FALSE\n$ctrl2 = array(\"oid\" => \"1.2.752.58.1.10\", \"value\" => \"magic\");\n\/\/ try to set both controls\nif (!ldap_set_option($ds, LDAP_OPT_SERVER_CONTROLS, array($ctrl1, $ctrl2))) {\n    echo \"Failed to set server controls\";\n}","output":null}],"ldap_sort":[{"title":"LDAP sort","source":"\/\/ $ds is a valid link identifier (see ldap_connect)\n\n     $dn        = 'ou=example,dc=org';\n     $filter    = '(|(sn=Doe*)(givenname=John*))';\n     $justthese = array('ou', 'sn', 'givenname', 'mail');\n\n     $sr = ldap_search($ds, $dn, $filter, $justthese);\n\n     \/\/ Sort\n     ldap_sort($ds, $sr, 'sn');\n\n     \/\/ Retrieving the data\n     $info = ldap_get_entries($ds, $sr);","output":null}],"libxml_get_errors":[{"title":"A libxml_get_errors() example","source":"libxml_use_internal_errors(true);\n\n$xmlstr = <<< XML\n<?xml version='1.0' standalone='yes'?>\n<movies>\n <movie>\n  <titles>PHP: Behind the Parser<\/title>\n <\/movie>\n<\/movies>\nXML;\n\n$doc = simplexml_load_string($xmlstr);\n$xml = explode(\"\\n\", $xmlstr);\n\nif ($doc === false) {\n    $errors = libxml_get_errors();\n\n    foreach ($errors as $error) {\n        echo display_xml_error($error, $xml);\n    }\n\n    libxml_clear_errors();\n}\n\n\nfunction display_xml_error($error, $xml)\n{\n    $return  = $xml[$error->line - 1] . \"\\n\";\n    $return .= str_repeat('-', $error->column) . \"^\\n\";\n\n    switch ($error->level) {\n        case LIBXML_ERR_WARNING:\n            $return .= \"Warning $error->code: \";\n            break;\n         case LIBXML_ERR_ERROR:\n            $return .= \"Error $error->code: \";\n            break;\n        case LIBXML_ERR_FATAL:\n            $return .= \"Fatal Error $error->code: \";\n            break;\n    }\n\n    $return .= trim($error->message) .\n               \"\\n  Line: $error->line\" .\n               \"\\n  Column: $error->column\";\n\n    if ($error->file) {\n        $return .= \"\\n  File: $error->file\";\n    }\n\n    return \"$return\\n\\n--------------------------------------------\\n\\n\";\n}","output":"<titles>PHP: Behind the Parser<\/title>\n----------------------------------------------^\nFatal Error 76: Opening and ending tag mismatch: titles line 4 and title\n  Line: 4\n  Column: 46\n\n--------------------------------------------"}],"libxml_set_external_entity_loader":[{"title":"libxml_set_external_entity_loader() example","source":"$xml = <<<XML\n<!DOCTYPE foo PUBLIC \"-\/\/FOO\/BAR\" \"http:\/\/example.com\/foobar\">\n<foo>bar<\/foo>\nXML;\n\n$dtd = <<<DTD\n<!ELEMENT foo (#PCDATA)>\nDTD;\n\nlibxml_set_external_entity_loader(\n    function ($public, $system, $context) use($dtd) {\n        var_dump($public);\n        var_dump($system);\n        var_dump($context);\n        $f = fopen(\"php:\/\/temp\", \"r+\");\n        fwrite($f, $dtd);\n        rewind($f);\n        return $f;\n    }\n);\n\n$dd = new DOMDocument;\n$r  = $dd->loadXML($xml);\n\nvar_dump($dd->validate());","output":"string(10) \"-\/\/FOO\/BAR\"\nstring(25) \"http:\/\/example.com\/foobar\"\narray(4) {\n    [\"directory\"]    => NULL\n    [\"intSubName\"]   => NULL\n    [\"extSubURI\"]    => NULL\n    [\"extSubSystem\"] => NULL\n}\nbool(true)"}],"libxml_set_streams_context":[{"title":"A libxml_set_streams_context() example","source":"$opts = array(\n    'http' => array(\n        'user_agent' => 'PHP libxml agent',\n    )\n);\n\n$context = stream_context_create($opts);\nlibxml_set_streams_context($context);\n\n\/\/ request a file through HTTP\n$doc = DOMDocument::load('http:\/\/www.example.com\/file.xml');","output":null}],"libxml_use_internal_errors":[{"title":"A libxml_use_internal_errors() example","source":"\/\/ enable user error handling\nvar_dump(libxml_use_internal_errors(true));\n\n\/\/ load the document\n$doc = new DOMDocument;\n\nif (!$doc->load('file.xml')) {\n    foreach (libxml_get_errors() as $error) {\n        \/\/ handle errors here\n    }\n\n    libxml_clear_errors();\n}","output":"bool(false)"}],"link":[{"title":"Creating a simple hard link","source":"$target = 'source.ext'; \/\/ This is the file that already exists\n$link = 'newfile.ext'; \/\/ This the filename that you want to link it to\n\nlink($target, $link);","output":null}],"linkinfo":[{"title":"linkinfo() example","source":"echo linkinfo('\/vmlinuz'); \/\/ 835","output":null}],"list":[{"title":"list() examples","source":"$info = array('coffee', 'brown', 'caffeine');\n\n\/\/ Listing all the variables\nlist($drink, $color, $power) = $info;\necho \"$drink is $color and $power makes it special.\\n\";\n\n\/\/ Listing some of them\nlist($drink, , $power) = $info;\necho \"$drink has $power.\\n\";\n\n\/\/ Or let's skip to only the third one\nlist( , , $power) = $info;\necho \"I need $power!\\n\";\n\n\/\/ list() doesn't work with strings\nlist($bar) = \"abcde\";\nvar_dump($bar); \/\/ NULL","output":null},{"title":"An example use of list()","source":"<table>\n <tr>\n  <th>Employee name<\/th>\n  <th>Salary<\/th>\n <\/tr>\n\n<?php\n$result = $pdo->query(\"SELECT id, name, salary FROM employees\");\nwhile (list($id, $name, $salary) = $result->fetch(PDO::FETCH_NUM)) {\n    echo \" <tr>\\n\" .\n          \"  <td><a href=\\\"info.php?id=$id\\\">$name<\/a><\/td>\\n\" .\n          \"  <td>$salary<\/td>\\n\" .\n          \" <\/tr>\\n\";\n}\n\n?>\n\n<\/table>","output":null},{"title":"Using nested list()","source":"list($a, list($b, $c)) = array(1, array(2, 3));\n\nvar_dump($a, $b, $c);","output":"int(1)\nint(2)\nint(3)"},{"title":"Using list() with array indices","source":"$info = array('coffee', 'brown', 'caffeine');\n\nlist($a[0], $a[1], $a[2]) = $info;\n\nvar_dump($a);","output":"array(3) {\n  [0]=>\n  string(6) \"coffee\"\n  [1]=>\n  string(5) \"brown\"\n  [2]=>\n  string(8) \"caffeine\"\n}"},{"title":"list() and order of index definitions","source":"$foo = array(2 => 'a', 'foo' => 'b', 0 => 'c');\n$foo[1] = 'd';\nlist($x, $y, $z) = $foo;\nvar_dump($foo, $x, $y, $z);","output":"array(4) {\n  [2]=>\n  string(1) \"a\"\n  [\"foo\"]=>\n  string(1) \"b\"\n  [0]=>\n  string(1) \"c\"\n  [1]=>\n  string(1) \"d\"\n}\nstring(1) \"c\"\nstring(1) \"d\"\nstring(1) \"a\""}],"localeconv":[{"title":"localeconv() example","source":"if (false !== setlocale(LC_ALL, 'nl_NL.UTF-8@euro')) {\n    $locale_info = localeconv();\n    print_r($locale_info);\n}","output":"Array\n(\n    [decimal_point] => .\n    [thousands_sep] =>\n    [int_curr_symbol] => EUR\n    [currency_symbol] => €\n    [mon_decimal_point] => ,\n    [mon_thousands_sep] =>\n    [positive_sign] =>\n    [negative_sign] => -\n    [int_frac_digits] => 2\n    [frac_digits] => 2\n    [p_cs_precedes] => 1\n    [p_sep_by_space] => 1\n    [n_cs_precedes] => 1\n    [n_sep_by_space] => 1\n    [p_sign_posn] => 1\n    [n_sign_posn] => 2\n    [grouping] => Array\n        (\n        )\n\n    [mon_grouping] => Array\n        (\n            [0] => 3\n            [1] => 3\n        )\n\n)"}],"localtime":[{"title":"localtime() example","source":"$localtime = localtime();\n$localtime_assoc = localtime(time(), true);\nprint_r($localtime);\nprint_r($localtime_assoc);","output":"Array\n(\n    [0] => 24\n    [1] => 3\n    [2] => 19\n    [3] => 3\n    [4] => 3\n    [5] => 105\n    [6] => 0\n    [7] => 92\n    [8] => 1\n)\n\nArray\n(\n    [tm_sec] => 24\n    [tm_min] => 3\n    [tm_hour] => 19\n    [tm_mday] => 3\n    [tm_mon] => 3\n    [tm_year] => 105\n    [tm_wday] => 0\n    [tm_yday] => 92\n    [tm_isdst] => 1\n)"}],"lstat":[{"title":"Comparison of stat() and lstat()","source":"symlink('uploads.php', 'uploads');\n\n\/\/ Contrast information for uploads.php and uploads\narray_diff(stat('uploads'), lstat('uploads'));","output":"Array\n(\n    [ino] => 97236376\n    [mode] => 33188\n    [size] => 34\n    [atime] => 1223580003\n    [mtime] => 1223581848\n    [ctime] => 1223581848\n    [blocks] => 8\n)"}],"ltrim":[{"title":"Usage example of ltrim()","source":"$text = \"\\t\\tThese are a few words :) ...  \";\n$binary = \"\\x09Example string\\x0A\";\n$hello  = \"Hello World\";\nvar_dump($text, $binary, $hello);\n\nprint \"\\n\";\n\n\n$trimmed = ltrim($text);\nvar_dump($trimmed);\n\n$trimmed = ltrim($text, \" \\t.\");\nvar_dump($trimmed);\n\n$trimmed = ltrim($hello, \"Hdle\");\nvar_dump($trimmed);\n\n\/\/ trim the ASCII control characters at the beginning of $binary\n\/\/ (from 0 to 31 inclusive)\n$clean = ltrim($binary, \"\\x00..\\x1F\");\nvar_dump($clean);","output":"string(32) \"        These are a few words :) ...  \"\nstring(16) \"    Example string\n\"\nstring(11) \"Hello World\"\n\nstring(30) \"These are a few words :) ...  \"\nstring(30) \"These are a few words :) ...  \"\nstring(7) \"o World\"\nstring(15) \"Example string\n\""}],"mail":[{"title":"Sending mail.","source":"\/\/ The message\n$message = \"Line 1\\r\\nLine 2\\r\\nLine 3\";\n\n\/\/ In case any of our lines are larger than 70 characters, we should use wordwrap()\n$message = wordwrap($message, 70, \"\\r\\n\");\n\n\/\/ Send\nmail('caffeinated@example.com', 'My Subject', $message);","output":null},{"title":"Sending mail with extra headers.","source":"$to      = 'nobody@example.com';\n$subject = 'the subject';\n$message = 'hello';\n$headers = 'From: webmaster@example.com' . \"\\r\\n\" .\n    'Reply-To: webmaster@example.com' . \"\\r\\n\" .\n    'X-Mailer: PHP\/' . phpversion();\n\nmail($to, $subject, $message, $headers);","output":null},{"title":"Sending mail with an additional command line parameter.","source":"mail('nobody@example.com', 'the subject', 'the message', null,\n   '-fwebmaster@example.com');","output":null},{"title":"Sending HTML email","source":"\/\/ Multiple recipients\n$to = 'johny@example.com, sally@example.com'; \/\/ note the comma\n\n\/\/ Subject\n$subject = 'Birthday Reminders for August';\n\n\/\/ Message\n$message = '\n<html>\n<head>\n  <title>Birthday Reminders for August<\/title>\n<\/head>\n<body>\n  <p>Here are the birthdays upcoming in August!<\/p>\n  <table>\n    <tr>\n      <th>Person<\/th><th>Day<\/th><th>Month<\/th><th>Year<\/th>\n    <\/tr>\n    <tr>\n      <td>Johny<\/td><td>10th<\/td><td>August<\/td><td>1970<\/td>\n    <\/tr>\n    <tr>\n      <td>Sally<\/td><td>17th<\/td><td>August<\/td><td>1973<\/td>\n    <\/tr>\n  <\/table>\n<\/body>\n<\/html>\n';\n\n\/\/ To send HTML mail, the Content-type header must be set\n$headers[] = 'MIME-Version: 1.0';\n$headers[] = 'Content-type: text\/html; charset=iso-8859-1';\n\n\/\/ Additional headers\n$headers[] = 'To: Mary <mary@example.com>, Kelly <kelly@example.com>';\n$headers[] = 'From: Birthday Reminder <birthday@example.com>';\n$headers[] = 'Cc: birthdayarchive@example.com';\n$headers[] = 'Bcc: birthdaycheck@example.com';\n\n\/\/ Mail it\nmail($to, $subject, $message, implode(\"\\r\\n\", $headers));","output":null}],"mailparse_determine_best_xfer_encoding":[{"title":"mailparse_determine_best_xfer_encoding() example","source":"$fp = fopen('somemail.eml', 'r');\necho 'Best encoding: ' . mailparse_determine_best_xfer_encoding($fp);","output":"Best encoding: 7bit"}],"mailparse_rfc822_parse_addresses":[{"title":"mailparse_rfc822_parse_addresses() example","source":"$to = 'Wez Furlong <wez@example.com>, doe@example.com';\nvar_dump(mailparse_rfc822_parse_addresses($to));","output":"array(2) {\n  [0]=>\n  array(3) {\n    [\"display\"]=>\n    string(11) \"Wez Furlong\"\n    [\"address\"]=>\n    string(15) \"wez@example.com\"\n    [\"is_group\"]=>\n    bool(false)\n  }\n  [1]=>\n  array(3) {\n    [\"display\"]=>\n    string(15) \"doe@example.com\"\n    [\"address\"]=>\n    string(15) \"doe@example.com\"\n    [\"is_group\"]=>\n    bool(false)\n  }\n}"}],"mailparse_stream_encode":[{"title":"mailparse_stream_encode() example","source":"\/\/ email.eml contents: hello, this is some text=hello.\n$fp = fopen('email.eml', 'r');\n\n$dest = tmpfile();\n\nmailparse_stream_encode($fp, $dest, \"quoted-printable\");\n\nrewind($dest);\n\n\/\/ Display new file contents\nfpassthru($dest);","output":"hello, this is some text=3Dhello."}],"mailparse_uudecode_all":[{"title":"mailparse_uudecode_all() example","source":"$text = <<<EOD\nTo: fred@example.com\n\nhello, this is some text hello.\nblah blah blah.\n\nbegin 644 test.txt\n\/=&AI<R!I<R!A('1E<W0*\n`\nend\n\nEOD;\n\n$fp = tmpfile();\nfwrite($fp, $text);\n\n$data = mailparse_uudecode_all($fp);\n\necho \"BODY\\n\";\nreadfile($data[0][\"filename\"]);\necho \"UUE ({$data[1]['origfilename']})\\n\";\nreadfile($data[1][\"filename\"]);\n\n\/\/ Clean up\nunlink($data[0][\"filename\"]);\nunlink($data[1][\"filename\"]);","output":"BODY\nTo: fred@example.com\n\nhello, this is some text hello.\nblah blah blah.\n\nUUE (test.txt)\nthis is a test"}],"maxdb_affected_rows":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_report (MAXDB_REPORT_OFF);\n$maxdb->query(\"DROP TABLE mycustomer\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\n\/* Insert rows *\/\n$maxdb->query(\"CREATE TABLE mycustomer AS SELECT * from hotel.customer\");\nprintf(\"Affected rows (INSERT): %d\\n\", $maxdb->affected_rows);\n\n$maxdb->query(\"ALTER TABLE mycustomer ADD Status int default 0\");\n\n\/* update rows *\/\n$maxdb->query(\"UPDATE mycustomer SET Status=1 WHERE cno > 50\");\nprintf(\"Affected rows (UPDATE): %d\\n\", $maxdb->affected_rows);\n\n\/* delete rows *\/\n$maxdb->query(\"DELETE FROM mycustomer WHERE cno < 50\");\nprintf(\"Affected rows (DELETE): %d\\n\", $maxdb->affected_rows);\n\n\/* select all rows *\/\n$result = $maxdb->query(\"SELECT title FROM mycustomer\");\nprintf(\"Affected rows (SELECT): %d\\n\", $maxdb->affected_rows);\n\n$result->close();\n\n\/* Delete table Language *\/\n$maxdb->query(\"DROP TABLE mycustomer\");\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nif (!$link) {\n   printf(\"Can't connect to localhost. Error: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_report (MAXDB_REPORT_OFF);\nmaxdb_query($link,\"DROP TABLE mycustomer\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\n\/* Insert rows *\/\nmaxdb_query($link, \"CREATE TABLE mycustomer AS SELECT * from hotel.customer\");\nprintf(\"Affected rows (INSERT): %d\\n\", maxdb_affected_rows($link));\n\nmaxdb_query($link, \"ALTER TABLE mycustomer ADD Status int default 0\");\n\n\/* update rows *\/\nmaxdb_query($link, \"UPDATE mycustomer SET Status=1 WHERE cno > 50\");\nprintf(\"Affected rows (UPDATE): %d\\n\", maxdb_affected_rows($link));\n\n\/* delete rows *\/\nmaxdb_query($link, \"DELETE FROM mycustomer WHERE cno < 50\");\nprintf(\"Affected rows (DELETE): %d\\n\", maxdb_affected_rows($link));\n\n\/* select all rows *\/\n$result = maxdb_query($link, \"SELECT title FROM mycustomer\");\nprintf(\"Affected rows (SELECT): %d\\n\", maxdb_affected_rows($link));\n\nmaxdb_free_result($result);\n\n\/* Delete table Language *\/\nmaxdb_query($link, \"DROP TABLE mycustomer\");\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_autocommit":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* turn autocommit on *\/\n$maxdb->autocommit(TRUE);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nif (!$link) {\n   printf(\"Can't connect to localhost. Error: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* turn autocommit on *\/\nmaxdb_autocommit($link, TRUE);\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_change_user":[{"title":"Object oriented style","source":"\/* connect database test *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($result = $maxdb->query(\"SELECT * FROM dual\")) {\n   $row = $result->fetch_row();\n   printf(\"Result: %s\\n\", $row[0]);\n   $result->free();\n}\n\n\/* reset all and select a new database *\/\nif (!$maxdb->change_user(\"DBADMIN\", \"SECRET\", \"DEMODB\")) {\n  printf(\"Database not running\\n\");\n} else {\n  printf(\"Database running\\n\");\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($result = maxdb_query($link, \"SELECT * FROM dual\")) {\n   $row = maxdb_fetch_row($result);\n   printf(\"Result: %s\\n\", $row[0]);\n   maxdb_free_result($result);\n}\n\n\/* reset all and select a new database *\/\nif (!maxdb_change_user($link, \"DBADMIN\", \"SECRET\", \"DEMODB\")) {\n  printf(\"Database not running\\n\");\n} else {\n  printf(\"Database running\\n\");\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_character_set_name":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* Print current character set *\/\n$charset = $maxdb->character_set_name();\nprintf (\"Current character set is %s\\n\", $charset);\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* Print current character set *\/\n$charset = maxdb_character_set_name($link);\nprintf (\"Current character set is %s\\n\",$charset);\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_commit":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* set autocommit to off *\/\n$maxdb->autocommit(FALSE);\n\nmaxdb_report (MAXDB_REPORT_OFF);\n$maxdb->query(\"DROP TABLE mycustomer\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\n$maxdb->query(\"CREATE TABLE mycustomer LIKE hotel.customer\");\n\n\/* Insert some values *\/\n$maxdb->query(\"INSERT INTO mycustomer VALUES (3000,'Mrs','Jenny','Porter','10580','1340 N.Ash Street, #3')\");\n$maxdb->query(\"INSERT INTO mycustomer VALUES (3100,'Mr','Peter','Brown','48226','1001 34th Str., APT.3')\");\n\n\/* commit transaction *\/\n$maxdb->commit();\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* set autocommit to off *\/\nmaxdb_autocommit($link, FALSE);\n\nmaxdb_report (MAXDB_REPORT_OFF);\nmaxdb_query($link,\"DROP TABLE mycustomer\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\nmaxdb_query($link, \"CREATE TABLE mycustomer LIKE hotel.customer\");\n\n\/* Insert some values *\/\nmaxdb_query($link, \"INSERT INTO mycustomer VALUES (3000,'Mrs','Jenny','Porter','10580','1340 N.Ash Street, #3')\");\nmaxdb_query($link, \"INSERT INTO mycustomer VALUES (3100,'Mr','Peter','Brown','48226','1001 34th Str., APT.3')\");\n\n\/* commit transaction *\/\nmaxdb_commit($link);\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_connect_errno":[{"title":"maxdb_connect_errno sample","source":"$link = maxdb_connect(\"localhost\", \"XXXXXXXX\", \"YYYYYYYYY\");\n\nif (!$link) {\n   printf(\"Can't connect to localhost. Errorcode: %d\\n\", maxdb_connect_errno());\n}","output":null}],"maxdb_connect_error":[{"title":"maxdb_connect_error sample","source":"$link = maxdb_connect(\"localhost\", \"nonexisting_user\", \"\");\n\nif (!$link) {\n   printf(\"Can't connect to localhost. Error: %s\\n\", maxdb_connect_error());\n}","output":null}],"maxdb_connect":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nprintf(\"Host information: %s\\n\", $maxdb->host_info);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nprintf(\"Host information: %s\\n\", maxdb_get_host_info($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_data_seek":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER BY name\";\nif ($result = $maxdb->query( $query)) {\n\n   \/* seek to row no. 10 *\/\n   $result->data_seek(10);\n\n   \/* fetch row *\/\n   $row = $result->fetch_row();\n\n   printf (\"City: %s  State: %s\\n\", $row[0], $row[1]);\n\n   \/* free result set*\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER BY name\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* seek to row no. 400 *\/\n   maxdb_data_seek($result, 10);\n\n   \/* fetch row *\/\n   $row = maxdb_fetch_row($result);\n\n   printf (\"City: %s  State: %s\\n\", $row[0], $row[1]);\n\n   \/* free result set*\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_debug":[{"title":"Procedural style","source":"maxdb_debug(\"trace packet 200\");\n\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_errno":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif (!$maxdb->query(\"SELECT xxx FROM hotel.city\")) {\n   printf(\"Errorcode: %d\\n\", $maxdb->errno);\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif (!maxdb_query($link, \"SELECT xxx FROM hotel.city\")) {\n   printf(\"Errorcode: %d\\n\", maxdb_errno($link));\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_error":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif (!$maxdb->query(\"SELECT xxx FROM hotel.city\")) {\n   printf(\"Errormessage: %s\\n\", $maxdb->error);\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif (!maxdb_query($link, \"SELECT xxx FROM hotel.city\")) {\n   printf(\"Errormessgae: %s\\n\", maxdb_error($link));\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_array":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n$result = $maxdb->query($query);\n\n\/* numeric array *\/\n$row = $result->fetch_array(MAXDB_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n\n\/* associative array *\/\n$row = $result->fetch_array(MAXDB_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"NAME\"], $row[\"STATE\"]);\n\n\/* associative and numeric array *\/\n$row = $result->fetch_array(MAXDB_BOTH);\nprintf (\"%s (%s)\\n\", $row[0], $row[\"STATE\"]);\n\n\/* free result set *\/\n$result->close();\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n$result = maxdb_query($link, $query);\n\n\/* numeric array *\/\n$row = maxdb_fetch_array($result, MAXDB_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n\n\/* associative array *\/\n$row = maxdb_fetch_array($result, MAXDB_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"NAME\"], $row[\"STATE\"]);\n\n\/* associative and numeric array *\/\n$row = maxdb_fetch_array($result, MAXDB_BOTH);\nprintf (\"%s (%s)\\n\", $row[0], $row[\"STATE\"]);\n\n\/* free result set *\/\nmaxdb_free_result($result);\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_assoc":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* fetch associative array *\/\n   while ($row = $result->fetch_assoc()) {\n       printf (\"%s (%s)\\n\", $row[\"NAME\"], $row[\"STATE\"]);\n   }\n\n   \/* free result set *\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* fetch associative array *\/\n   while ($row = maxdb_fetch_assoc($result)) {\n       printf (\"%s (%s)\\n\", $row[\"NAME\"], $row[\"STATE\"]);\n   }\n\n   \/* free result set *\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_field_direct":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY name\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* Get field information for column 'SurfaceArea' *\/\n   $finfo = $result->fetch_field_direct(1);\n\n   printf(\"Name:     %s\\n\", $finfo->name);\n   printf(\"Table:    %s\\n\", $finfo->table);\n   printf(\"max. Len: %d\\n\", $finfo->max_length);\n   printf(\"Flags:    %d\\n\", $finfo->flags);\n   printf(\"Type:     %d\\n\", $finfo->type);\n\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY name\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* Get field information for column 'cno' *\/\n   $finfo = maxdb_fetch_field_direct($result, 1);\n\n   printf(\"Name:     %s\\n\", $finfo->name);\n   printf(\"Table:    %s\\n\", $finfo->table);\n   printf(\"max. Len: %d\\n\", $finfo->max_length);\n   printf(\"Flags:    %d\\n\", $finfo->flags);\n   printf(\"Type:     %d\\n\", $finfo->type);\n\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_field":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* Get field information for all columns *\/\n   while ($finfo = $result->fetch_field()) {\n\n       printf(\"Name:     %s\\n\", $finfo->name);\n       printf(\"Table:    %s\\n\", $finfo->table);\n       printf(\"max. Len: %d\\n\", $finfo->max_length);\n       printf(\"Flags:    %d\\n\", $finfo->flags);\n       printf(\"Type:     %d\\n\\n\", $finfo->type);\n   }\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* Get field information for all fields *\/\n   while ($finfo = maxdb_fetch_field($result)) {\n\n       printf(\"Name:     %s\\n\", $finfo->name);\n       printf(\"Table:    %s\\n\", $finfo->table);\n       printf(\"max. Len: %d\\n\", $finfo->max_length);\n       printf(\"Flags:    %d\\n\", $finfo->flags);\n       printf(\"Type:     %d\\n\\n\", $finfo->type);\n   }\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_fields":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* Get field information for all columns *\/\n   $finfo = $result->fetch_fields();\n\n   foreach ($finfo as $val) {\n       printf(\"Name:     %s\\n\", $val->name);\n       printf(\"Table:    %s\\n\", $val->table);\n       printf(\"max. Len: %d\\n\", $val->max_length);\n       printf(\"Flags:    %d\\n\", $val->flags);\n       printf(\"Type:     %d\\n\\n\", $val->type);\n   }\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* Get field information for all columns *\/\n   $finfo = maxdb_fetch_fields($result);\n\n   foreach ($finfo as $val) {\n       printf(\"Name:     %s\\n\", $val->name);\n       printf(\"Table:    %s\\n\", $val->table);\n       printf(\"max. Len: %d\\n\", $val->max_length);\n       printf(\"Flags:    %d\\n\", $val->flags);\n       printf(\"Type:     %d\\n\\n\", $val->type);\n   }\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_lengths":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT * from hotel.customer WHERE cno = 3000\";\n\nif ($result = $maxdb->query($query)) {\n\n   $row = $result->fetch_row();\n\n   \/* display column lengths *\/\n   foreach ($result->lengths as $i => $val) {\n       printf(\"Field %2d has Length %2d\\n\", $i+1, $val);\n   }\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT * from hotel.customer WHERE cno = 3000\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   $row = maxdb_fetch_row($result);\n\n   \/* display column lengths *\/\n   foreach (maxdb_fetch_lengths($result) as $i => $val) {\n       printf(\"Field %2d has Length %2d\\n\", $i+1, $val);\n   }\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_object":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* fetch object array *\/\n   while ($obj = $result->fetch_object()) {\n       printf (\"%s (%s)\\n\", $obj->NAME, $obj->STATE);\n   }\n\n   \/* free result set *\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* fetch object array *\/\n   while ($obj = maxdb_fetch_object($result)) {\n       printf (\"%s (%s)\\n\", $obj->NAME, $obj->STATE);\n   }\n\n   \/* free result set *\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_fetch_row":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* fetch enumerated array *\/\n   while ($row = $result->fetch_row()) {\n       printf (\"%s (%s)\\n\", $row[0], $row[1]);\n   }\n\n   \/* free result set *\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, state FROM hotel.city ORDER by zip\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* fetch enumerated array *\/\n   while ($row = maxdb_fetch_row($result)) {\n       printf (\"%s (%s)\\n\", $row[0], $row[1]);\n   }\n\n   \/* free result set *\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_field_count":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nmaxdb_report (MAXDB_REPORT_OFF);\n$maxdb->query(\"DROP TABLE friends\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\n$maxdb->query( \"CREATE TABLE friends (id int, name varchar(20))\");\n\n$maxdb->query( \"INSERT INTO friends VALUES (1,'Hartmut')\");\n$maxdb->query( \"INSERT INTO friends VALUES (2, 'Ulf')\");\n\nif ($maxdb->field_count()) {\n   \/* this was a select\/show or describe query *\/\n   $result = $maxdb->store_result();\n\n   \/* process resultset *\/\n   $row = $result->fetch_row();\n\n   \/* free resultset *\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nmaxdb_report (MAXDB_REPORT_OFF);\nmaxdb_query($link,\"DROP TABLE friends\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\nmaxdb_query($link, \"CREATE TABLE friends (id int, name varchar(20))\");\n\nmaxdb_query($link, \"INSERT INTO friends VALUES (1,'Hartmut')\");\nmaxdb_query($link, \"INSERT INTO friends VALUES (2, 'Ulf')\");\n\nif (maxdb_field_count($link)) {\n   \/* this was a select\/show or describe query *\/\n   $result = maxdb_store_result($link);\n\n   \/* process resultset *\/\n   $row = maxdb_fetch_row($result);\n\n   \/* free resultset *\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_field_seek":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* Get field information for 2nd column *\/\n   $result->field_seek(1);\n   $finfo = $result->fetch_field();\n\n   printf(\"Name:     %s\\n\", $finfo->name);\n   printf(\"Table:    %s\\n\", $finfo->table);\n   printf(\"max. Len: %d\\n\", $finfo->max_length);\n   printf(\"Flags:    %d\\n\", $finfo->flags);\n   printf(\"Type:     %d\\n\\n\", $finfo->type);\n\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* Get field information for 2nd column *\/\n   maxdb_field_seek($result, 1);\n   $finfo = maxdb_fetch_field($result);\n\n   printf(\"Name:     %s\\n\", $finfo->name);\n   printf(\"Table:    %s\\n\", $finfo->table);\n   printf(\"max. Len: %d\\n\", $finfo->max_length);\n   printf(\"Flags:    %d\\n\", $finfo->flags);\n   printf(\"Type:     %d\\n\\n\", $finfo->type);\n\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_field_tell":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = $maxdb->query($query)) {\n\n   \/* Get field information for all columns *\/\n   while ($finfo = $result->fetch_field()) {\n\n       \/* get fieldpointer offset *\/\n       $currentfield = $result->current_field;\n\n       printf(\"Column    %d:\\n\", $currentfield);\n       printf(\"Name:     %s\\n\", $finfo->name);\n       printf(\"Table:    %s\\n\", $finfo->table);\n       printf(\"max. Len: %d\\n\", $finfo->max_length);\n       printf(\"Flags:    %d\\n\", $finfo->flags);\n       printf(\"Type:     %d\\n\\n\", $finfo->type);\n   }\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, cno from hotel.customer ORDER BY cno\";\n\nif ($result = maxdb_query($link, $query)) {\n\n   \/* Get field information for all fields *\/\n   while ($finfo = maxdb_fetch_field($result)) {\n\n       \/* get fieldpointer offset *\/\n       $currentfield = maxdb_field_tell($result);\n\n       printf(\"Column    %d:\\n\", $currentfield);\n       printf(\"Name:     %s\\n\", $finfo->name);\n       printf(\"Table:    %s\\n\", $finfo->table);\n       printf(\"max. Len: %d\\n\", $finfo->max_length);\n       printf(\"Flags:    %d\\n\", $finfo->flags);\n       printf(\"Type:     %d\\n\\n\", $finfo->type);\n   }\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_get_client_info":[{"title":"maxdb_get_client_info","source":"\/* We don't need a connection to determine\n   the version of MaxDB client library *\/\n\nprintf(\"Client library version: %s\\n\", maxdb_get_client_info());","output":null}],"maxdb_get_client_version":[{"title":"maxdb_get_client_version","source":"\/* We don't need a connection to determine\n   the version of MaxDB client library *\/\n\nprintf(\"Client library version: %d\\n\", maxdb_get_client_version());","output":null}],"maxdb_get_host_info":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print host information *\/\nprintf(\"Host info: %s\\n\", $maxdb->host_info);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print host information *\/\nprintf(\"Host info: %s\\n\", maxdb_get_host_info($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_get_proto_info":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print protocol version *\/\nprintf(\"Protocol version: %d\\n\", $maxdb->protocol_version);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print protocol version *\/\nprintf(\"Protocol version: %d\\n\", maxdb_get_proto_info($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_get_server_info":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print server version *\/\nprintf(\"Server version: %s\\n\", $maxdb->server_info);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print server version *\/\nprintf(\"Server version: %s\\n\", maxdb_get_server_info($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_get_server_version":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print server version *\/\nprintf(\"Server version: %d\\n\", $maxdb->server_version);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* print server version *\/\nprintf(\"Server version: %d\\n\", maxdb_get_server_version($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_info":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.t1 LIKE hotel.city\");\n\n\/* INSERT INTO .. SELECT *\/\n$maxdb->query(\"INSERT INTO temp.t1 SELECT * FROM hotel.city\");\nprintf(\"%s\\n\", $maxdb->info);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.t1 LIKE hotel.city\");\n\n\/* INSERT INTO .. SELECT *\/\nmaxdb_query($link, \"INSERT INTO temp.t1 SELECT * FROM hotel.city\");\nprintf(\"%s\\n\", maxdb_info($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_insert_id":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_report (MAXDB_REPORT_OFF);\n$maxdb->query(\"DROP TABLE mycity\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\n$maxdb->query(\"CREATE TABLE mycity LIKE hotel.city\");\n$maxdb->query(\"ALTER TABLE mycity ADD id FIXED(11) DEFAULT SERIAL\");\n\n$query = \"INSERT INTO mycity (zip,name,state) VALUES ('12203','Albany' ,'NY')\";\n$maxdb->query($query);\n\nprintf (\"New Record has id %d.\\n\", $maxdb->insert_id);\n\n\/* drop table *\/\n$maxdb->query(\"DROP TABLE mycity\");\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_report (MAXDB_REPORT_OFF);\nmaxdb_query($link,\"DROP TABLE mycity\");\nmaxdb_report (MAXDB_REPORT_ERROR);\n\nmaxdb_query($link, \"CREATE TABLE mycity LIKE hotel.city\");\nmaxdb_query($link, \"ALTER TABLE mycity ADD id FIXED(11) DEFAULT SERIAL\");\n\n$query = \"INSERT INTO mycity (zip,name,state) VALUES ('12203','Albany' ,'NY')\";\nmaxdb_query($link, $query);\n\nprintf (\"New Record has id %d.\\n\", maxdb_insert_id($link));\n\n\/* drop table *\/\nmaxdb_query($link, \"DROP TABLE mycity\");\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_kill":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* determine our thread id *\/\n$thread_id = $maxdb->thread_id;\n\n\/* Kill connection *\/\n$maxdb->kill($thread_id);\n\n\/* This should produce an error *\/\nif (!$maxdb->query(\"CREATE TABLE myCity LIKE City\")) {\n   printf(\"Error: %s\\n\", $maxdb->error);\n   exit;\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* determine our thread id *\/\n$thread_id = maxdb_thread_id($link);\n\n\/* Kill connection *\/\nmaxdb_kill($link, $thread_id);\n\n\/* This should produce an error *\/\nif (!maxdb_query($link, \"CREATE TABLE myCity LIKE City\")) {\n   printf(\"Error: %s\\n\", maxdb_error($link));\n   exit;\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_multi_query":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query  = \"SELECT * FROM dual\";\n\n\/* execute multi query *\/\nif ($maxdb->multi_query($query)) {\n   do {\n       \/* store first result set *\/\n       if ($result = $maxdb->store_result()) {\n           while ($row = $result->fetch_row()) {\n               printf(\"%s\\n\", $row[0]);\n           }\n           $result->close();\n       }\n       \/* print divider *\/\n       if ($maxdb->more_results()) {\n           printf(\"-----------------\\n\");\n       }\n   } while ($maxdb->next_result());\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT * FROM dual\";\n\n\/* execute multi query *\/\nif (maxdb_multi_query($link, $query)) {\n   do {\n       \/* store first result set *\/\n       if ($result = maxdb_store_result($link)) {\n           while ($row = maxdb_fetch_row($result)) {\n               printf(\"%s\\n\", $row[0]);\n           }\n           maxdb_free_result($result);\n       }\n       \/* print divider *\/\n       if (maxdb_more_results($link)) {\n           printf(\"-----------------\\n\");\n       }\n   } while (maxdb_next_result($link));\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_num_fields":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($result = $maxdb->query(\"SELECT * FROM hotel.city ORDER BY zip\")) {\n\n   \/* determine number of fields in result set *\/\n   $field_cnt = $result->field_count;\n\n   printf(\"Result set has %d fields.\\n\", $field_cnt);\n\n   \/* close result set *\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($result = maxdb_query($link, \"SELECT * FROM hotel.city ORDER BY zip\")) {\n\n   \/* determine number of fields in result set *\/\n   $field_cnt = maxdb_num_fields($result);\n\n   printf(\"Result set has %d fields.\\n\", $field_cnt);\n\n   \/* close result set *\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_num_rows":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($result = $maxdb->query(\"SELECT cno, name FROM hotel.customer ORDER BY name\")) {\n\n   \/* determine number of rows result set *\/\n   $row_cnt = $result->num_rows;\n\n   printf(\"Result set has %d rows.\\n\", $row_cnt);\n\n   \/* close result set *\/\n   $result->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($result = maxdb_query($link, \"SELECT cno, name FROM hotel.customer ORDER BY name\")) {\n\n   \/* determine number of rows result set *\/\n   $row_cnt = maxdb_num_rows($result);\n\n   printf(\"Result set has %d rows.\\n\", $row_cnt);\n\n   \/* close result set *\/\n   maxdb_free_result($result);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_ping":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* check if server is alive *\/\nif ($maxdb->ping()) {\n   printf (\"Our connection is ok!\\n\");\n} else {\n   printf (\"Error: %s\\n\", $maxdb->error);\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* check if server is alive *\/\nif (maxdb_ping($link)) {\n   printf (\"Our connection is ok!\\n\");\n} else {\n   printf (\"Error: %s\\n\", maxdb_error($link));\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_prepare":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$city = \"Rosemont\";\n\n\/* create a prepared statement *\/\nif ($stmt = $maxdb->prepare(\"SELECT state FROM hotel.city WHERE name=?\")) {\n\n   \/* bind parameters for markers *\/\n   $stmt->bind_param(\"s\", $city);\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   \/* bind result variables *\/\n   $stmt->bind_result($district);\n\n   \/* fetch value *\/\n   $stmt->fetch();\n\n   printf(\"%s is in district %s\\n\", $city, $district);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$city = \"Rosemont\";\n\n\/* create a prepared statement *\/\nif ($stmt = maxdb_prepare($link, \"SELECT state FROM hotel.city WHERE name=?\")) {\n\n   \/* bind parameters for markers *\/\n   maxdb_stmt_bind_param($stmt, \"s\", $city);\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n  \/* bind result variables *\/\n   maxdb_stmt_bind_result($stmt, $district);\n\n   \/* fetch value *\/\n   maxdb_stmt_fetch($stmt);\n\n   printf(\"%s is in district %s\\n\", $city, $district);\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_query":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* Create table doesn't return a resultset *\/\nif ($maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\") === TRUE) {\n   printf(\"Table mycity successfully created.\\n\");\n}\n\n\/* Select queries return a resultset *\/\nif ($result = $maxdb->query(\"SELECT name FROM hotel.city\")) {\n   printf(\"Select returned %d rows.\\n\", $result->num_rows);\n\n   \/* free result set *\/\n   $result->close();\n}\n\n\/* If we have to retrieve large amount of data we use MAXDB_USE_RESULT *\/\nif ($result = $maxdb->query(\"SELECT * FROM hotel.city\", MAXDB_USE_RESULT)) {\n   $result->close();\n}\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* Create table doesn't return a resultset *\/\nif (maxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\") === TRUE) {\n   printf(\"Table mycity successfully created.\\n\");\n}\n\n\/* Select queries return a resultset *\/\nif ($result = maxdb_query($link, \"SELECT name FROM hotel.city\")) {\n   printf(\"Select returned %d rows.\\n\", maxdb_num_rows($result));\n\n   \/* free result set *\/\n   maxdb_free_result($result);\n}\n\n\/* If we have to retrieve large amount of data we use MAXDB_USE_RESULT *\/\nif ($result = maxdb_query($link, \"SELECT * FROM hotel.city\", MAXDB_USE_RESULT)) {\n   maxdb_free_result($result);\n}\n\nmaxdb_close($link);","output":null}],"maxdb_real_connect":[{"title":"Object oriented style","source":"\/* create a connection object which is not connected *\/\n$maxdb = maxdb_init();\n\n\/* set connection options *\/\n$maxdb->options(MAXDB_UNICODE, \"FALSE\");\n$maxdb->options(MAXDB_TIMEOUT, 5);\n\n\/* connect to server *\/\n$maxdb->real_connect('localhost', 'MONA', 'RED', 'DEMODB');\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nprintf (\"Connection: %s\\n.\", $maxdb->host_info);\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* create a connection object which is not connected *\/\n$link = maxdb_init();\n\n\/* set connection options *\/\nmaxdb_options($link, MAXDB_UNICODE, \"FALSE\");\nmaxdb_options($link, MAXDB_TIMEOUT, 5);\n\n\/* connect to server *\/\nmaxdb_real_connect($link, 'localhost', 'MONA', 'RED', 'DEMODB');\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nprintf (\"Connection: %s\\n.\", maxdb_get_host_info($link));\n\nmaxdb_close($link);","output":null}],"maxdb_real_escape_string":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n$city = \"'s Hertogenbosch\";\n\n\/* this query will fail, cause we didn't escape $city *\/\nif (!$maxdb->query(\"INSERT into temp.mycity VALUES ('11111','$city','NY')\")) {\n   printf(\"Error: %s\\n\", $maxdb->sqlstate);\n}\n\n$city = $maxdb->real_escape_string($city);\n\n\/* this query with escaped $city will work *\/\nif ($maxdb->query(\"INSERT into temp.mycity VALUES ('22222','$city','NY')\")) {\n   printf(\"%d Row inserted.\\n\", $maxdb->affected_rows);\n}\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n$city = \"'s Hertogenbosch\";\n\n\/* this query will fail, cause we didn't escape $city *\/\nif (!maxdb_query($link, \"INSERT into temp.mycity VALUES ('11111','$city','NY')\")) {\n   printf(\"Error: %s\\n\", maxdb_sqlstate($link));\n}\n\n$city = maxdb_real_escape_string($link, $city);\n\n\/* this query with escaped $city will work *\/\nif (maxdb_query($link, \"INSERT into temp.mycity VALUES ('22222','$city','NY')\")) {\n   printf(\"%d Row inserted.\\n\", maxdb_affected_rows($link));\n}\n\nmaxdb_close($link);","output":null}],"maxdb_report":[{"title":"Procedural style","source":"\/* activate reporting *\/\nmaxdb_report(MAXDB_REPORT_ERROR);\n\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* this query should report an error *\/\n$result = maxdb_query($link,\"SELECT Name FROM Nonexistingtable WHERE population > 50000\");\n\nmaxdb_close($link);","output":null}],"maxdb_rollback":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* disable autocommit *\/\n$maxdb->autocommit(FALSE);\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n$maxdb->query(\"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n\/* commit insert *\/\n$maxdb->commit();\n\n\/* delete all rows *\/\n$maxdb->query(\"DELETE FROM temp.mycity\");\n\nif ($result = $maxdb->query(\"SELECT COUNT(*) FROM temp.mycity\")) {\n   $row = $result->fetch_row();\n   printf(\"%d rows in table mycity.\\n\", $row[0]);\n   \/* Free result *\/\n   $result->close();\n}\n\n\/* Rollback *\/\n$maxdb->rollback();\n\nif ($result = $maxdb->query(\"SELECT COUNT(*) FROM temp.mycity\")) {\n   $row = $result->fetch_row();\n   printf(\"%d rows in table mycity (after rollback).\\n\", $row[0]);\n   \/* Free result *\/\n   $result->close();\n}\n\n\/* Drop table myCity *\/\n$maxdb->query(\"DROP TABLE temp.mycity\");\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* disable autocommit *\/\nmaxdb_autocommit($link, FALSE);\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\nmaxdb_query($link, \"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n\/* commit insert *\/\nmaxdb_commit($link);\n\n\/* delete all rows *\/\nmaxdb_query($link, \"DELETE FROM temp.mycity\");\n\nif ($result = maxdb_query($link, \"SELECT COUNT(*) FROM temp.mycity\")) {\n   $row = maxdb_fetch_row($result);\n   printf(\"%d rows in table mycity.\\n\", $row[0]);\n   \/* Free result *\/\n   maxdb_free_result($result);\n}\n\n\/* Rollback *\/\nmaxdb_rollback($link);\n\nif ($result = maxdb_query($link, \"SELECT COUNT(*) FROM temp.mycity\")) {\n   $row = maxdb_fetch_row($result);\n   printf(\"%d rows in table mycity (after rollback).\\n\", $row[0]);\n   \/* Free result *\/\n   maxdb_free_result($result);\n}\n\n\/* Drop table myCity *\/\nmaxdb_query($link, \"DROP TABLE temp.mycity\");\n\nmaxdb_close($link);","output":null}],"maxdb_select_db":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* return name of current default database *\/\nif ($result = $maxdb->query(\"SELECT SERVERDB FROM USERS WHERE USERNAME='MONA'\")) {\n   $row = $result->fetch_row();\n   printf(\"Default database is %s.\\n\", $row[0]);\n   $result->close();\n}\n\n\/* change db to non existing db *\/\n$maxdb->select_db(\"XXXXXXXX\");\n\n\/* return name of current default database *\/\nif ($result = $maxdb->query(\"SELECT SERVERDB FROM USERS WHERE USERNAME='MONA'\")) {\n   $row = $result->fetch_row();\n   printf(\"Default database is %s.\\n\", $row[0]);\n   $result->close();\n}\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* return name of current default database *\/\nif ($result = maxdb_query($link, \"SELECT SERVERDB FROM USERS WHERE USERNAME='MONA'\")) {\n   $row = maxdb_fetch_row($result);\n   printf(\"Default database is %s.\\n\", $row[0]);\n   maxdb_free_result($result);\n}\n\n\/* change db to non existing db *\/\nmaxdb_select_db($link, \"XXXXXXXX\");\n\n\/* return name of current default database *\/\nif ($result = maxdb_query($link, \"SELECT SERVERDB FROM USERS WHERE USERNAME='MONA'\")) {\n   $row = maxdb_fetch_row($result);\n   printf(\"Default database is %s.\\n\", $row[0]);\n   maxdb_free_result($result);\n}\n\nmaxdb_close($link);","output":null}],"maxdb_sqlstate":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* Table City already exists, so we should get an error *\/\nif (!$maxdb->query(\"CREATE TABLE hotel.city (ID INT, Name VARCHAR(30))\")) {\n   printf(\"Error - SQLSTATE %s.\\n\", $maxdb->sqlstate);\n}\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* Table City already exists, so we should get an error *\/\nif (!maxdb_query($link, \"CREATE TABLE hotel.city (ID INT, Name VARCHAR(30))\")) {\n   printf(\"Error - SQLSTATE %s.\\n\", maxdb_sqlstate($link));\n}\n\nmaxdb_close($link);","output":null}],"maxdb_stat":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nprintf (\"System status: %s\\n\", $maxdb->stat());\n\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nprintf(\"System status: %s\\n\", maxdb_stat($link));\n\nmaxdb_close($link);","output":null}],"maxdb_stmt_affected_rows":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* create temp table *\/\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n$query = \"INSERT INTO temp.mycity SELECT * FROM hotel.city WHERE state LIKE ?\";\n\n\/* prepare statement *\/\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* Bind variable for placeholder *\/\n   $code = 'N%';\n   $stmt->bind_param(\"s\", $code);\n\n   \/* execute statement *\/\n   $stmt->execute();\n\n   printf(\"rows inserted: %d\\n\", $stmt->affected_rows);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* create temp table *\/\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n$query = \"INSERT INTO temp.mycity SELECT * FROM hotel.city WHERE state LIKE ?\";\n\n\/* prepare statement *\/\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* Bind variable for placeholder *\/\n   $code = 'N%';\n   maxdb_stmt_bind_param($stmt, \"s\", $code);\n\n   \/* execute statement *\/\n   maxdb_stmt_execute($stmt);\n\n   printf(\"rows inserted: %d\\n\", maxdb_stmt_affected_rows($stmt));\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_bind_result":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* prepare statement *\/\nif ($stmt = $maxdb->prepare(\"SELECT zip, name FROM hotel.city ORDER BY name\")) {\n   $stmt->execute();\n\n   \/* bind variables to prepared statement *\/\n   $stmt->bind_result($col1, $col2);\n\n   \/* fetch values *\/\n   while ($stmt->fetch()) {\n       printf(\"%s %s\\n\", $col1, $col2);\n   }\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (!$link) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* prepare statement *\/\nif ($stmt = maxdb_prepare($link, \"SELECT zip, name FROM hotel.city ORDER BY name\")) {\n   maxdb_stmt_execute($stmt);\n\n   \/* bind variables to prepared statement *\/\n   maxdb_stmt_bind_result($stmt, $col1, $col2);\n\n   \/* fetch values *\/\n   while (maxdb_stmt_fetch($stmt)) {\n       printf(\"%s %s\\n\", $col1, $col2);\n   }\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_data_seek":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, zip FROM hotel.city ORDER BY name\";\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   \/* bind result variables *\/\n   $stmt->bind_result($name, $code);\n\n   \/* store result *\/\n   $stmt->store_result();\n\n   \/* seek to row no. 5 *\/\n   $stmt->data_seek(5);\n\n   \/* fetch values *\/\n   $stmt->fetch();\n\n   printf (\"City: %s  Zip: %s\\n\", $name, $code);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, zip FROM hotel.city ORDER BY name\";\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   \/* bind result variables *\/\n   maxdb_stmt_bind_result($stmt, $name, $code);\n\n   \/* store result *\/\n   maxdb_stmt_store_result($stmt);\n\n   \/* seek to row no. 5 *\/\n   maxdb_stmt_data_seek($stmt, 5);\n\n   \/* fetch values *\/\n   maxdb_stmt_fetch($stmt);\n\n   printf (\"City: %s  Zip: %s\\n\", $name, $code);\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_errno":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n$maxdb->query(\"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n\n$query = \"SELECT name, zip FROM temp.mycity ORDER BY name\";\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* drop table *\/\n   $maxdb->query(\"DROP TABLE temp.mycity\");\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   printf(\"Error: %d.\\n\", $stmt->errno);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\nmaxdb_query($link, \"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n\n$query = \"SELECT name, zip FROM temp.mycity ORDER BY name\";\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* drop table *\/\n   maxdb_query($link, \"DROP TABLE temp.mycity\");\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   printf(\"Error: %d.\\n\", maxdb_stmt_errno($stmt));\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_error":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n$maxdb->query(\"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n\n$query = \"SELECT name, zip FROM temp.mycity ORDER BY name\";\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* drop table *\/\n   $maxdb->query(\"DROP TABLE temp.mycity\");\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   printf(\"Error: %s.\\n\", $stmt->error);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\nmaxdb_query($link, \"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n\n$query = \"SELECT name, zip FROM temp.mycity ORDER BY name\";\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* drop table *\/\n   maxdb_query($link, \"DROP TABLE temp.mycity\");\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   printf(\"Error: %s.\\n\", maxdb_stmt_error($stmt));\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_execute":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n\/* Prepare an insert statement *\/\n$query = \"INSERT INTO temp.mycity (zip, name, state) VALUES (?,?,?)\";\n$stmt = $maxdb->prepare($query);\n\n$stmt->bind_param(\"sss\", $val1, $val2, $val3);\n\n$val1 = '11111';\n$val2 = 'Georgetown';\n$val3 = 'NY';\n\n\/* Execute the statement *\/\n$stmt->execute();\n\n$val1 = '22222';\n$val2 = 'Hubbatown';\n$val3 = 'CA';\n\n\/* Execute the statement *\/\n$stmt->execute();\n\n\/* close statement *\/\n$stmt->close();\n\n\/* retrieve all rows from myCity *\/\n$query = \"SELECT zip, name, state FROM temp.mycity\";\nif ($result = $maxdb->query($query)) {\n   while ($row = $result->fetch_row()) {\n       printf(\"%s (%s,%s)\\n\", $row[0], $row[1], $row[2]);\n   }\n   \/* free result set *\/\n   $result->close();\n}\n\n\/* remove table *\/\n$maxdb->query(\"DROP TABLE temp.mycity\");\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n\/* Prepare an insert statement *\/\n$query = \"INSERT INTO temp.mycity (zip, name, state) VALUES (?,?,?)\";\n$stmt = maxdb_prepare($link, $query);\n\nmaxdb_stmt_bind_param($stmt, \"sss\", $val1, $val2, $val3);\n\n$val1 = '11111';\n$val2 = 'Georgetown';\n$val3 = 'NY';\n\n\/* Execute the statement *\/\nmaxdb_stmt_execute($stmt);\n\n$val1 = '22222';\n$val2 = 'Hubbatown';\n$val3 = 'CA';\n\n\/* Execute the statement *\/\nmaxdb_stmt_execute($stmt);\n\n\/* close statement *\/\nmaxdb_stmt_close($stmt);\n\n\/* retrieve all rows from myCity *\/\n$query = \"SELECT zip, name, state FROM temp.mycity\";\nif ($result = maxdb_query($link, $query)) {\n   while ($row = maxdb_fetch_row($result)) {\n       printf(\"%s (%s,%s)\\n\", $row[0], $row[1], $row[2]);\n   }\n   \/* free result set *\/\n   maxdb_free_result($result);\n}\n\n\/* remove table *\/\nmaxdb_query($link, \"DROP TABLE temp.mycity\");\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_fetch":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT zip, name FROM hotel.city ORDER by name\";\n\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* execute statement *\/\n   $stmt->execute();\n\n   \/* bind result variables *\/\n   $stmt->bind_result($name, $code);\n\n   \/* fetch values *\/\n   while ($stmt->fetch()) {\n       printf (\"%s (%s)\\n\", $name, $code);\n   }\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT zip, name FROM hotel.city ORDER by name\";\n\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* execute statement *\/\n   maxdb_stmt_execute($stmt);\n\n   \/* bind result variables *\/\n   maxdb_stmt_bind_result($stmt, $name, $code);\n\n   \/* fetch values *\/\n   while (maxdb_stmt_fetch($stmt)) {\n       printf (\"%s (%s)\\n\", $name, $code);\n   }\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_num_rows":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT zip, name FROM hotel.city ORDER BY name\";\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   \/* store result *\/\n   $stmt->store_result();\n\n   printf(\"Number of rows: %d.\\n\", $stmt->num_rows);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT zip, name FROM hotel.city ORDER BY name\";\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   \/* store result *\/\n   maxdb_stmt_store_result($stmt);\n\n   printf(\"Number of rows: %d.\\n\", maxdb_stmt_num_rows($stmt));\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_param_count":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($stmt = $maxdb->prepare(\"SELECT name FROM hotel.city WHERE name=? OR state=?\")) {\n\n   $marker = $stmt->param_count;\n   printf(\"Statement has %d markers.\\n\", $marker);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nif ($stmt = maxdb_prepare($link, \"SELECT name FROM hotel.city WHERE name=? OR state=?\")) {\n\n   $marker = maxdb_stmt_param_count($stmt);\n   printf(\"Statement has %d markers.\\n\", $marker);\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_prepare":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$city = \"Portland\";\n\n\/* create a prepared statement *\/\n$stmt =  $maxdb->stmt_init();\nif ($stmt->prepare(\"SELECT state FROM hotel.city WHERE name=?\")) {\n\n   \/* bind parameters for markers *\/\n   $stmt->bind_param(\"s\", $city);\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   \/* bind result variables *\/\n   $stmt->bind_result($district);\n\n   \/* fetch value *\/\n   $stmt->fetch();\n\n   printf(\"%s is in district %s\\n\", $city, $district);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$city = \"Portland\";\n\n\/* create a prepared statement *\/\n$stmt = maxdb_stmt_init($link);\nif (maxdb_stmt_prepare($stmt, \"SELECT state FROM hotel.city WHERE name=?\")) {\n\n   \/* bind parameters for markers *\/\n   maxdb_stmt_bind_param($stmt, \"s\", $city);\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   \/* bind result variables *\/\n   maxdb_stmt_bind_result($stmt, $district);\n\n   \/* fetch value *\/\n   maxdb_stmt_fetch($stmt);\n\n   printf(\"%s is in district %s\\n\", $city, $district);\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_result_metadata":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n$maxdb->query(\"CREATE TABLE temp.friends (id int, name varchar(20))\");\n\n$maxdb->query(\"INSERT INTO temp.friends VALUES (1,'Hartmut')\");\n$maxdb->query(\"INSERT INTO temp.friends VALUES (2, 'Ulf')\");\n\n$stmt = $maxdb->prepare(\"SELECT id, name FROM temp.friends\");\n$stmt->execute();\n\n\/* get resultset for metadata *\/\n$result = $stmt->result_metadata();\n\n\/* retrieve field information from metadata result set *\/\n$field = $result->fetch_field();\n\nprintf(\"Fieldname: %s\\n\", $field->name);\n\n\/* close resultset *\/\n$result->close();\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\nmaxdb_query($link, \"CREATE TABLE temp.friends (id int, name varchar(20))\");\n\nmaxdb_query($link, \"INSERT INTO temp.friends VALUES (1,'Hartmut')\");\nmaxdb_query($link, \"INSERT INTO temp.friends VALUES (2, 'Ulf')\");\n\n$stmt = maxdb_prepare($link, \"SELECT id, name FROM temp.friends\");\nmaxdb_stmt_execute($stmt);\n\n\/* get resultset for metadata *\/\n$result = maxdb_stmt_result_metadata($stmt);\n\n\/* retrieve field information from metadata result set *\/\n$field = maxdb_fetch_field($result);\n\nprintf(\"Fieldname: %s\\n\", $field->name);\n\n\/* close resultset *\/\nmaxdb_free_result($result);\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_sqlstate":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n$maxdb->query(\"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n$query = \"SELECT name, zip FROM temp.mycity ORDER BY name\";\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* drop table *\/\n   $maxdb->query(\"DROP TABLE temp.mycity\");\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   printf(\"Error: %s.\\n\", $stmt->sqlstate);\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\nmaxdb_query($link, \"INSERT INTO temp.mycity SELECT * FROM hotel.city\");\n\n$query = \"SELECT name, zip FROM temp.mycity ORDER BY name\";\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* drop table *\/\n   maxdb_query($link, \"DROP TABLE temp.mycity\");\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   printf(\"Error: %s.\\n\", maxdb_stmt_sqlstate($stmt));\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_stmt_store_result":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, zip FROM hotel.city ORDER BY name\";\nif ($stmt = $maxdb->prepare($query)) {\n\n   \/* execute query *\/\n   $stmt->execute();\n\n   \/* store result *\/\n   $stmt->store_result();\n\n   printf(\"Number of rows: %d.\\n\", $stmt->num_rows);\n\n   \/* free result *\/\n   $stmt->free_result();\n\n   \/* close statement *\/\n   $stmt->close();\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query = \"SELECT name, zip FROM hotel.city ORDER BY name\";\nif ($stmt = maxdb_prepare($link, $query)) {\n\n   \/* execute query *\/\n   maxdb_stmt_execute($stmt);\n\n   \/* store result *\/\n   maxdb_stmt_store_result($stmt);\n\n   printf(\"Number of rows: %d.\\n\", maxdb_stmt_num_rows($stmt));\n\n   \/* free result *\/\n   maxdb_stmt_free_result($stmt);\n\n   \/* close statement *\/\n   maxdb_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_thread_id":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* determine our thread id *\/\n$thread_id = $maxdb->thread_id;\n\n\/* Kill connection *\/\n$maxdb->kill($thread_id);\n\n\/* This should produce an error *\/\nif (!$maxdb->query(\"CREATE TABLE mycity LIKE hotel.city\")) {\n   printf(\"Error: %s\\n\", $maxdb->error);\n   exit;\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n\/* determine our thread id *\/\n$thread_id = maxdb_thread_id($link);\n\n\/* Kill connection *\/\nmaxdb_kill($link, $thread_id);\n\n\/* This should produce an error *\/\nif (!maxdb_query($link, \"CREATE TABLE mycity LIKE hotel.city\")) {\n   printf(\"Error: %s\\n\", maxdb_error($link));\n   exit;\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_use_result":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query  = \"SELECT * FROM DUAL\";\n\n\/* execute multi query *\/\nif ($maxdb->multi_query($query)) {\n   do {\n       \/* store first result set *\/\n       if ($result = $maxdb->use_result()) {\n           while ($row = $result->fetch_row()) {\n               printf(\"%s\\n\", $row[0]);\n           }\n           $result->close();\n       }\n       \/* print divider *\/\n       if ($maxdb->more_results()) {\n           printf(\"-----------------\\n\");\n       }\n   } while ($maxdb->next_result());\n}\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$query  = \"SELECT * FROM DUAL\";\n\n\/* execute multi query *\/\nif (maxdb_multi_query($link, $query)) {\n   do {\n       \/* store first result set *\/\n       if ($result = maxdb_use_result($link)) {\n           while ($row = maxdb_fetch_row($result)) {\n               printf(\"%s\\n\", $row[0]);\n           }\n           maxdb_free_result($result);\n       }\n       \/* print divider *\/\n       if (maxdb_more_results($link)) {\n           printf(\"-----------------\\n\");\n       }\n   } while (maxdb_next_result($link));\n}\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"maxdb_warning_count":[{"title":"Object oriented style","source":"$maxdb = new maxdb(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\n$maxdb->query(\"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n\/* a remarkable city in Wales *\/\n$query = \"INSERT INTO temp.mycity (zip, name) VALUES('11111',\n       'Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch')\";\n\n$maxdb->query($query);\n\nprintf (\"Number of warning: %d\\n\", $maxdb->warning_count);\n\n\/* close connection *\/\n$maxdb->close();","output":null},{"title":"Procedural style","source":"$link = maxdb_connect(\"localhost\", \"MONA\", \"RED\", \"DEMODB\");\n\n\/* check connection *\/\nif (maxdb_connect_errno()) {\n   printf(\"Connect failed: %s\\n\", maxdb_connect_error());\n   exit();\n}\n\nmaxdb_query($link, \"CREATE TABLE temp.mycity LIKE hotel.city\");\n\n\/* a remarkable long city name in Wales *\/\n$query = \"INSERT INTO temp.mycity (zip, name) VALUES('11111',\n       'Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch')\";\n\nmaxdb_query($link, $query);\n\nprintf (\"Number of warning: %d\\n\", maxdb_warning_count($link));\n\n\/* close connection *\/\nmaxdb_close($link);","output":null}],"mb_convert_case":[{"title":"mb_convert_case() example","source":"$str = \"mary had a Little lamb and she loved it so\";\n$str = mb_convert_case($str, MB_CASE_UPPER, \"UTF-8\");\necho $str; \/\/ Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO\n$str = mb_convert_case($str, MB_CASE_TITLE, \"UTF-8\");\necho $str; \/\/ Prints Mary Had A Little Lamb And She Loved It So","output":null},{"title":"mb_convert_case() example with non-Latin UTF-8 text","source":"$str = \"Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\";\n$str = mb_convert_case($str, MB_CASE_UPPER, \"UTF-8\");\necho $str; \/\/ Prints ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ, ΔΡΑΣΚΕΛΊΖΕΙ ΥΠΈΡ ΝΩΘΡΟΎ ΚΥΝΌΣ\n$str = mb_convert_case($str, MB_CASE_TITLE, \"UTF-8\");\necho $str; \/\/ Prints Τάχιστη Αλώπηξ Βαφήσ Ψημένη Γη, Δρασκελίζει Υπέρ Νωθρού Κυνόσ","output":null}],"mb_convert_encoding":[{"title":"mb_convert_encoding() example","source":"\/* Convert internal character encoding to SJIS *\/\n$str = mb_convert_encoding($str, \"SJIS\");\n\n\/* Convert EUC-JP to UTF-7 *\/\n$str = mb_convert_encoding($str, \"UTF-7\", \"EUC-JP\");\n\n\/* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE *\/\n$str = mb_convert_encoding($str, \"UCS-2LE\", \"JIS, eucjp-win, sjis-win\");\n\n\/* \"auto\" is expanded to \"ASCII,JIS,UTF-8,EUC-JP,SJIS\" *\/\n$str = mb_convert_encoding($str, \"EUC-JP\", \"auto\");","output":null}],"mb_convert_kana":[{"title":"mb_convert_kana() example","source":"\/* Convert all \"kana\" to \"zen-kaku\" \"kata-kana\" *\/\n$str = mb_convert_kana($str, \"KVC\");\n\n\/* Convert \"han-kaku\" \"kata-kana\" to \"zen-kaku\" \"kata-kana\" \n   and \"zen-kaku\" alpha-numeric to \"han-kaku\" *\/\n$str = mb_convert_kana($str, \"KVa\");","output":null}],"mb_convert_variables":[{"title":"mb_convert_variables() example","source":"\/* Convert variables $post1, $post2 to internal encoding *\/\n$interenc = mb_internal_encoding();\n$inputenc = mb_convert_variables($interenc, \"ASCII,UTF-8,SJIS-win\", $post1, $post2);","output":null}],"mb_decode_numericentity":[{"title":"convmap example","source":"$convmap = array (\n   int start_code1, int end_code1, int offset1, int mask1,\n   int start_code2, int end_code2, int offset2, int mask2,\n   ........\n   int start_codeN, int end_codeN, int offsetN, int maskN );\n\/\/ Specify Unicode value for start_codeN and end_codeN\n\/\/ Add offsetN to value and take bit-wise 'AND' with maskN, \n\/\/ then convert value to numeric string reference.","output":null},{"title":"convmap example escapes JavaScript string","source":"function escape_javascript_string($str) {\n  $map = [\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,0,0, \/\/ 49\n          0,0,0,0,0,0,0,0,1,1,\n          1,1,1,1,1,0,0,0,0,0,\n          0,0,0,0,0,0,0,0,0,0,\n          0,0,0,0,0,0,0,0,0,0,\n          0,1,1,1,1,1,1,0,0,0, \/\/ 99\n          0,0,0,0,0,0,0,0,0,0,\n          0,0,0,0,0,0,0,0,0,0,\n          0,0,0,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1, \/\/ 149\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1, \/\/ 199\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1,\n          1,1,1,1,1,1,1,1,1,1, \/\/ 249\n          1,1,1,1,1,1,1, \/\/ 255\n          ];\n  \/\/ Char encoding is UTF-8\n  $mblen = mb_strlen($str, 'UTF-8');\n  $utf32 = bin2hex(mb_convert_encoding($str, 'UTF-32', 'UTF-8'));\n  for ($i=0, $encoded=''; $i < $mblen; $i++) {\n      $u = substr($utf32, $i*8, 8);\n      $v = base_convert($u, 16, 10);\n      if ($v < 256 && $map[$v]) {\n        $encoded .= '\\\\x'.substr($u, 6,2);\n      } else if ($v == 2028) {\n        $encoded .= '\\\\u2028';\n      } else if ($v == 2029) {\n        $encoded .= '\\\\u2029';\n      } else {\n        $encoded .= mb_convert_encoding(hex2bin($u), 'UTF-8', 'UTF-32');\n      }\n   }\n   return $encoded;\n}\n \n\/\/ Test data\n$convmap = [ 0x0, 0xffff, 0, 0xffff ];\n$msg = '';\nfor ($i=0; $i < 1000; $i++) {\n  \/\/ chr() cannot generate correct UTF-8 data larger value than 128, use mb_decode_numericentity().\n  $msg .= mb_decode_numericentity('&#'.$i.';', $convmap, 'UTF-8');\n}\n \n\/\/ var_dump($msg);\nvar_dump(escape_javascript_string($msg));","output":null}],"mb_detect_encoding":[{"title":"mb_detect_encoding() example","source":"\/* Detect character encoding with current detect_order *\/\necho mb_detect_encoding($str);\n\n\/* \"auto\" is expanded according to mbstring.language *\/\necho mb_detect_encoding($str, \"auto\");\n\n\/* Specify encoding_list character encoding by comma separated list *\/\necho mb_detect_encoding($str, \"JIS, eucjp-win, sjis-win\");\n\n\/* Use array to specify encoding_list  *\/\n$ary[] = \"ASCII\";\n$ary[] = \"JIS\";\n$ary[] = \"EUC-JP\";\necho mb_detect_encoding($str, $ary);","output":null}],"mb_detect_order":[{"title":"mb_detect_order() examples","source":"\/* Set detection order by enumerated list *\/\nmb_detect_order(\"eucjp-win,sjis-win,UTF-8\");\n\n\/* Set detection order by array *\/\n$ary[] = \"ASCII\";\n$ary[] = \"JIS\";\n$ary[] = \"EUC-JP\";\nmb_detect_order($ary);\n\n\/* Display current detection order *\/\necho implode(\", \", mb_detect_order());","output":null},{"title":"Example showing useless detect orders","source":"Set\/Get character encoding detection order\n mb_detect_encoding\n mb_encode_mimeheader\n Multibyte String Functions\n PHP Manual\n\n \n  mb_detect_order\n  (PHP 4 >= 4.0.6, PHP 5, PHP 7)mb_detect_order — Set\/Get character encoding detection order\n\n \n   \n \n  Description\n  \n   mixed mb_detect_order\n    ([ mixed $encoding_list = mb_detect_order()\n  ] )\n\n  \n   Sets the automatic character\n   encoding detection order to encoding_list.\n  \n \n\n\n \n  Parameters\n  \n   \nencoding_list\n\n     \n\n      \n       encoding_list is an array or \n       comma separated list of character encoding. See supported encodings.\n      \n      \n       If encoding_list is omitted, it returns\n       the current character encoding detection order as array.\n      \n      \n       This setting affects mb_detect_encoding() and\n       mb_send_mail().\n      \n      \n       mbstring currently implements the following\n       encoding detection filters. If there is an invalid byte sequence\n       for the following encodings, encoding detection will fail.\n      \n      \n       UTF-8, UTF-7,\n       ASCII,\n       EUC-JP,SJIS,\n       eucJP-win, SJIS-win,\n       JIS, ISO-2022-JP \n      \n      \n       For ISO-8859-*, mbstring\n       always detects as ISO-8859-*.\n      \n      \n       For UTF-16, UTF-32,\n       UCS2 and UCS4, encoding\n       detection will fail always.\n      \n     \n\n    \n   \n\n \n \n  Return Values\n  \n   When setting the encoding detection order, TRUE is returned on success or FALSE on failure.\n  \n  \n   When getting the encoding detection order, an ordered array of the encodings is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 mb_detect_order() examples\n    \n\n<?php\n\/* Set detection order by enumerated list *\/\nmb_detect_order(\"eucjp-win,sjis-win,UTF-8\");\n\n\/* Set detection order by array *\/\n$ary[] = \"ASCII\";\n$ary[] = \"JIS\";\n$ary[] = \"EUC-JP\";\nmb_detect_order($ary);\n\n\/* Display current detection order *\/\necho implode(\", \", mb_detect_order());\n?>\n\n\n    \n\n   \n  \n  \n   \n    Example #2 Example showing useless detect orders\n    \n\n; Always detect as ISO-8859-1\ndetect_order = ISO-8859-1, UTF-8\n\n; Always detect as UTF-8, since ASCII\/UTF-7 values are \n; valid for UTF-8\ndetect_order = UTF-8, ASCII, UTF-7\n\n    \n\n   \n  \n \n\n\n \n  See Also\n  \n   mb_internal_encoding() - Set\/Get internal character encoding\n    mb_http_input() - Detect HTTP input character encoding\n    mb_http_output() - Set\/Get HTTP output character encoding\n    mb_send_mail() - Send encoded mail\n   \n\n\n\n mb_detect_encoding\n mb_encode_mimeheader\n Multibyte String Functions\n PHP Manual","output":"; Always detect as ISO-8859-1\ndetect_order = ISO-8859-1, UTF-8\n\n; Always detect as UTF-8, since ASCII\/UTF-7 values are \n; valid for UTF-8\ndetect_order = UTF-8, ASCII, UTF-7"}],"mb_encode_mimeheader":[{"title":"mb_encode_mimeheader() example","source":"$name = \"\"; \/\/ kanji\n$mbox = \"kru\";\n$doma = \"gtinn.mon\";\n$addr = mb_encode_mimeheader($name, \"UTF-7\", \"Q\") . \" <\" . $mbox . \"@\" . $doma . \">\";\necho $addr;","output":null}],"mb_encode_numericentity":[{"title":"convmap example","source":"$convmap = array (\n int start_code1, int end_code1, int offset1, int mask1,\n int start_code2, int end_code2, int offset2, int mask2,\n ........\n int start_codeN, int end_codeN, int offsetN, int maskN );\n\/\/ Specify Unicode value for start_codeN and end_codeN\n\/\/ Add offsetN to value and take bit-wise 'AND' with maskN, then\n\/\/ it converts value to numeric string reference.","output":null},{"title":"mb_encode_numericentity() example","source":"\/* Convert Left side of ISO-8859-1 to HTML numeric character reference *\/\n$convmap = array(0x80, 0xff, 0, 0xff);\n$str = mb_encode_numericentity($str, $convmap, \"ISO-8859-1\");\n\n\/* Convert user defined SJIS-win code in block 95-104 to numeric\n   string reference *\/\n$convmap = array(\n       0xe000, 0xe03e, 0x1040, 0xffff,\n       0xe03f, 0xe0bb, 0x1041, 0xffff,\n       0xe0bc, 0xe0fa, 0x1084, 0xffff,\n       0xe0fb, 0xe177, 0x1085, 0xffff,\n       0xe178, 0xe1b6, 0x10c8, 0xffff,\n       0xe1b7, 0xe233, 0x10c9, 0xffff,\n       0xe234, 0xe272, 0x110c, 0xffff,\n       0xe273, 0xe2ef, 0x110d, 0xffff,\n       0xe2f0, 0xe32e, 0x1150, 0xffff,\n       0xe32f, 0xe3ab, 0x1151, 0xffff );\n$str = mb_encode_numericentity($str, $convmap, \"sjis-win\");","output":null}],"mb_encoding_aliases":[{"title":"mb_encoding_aliases() example","source":"$encoding        = 'ASCII';\n$known_encodings = mb_list_encodings();\n\nif (in_array($encoding, $known_encodings)) {\n\n    $aliases = mb_encoding_aliases($encoding);\n    print_r($aliases);\n\n} else {\n\n    echo \"Unknown ($encoding) encoding.\\n\";\n\n}","output":"Array\n(\n    [0] => ANSI_X3.4-1968\n    [1] => iso-ir-6\n    [2] => ANSI_X3.4-1986\n    [3] => ISO_646.irv:1991\n    [4] => US-ASCII\n    [5] => ISO646-US\n    [6] => us\n    [7] => IBM367\n    [8] => cp367\n    [9] => csASCII\n)"}],"mb_ereg_replace_callback":[{"title":"mb_ereg_replace_callback() example","source":"\/\/ this text was used in 2002\n\/\/ we want to get this up to date for 2003\n$text = \"April fools day is 04\/01\/2002\\n\";\n$text.= \"Last christmas was 12\/24\/2001\\n\";\n\/\/ the callback function\nfunction next_year($matches)\n{\n  \/\/ as usual: $matches[0] is the complete match\n  \/\/ $matches[1] the match for the first subpattern\n  \/\/ enclosed in '(...)' and so on\n  return $matches[1].($matches[2]+1);\n}\necho mb_ereg_replace_callback(\n            \"(\\d{2}\/\\d{2}\/)(\\d{4})\",\n            \"next_year\",\n            $text);","output":"April fools day is 04\/01\/2003\nLast christmas was 12\/24\/2002"},{"title":"mb_ereg_replace_callback() using anonymous function supported in PHP 5.3.0 or later","source":"\/\/ this text was used in 2002\n\/\/ we want to get this up to date for 2003\n$text = \"April fools day is 04\/01\/2002\\n\";\n$text.= \"Last christmas was 12\/24\/2001\\n\";\n\necho mb_ereg_replace_callback(\n            \"(\\d{2}\/\\d{2}\/)(\\d{4})\",\n            function ($matches) {\n               return $matches[1].($matches[2]+1);\n            },\n            $text);","output":null}],"mb_internal_encoding":[{"title":"mb_internal_encoding() example","source":"\/* Set internal character encoding to UTF-8 *\/\nmb_internal_encoding(\"UTF-8\");\n\n\/* Display current internal character encoding *\/\necho mb_internal_encoding();","output":null}],"mb_list_encodings":[{"title":"mb_list_encodings() example","source":"print_r(mb_list_encodings());","output":"Array\n(\n    [0] => pass\n    [1] => auto\n    [2] => wchar\n    [3] => byte2be\n    [4] => byte2le\n    [5] => byte4be\n    [6] => byte4le\n    [7] => BASE64\n    [8] => UUENCODE\n    [9] => HTML-ENTITIES\n    [10] => Quoted-Printable\n    [11] => 7bit\n    [12] => 8bit\n    [13] => UCS-4\n    [14] => UCS-4BE\n    [15] => UCS-4LE\n    [16] => UCS-2\n    [17] => UCS-2BE\n    [18] => UCS-2LE\n    [19] => UTF-32\n    [20] => UTF-32BE\n    [21] => UTF-32LE\n    [22] => UTF-16\n    [23] => UTF-16BE\n    [24] => UTF-16LE\n    [25] => UTF-8\n    [26] => UTF-7\n    [27] => UTF7-IMAP\n    [28] => ASCII\n    [29] => EUC-JP\n    [30] => SJIS\n    [31] => eucJP-win\n    [32] => SJIS-win\n    [33] => JIS\n    [34] => ISO-2022-JP\n    [35] => Windows-1252\n    [36] => ISO-8859-1\n    [37] => ISO-8859-2\n    [38] => ISO-8859-3\n    [39] => ISO-8859-4\n    [40] => ISO-8859-5\n    [41] => ISO-8859-6\n    [42] => ISO-8859-7\n    [43] => ISO-8859-8\n    [44] => ISO-8859-9\n    [45] => ISO-8859-10\n    [46] => ISO-8859-13\n    [47] => ISO-8859-14\n    [48] => ISO-8859-15\n    [49] => EUC-CN\n    [50] => CP936\n    [51] => HZ\n    [52] => EUC-TW\n    [53] => BIG-5\n    [54] => EUC-KR\n    [55] => UHC\n    [56] => ISO-2022-KR\n    [57] => Windows-1251\n    [58] => CP866\n    [59] => KOI8-R\n)"}],"mb_output_handler":[{"title":"mb_output_handler() example","source":"mb_http_output(\"UTF-8\");\nob_start(\"mb_output_handler\");","output":null}],"mb_preferred_mime_name":[{"title":"mb_preferred_mime_name() example","source":"$outputenc = \"sjis-win\";\nmb_http_output($outputenc);\nob_start(\"mb_output_handler\");\nheader(\"Content-Type: text\/html; charset=\" . mb_preferred_mime_name($outputenc));","output":null}],"mb_strimwidth":[{"title":"mb_strimwidth() example","source":"echo mb_strimwidth(\"Hello World\", 0, 10, \"...\");\n\/\/ output: \"Hello W...\"","output":null}],"mb_strtolower":[{"title":"mb_strtolower() example","source":"$str = \"Mary Had A Little Lamb and She LOVED It So\";\n$str = mb_strtolower($str);\necho $str; \/\/ Prints mary had a little lamb and she loved it so","output":null},{"title":"mb_strtolower() example with non-Latin UTF-8 text","source":"$str = \"Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\";\n$str = mb_strtolower($str, 'UTF-8');\necho $str; \/\/ Prints τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός","output":null}],"mb_strtoupper":[{"title":"mb_strtoupper() example","source":"$str = \"Mary Had A Little Lamb and She LOVED It So\";\n$str = mb_strtoupper($str);\necho $str; \/\/ Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO","output":null},{"title":"mb_strtoupper() example with non-Latin UTF-8 text","source":"$str = \"Τάχιστη αλώπηξ βαφής ψημένη γη, δρασκελίζει υπέρ νωθρού κυνός\";\n$str = mb_strtoupper($str, 'UTF-8');\necho $str; \/\/ Prints ΤΆΧΙΣΤΗ ΑΛΏΠΗΞ ΒΑΦΉΣ ΨΗΜΈΝΗ ΓΗ, ΔΡΑΣΚΕΛΊΖΕΙ ΥΠΈΡ ΝΩΘΡΟΎ ΚΥΝΌΣ","output":null}],"mb_substitute_character":[{"title":"mb_substitute_character() example","source":"\/* Set with Unicode U+3013 (GETA MARK) *\/\nmb_substitute_character(0x3013);\n\n\/* Set hex format *\/\nmb_substitute_character(\"long\");\n\n\/* Display current setting *\/\necho mb_substitute_character();","output":null}],"mb_substr_count":[{"title":"mb_substr_count() example","source":"echo mb_substr_count(\"This is a test\", \"is\"); \/\/ prints out 2","output":null}],"mcrypt_create_iv":[{"title":"mcrypt_create_iv() Example","source":"$size = mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB);\n    $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);","output":null}],"mcrypt_enc_get_algorithms_name":[{"title":"mcrypt_enc_get_algorithms_name() example","source":"$td = mcrypt_module_open(MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, '');\necho mcrypt_enc_get_algorithms_name($td). \"\\n\";\n\n$td = mcrypt_module_open('cast-256', '', MCRYPT_MODE_CFB, '');\necho mcrypt_enc_get_algorithms_name($td). \"\\n\";","output":"CAST-256\nCAST-256"}],"mcrypt_enc_get_modes_name":[{"title":"mcrypt_enc_get_modes_name() example","source":"$td = mcrypt_module_open (MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, '');\necho mcrypt_enc_get_modes_name($td). \"\\n\";\n\n$td = mcrypt_module_open ('cast-256', '', 'ecb', '');\necho mcrypt_enc_get_modes_name($td). \"\\n\";","output":"CFB\nECB"}],"mcrypt_enc_get_supported_key_sizes":[{"title":"mcrypt_enc_get_supported_key_sizes() example","source":"$td = mcrypt_module_open('rijndael-256', '', 'ecb', '');\n    var_dump(mcrypt_enc_get_supported_key_sizes($td));","output":"array(3) {\n  [0]=>\n  int(16)\n  [1]=>\n  int(24)\n  [2]=>\n  int(32)\n}"}],"mcrypt_encrypt":[{"title":"mcrypt_encrypt() Example","source":"# --- ENCRYPTION ---\n\n    # the key should be random binary, use scrypt, bcrypt or PBKDF2 to\n    # convert a string into a key\n    # key is specified using hexadecimal\n    $key = pack('H*', \"bcb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3\");\n    \n    # show key size use either 16, 24 or 32 byte keys for AES-128, 192\n    # and 256 respectively\n    $key_size =  strlen($key);\n    echo \"Key size: \" . $key_size . \"\\n\";\n    \n    $plaintext = \"This string was AES-256 \/ CBC \/ ZeroBytePadding encrypted.\";\n\n    # create a random IV to use with CBC encoding\n    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);\n    \n    # creates a cipher text compatible with AES (Rijndael block size = 128)\n    # to keep the text confidential \n    # only suitable for encoded input that never ends with value 00h\n    # (because of default zero padding)\n    $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,\n                                 $plaintext, MCRYPT_MODE_CBC, $iv);\n\n    # prepend the IV for it to be available for decryption\n    $ciphertext = $iv . $ciphertext;\n    \n    # encode the resulting cipher text so it can be represented by a string\n    $ciphertext_base64 = base64_encode($ciphertext);\n\n    echo  $ciphertext_base64 . \"\\n\";\n\n    # === WARNING ===\n\n    # Resulting cipher text has no integrity or authenticity added\n    # and is not protected against padding oracle attacks.\n    \n    # --- DECRYPTION ---\n    \n    $ciphertext_dec = base64_decode($ciphertext_base64);\n    \n    # retrieves the IV, iv_size should be created using mcrypt_get_iv_size()\n    $iv_dec = substr($ciphertext_dec, 0, $iv_size);\n    \n    # retrieves the cipher text (everything except the $iv_size in the front)\n    $ciphertext_dec = substr($ciphertext_dec, $iv_size);\n\n    # may remove 00h valued characters from end of plain text\n    $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,\n                                    $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);\n    \n    echo  $plaintext_dec . \"\\n\";","output":"Key size: 32\nENJW8mS2KaJoNB5E5CoSAAu0xARgsR1bdzFWpEn+poYw45q+73az5kYi4j+0haevext1dGrcW8Qi59txfCBV8BBj3bzRP3dFCp3CPQSJ8eU=\nThis string was AES-256 \/ CBC \/ ZeroBytePadding encrypted."}],"mcrypt_get_iv_size":[{"title":"mcrypt_get_iv_size() Example","source":"echo mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB) . \"\\n\";\n\n    echo mcrypt_get_iv_size('des', 'ecb') . \"\\n\";","output":null}],"mcrypt_list_algorithms":[{"title":"mcrypt_list_algorithms() Example","source":"$algorithms = mcrypt_list_algorithms(\"\/usr\/local\/lib\/libmcrypt\");\n\n    foreach ($algorithms as $cipher) {\n        echo \"$cipher<br \/>\\n\";\n    }","output":null}],"mcrypt_list_modes":[{"title":"mcrypt_list_modes() Example","source":"$modes = mcrypt_list_modes();\n\n    foreach ($modes as $mode) {\n        echo \"$mode <br \/>\\n\";\n    }","output":null}],"mcrypt_module_open":[{"title":"mcrypt_module_open() Examples","source":"$td = mcrypt_module_open(MCRYPT_DES, '',\n        MCRYPT_MODE_ECB, '\/usr\/lib\/mcrypt-modes');\n\n    $td = mcrypt_module_open('rijndael-256', '', 'ofb', '');","output":null},{"title":"Using mcrypt_module_open() in encryption","source":"\/* Open the cipher *\/\n    $td = mcrypt_module_open('rijndael-256', '', 'ofb', '');\n\n    \/* Create the IV and determine the keysize length, use MCRYPT_RAND\n     * on Windows instead *\/\n    $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_DEV_RANDOM);\n    $ks = mcrypt_enc_get_key_size($td);\n\n    \/* Create key *\/\n    $key = substr(md5('very secret key'), 0, $ks);\n\n    \/* Intialize encryption *\/\n    mcrypt_generic_init($td, $key, $iv);\n\n    \/* Encrypt data *\/\n    $encrypted = mcrypt_generic($td, 'This is very important data');\n\n    \/* Terminate encryption handler *\/\n    mcrypt_generic_deinit($td);\n\n    \/* Initialize encryption module for decryption *\/\n    mcrypt_generic_init($td, $key, $iv);\n\n    \/* Decrypt encrypted string *\/\n    $decrypted = mdecrypt_generic($td, $encrypted);\n\n    \/* Terminate decryption handle and close module *\/\n    mcrypt_generic_deinit($td);\n    mcrypt_module_close($td);\n\n    \/* Show string *\/\n    echo trim($decrypted) . \"\\n\";","output":null}],"mcrypt_module_self_test":[{"title":"mcrypt_module_self_test() example","source":"var_dump(mcrypt_module_self_test(MCRYPT_RIJNDAEL_128)) . \"\\n\";\nvar_dump(mcrypt_module_self_test(MCRYPT_BOGUS_CYPHER));","output":"bool(true)\nbool(false)"}],"md5_file":[{"title":"Usage example of md5_file()","source":"$file = 'php-5.3.0alpha2-Win32-VC9-x64.zip';\n\necho 'MD5 file hash of ' . $file . ': ' . md5_file($file);","output":null}],"md5":[{"title":"A md5() example","source":"$str = 'apple';\n\nif (md5($str) === '1f3870be274f6c49b3e31a0c6728957f') {\n    echo \"Would you like a green or red apple?\";\n}","output":null}],"mdecrypt_generic":[{"title":"mdecrypt_generic() Example","source":"\/* Data *\/\n    $key = 'this is a very long key, even too long for the cipher';\n    $plain_text = 'very important data';\n\n    \/* Open module, and create IV *\/\n    $td = mcrypt_module_open('des', '', 'ecb', '');\n    $key = substr($key, 0, mcrypt_enc_get_key_size($td));\n    $iv_size = mcrypt_enc_get_iv_size($td);\n    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);\n\n    \/* Initialize encryption handle *\/\n    if (mcrypt_generic_init($td, $key, $iv) != -1) {\n\n        \/* Encrypt data *\/\n        $c_t = mcrypt_generic($td, $plain_text);\n        mcrypt_generic_deinit($td);\n\n        \/* Reinitialize buffers for decryption *\/\n        mcrypt_generic_init($td, $key, $iv);\n        $p_t = mdecrypt_generic($td, $c_t);\n\n        \/* Clean up *\/\n        mcrypt_generic_deinit($td);\n        mcrypt_module_close($td);\n    }\n\n    if (strncmp($p_t, $plain_text, strlen($plain_text)) == 0) {\n        echo \"ok\\n\";\n    } else {\n        echo \"error\\n\";\n    }","output":null}],"memory_get_usage":[{"title":"A memory_get_usage() example","source":"\/\/ This is only an example, the numbers below will\n\/\/ differ depending on your system\n\necho memory_get_usage() . \"\\n\"; \/\/ 36640\n\n$a = str_repeat(\"Hello\", 4242);\n\necho memory_get_usage() . \"\\n\"; \/\/ 57960\n\nunset($a);\n\necho memory_get_usage() . \"\\n\"; \/\/ 36744","output":null}],"metaphone":[{"title":"metaphone() basic example","source":"var_dump(metaphone('programming'));\nvar_dump(metaphone('programmer'));","output":"string(7) \"PRKRMNK\"\nstring(6) \"PRKRMR\""},{"title":"Using the phonemes parameter","source":"var_dump(metaphone('programming', 5));\nvar_dump(metaphone('programmer', 5));","output":"string(5) \"PRKRM\"\nstring(5) \"PRKRM\""}],"method_exists":[{"title":"method_exists() example","source":"$directory = new Directory('.');\nvar_dump(method_exists($directory,'read'));","output":"bool(true)"},{"title":"Static method_exists() example","source":"var_dump(method_exists('Directory','read'));","output":"bool(true)"}],"mhash_count":[{"title":"Traversing all hashes","source":"$nr = mhash_count();\n\nfor ($i = 0; $i <= $nr; $i++) {\n    echo sprintf(\"The blocksize of %s is %d\\n\",\n        mhash_get_hash_name($i),\n        mhash_get_block_size($i));\n}","output":null}],"mhash_get_block_size":[{"title":"mhash_get_block_size() Example","source":"echo mhash_get_block_size(MHASH_MD5); \/\/ 16","output":null}],"mhash_get_hash_name":[{"title":"mhash_get_hash_name() Example","source":"echo mhash_get_hash_name(MHASH_MD5); \/\/ MD5","output":null}],"microtime":[{"title":"Timing script execution with microtime()","source":"\/**\n * Simple function to replicate PHP 5 behaviour\n *\/\nfunction microtime_float()\n{\n    list($usec, $sec) = explode(\" \", microtime());\n    return ((float)$usec + (float)$sec);\n}\n\n$time_start = microtime_float();\n\n\/\/ Sleep for a while\nusleep(100);\n\n$time_end = microtime_float();\n$time = $time_end - $time_start;\n\necho \"Did nothing in $time seconds\\n\";","output":null},{"title":"Timing script execution in PHP 5","source":"$time_start = microtime(true);\n\n\/\/ Sleep for a while\nusleep(100);\n\n$time_end = microtime(true);\n$time = $time_end - $time_start;\n\necho \"Did nothing in $time seconds\\n\";","output":null},{"title":"microtime() and REQUEST_TIME_FLOAT (as of PHP 5.4.0)","source":"\/\/ Randomize sleeping time\nusleep(mt_rand(100, 10000));\n\n\/\/ As of PHP 5.4.0, REQUEST_TIME_FLOAT is available in the $_SERVER superglobal array.\n\/\/ It contains the timestamp of the start of the request with microsecond precision.\n$time = microtime(true) - $_SERVER[\"REQUEST_TIME_FLOAT\"];\n\necho \"Did nothing in $time seconds\\n\";","output":null}],"mime_content_type":[{"title":"mime_content_type() Example","source":"echo mime_content_type('php.gif') . \"\\n\";\necho mime_content_type('test.php');","output":"image\/gif\ntext\/plain"}],"ming_useswfversion":[{"title":"ming_useswfversion() example","source":"$movie = new SWFMovie();\nming_useswfversion(4); \/\/ Flash 4","output":null}],"mkdir":[{"title":"mkdir() example","source":"mkdir(\"\/path\/to\/my\/dir\", 0700);","output":null},{"title":"mkdir() using the recursive parameter","source":"\/\/ Desired folder structure\n$structure = '.\/depth1\/depth2\/depth3\/';\n\n\/\/ To create the nested structure, the $recursive parameter \n\/\/ to mkdir() must be specified.\n\nif (!mkdir($structure, 0777, true)) {\n    die('Failed to create folders...');\n}\n\n\/\/ ...","output":null}],"mktime":[{"title":"mktime() basic example","source":"\/\/ Set the default timezone to use. Available as of PHP 5.1\ndate_default_timezone_set('UTC');\n\n\/\/ Prints: July 1, 2000 is on a Saturday\necho \"July 1, 2000 is on a \" . date(\"l\", mktime(0, 0, 0, 7, 1, 2000));\n\n\/\/ Prints something like: 2006-04-05T01:02:03+00:00\necho date('c', mktime(1, 2, 3, 4, 5, 2006));","output":null},{"title":"mktime() example","source":"echo date(\"M-d-Y\", mktime(0, 0, 0, 12, 32, 1997));\necho date(\"M-d-Y\", mktime(0, 0, 0, 13, 1, 1997));\necho date(\"M-d-Y\", mktime(0, 0, 0, 1, 1, 1998));\necho date(\"M-d-Y\", mktime(0, 0, 0, 1, 1, 98));","output":null},{"title":"Last day of a month","source":"$lastday = mktime(0, 0, 0, 3, 0, 2000);\necho strftime(\"Last day in Feb 2000 is: %d\", $lastday);\n$lastday = mktime(0, 0, 0, 4, -31, 2000);\necho strftime(\"Last day in Feb 2000 is: %d\", $lastday);","output":null}],"money_format":[{"title":"money_format() Example","source":"$number = 1234.56;\n\n\/\/ let's print the international format for the en_US locale\nsetlocale(LC_MONETARY, 'en_US');\necho money_format('%i', $number) . \"\\n\";\n\/\/ USD 1,234.56\n\n\/\/ Italian national format with 2 decimals`\nsetlocale(LC_MONETARY, 'it_IT');\necho money_format('%.2n', $number) . \"\\n\";\n\/\/ Eu 1.234,56\n\n\/\/ Using a negative number\n$number = -1234.5672;\n\n\/\/ US national format, using () for negative numbers\n\/\/ and 10 digits for left precision\nsetlocale(LC_MONETARY, 'en_US');\necho money_format('%(#10n', $number) . \"\\n\";\n\/\/ ($        1,234.57)\n\n\/\/ Similar format as above, adding the use of 2 digits of right\n\/\/ precision and '*' as a fill character\necho money_format('%=*(#10.2n', $number) . \"\\n\";\n\/\/ ($********1,234.57)\n\n\/\/ Let's justify to the left, with 14 positions of width, 8 digits of\n\/\/ left precision, 2 of right precision, withouth grouping character\n\/\/ and using the international format for the de_DE locale.\nsetlocale(LC_MONETARY, 'de_DE');\necho money_format('%=*^-14#8.2i', 1234.56) . \"\\n\";\n\/\/ Eu 1234,56****\n\n\/\/ Let's add some blurb before and after the conversion specification\nsetlocale(LC_MONETARY, 'en_GB');\n$fmt = 'The final value is %i (after a 10%% discount)';\necho money_format($fmt, 1234.56) . \"\\n\";\n\/\/ The final value is  GBP 1,234.56 (after a 10% discount)","output":null}],"mongodb\\bson\\fromjson":[{"title":"MongoDB\\BSON\\fromJSON() example","source":"$json = '{ \"_id\": { \"$oid\": \"563143b280d2387c91807965\" } }';\n$bson = MongoDB\\BSON\\fromJSON($json);\n$value = MongoDB\\BSON\\toPHP($bson);\nvar_dump($value);","output":"object(stdClass)#2 (1) {\n  [\"_id\"]=>\n  object(MongoDB\\BSON\\ObjectID)#1 (1) {\n    [\"oid\"]=>\n    string(24) \"563143b280d2387c91807965\"\n  }\n}"}],"mongodb\\bson\\fromphp":[{"title":"MongoDB\\BSON\\fromPHP() example","source":"$bson = MongoDB\\BSON\\fromPHP(['foo' => 1]);\necho bin2hex($bson), \"\\n\";","output":"0e00000010666f6f000100000000cat"}],"mongodb\\bson\\tojson":[{"title":"MongoDB\\BSON\\toJSON() example","source":"$document = ['_id' => new MongoDB\\BSON\\ObjectId('56315a7c6118fd1b920270b1')];\n$bson = MongoDB\\BSON\\fromPHP($document);\necho MongoDB\\BSON\\toJSON($bson), \"\\n\";","output":"{ \"_id\" : { \"$oid\" : \"56315a7c6118fd1b920270b1\" } }"}],"mongodb\\bson\\tophp":[{"title":"MongoDB\\BSON\\toPHP() example","source":"$bson = hex2bin('0e00000010666f6f000100000000');\n$value = MongoDB\\BSON\\toPHP($bson);\nvar_dump($value);","output":"object(stdClass)#1 (1) {\n  [\"foo\"]=>\n  int(1)\n}"}],"move_uploaded_file":[{"title":"Uploading multiple files","source":"$uploads_dir = '\/uploads';\nforeach ($_FILES[\"pictures\"][\"error\"] as $key => $error) {\n    if ($error == UPLOAD_ERR_OK) {\n        $tmp_name = $_FILES[\"pictures\"][\"tmp_name\"][$key];\n        \/\/ basename() may prevent filesystem traversal attacks;\n        \/\/ further validation\/sanitation of the filename may be appropriate\n        $name = basename($_FILES[\"pictures\"][\"name\"][$key]);\n        move_uploaded_file($tmp_name, \"$uploads_dir\/$name\");\n    }\n}","output":null}],"mqseries_back":[{"title":"mqseries_back() example","source":"mqseries_back($conn, $comp_code, $reason);\n\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n    }","output":null}],"mqseries_begin":[{"title":"mqseries_begin() example","source":"$mqbo = array();\n    mqseries_begin( $conn, \n                    $mqbo,\n                    $comp_code,\n                    $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        \/* reason code 2121 is a warning for more information see MQSeries reference manual.*\/\n        if ($reason !== 2121) {\n            printf(\"CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n        }\n    }","output":null}],"mqseries_close":[{"title":"mqseries_close() example","source":"mqseries_close($conn, $obj, MQSERIES_MQCO_NONE, $comp_code, $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"close CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n    }","output":null}],"mqseries_cmit":[{"title":"mqseries_cmit() example","source":"mqseries_cmit($conn, $comp_code, $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"cmit CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n    }","output":null}],"mqseries_conn":[{"title":"mqseries_conn() example","source":"mqseries_conn('WMQ1', $conn, $comp_code, $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"conn CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n        exit;\n    }","output":null}],"mqseries_connx":[{"title":"mqseries_connx() example","source":"$mqcno = array(\n        'Version' => MQSERIES_MQCNO_VERSION_2,\n        'Options' => MQSERIES_MQCNO_STANDARD_BINDING,\n        'MQCD' => array('ChannelName' => 'MQNX9420.CLIENT',\n        'ConnectionName' => 'localhost',\n        'TransportType' => MQSERIES_MQXPT_TCP)\n    );\n\n    mqseries_connx('MQNX9420', $mqcno, $conn, $comp_code,$reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"Connx CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n        exit;\n    }","output":null},{"title":"mqseries_connx() example using SSL connection & OCSP Responder URL","source":"$mqcno = array(\n        'Version' => 4, \/\/MQCNO_VERSION_4\n        'Options' => MQSERIES_MQCNO_STANDARD_BINDING,\n        'MQCD' => array(\n            'Version' => 7, \/\/MQCD_VERSION_7\n            'ConnectionName' => 'localhost', \n            'TransportType' => MQSERIES_MQXPT_TCP, \n            'ChannelName' => 'CONNECTIONCHANNEL', \n            'SSLCipherSpec' => 'NULL_SHA'\n        ), \n        'MQSCO' => array(\n            'KeyRepository' => '\/var\/mqm\/qmgrs\/QUEUEMGR\/ssl\/key', \/\/Local path where the SSL key repository can be found\n            'MQAIR' => array(\n                'Version' => 2, \/\/MQAIR_VERSION_2\n                'AuthInfoType' => 2, \/\/MQAIT_OCSP \n                'OCSPResponderURL' => 'http:\/\/dummy.OCSP.responder'\n            )\n        )\n    );\n\n    mqseries_connx('QUEUEMGR', $mqcno, $conn, $comp_code,$reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"Connx CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n        exit;\n    }","output":null}],"mqseries_disc":[{"title":"mqseries_disc() example","source":"mqseries_disc($conn, $comp_code, $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"disc CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n    }","output":null}],"mqseries_get":[{"title":"mqseries_get() example","source":"\/\/ open connection to the queue manager\n    mqseries_conn('WMQ1', $conn, $comp_code, $reason);\n\/\/ $conn now hold the reference to the connection to the queue manager.\n\n\/\/ open the connection to the testq queue\n    mqseries_open(\n                $conn,\n                array('ObjectName' => 'TESTQ'),\n                MQSERIES_MQOO_INPUT_AS_Q_DEF | MQSERIES_MQOO_FAIL_IF_QUIESCING | MQSERIES_MQOO_OUTPUT,\n                $obj,\n                $comp_code,\n                $reason);\n\/\/ $obj now holds the reference to the object (TESTQ)\n\n\/\/ setup empty message descriptor.\n    $mdg = array();\n\/\/ setup get message options    \n    $gmo = array('Options' => MQSERIES_MQGMO_FAIL_IF_QUIESCING | MQSERIES_MQGMO_WAIT, 'WaitInterval' => 3000);\n\n\/\/ get the message from the queue    \n    mqseries_get($conn, $obj, $mdg, $gmo, 255, $msg, $data_length, $comp_code, $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"GET CompCode:%d Reason:%d Text:%s<br>\", $comp_code, $reason, mqseries_strerror($reason));\n    }\n    \n\/\/ close the object reference $obj    \n    mqseries_close($conn, $obj, MQSERIES_MQCO_NONE, $comp_code, $reason);\n\n\/\/ disconnect from the queue manager.    \n    mqseries_disc($conn, $comp_code, $reason);","output":null}],"mqseries_inq":[{"title":"mqseries_inq() example","source":"$int_attr = array();\n    $char_attr = \"\";\n    \n    mqseries_inq($conn, $obj, 1, array(MQSERIES_MQCA_Q_MGR_NAME), 0, $int_attr, 48, $char_attr, $comp_code, $reason);\n    \n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"INQ CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n    } else {\n        echo \"INQ QManager name result \".$char_attr.\"<br>\\n\";\n    }","output":null}],"mqseries_open":[{"title":"mqseries_open() example","source":"$mqods = array('ObjectName' => 'TESTQ');\n    mqseries_open(\n                $conn,\n                $mqods,\n                MQSERIES_MQOO_INPUT_AS_Q_DEF | MQSERIES_MQOO_FAIL_IF_QUIESCING | MQSERIES_MQOO_OUTPUT,\n                $obj,\n                $comp_code,\n                $reason);\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"open CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n        exit;\n    }","output":null}],"mqseries_put":[{"title":"mqseries_put() example","source":"\/\/ open connection to the queue manager\n    mqseries_conn('WMQ1', $conn, $comp_code, $reason);\n\/\/ $conn now hold the reference to the connection to the queue manager.\n\n\/\/ open the connectio to the testq queueu\n    mqseries_open(\n                $conn,\n                array('ObjectName' => 'TESTQ'),\n                MQSERIES_MQOO_INPUT_AS_Q_DEF | MQSERIES_MQOO_FAIL_IF_QUIESCING | MQSERIES_MQOO_OUTPUT,\n                $obj,\n                $comp_code,\n                $reason);\n\/\/ $obj now holds the reference to the object (TESTQ)\n\n\/\/ setup the message descriptor array. Check MQSeries reference manuals.\n    $md = array(\n                'Version' => MQSERIES_MQMD_VERSION_1,\n                'Expiry' => MQSERIES_MQEI_UNLIMITED,\n                'Report' => MQSERIES_MQRO_NONE,\n                'MsgType' => MQSERIES_MQMT_DATAGRAM,\n                'Format' => MQSERIES_MQFMT_STRING,\n                'Priority' => 1,\n                'Persistence' => MQSERIES_MQPER_PERSISTENT);\n\n\/\/ setup the put message options.\n    $pmo = array('Options' => MQSERIES_MQPMO_NEW_MSG_ID|MQSERIES_MQPMO_SYNCPOINT);\n    \n\/\/ put the message 'Ping' on the queueu.\n    mqseries_put($conn, $obj, $md, $pmo, 'Ping', $comp_code, $reason);\n\n    if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"put CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n    }\n\n\/\/ close the object reference $obj    \n    mqseries_close($conn, $obj, MQSERIES_MQCO_NONE, $comp_code, $reason);\n\n\/\/ disconnect from the queue manager.    \n    mqseries_disc($conn, $comp_code, $reason);","output":null}],"mqseries_strerror":[{"title":"mqseries_strerror() example","source":"if ($comp_code !== MQSERIES_MQCC_OK) {\n        printf(\"open CompCode:%d Reason:%d Text:%s<br>\\n\", $comp_code, $reason, mqseries_strerror($reason));\n        exit;\n    }","output":"Connx CompCode:2 Reason:2059 Text:Queue manager not available for connection."}],"msql_fetch_array":[{"title":"msql_fetch_array() example","source":"$con = msql_connect();\nif (!$con) {\n    die('Server connection problem: ' . msql_error());\n}\n\nif (!msql_select_db('test', $con)) {\n    die('Database connection problem: ' . msql_error());\n}\n\n$result = msql_query('SELECT id, name FROM people', $con);\nif (!$result) {\n    die('Query execution problem: ' . msql_error());\n}\n\nwhile ($row = msql_fetch_array($result, MSQL_ASSOC)) {\n    echo $row['id'] . ': ' . $row['name'] . \"\\n\";\n}\n\nmsql_free_result($result);","output":null}],"msql_fetch_object":[{"title":"msql_fetch_object() example","source":"$con = msql_connect();\nif (!$con) {\n    die('Server connection problem: ' . msql_error());\n}\n\nif (!msql_select_db('test', $con)) {\n    die('Database connection problem: ' . msql_error());\n}\n\n$result = msql_query('SELECT id, name FROM people', $con);\nif (!$result) {\n    die('Query execution problem: ' . msql_error());\n}\n\nwhile ($row = msql_fetch_object($result, MSQL_ASSOC)) {\n    echo $row->id . ': ' . $row->name . \"\\n\";\n}\n\nmsql_free_result($result);","output":null}],"msql_fetch_row":[{"title":"msql_fetch_row() example","source":"$con = msql_connect();\nif (!$con) {\n    die('Server connection problem: ' . msql_error());\n}\n\nif (!msql_select_db('test', $con)) {\n    die('Database connection problem: ' . msql_error());\n}\n\n$result = msql_query('SELECT id, name FROM people', $con);\nif (!$result) {\n    die('Query execution problem: ' . msql_error());\n}\n\nwhile ($row = msql_fetch_row($result)) {\n    echo $row[0] . ': ' . $row[1] . \"\\n\";\n}\n\nmsql_free_result($result);","output":null}],"mssql_bind":[{"title":"mssql_bind() example","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Create a new stored prodecure\n$stmt = mssql_init('NewUserRecord');\n\n\/\/ Bind the field names\nmssql_bind($stmt, '@username',  'Kalle',  SQLVARCHAR,  false,  false,  60);\nmssql_bind($stmt, '@name',      'Kalle',  SQLVARCHAR,  false,  false,  60);\nmssql_bind($stmt, '@age',       19,       SQLINT1,     false,  false,   3);\n\n\/\/ Execute\nmssql_execute($stmt);\n\n\/\/ Free statement\nmssql_free_statement($stmt);","output":null}],"mssql_close":[{"title":"mssql_close() example","source":"\/\/ Connect to MSSQL\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\n\n\/\/ Do any related operations here\n\n\/\/ Close the link to MSSQL\nmssql_close($link);","output":null}],"mssql_connect":[{"title":"mssql_connect() example","source":"\/\/ Server in the this format: <computer>\\<instance name> or \n\/\/ <server>,<port> when using a non default port number\n$server = 'KALLESPC\\SQLEXPRESS';\n\n\/\/ Connect to MSSQL\n$link = mssql_connect($server, 'sa', 'phpfi');\n\nif (!$link) {\n    die('Something went wrong while connecting to MSSQL');\n}","output":null}],"mssql_data_seek":[{"title":"mssql_data_seek() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link);\n\n\/\/ Select all people\n$result = mssql_query('SELECT [name], [age] FROM [persons] WHERE [age] >= 13');\n\nif (!$result) {\n    die('Query failed.');\n}\n\n\/\/ Select every 4th student in the results\nfor ($i = mssql_num_rows($result) - 1; $i % 4; $i++) {\n    if (!mssql_data_seek($result, $i)) {\n        continue;\n    }\n\n    \/\/ Fetch the row ...\n}\n\n\/\/ Free the query result\nmssql_free_result($result);","output":null}],"mssql_execute":[{"title":"mssql_execute() example","source":"\/\/ Create a new statement\n$stmt = mssql_init('NewBlogEntry');\n\n\/\/ Some data strings\n$title = 'Test of blogging system';\n$content = 'If you can read this, then the new system is compatible with MSSQL';\n\n\/\/ Bind values\nmssql_bind($stmt, '@author',    'Felipe Pena',  SQLVARCHAR,     false,  false,   60);\nmssql_bind($stmt, '@date',      '08\/10\/2008',   SQLVARCHAR,     false,  false,   20);\nmssql_bind($stmt, '@title',     $title,         SQLVARCHAR,     false,  false,   60);\nmssql_bind($stmt, '@content',   $content,       SQLTEXT);\n\n\/\/ Execute the statement\nmssql_execute($stmt);\n\n\/\/ And we can free it like so:\nmssql_free_statement($stmt);","output":null}],"mssql_fetch_array":[{"title":"mssql_fetch_array() example","source":"\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [username], [name] FROM [php].[dbo].[userlist]');\n\n\/\/ Check if there were any records\nif (!mssql_num_rows($query)) {\n    echo 'No records found';\n} else {\n    \/\/ The following is equal to the code below:\n    \/\/\n    \/\/ while ($row = mssql_fetch_row($query)) {\n\n    while ($row = mssql_fetch_array($query, MSSQL_NUM)) {\n        \/\/ ...\n    }\n}\n\n\/\/ Free the query result\nmssql_free_result($query);","output":null}],"mssql_fetch_assoc":[{"title":"mssql_fetch_assoc() example","source":"\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [username], [name] FROM [php].[dbo].[userlist]');\n\n\/\/ Check if there were any records\nif (!mssql_num_rows($query)) {\n    echo 'No records found';\n}\nelse\n{\n    \/\/ Print a nice list of users in the format of:\n    \/\/ * name (username)\n\n    echo '<ul>';\n\n    while ($row = mssql_fetch_assoc($query)) {\n        echo '<li>' . $row['name'] . ' (' . $row['username'] . ')<\/li>';\n    }\n\n    echo '<\/ul>';\n}\n\n\/\/ Free the query result\nmssql_free_result($query);","output":null}],"mssql_fetch_batch":[{"title":"mssql_fetch_batch() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link);\n\n\/\/ Send a query\n$result = mssql_query('SELECT * FROM [php].[dbo].[people]', $link, 100);\n$records = 10;\n\nwhile ($records >= 0) {\n    while ($row = mssql_fetch_assoc($result)) {\n        \/\/ Do stuff ...\n    }\n\n    --$records;\n}\n\nif ($batchsize = mssql_fetch_batch($result)) {\n    \/\/ $batchsize is the number of records left \n    \/\/ in the result, but not shown above\n}","output":null}],"mssql_fetch_field":[{"title":"mssql_fetch_field() example","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT * FROM [php].[dbo].[persons]');\n\n\/\/ Construct table\necho '<h3>Table structure for \\'persons\\'<\/h3>';\necho '<table border=\"1\">';\n\n\/\/ Table header\necho '<thead>';\necho '<tr>';\necho '<td>Field name<\/td>';\necho '<td>Data type<\/td>';\necho '<td>Max length<\/td>';\necho '<\/tr>';\necho '<\/thead>';\n\n\/\/ Dump all fields\necho '<tbody>';\n\nfor ($i = 0; $i < mssql_num_fields($query); ++$i) {\n    \/\/ Fetch the field information\n    $field = mssql_fetch_field($query, $i);\n\n    \/\/ Print the row\n    echo '<tr>';\n    echo '<td>' . $field->name . '<\/td>';\n    echo '<td>' . strtoupper($field->type) . '<\/td>';\n    echo '<td>' . $field->max_length . '<\/td>';\n    echo '<\/tr>';\n}\n\necho '<\/tbody>';\necho '<\/table>';\n\n\/\/ Free the query result\nmssql_free_result($query);","output":null}],"mssql_fetch_object":[{"title":"mssql_fetch_object() example","source":"\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [username], [name] FROM [php].[dbo].[userlist]');\n\n\/\/ Check if there were any records\nif (!mssql_num_rows($query)) {\n    echo 'No records found';\n} else {\n    \/\/ Print a nice list of users in the format of:\n    \/\/ * name (username)\n\n    echo '<ul>';\n\n    while ($row = mssql_fetch_object($query)) {\n        echo '<li>' . $row->name . ' (' . $row->username . ')<\/li>';\n    }\n\n    echo '<\/ul>';\n}\n\n\/\/ Free the query result\nmssql_free_result($query);","output":null}],"mssql_fetch_row":[{"title":"mssql_fetch_row() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link);\n\n\/\/ Query to execute\n$query = mssql_query('SELECT [id], [quote] FROM [quotes] WHERE [id] = \\'42\\'', $link);\n\n\/\/ Did the query fail?\nif (!$query) {\n    die('MSSQL error: ' . mssql_get_last_message());\n}\n\n\/\/ Fetch the row\n$row = mssql_fetch_row($query);\n\n\/\/ Print the 'quote'\necho 'Quote #' . $row[0] . ': \"' . $row[1] . '\"';","output":"Quote #42: \"The answer to everything...\""}],"mssql_field_length":[{"title":"mssql_field_length() example","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [name], [age] FROM [php].[dbo].[persons]');\n\n\/\/ Print the field length\necho 'The field \\'age\\' has a data length of ' . mssql_field_length($query, 1);\n\n\/\/ Free the query result\nmssql_free_result($query);","output":"The field 'age' has a data length of 4"}],"mssql_field_name":[{"title":"mssql_field_name() example","source":"\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [username], [name], [email] FROM [php].[dbo].[userlist]');\n\necho 'Result set contains the following field(s):', PHP_EOL;\n\n\/\/ Dump all field names in result\nfor ($i = 0; $i < mssql_num_fields($query); ++$i) {\n    echo ' - ' . mssql_field_name($query, $i), PHP_EOL;\n}\n\n\/\/ Free the query result\nmssql_free_result($query);","output":"Result set contains the following field(s):\n - username\n - name\n - email"}],"mssql_field_seek":[{"title":"Using mssql_field_seek() on the example for mssql_fetch_field()","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT * FROM [php].[dbo].[persons]');\n\n\/\/ Construct table\necho '<h3>Table structure for \\'persons\\'<\/h3>';\necho '<table border=\"1\">';\n\n\/\/ Table header\necho '<thead>';\necho '<tr>';\necho '<td>Field name<\/td>';\necho '<td>Data type<\/td>';\necho '<td>Max length<\/td>';\necho '<\/tr>';\necho '<\/thead>';\n\n\/\/ Dump all fields\necho '<tbody>';\n\nfor ($i = 0; $i < mssql_num_fields($query); ++$i) {\n    \/\/ Fetch the field information, notice the \n    \/\/ field_offset parameter is not set. See \n    \/\/ the mssql_field_seek call below\n    $field = mssql_fetch_field($query);\n\n    \/\/ Print the row\n    echo '<tr>';\n    echo '<td>' . $field->name . '<\/td>';\n    echo '<td>' . strtoupper($field->type) . '<\/td>';\n    echo '<td>' . $field->max_length . '<\/td>';\n    echo '<\/tr>';\n\n    \/\/ Move the internal seek pointer to the next\n    \/\/ row in the result set\n    mssql_field_seek($query, $i + 1);\n}\n\necho '<\/tbody>';\necho '<\/table>';\n\n\/\/ Free the query result\nmssql_free_result($query);","output":null}],"mssql_field_type":[{"title":"mssql_field_type() example","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [name] FROM [php].[dbo].[persons]');\n\n\/\/ Print the field type and length\necho '\\'' . mssql_field_name($query, 0) . '\\' is a type of ' . \n     strtoupper(mssql_field_type($query, 0)) . \n     '(' . mssql_field_length($query, 0) . ')';\n\n\/\/ Free the query result\nmssql_free_result($query);","output":"'name' is a type of CHAR(50)"}],"mssql_free_result":[{"title":"mssql_free_result() example","source":"\/\/ Select some data from a table\n$query = mssql_query('SELECT * FROM [php].[dbo].[persons]', $link);\n\n\/\/ Handle query result here\n\n\/\/ When we're done we free the result by calling\n\/\/ mssql_free_result like so:\nmssql_free_result($query);","output":null}],"mssql_free_statement":[{"title":"mssql_free_statement() example","source":"\/\/ Create a new statement\n$stmt = mssql_init('test');\n\n\/\/ Bind values here and execute the statement\n\n\/\/ once we're done, we clear it from the memory\n\/\/ using mssql_free_statement like so:\nmssql_free_statement($stmt);","output":null}],"mssql_get_last_message":[{"title":"mssql_get_last_message() example","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Make a query that will fail\n$query = @mssql_query('SELECT * FROM [php].[dbo].[not-found]');\n\nif (!$query) {\n    \/\/ The query has failed, print a nice error message\n    \/\/ using mssql_get_last_message()\n    die('MSSQL error: ' . mssql_get_last_message());\n}","output":"MSSQL error: Invalid object name 'php.dbo.not-found'."}],"mssql_guid_string":[{"title":"mssql_guid_string() example","source":"$binary = '19555081977808608437941339997619274330352755554827939936';\n\nvar_dump(mssql_guid_string($binary));\nvar_dump(mssql_guid_string($binary, true));","output":"string(36) \"35353931-3035-3138-3937-373830383630\"\nstring(32) \"31393535353038313937373830383630\""}],"mssql_init":[{"title":"mssql_init() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link);\n\n\/\/ Create a new statement\n$stmt = mssql_init('StatementTest', $link);\n\n\/\/ Bind values here\n\n\/\/ Once values are binded we execute our statement \n\/\/ using mssql_execute:\nmssql_execute($stmt);\n\n\/\/ And we can free it like so:\nmssql_free_statement($stmt);","output":null}],"mssql_min_error_severity":[{"title":"mssql_min_error_severity() example","source":"\/\/ Connect to MSSQL and select the database\nmssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Set the minimum error severity to not include SQL \n\/\/ syntax errors by setting it to something greater than \n\/\/ or equal to 1.\nmssql_min_error_severity(1);\n\n\/\/ Send a query we know that will cause an syntax error, in\n\/\/ this case we use the MySQL quote signs instead of wrapping \n\/\/ square brackets around the field and table names.\n$query = mssql_query('SELECT `syntax`, `error` FROM `MSSQL`');\n\nif (!$query) {\n    \/\/ Custom error handler ...\n}","output":null}],"mssql_min_message_severity":[{"title":"mssql_min_message_severity() example","source":"\/\/ Connect to MSSQL\nmssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\n\n\/\/ Set the minimum message severity to 17, this\n\/\/ will not show any messages issued by the underlaying\n\/\/ API when we select a non-existent database below\nmssql_min_message_severity(17);\n\n\/\/ Select a non-existent database\nmssql_select_db('THIS_DATABASE_DOES_NOT_EXISTS');","output":"mssql_select_db(): Unable to select database:  THIS_DATABASE_DOES_NOT_EXISTS"}],"mssql_next_result":[{"title":"mssql_next_result() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link);\n\n\/\/ Send a query to MSSQL\n$sql = 'SELECT [name], [age] FROM [php].[dbo].[persons]';\n$query = mssql_query($sql, $link);\n\n\/\/ Iterate through returned records\ndo {\n    while ($row = mssql_fetch_row($query)) {\n        \/\/ Handle record ...\n    }\n} while (mssql_next_result($query));\n\n\/\/ Clean up\nmssql_free_result($query);\nmssql_close($link);","output":null}],"mssql_num_fields":[{"title":"mssql_num_fields() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link);\n\n\/\/ Select some data from our database\n$data = mssql_query('SELECT [name], [age] FROM [php].[dbo].[persons]');\n\n\/\/ Construct a table\necho '<table border=\"1\">';\n\n$header = false;\n\n\/\/ Iterate through returned results\nwhile ($row = mssql_fetch_array($data)) {\n    \/\/ Build the table header\n    if (!$header) {\n        echo '<thead>';\n        echo '<tr>';\n\n        for ($i = 1; ($i + 1) <= mssql_num_fields($data); ++$i) {\n            echo '<td>' . ucfirst($row[$i]) . '<\/td>';\n        }\n\n        echo '<\/tr>';\n        echo '<\/thead>';\n        echo '<tbody>';\n\n        $header = true;\n    }\n\n    \/\/ Build the row\n    echo '<tr>';\n\n    foreach($row as $value) {\n        echo '<td>' . $value . '<\/td>';\n    }\n\n    echo '<\/tr>';\n}\n\n\/\/ Close table\necho '<\/tbody>';\necho '<\/table>';\n\n\/\/ Clean up\nmssql_free_result($data);\nmssql_close($link);","output":null}],"mssql_num_rows":[{"title":"mssql_num_rows() example","source":"\/\/ Connect to MSSQL and select the database\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php');\n\n\/\/ Select all our records from a table\n$query = mssql_query('SELECT * FROM [php].[dbo].[persons]');\n\necho 'Total records in database: ' . mssql_num_rows($query);\n\n\/\/ Clean up\nmssql_free_result($query);","output":null}],"mssql_pconnect":[{"title":"mssql_pconnect() using the new_link parameter","source":"\/\/ Connect to MSSQL and select the database\n$link1 = mssql_pconnect('MANGO\\SQLEXPRESS', 'sa', 'phpfi');\nmssql_select_db('php', $link1);\n\n\/\/ Create a new link\n$link2 = mssql_pconnect('MANGO\\SQLEXPRESS', 'sa', 'phpfi', true);\nmssql_select_db('random', $link2);","output":null}],"mssql_query":[{"title":"mssql_query() example","source":"\/\/ Connect to MSSQL\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\n\nif (!$link || !mssql_select_db('php', $link)) {\n    die('Unable to connect or select database!');\n}\n\n\/\/ Do a simple query, select the version of \n\/\/ MSSQL and print it.\n$version = mssql_query('SELECT @@VERSION');\n$row = mssql_fetch_array($version);\n\necho $row[0];\n\n\/\/ Clean up\nmssql_free_result($version);","output":null}],"mssql_result":[{"title":"mssql_result() example","source":"\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [username] FROM [php].[dbo].[userlist]');\n\n\/\/ Check if there were any records\nif (!mssql_num_rows($query)) {\n    echo 'No records found';\n} else {\n    for ($i = 0; $i < mssql_num_rows($query); ++$i) {\n        echo mssql_result($query, $i, 'username'), PHP_EOL;\n    }\n}\n\n\/\/ Free the query result\nmssql_free_result($query);","output":"Kalle\nFelipe\nEmil\nRoss"},{"title":"Faster alternative to above example","source":"\/\/ Send a select query to MSSQL\n$query = mssql_query('SELECT [username] FROM [php].[dbo].[userlist]');\n\n\/\/ Check if there were any records\nif (!mssql_num_rows($query)) {\n    echo 'No records found';\n} else {\n    while ($row = mssql_fetch_array($query)) {\n        echo $row['username'], PHP_EOL;\n    }\n}\n\n\/\/ Free the query result\nmssql_free_result($query);","output":null}],"mssql_rows_affected":[{"title":"mssql_rows_affected() example","source":"\/\/ Delete all rows in a table\nmssql_query('TRUNCATE TABLE [php].[dbo].[persons]');\n\necho 'Deleted ' . mssql_rows_affected($link) . ' row(s)';","output":null}],"mssql_select_db":[{"title":"mssql_select_db() example","source":"\/\/ Create a link to MSSQL\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\n\n\/\/ Select the database 'php'\nmssql_select_db('php', $link);","output":null},{"title":"Escaping the database name with square brackets","source":"\/\/ Create a link to MSSQL\n$link = mssql_connect('KALLESPC\\SQLEXPRESS', 'sa', 'phpfi');\n\n\/\/ Select the database 'my.database-name'\nmssql_select_db('[my.database-name]', $link);","output":null}],"mt_getrandmax":[{"title":"Calculate a random floating-point number","source":"function randomFloat($min = 0, $max = 1) {\n    return $min + mt_rand() \/ mt_getrandmax() * ($max - $min);\n}\n\nvar_dump(randomFloat());\nvar_dump(randomFloat(2, 20));","output":"float(0.91601131712832)\nfloat(16.511210331931)"}],"mt_srand":[{"title":"mt_srand() example","source":"\/\/ seed with microseconds\nfunction make_seed()\n{\n  list($usec, $sec) = explode(' ', microtime());\n  return $sec + $usec * 1000000;\n}\nmt_srand(make_seed());\n$randval = mt_rand();","output":null}],"mysql_affected_rows":[{"title":"mysql_affected_rows() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nmysql_select_db('mydb');\n\n\/* this should return the correct numbers of deleted records *\/\nmysql_query('DELETE FROM mytable WHERE id < 10');\nprintf(\"Records deleted: %d\\n\", mysql_affected_rows());\n\n\/* with a where clause that is never true, it should return 0 *\/\nmysql_query('DELETE FROM mytable WHERE 0');\nprintf(\"Records deleted: %d\\n\", mysql_affected_rows());","output":"Records deleted: 10\nRecords deleted: 0"},{"title":"mysql_affected_rows() example using transactions","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nmysql_select_db('mydb');\n\n\/* Update records *\/\nmysql_query(\"UPDATE mytable SET used=1 WHERE id < 10\");\nprintf (\"Updated records: %d\\n\", mysql_affected_rows());\nmysql_query(\"COMMIT\");","output":"Updated Records: 10"}],"mysql_client_encoding":[{"title":"mysql_client_encoding() example","source":"$link    = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n$charset = mysql_client_encoding($link);\n\necho \"The current character set is: $charset\\n\";","output":"The current character set is: latin1"}],"mysql_close":[{"title":"mysql_close() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);","output":"Connected successfully"}],"mysql_connect":[{"title":"mysql_connect() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);","output":null},{"title":"mysql_connect() example using hostname:port syntax","source":"\/\/ we connect to example.com and port 3307\n$link = mysql_connect('example.com:3307', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);\n\n\/\/ we connect to localhost at port 3307\n$link = mysql_connect('127.0.0.1:3307', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);","output":null},{"title":"mysql_connect() example using \":\/path\/to\/socket\" syntax","source":"\/\/ we connect to localhost and socket e.g. \/tmp\/mysql.sock\n\n\/\/ variant 1: omit localhost\n$link = mysql_connect(':\/tmp\/mysql', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);\n\n\n\/\/ variant 2: with localhost\n$link = mysql_connect('localhost:\/tmp\/mysql.sock', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);","output":null}],"mysql_create_db":[{"title":"mysql_create_db() alternative example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\n\n$sql = 'CREATE DATABASE my_db';\nif (mysql_query($sql, $link)) {\n    echo \"Database my_db created successfully\\n\";\n} else {\n    echo 'Error creating database: ' . mysql_error() . \"\\n\";\n}","output":"Database my_db created successfully"}],"mysql_data_seek":[{"title":"mysql_data_seek() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\n$db_selected = mysql_select_db('sample_db');\nif (!$db_selected) {\n    die('Could not select database: ' . mysql_error());\n}\n$query = 'SELECT last_name, first_name FROM friends';\n$result = mysql_query($query);\nif (!$result) {\n    die('Query failed: ' . mysql_error());\n}\n\/* fetch rows in reverse order *\/\nfor ($i = mysql_num_rows($result) - 1; $i >= 0; $i--) {\n    if (!mysql_data_seek($result, $i)) {\n        echo \"Cannot seek to row $i: \" . mysql_error() . \"\\n\";\n        continue;\n    }\n\n    if (!($row = mysql_fetch_assoc($result))) {\n        continue;\n    }\n\n    echo $row['last_name'] . ' ' . $row['first_name'] . \"<br \/>\\n\";\n}\n\nmysql_free_result($result);","output":null}],"mysql_db_name":[{"title":"mysql_db_name() example","source":"error_reporting(E_ALL);\n\n$link = mysql_connect('dbhost', 'username', 'password');\n$db_list = mysql_list_dbs($link);\n\n$i = 0;\n$cnt = mysql_num_rows($db_list);\nwhile ($i < $cnt) {\n    echo mysql_db_name($db_list, $i) . \"\\n\";\n    $i++;\n}","output":null}],"mysql_db_query":[{"title":"mysql_db_query() alternative example","source":"if (!$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')) {\n    echo 'Could not connect to mysql';\n    exit;\n}\n\nif (!mysql_select_db('mysql_dbname', $link)) {\n    echo 'Could not select database';\n    exit;\n}\n\n$sql    = 'SELECT foo FROM bar WHERE id = 42';\n$result = mysql_query($sql, $link);\n\nif (!$result) {\n    echo \"DB Error, could not query the database\\n\";\n    echo 'MySQL Error: ' . mysql_error();\n    exit;\n}\n\nwhile ($row = mysql_fetch_assoc($result)) {\n    echo $row['foo'];\n}\n\nmysql_free_result($result);","output":null}],"mysql_drop_db":[{"title":"mysql_drop_db() alternative example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\n\n$sql = 'DROP DATABASE my_db';\nif (mysql_query($sql, $link)) {\n    echo \"Database my_db was successfully dropped\\n\";\n} else {\n    echo 'Error dropping database: ' . mysql_error() . \"\\n\";\n}","output":null}],"mysql_errno":[{"title":"mysql_errno() example","source":"$link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\");\n\nif (!mysql_select_db(\"nonexistentdb\", $link)) {\n    echo mysql_errno($link) . \": \" . mysql_error($link). \"\\n\";\n}\n\nmysql_select_db(\"kossu\", $link);\nif (!mysql_query(\"SELECT * FROM nonexistenttable\", $link)) {\n    echo mysql_errno($link) . \": \" . mysql_error($link) . \"\\n\";\n}","output":"1049: Unknown database 'nonexistentdb'\n1146: Table 'kossu.nonexistenttable' doesn't exist"}],"mysql_error":[{"title":"mysql_error() example","source":"$link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\");\n\nmysql_select_db(\"nonexistentdb\", $link);\necho mysql_errno($link) . \": \" . mysql_error($link). \"\\n\";\n\nmysql_select_db(\"kossu\", $link);\nmysql_query(\"SELECT * FROM nonexistenttable\", $link);\necho mysql_errno($link) . \": \" . mysql_error($link) . \"\\n\";","output":"1049: Unknown database 'nonexistentdb'\n1146: Table 'kossu.nonexistenttable' doesn't exist"}],"mysql_escape_string":[{"title":"mysql_escape_string() example","source":"$item = \"Zak's Laptop\";\n$escaped_item = mysql_escape_string($item);\nprintf(\"Escaped string: %s\\n\", $escaped_item);","output":"Escaped string: Zak\\'s Laptop"}],"mysql_fetch_array":[{"title":"Query with aliased duplicate field names","source":"Fetch a result row as an associative array, a numeric array, or both\n mysql_escape_string\n mysql_fetch_assoc\n MySQL Functions\n PHP Manual\n\n \n  mysql_fetch_array\n  (PHP 4, PHP 5)mysql_fetch_array — Fetch a result row as an associative array, a numeric array, or both\n\n \n\n \n  Warning\n   This extension was deprecated in PHP 5.5.0, and it was removed in PHP 7.0.0.\nInstead, the MySQLi or PDO_MySQL extension should be used.\nSee also MySQL: choosing an API guide and\nrelated FAQ for more information.\nAlternatives to this function include:\n   mysqli_fetch_array()\n    PDOStatement::fetch()\n   \n \n\n \n  Description\n  \n   array mysql_fetch_array\n    ( resource $result\n   [, int $result_type = MYSQL_BOTH\n  ] )\n\n  \n   Returns an array that corresponds to the fetched row\n   and moves the internal data pointer ahead.\n  \n \n\n\n \n  Parameters\n  \n   \n\nresult\n\nThe result resource that\nis being evaluated. This result comes from a call to\nmysql_query().\n\n    \n     \nresult_type\n\n     \n\n      \n       The type of array that is to be fetched. It's a constant and can\n       take the following values: MYSQL_ASSOC, \n       MYSQL_NUM, and\n       MYSQL_BOTH.\n      \n     \n\n    \n   \n\n \n \n  Return Values\n  \n   Returns an array of strings that corresponds to the fetched row, or FALSE\n   if there are no more rows. The type of returned array depends on\n   how result_type is defined. By using \n   MYSQL_BOTH (default), you'll get an array with both \n   associative and number indices. Using MYSQL_ASSOC, you \n   only get associative indices (as mysql_fetch_assoc() \n   works), using MYSQL_NUM, you only get number indices \n   (as mysql_fetch_row() works).\n  \n  \n   If two or more columns of the result have the same field names,\n   the last column will take precedence. To access the other column(s)\n   of the same name, you must use the numeric index of the column or\n   make an alias for the column. For aliased columns, you cannot\n   access the contents with the original column name.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Query with aliased duplicate field names\n    \nSELECT table1.field AS foo, table2.field AS bar FROM table1, table2\n\n    \n\n   \n  \n  \n   \n    Example #2 mysql_fetch_array() with MYSQL_NUM\n    \n\n<?php\nmysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or\n    die(\"Could not connect: \" . mysql_error());\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"SELECT id, name FROM mytable\");\n\nwhile ($row = mysql_fetch_array($result, MYSQL_NUM)) {\n    printf(\"ID: %s  Name: %s\", $row[0], $row[1]);  \n}\n\nmysql_free_result($result);\n?>\n\n\n    \n\n   \n  \n  \n   \n    Example #3 mysql_fetch_array() with MYSQL_ASSOC\n    \n\n<?php\nmysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or\n    die(\"Could not connect: \" . mysql_error());\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"SELECT id, name FROM mytable\");\n\nwhile ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {\n    printf(\"ID: %s  Name: %s\", $row[\"id\"], $row[\"name\"]);\n}\n\nmysql_free_result($result);\n?>\n\n\n    \n\n   \n  \n  \n   \n    Example #4 mysql_fetch_array() with MYSQL_BOTH\n    \n\n<?php\nmysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or\n    die(\"Could not connect: \" . mysql_error());\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"SELECT id, name FROM mytable\");\n\nwhile ($row = mysql_fetch_array($result, MYSQL_BOTH)) {\n    printf (\"ID: %s  Name: %s\", $row[0], $row[\"name\"]);\n}\n\nmysql_free_result($result);\n?>\n\n\n    \n\n   \n  \n \n\n\n \n  Notes\n  Note: \n   Performance\n\n    An important thing to note is that using \n    mysql_fetch_array() is not \n    significantly slower than using\n    mysql_fetch_row(), while it provides\n    a significant added value.\n   \n  \n  Note: Field names returned by this function\nare case-sensitive.\n  Note: This function sets NULL fields to\nthe PHP NULL value.\n \n\n\n \n  See Also\n  \n   mysql_fetch_row() - Get a result row as an enumerated array\n    mysql_fetch_assoc() - Fetch a result row as an associative array\n    mysql_data_seek() - Move internal result pointer\n    mysql_query() - Send a MySQL query\n   \n\n\n mysql_escape_string\n mysql_fetch_assoc\n MySQL Functions\n PHP Manual","output":null},{"title":"mysql_fetch_array() with MYSQL_NUM","source":"mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or\n    die(\"Could not connect: \" . mysql_error());\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"SELECT id, name FROM mytable\");\n\nwhile ($row = mysql_fetch_array($result, MYSQL_NUM)) {\n    printf(\"ID: %s  Name: %s\", $row[0], $row[1]);  \n}\n\nmysql_free_result($result);","output":null},{"title":"mysql_fetch_array() with MYSQL_ASSOC","source":"mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or\n    die(\"Could not connect: \" . mysql_error());\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"SELECT id, name FROM mytable\");\n\nwhile ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {\n    printf(\"ID: %s  Name: %s\", $row[\"id\"], $row[\"name\"]);\n}\n\nmysql_free_result($result);","output":null},{"title":"mysql_fetch_array() with MYSQL_BOTH","source":"mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\") or\n    die(\"Could not connect: \" . mysql_error());\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"SELECT id, name FROM mytable\");\n\nwhile ($row = mysql_fetch_array($result, MYSQL_BOTH)) {\n    printf (\"ID: %s  Name: %s\", $row[0], $row[\"name\"]);\n}\n\nmysql_free_result($result);","output":null}],"mysql_fetch_assoc":[{"title":"An expanded mysql_fetch_assoc() example","source":"$conn = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\");\n\nif (!$conn) {\n    echo \"Unable to connect to DB: \" . mysql_error();\n    exit;\n}\n\nif (!mysql_select_db(\"mydbname\")) {\n    echo \"Unable to select mydbname: \" . mysql_error();\n    exit;\n}\n\n$sql = \"SELECT id as userid, fullname, userstatus\n        FROM   sometable\n        WHERE  userstatus = 1\";\n\n$result = mysql_query($sql);\n\nif (!$result) {\n    echo \"Could not successfully run query ($sql) from DB: \" . mysql_error();\n    exit;\n}\n\nif (mysql_num_rows($result) == 0) {\n    echo \"No rows found, nothing to print so am exiting\";\n    exit;\n}\n\n\/\/ While a row of data exists, put that row in $row as an associative array\n\/\/ Note: If you're expecting just one row, no need to use a loop\n\/\/ Note: If you put extract($row); inside the following loop, you'll\n\/\/       then create $userid, $fullname, and $userstatus\nwhile ($row = mysql_fetch_assoc($result)) {\n    echo $row[\"userid\"];\n    echo $row[\"fullname\"];\n    echo $row[\"userstatus\"];\n}\n\nmysql_free_result($result);","output":null}],"mysql_fetch_field":[{"title":"mysql_fetch_field() example","source":"$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$conn) {\n    die('Could not connect: ' . mysql_error());\n}\nmysql_select_db('database');\n$result = mysql_query('select * from table');\nif (!$result) {\n    die('Query failed: ' . mysql_error());\n}\n\/* get column metadata *\/\n$i = 0;\nwhile ($i < mysql_num_fields($result)) {\n    echo \"Information for column $i:<br \/>\\n\";\n    $meta = mysql_fetch_field($result, $i);\n    if (!$meta) {\n        echo \"No information available<br \/>\\n\";\n    }\n    echo \"<pre>\nblob:         $meta->blob\nmax_length:   $meta->max_length\nmultiple_key: $meta->multiple_key\nname:         $meta->name\nnot_null:     $meta->not_null\nnumeric:      $meta->numeric\nprimary_key:  $meta->primary_key\ntable:        $meta->table\ntype:         $meta->type\nunique_key:   $meta->unique_key\nunsigned:     $meta->unsigned\nzerofill:     $meta->zerofill\n<\/pre>\";\n    $i++;\n}\nmysql_free_result($result);","output":null}],"mysql_fetch_lengths":[{"title":"A mysql_fetch_lengths() example","source":"$result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\n$row     = mysql_fetch_assoc($result);\n$lengths = mysql_fetch_lengths($result);\n\nprint_r($row);\nprint_r($lengths);","output":"Array\n(\n    [id] => 42\n    [email] => user@example.com\n)\nArray\n(\n    [0] => 2\n    [1] => 16\n)"}],"mysql_fetch_object":[{"title":"mysql_fetch_object() example","source":"mysql_connect(\"hostname\", \"user\", \"password\");\nmysql_select_db(\"mydb\");\n$result = mysql_query(\"select * from mytable\");\nwhile ($row = mysql_fetch_object($result)) {\n    echo $row->user_id;\n    echo $row->fullname;\n}\nmysql_free_result($result);","output":null},{"title":"mysql_fetch_object() example","source":"class foo {\n    public $name;\n}\n\nmysql_connect(\"hostname\", \"user\", \"password\");\nmysql_select_db(\"mydb\");\n\n$result = mysql_query(\"select name from mytable limit 1\");\n$obj = mysql_fetch_object($result, 'foo');\nvar_dump($obj);","output":null}],"mysql_fetch_row":[{"title":"Fetching one row with mysql_fetch_row()","source":"$result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\n$row = mysql_fetch_row($result);\n\necho $row[0]; \/\/ 42\necho $row[1]; \/\/ the email value","output":null}],"mysql_field_flags":[{"title":"A mysql_field_flags() example","source":"$result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\n$flags = mysql_field_flags($result, 0);\n\necho $flags;\nprint_r(explode(' ', $flags));","output":"not_null primary_key auto_increment\nArray\n(\n    [0] => not_null\n    [1] => primary_key\n    [2] => auto_increment\n)"}],"mysql_field_len":[{"title":"mysql_field_len() example","source":"$result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\n\n\/\/ Will get the length of the id field as specified in the database\n\/\/ schema. \n$length = mysql_field_len($result, 0);\necho $length;","output":null}],"mysql_field_name":[{"title":"mysql_field_name() example","source":"\/* The users table consists of three fields:\n *   user_id\n *   username\n *   password.\n *\/\n$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect to MySQL server: ' . mysql_error());\n}\n$dbname = 'mydb';\n$db_selected = mysql_select_db($dbname, $link);\nif (!$db_selected) {\n    die(\"Could not set $dbname: \" . mysql_error());\n}\n$res = mysql_query('select * from users', $link);\n\necho mysql_field_name($res, 0) . \"\\n\";\necho mysql_field_name($res, 2);","output":"user_id\npassword"}],"mysql_field_table":[{"title":"A mysql_field_table() example","source":"$query = \"SELECT account.*, country.* FROM account, country WHERE country.name = 'Portugal' AND account.country_id = country.id\";\n\n\/\/ get the result from the DB\n$result = mysql_query($query);\n\n\/\/ Lists the table name and then the field name\nfor ($i = 0; $i < mysql_num_fields($result); ++$i) {\n    $table = mysql_field_table($result, $i);\n    $field = mysql_field_name($result, $i);\n\n    echo  \"$table: $field\\n\";\n}","output":null}],"mysql_field_type":[{"title":"mysql_field_type() example","source":"mysql_connect(\"localhost\", \"mysql_username\", \"mysql_password\");\nmysql_select_db(\"mysql\");\n$result = mysql_query(\"SELECT * FROM func\");\n$fields = mysql_num_fields($result);\n$rows   = mysql_num_rows($result);\n$table  = mysql_field_table($result, 0);\necho \"Your '\" . $table . \"' table has \" . $fields . \" fields and \" . $rows . \" record(s)\\n\";\necho \"The table has the following fields:\\n\";\nfor ($i=0; $i < $fields; $i++) {\n    $type  = mysql_field_type($result, $i);\n    $name  = mysql_field_name($result, $i);\n    $len   = mysql_field_len($result, $i);\n    $flags = mysql_field_flags($result, $i);\n    echo $type . \" \" . $name . \" \" . $len . \" \" . $flags . \"\\n\";\n}\nmysql_free_result($result);\nmysql_close();","output":"Your 'func' table has 4 fields and 1 record(s)\nThe table has the following fields:\nstring name 64 not_null primary_key binary\nint ret 1 not_null\nstring dl 128 not_null\nstring type 9 not_null enum"}],"mysql_free_result":[{"title":"A mysql_free_result() example","source":"$result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\n\/* Use the result, assuming we're done with it afterwards *\/\n$row = mysql_fetch_assoc($result);\n\n\/* Now we free up the result and continue on with our script *\/\nmysql_free_result($result);\n\necho $row['id'];\necho $row['email'];","output":null}],"mysql_get_client_info":[{"title":"mysql_get_client_info() example","source":"printf(\"MySQL client info: %s\\n\", mysql_get_client_info());","output":"MySQL client info: 3.23.39"}],"mysql_get_host_info":[{"title":"mysql_get_host_info() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nprintf(\"MySQL host info: %s\\n\", mysql_get_host_info());","output":"MySQL host info: Localhost via UNIX socket"}],"mysql_get_proto_info":[{"title":"mysql_get_proto_info() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nprintf(\"MySQL protocol version: %s\\n\", mysql_get_proto_info());","output":"MySQL protocol version: 10"}],"mysql_get_server_info":[{"title":"mysql_get_server_info() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nprintf(\"MySQL server version: %s\\n\", mysql_get_server_info());","output":"MySQL server version: 4.0.1-alpha"}],"mysql_info":[{"title":"Relevant MySQL Statements","source":"Get information about the most recent query\n mysql_get_server_info\n mysql_insert_id\n MySQL Functions\n PHP Manual\n\n \n  mysql_info\n  (PHP 4 >= 4.3.0, PHP 5)mysql_info — Get information about the most recent query\n\n \n\n \n  Warning\n   This extension was deprecated in PHP 5.5.0, and it was removed in PHP 7.0.0.\nInstead, the MySQLi or PDO_MySQL extension should be used.\nSee also MySQL: choosing an API guide and\nrelated FAQ for more information.\nAlternatives to this function include:\n   mysqli_info()\n   \n \n\n \n  Description\n  \n   string mysql_info\n    ([ resource $link_identifier = NULL\n  ] )\n\n  \n   Returns detailed information about the last query.\n  \n \n\n\n \n  Parameters\n  \n   \n\nlink_identifier\n\nThe MySQL connection. If the\nlink identifier is not specified, the last link opened by\nmysql_connect() is assumed. If no such link is found, it\nwill try to create one as if mysql_connect() had been called\nwith no arguments. If no connection is found or established, an\nE_WARNING level error is generated.\n\n\n   \n\n\n \n  Return Values\n  \n   Returns information about the statement on success, or FALSE on\n   failure. See the example below for which statements provide information,\n   and what the returned value may look like. Statements that are not listed \n   will return FALSE.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 Relevant MySQL Statements\n    \n     Statements that return string values. The numbers are only for \n     illustrating purpose; their values will correspond to the query.\n    \n    \nINSERT INTO ... SELECT ...\nString format: Records: 23 Duplicates: 0 Warnings: 0 \nINSERT INTO ... VALUES (...),(...),(...)...\nString format: Records: 37 Duplicates: 0 Warnings: 0 \nLOAD DATA INFILE ...\nString format: Records: 42 Deleted: 0 Skipped: 0 Warnings: 0 \nALTER TABLE\nString format: Records: 60 Duplicates: 0 Warnings: 0 \nUPDATE\nString format: Rows matched: 65 Changed: 65 Warnings: 0\n\n    \n\n   \n  \n \n\n \n \n  Notes\n  Note: \n   \n    mysql_info() returns a non-FALSE value for the \n    INSERT ... VALUES statement only if multiple value lists are \n    specified in the statement.\n   \n  \n \n\n\n \n  See Also\n  \n   mysql_affected_rows() - Get number of affected rows in previous MySQL operation\n    mysql_insert_id() - Get the ID generated in the last query\n    mysql_stat() - Get current system status\n   \n\n\n mysql_get_server_info\n mysql_insert_id\n MySQL Functions\n PHP Manual","output":null}],"mysql_insert_id":[{"title":"mysql_insert_id() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nmysql_select_db('mydb');\n\nmysql_query(\"INSERT INTO mytable (product) values ('kossu')\");\nprintf(\"Last inserted record has id %d\\n\", mysql_insert_id());","output":null}],"mysql_list_dbs":[{"title":"mysql_list_dbs() example","source":"\/\/ Usage without mysql_list_dbs()\n$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n$res = mysql_query(\"SHOW DATABASES\");\n\nwhile ($row = mysql_fetch_assoc($res)) {\n    echo $row['Database'] . \"\\n\";\n}\n\n\/\/ Deprecated as of PHP 5.4.0\n$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n$db_list = mysql_list_dbs($link);\n\nwhile ($row = mysql_fetch_object($db_list)) {\n     echo $row->Database . \"\\n\";\n}","output":"database1\ndatabase2\ndatabase3"}],"mysql_list_fields":[{"title":"Alternate to deprecated mysql_list_fields()","source":"$result = mysql_query(\"SHOW COLUMNS FROM sometable\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\nif (mysql_num_rows($result) > 0) {\n    while ($row = mysql_fetch_assoc($result)) {\n        print_r($row);\n    }\n}","output":"Array\n(\n    [Field] => id\n    [Type] => int(7)\n    [Null] =>  \n    [Key] => PRI\n    [Default] =>\n    [Extra] => auto_increment\n)\nArray\n(\n    [Field] => email\n    [Type] => varchar(100)\n    [Null] =>\n    [Key] =>\n    [Default] =>\n    [Extra] =>\n)"}],"mysql_list_processes":[{"title":"mysql_list_processes() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n\n$result = mysql_list_processes($link);\nwhile ($row = mysql_fetch_assoc($result)){\n    printf(\"%s %s %s %s %s\\n\", $row[\"Id\"], $row[\"Host\"], $row[\"db\"],\n        $row[\"Command\"], $row[\"Time\"]);\n}\nmysql_free_result($result);","output":"1 localhost test Processlist 0\n4 localhost mysql sleep 5"}],"mysql_list_tables":[{"title":"mysql_list_tables() alternative example","source":"$dbname = 'mysql_dbname';\n\nif (!mysql_connect('mysql_host', 'mysql_user', 'mysql_password')) {\n    echo 'Could not connect to mysql';\n    exit;\n}\n\n$sql = \"SHOW TABLES FROM $dbname\";\n$result = mysql_query($sql);\n\nif (!$result) {\n    echo \"DB Error, could not list tables\\n\";\n    echo 'MySQL Error: ' . mysql_error();\n    exit;\n}\n\nwhile ($row = mysql_fetch_row($result)) {\n    echo \"Table: {$row[0]}\\n\";\n}\n\nmysql_free_result($result);","output":null}],"mysql_num_fields":[{"title":"A mysql_num_fields() example","source":"$result = mysql_query(\"SELECT id,email FROM people WHERE id = '42'\");\nif (!$result) {\n    echo 'Could not run query: ' . mysql_error();\n    exit;\n}\n\n\/* returns 2 because id,email === two fields *\/\necho mysql_num_fields($result);","output":null}],"mysql_num_rows":[{"title":"mysql_num_rows() example","source":"$link = mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\");\nmysql_select_db(\"database\", $link);\n\n$result = mysql_query(\"SELECT * FROM table1\", $link);\n$num_rows = mysql_num_rows($result);\n\necho \"$num_rows Rows\\n\";","output":null}],"mysql_ping":[{"title":"A mysql_ping() example","source":"set_time_limit(0);\n\n$conn = mysql_connect('localhost', 'mysqluser', 'mypass');\n$db   = mysql_select_db('mydb');\n\n\/* Assuming this query will take a long time *\/\n$result = mysql_query($sql);\nif (!$result) {\n    echo 'Query #1 failed, exiting.';\n    exit;\n}\n\n\/* Make sure the connection is still alive, if not, try to reconnect *\/\nif (!mysql_ping($conn)) {\n    echo 'Lost connection, exiting after query #1';\n    exit;\n}\nmysql_free_result($result);\n\n\/* So the connection is still alive, let's run another query *\/\n$result2 = mysql_query($sql2);","output":null}],"mysql_query":[{"title":"Invalid Query","source":"$result = mysql_query('SELECT * WHERE 1=1');\nif (!$result) {\n    die('Invalid query: ' . mysql_error());\n}","output":null},{"title":"Valid Query","source":"\/\/ This could be supplied by a user, for example\n$firstname = 'fred';\n$lastname  = 'fox';\n\n\/\/ Formulate Query\n\/\/ This is the best way to perform an SQL query\n\/\/ For more examples, see mysql_real_escape_string()\n$query = sprintf(\"SELECT firstname, lastname, address, age FROM friends \n    WHERE firstname='%s' AND lastname='%s'\",\n    mysql_real_escape_string($firstname),\n    mysql_real_escape_string($lastname));\n\n\/\/ Perform Query\n$result = mysql_query($query);\n\n\/\/ Check result\n\/\/ This shows the actual query sent to MySQL, and the error. Useful for debugging.\nif (!$result) {\n    $message  = 'Invalid query: ' . mysql_error() . \"\\n\";\n    $message .= 'Whole query: ' . $query;\n    die($message);\n}\n\n\/\/ Use result\n\/\/ Attempting to print $result won't allow access to information in the resource\n\/\/ One of the mysql result functions must be used\n\/\/ See also mysql_result(), mysql_fetch_array(), mysql_fetch_row(), etc.\nwhile ($row = mysql_fetch_assoc($result)) {\n    echo $row['firstname'];\n    echo $row['lastname'];\n    echo $row['address'];\n    echo $row['age'];\n}\n\n\/\/ Free the resources associated with the result set\n\/\/ This is done automatically at the end of the script\nmysql_free_result($result);","output":null}],"mysql_real_escape_string":[{"title":"Simple mysql_real_escape_string() example","source":"\/\/ Connect\n$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')\n    OR die(mysql_error());\n\n\/\/ Query\n$query = sprintf(\"SELECT * FROM users WHERE user='%s' AND password='%s'\",\n            mysql_real_escape_string($user),\n            mysql_real_escape_string($password));","output":null},{"title":"mysql_real_escape_string() requires a connection example","source":"\/\/ We have not connected to MySQL\n\n$lastname  = \"O'Reilly\";\n$_lastname = mysql_real_escape_string($lastname);\n\n$query = \"SELECT * FROM actors WHERE last_name = '$_lastname'\";\n\nvar_dump($_lastname);\nvar_dump($query);","output":"Warning: mysql_real_escape_string(): No such file or directory in \/this\/test\/script.php on line 5\nWarning: mysql_real_escape_string(): A link to the server could not be established in \/this\/test\/script.php on line 5\n\nbool(false)\nstring(41) \"SELECT * FROM actors WHERE last_name = ''\""},{"title":"An example SQL Injection Attack","source":"\/\/ We didn't check $_POST['password'], it could be anything the user wanted! For example:\n$_POST['username'] = 'aidan';\n$_POST['password'] = \"' OR ''='\";\n\n\/\/ Query database to check if there are any matching users\n$query = \"SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'\";\nmysql_query($query);\n\n\/\/ This means the query sent to MySQL would be:\necho $query;","output":"SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''"}],"mysql_result":[{"title":"mysql_result() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Could not connect: ' . mysql_error());\n}\nif (!mysql_select_db('database_name')) {\n    die('Could not select database: ' . mysql_error());\n}\n$result = mysql_query('SELECT name FROM work.employee');\nif (!$result) {\n    die('Could not query:' . mysql_error());\n}\necho mysql_result($result, 2); \/\/ outputs third employee's name\n\nmysql_close($link);","output":null}],"mysql_select_db":[{"title":"mysql_select_db() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\nif (!$link) {\n    die('Not connected : ' . mysql_error());\n}\n\n\/\/ make foo the current db\n$db_selected = mysql_select_db('foo', $link);\nif (!$db_selected) {\n    die ('Can\\'t use foo : ' . mysql_error());\n}","output":null}],"mysql_stat":[{"title":"mysql_stat() example","source":"$link   = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n$status = explode('  ', mysql_stat($link));\nprint_r($status);","output":"Array\n(\n    [0] => Uptime: 5380\n    [1] => Threads: 2\n    [2] => Questions: 1321299\n    [3] => Slow queries: 0\n    [4] => Opens: 26\n    [5] => Flush tables: 1\n    [6] => Open tables: 17\n    [7] => Queries per second avg: 245.595\n)"},{"title":"Alternative mysql_stat() example","source":"$link   = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n$result = mysql_query('SHOW STATUS', $link);\nwhile ($row = mysql_fetch_assoc($result)) {\n    echo $row['Variable_name'] . ' = ' . $row['Value'] . \"\\n\";\n}","output":"back_log = 50\nbasedir = \/usr\/local\/\nbdb_cache_size = 8388600\nbdb_log_buffer_size = 32768\nbdb_home = \/var\/db\/mysql\/\nbdb_max_lock = 10000\nbdb_logdir =\nbdb_shared_data = OFF\nbdb_tmpdir = \/var\/tmp\/\n..."}],"mysql_tablename":[{"title":"mysql_tablename() example","source":"mysql_connect(\"localhost\", \"mysql_user\", \"mysql_password\");\n$result = mysql_list_tables(\"mydb\");\n$num_rows = mysql_num_rows($result);\nfor ($i = 0; $i < $num_rows; $i++) {\n    echo \"Table: \", mysql_tablename($result, $i), \"\\n\";\n}\n\nmysql_free_result($result);","output":null}],"mysql_thread_id":[{"title":"mysql_thread_id() example","source":"$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');\n$thread_id = mysql_thread_id($link);\nif ($thread_id){\n    printf(\"current thread id is %d\\n\", $thread_id);\n}","output":"current thread id is 73"}],"mysqlnd_memcache_get_config":[{"title":"mysqlnd_memcache_get_config() example","source":"$mysqli = new mysqli(\"host\", \"user\", \"passwd\", \"database\");\n$memc = new Memcached();\n$memc->addServer(\"host\", 11211);\nmysqlnd_memcache_set($mysqli, $memc);\n\nvar_dump(mysqlnd_memcache_get_config($mysqli));","output":"array(4) {\n  [\"memcached\"]=>\n  object(Memcached)#2 (0) {\n  }\n  [\"pattern\"]=>\n  string(125) \"\/^\\s*SELECT\\s*(.+?)\\s*FROM\\s*`?([a-z0-9_]+)`?\\s*WHERE\\s*`?([a-z0-9_]+)`?\\s*=\\s*(?(?=[\"'])[\"']([^\"']*)[\"']|([0-9e\\.]*))\\s*$\/is\"\n  [\"mappings\"]=>\n  array(1) {\n    [\"mymem_test\"]=>\n    array(6) {\n      [\"prefix\"]=>\n      string(13) \"@@mymem_test.\"\n      [\"schema_name\"]=>\n      string(4) \"test\"\n      [\"table_name\"]=>\n      string(10) \"mymem_test\"\n      [\"id_field_name\"]=>\n      string(2) \"id\"\n      [\"separator\"]=>\n      string(1) \"|\"\n      [\"fields\"]=>\n      array(3) {\n        [0]=>\n        string(2) \"f1\"\n        [1]=>\n        string(2) \"f2\"\n        [2]=>\n        string(2) \"f3\"\n      }\n    }\n  }\n  [\"mapping_query\"]=>\n  string(209) \"    SELECT c.name,\n                          CONCAT('@@', c.name, (SELECT value FROM innodb_memcache.config_options WHERE name = 'table_map_delimiter')) AS key_prefix, \n                          c.db_schema, \n                          c.db_table, \n                          c.key_columns, \n                          c.value_columns, \n                          (SELECT value FROM innodb_memcache.config_options WHERE name = 'separator') AS sep \n                     FROM innodb_memcache.containers c\"\n}"}],"mysqlnd_memcache_set":[{"title":"mysqlnd_memcache_set() example with var_dump() as a simple debugging callback.","source":"$mysqli = new mysqli(\"host\", \"user\", \"passwd\", \"database\");\n$memc = new Memcached();\n$memc->addServer(\"host\", 11211);\nmysqlnd_memcache_set($mysqli, $memc, NULL, 'var_dump');\n\n\/* This query will be intercepted and executed via Memcache protocol *\/\necho \"Sending query for id via Memcache: \";\n$mysqli->query(\"SELECT f1, f2, f3 FROM test WHERE id = 1\");\n\n\/* f1 is not configured as valid key field, this won't be sent via Memcache *\/\necho \"Sending query for f1 via Memcache: \";\n$mysqli->query(\"SELECT id FROM test WHERE f1 = 1\");\n\nmysqlnd_memcache_set($mysqli);\n\n\/* Now the regular MySQL protocol will be used *\/\necho \"var_dump won't be invoked: \";\n$mysqli->query(\"SELECT f1, f2, f3 WHERE id = 1\");","output":"Sending query for id via Memcache: bool(true)\nSending query for f1 via Memcache: bool(false)\nvar_dump won't be invoked:"}],"mysqlnd_ms_dump_servers":[{"title":"mysqlnd_ms_dump_servers() example","source":"$link = mysqli_connect(\"myapp\", \"global_user\", \"global_pass\", \"global_db\", 1234, \"global_socket\");\nvar_dump(mysqlnd_ms_dump_servers($link);","output":"array(2) {\n  [\"masters\"]=>\n  array(1) {\n    [0]=>\n    array(5) {\n      [\"name_from_config\"]=>\n      string(7) \"master1\"\n      [\"hostname\"]=>\n      string(12) \"master1_host\"\n      [\"user\"]=>\n      string(12) \"master1_user\"\n      [\"port\"]=>\n      int(3306)\n      [\"socket\"]=>\n      string(14) \"master1_socket\"\n    }\n  }\n  [\"slaves\"]=>\n  array(2) {\n    [0]=>\n    array(5) {\n      [\"name_from_config\"]=>\n      string(7) \"slave_0\"\n      [\"hostname\"]=>\n      string(11) \"slave0_host\"\n      [\"user\"]=>\n      string(11) \"slave0_user\"\n      [\"port\"]=>\n      int(3306)\n      [\"socket\"]=>\n      string(13) \"slave0_socket\"\n    }\n    [1]=>\n    array(5) {\n      [\"name_from_config\"]=>\n      string(7) \"slave_1\"\n      [\"hostname\"]=>\n      string(11) \"slave1_host\"\n      [\"user\"]=>\n      string(12) \"gloabal_user\"\n      [\"port\"]=>\n      int(1234)\n      [\"socket\"]=>\n      string(13) \"global_socket\"\n    }\n  }\n}"}],"mysqlnd_ms_get_last_gtid":[{"title":"mysqlnd_ms_get_last_gtid() example","source":"\/* Open mysqlnd_ms connection using mysqli, PDO_MySQL or mysql extension *\/\n$mysqli = new mysqli(\"myapp\", \"username\", \"password\", \"database\");\nif (!$mysqli)\n  \/* Of course, your error handling is nicer... *\/\n  die(sprintf(\"[%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error()));\n\n\/* auto commit mode, transaction on master, GTID must be incremented *\/\nif (!$mysqli->query(\"DROP TABLE IF EXISTS test\"))\n  die(sprintf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error));\n\nprintf(\"GTID after transaction %s\\n\", mysqlnd_ms_get_last_gtid($mysqli));\n\n\/* auto commit mode, transaction on master, GTID must be incremented *\/\nif (!$mysqli->query(\"CREATE TABLE test(id INT)\"))\n  die(sprintf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error));\n\nprintf(\"GTID after transaction %s\\n\", mysqlnd_ms_get_last_gtid($mysqli));","output":null}],"mysqlnd_ms_get_last_used_connection":[{"title":"mysqlnd_ms_get_last_used_connection() example","source":"$link = new mysqli(\"myapp\", \"user\", \"password\", \"database\");\n$res = $link->query(\"SELECT 1 FROM DUAL\");\nvar_dump(mysqlnd_ms_get_last_used_connection($link));","output":"array(10) {\n  [\"scheme\"]=>\n  string(22) \"unix:\/\/\/tmp\/mysql.sock\"\n  [\"host_info\"]=>\n  string(25) \"Localhost via UNIX socket\"\n  [\"host\"]=>\n  string(0) \"\"\n  [\"port\"]=>\n  int(3306)\n  [\"socket_or_pipe\"]=>\n  string(15) \"\/tmp\/mysql.sock\"\n  [\"thread_id\"]=>\n  int(46253)\n  [\"last_message\"]=>\n  string(0) \"\"\n  [\"errno\"]=>\n  int(0)\n  [\"error\"]=>\n  string(0) \"\"\n  [\"sqlstate\"]=>\n  string(5) \"00000\"\n}"}],"mysqlnd_ms_get_stats":[{"title":"mysqlnd_ms_get_stats() example","source":"printf(\"mysqlnd_ms.enable = %d\\n\", ini_get(\"mysqlnd_ms.enable\"));\nprintf(\"mysqlnd_ms.collect_statistics = %d\\n\", ini_get(\"mysqlnd_ms.collect_statistics\"));\nvar_dump(mysqlnd_ms_get_stats());","output":"mysqlnd_ms.enable = 1\nmysqlnd_ms.collect_statistics = 1\narray(26) {\n  [\"use_slave\"]=>\n  string(1) \"0\"\n  [\"use_master\"]=>\n  string(1) \"0\"\n  [\"use_slave_guess\"]=>\n  string(1) \"0\"\n  [\"use_master_guess\"]=>\n  string(1) \"0\"\n  [\"use_slave_sql_hint\"]=>\n  string(1) \"0\"\n  [\"use_master_sql_hint\"]=>\n  string(1) \"0\"\n  [\"use_last_used_sql_hint\"]=>\n  string(1) \"0\"\n  [\"use_slave_callback\"]=>\n  string(1) \"0\"\n  [\"use_master_callback\"]=>\n  string(1) \"0\"\n  [\"non_lazy_connections_slave_success\"]=>\n  string(1) \"0\"\n  [\"non_lazy_connections_slave_failure\"]=>\n  string(1) \"0\"\n  [\"non_lazy_connections_master_success\"]=>\n  string(1) \"0\"\n  [\"non_lazy_connections_master_failure\"]=>\n  string(1) \"0\"\n  [\"lazy_connections_slave_success\"]=>\n  string(1) \"0\"\n  [\"lazy_connections_slave_failure\"]=>\n  string(1) \"0\"\n  [\"lazy_connections_master_success\"]=>\n  string(1) \"0\"\n  [\"lazy_connections_master_failure\"]=>\n  string(1) \"0\"\n  [\"trx_autocommit_on\"]=>\n  string(1) \"0\"\n  [\"trx_autocommit_off\"]=>\n  string(1) \"0\"\n  [\"trx_master_forced\"]=>\n  string(1) \"0\"\n  [\"gtid_autocommit_injections_success\"]=>\n  string(1) \"0\"\n  [\"gtid_autocommit_injections_failure\"]=>\n  string(1) \"0\"\n  [\"gtid_commit_injections_success\"]=>\n  string(1) \"0\"\n  [\"gtid_commit_injections_failure\"]=>\n  string(1) \"0\"\n  [\"gtid_implicit_commit_injections_success\"]=>\n  string(1) \"0\"\n  [\"gtid_implicit_commit_injections_failure\"]=>\n  string(1) \"0\"\n  [\"transient_error_retries\"]=>\n  string(1) \"0\"\n}"}],"mysqlnd_ms_match_wild":[{"title":"mysqlnd_ms_match_wild() example","source":"var_dump(mysqlnd_ms_match_wild(\"schema_name.table_name\", \"schema%\"));\nvar_dump(mysqlnd_ms_match_wild(\"abc\", \"_\"));\nvar_dump(mysqlnd_ms_match_wild(\"table1\", \"table_\"));\nvar_dump(mysqlnd_ms_match_wild(\"asia_customers\", \"%customers\"));\nvar_dump(mysqlnd_ms_match_wild(\"funny%table\",\"funny\\%table\"));\nvar_dump(mysqlnd_ms_match_wild(\"funnytable\", \"funny%table\"));","output":"bool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(true)\nbool(true)"}],"mysqlnd_ms_query_is_select":[{"title":"mysqlnd_ms_query_is_select() example","source":"function is_select($query)\n{\n switch (mysqlnd_ms_query_is_select($query))\n {\n  case MYSQLND_MS_QUERY_USE_MASTER:\n   printf(\"'%s' should be run on the master.\\n\", $query);\n   break;\n  case MYSQLND_MS_QUERY_USE_SLAVE:\n   printf(\"'%s' should be run on a slave.\\n\", $query);\n   break;\n  case MYSQLND_MS_QUERY_USE_LAST_USED:\n   printf(\"'%s' should be run on the server that has run the previous query\\n\", $query);\n   break;\n  default:\n   printf(\"No suggestion where to run the '%s', fallback to master recommended\\n\", $query);\n   break;\n }\n}\n\nis_select(\"INSERT INTO test(id) VALUES (1)\");\nis_select(\"SELECT 1 FROM DUAL\");\nis_select(\"\/*\" . MYSQLND_MS_LAST_USED_SWITCH . \"*\/SELECT 2 FROM DUAL\");","output":"INSERT INTO test(id) VALUES (1) should be run on the master.\nSELECT 1 FROM DUAL should be run on a slave.\n\/*ms=last_used*\/SELECT 2 FROM DUAL should be run on the server that has run the previous query"}],"mysqlnd_ms_set_qos":[{"title":"mysqlnd_ms_set_qos() example","source":"\/* Open mysqlnd_ms connection using mysqli, PDO_MySQL or mysql extension *\/\n$mysqli = new mysqli(\"myapp\", \"username\", \"password\", \"database\");\nif (!$mysqli)\n  \/* Of course, your error handling is nicer... *\/\n  die(sprintf(\"[%d] %s\\n\", mysqli_connect_errno(), mysqli_connect_error()));\n\n\/* Session consistency: read your writes *\/\n$ret = mysqlnd_ms_set_qos($mysqli, MYSQLND_MS_QOS_CONSISTENCY_SESSION);\nif (!$ret)\n  die(sprintf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error));\n\n\/* Will use master and return fresh data, client can see his last write *\/\nif (!$res = $mysqli->query(\"SELECT item, price FROM orders WHERE order_id = 1\"))\n  die(sprintf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error));\n\n\/* Back to default: use of all slaves and masters permitted, stale data can happen *\/\nif (!mysqlnd_ms_set_qos($mysqli, MYSQLND_MS_QOS_CONSISTENCY_EVENTUAL))\n  die(sprintf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error));","output":null}],"mysqlnd_ms_set_user_pick_server":[{"title":"mysqlnd_ms_set_user_pick_server() example","source":"function pick_server($connected, $query, $master, $slaves, $last_used)\n{\n static $slave_idx = 0;\n static $num_slaves = NULL;\n if (is_null($num_slaves))\n  $num_slaves = count($slaves);\n\n \/* default: fallback to the plugins build-in logic *\/\n $ret = NULL;\n\n printf(\"User has connected to '%s'...\\n\", $connected);\n printf(\"... deciding where to run '%s'\\n\", $query);\n\n $where = mysqlnd_ms_query_is_select($query);\n switch ($where)\n {\n  case MYSQLND_MS_QUERY_USE_MASTER:\n   printf(\"... using master\\n\");\n   $ret = $master[0];\n   break;\n  case MYSQLND_MS_QUERY_USE_SLAVE:\n   \/* SELECT or SQL hint for using slave *\/\n   if (stristr($query, \"FROM table_on_slave_a_only\"))\n   {\n    \/* a table which is only on the first configured slave  *\/\n    printf(\"... access to table available only on slave A detected\\n\");\n    $ret = $slaves[0];\n   }\n   else\n   {\n    \/* round robin *\/\n    printf(\"... some read-only query for a slave\\n\");\n    $ret = $slaves[$slave_idx++ % $num_slaves];\n   }\n   break;\n  case MYSQLND_MS_QUERY_LAST_USED:\n   printf(\"... using last used server\\n\");\n   $ret = $last_used;\n   break;\n }\n\n printf(\"... ret = '%s'\\n\", $ret);\n return $ret;\n}\n\nmysqlnd_ms_set_user_pick_server(\"pick_server\");\n\n$mysqli = new mysqli(\"myapp\", \"root\", \"root\", \"test\");\n\nif (!($res = $mysqli->query(\"SELECT 1 FROM DUAL\")))\n printf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error);\nelse\n $res->close();\n\nif (!($res = $mysqli->query(\"SELECT 2 FROM DUAL\")))\n printf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error);\nelse\n $res->close();\n\n\nif (!($res = $mysqli->query(\"SELECT * FROM table_on_slave_a_only\")))\n printf(\"[%d] %s\\n\", $mysqli->errno, $mysqli->error);\nelse\n $res->close();\n\n$mysqli->close();","output":"User has connected to 'myapp'...\n... deciding where to run 'SELECT 1 FROM DUAL'\n... some read-only query for a slave\n... ret = 'tcp:\/\/192.168.2.27:3306'\nUser has connected to 'myapp'...\n... deciding where to run 'SELECT 2 FROM DUAL'\n... some read-only query for a slave\n... ret = 'tcp:\/\/192.168.78.136:3306'\nUser has connected to 'myapp'...\n... deciding where to run 'SELECT * FROM table_on_slave_a_only'\n... access to table available only on slave A detected\n... ret = 'tcp:\/\/192.168.2.27:3306'"}],"mysqlnd_qc_get_available_handlers":[{"title":"mysqlnd_qc_get_available_handlers() example","source":"var_dump(mysqlnd_qc_get_available_handlers());","output":"array(5) {\n  [\"default\"]=>\n  array(2) {\n    [\"version\"]=>\n    string(5) \"1.0.0\"\n    [\"version_number\"]=>\n    int(100000)\n  }\n  [\"user\"]=>\n  array(2) {\n    [\"version\"]=>\n    string(5) \"1.0.0\"\n    [\"version_number\"]=>\n    int(100000)\n  }\n  [\"APC\"]=>\n  array(2) {\n    [\"version\"]=>\n    string(5) \"1.0.0\"\n    [\"version_number\"]=>\n    int(100000)\n  }\n  [\"MEMCACHE\"]=>\n  array(2) {\n    [\"version\"]=>\n    string(5) \"1.0.0\"\n    [\"version_number\"]=>\n    int(100000)\n  }\n  [\"sqlite\"]=>\n  array(2) {\n    [\"version\"]=>\n    string(5) \"1.0.0\"\n    [\"version_number\"]=>\n    int(100000)\n  }\n}"}],"mysqlnd_qc_get_cache_info":[{"title":"mysqlnd_qc_get_cache_info() example","source":"\/* Populate the cache, e.g. using mysqli *\/\n$mysqli = new mysqli(\"host\", \"user\", \"password\", \"schema\");\n$mysqli->query(\"\/*\" . MYSQLND_QC_ENABLE_SWITCH . \"*\/SELECT id FROM test\");\n\n\/* Display cache information *\/\nvar_dump(mysqlnd_qc_get_cache_info());","output":"array(4) {\n [\"num_entries\"]=>\n int(1)\n [\"handler\"]=>\n string(7) \"default\"\n [\"handler_version\"]=>\n string(5) \"1.0.0\"\n [\"data\"]=>\n array(1) {\n   [\"Localhost via UNIX socket 3306 user schema|\/*qc=on*\/SELECT id FROM test\"]=>\n   array(2) {\n     [\"statistics\"]=>\n     array(11) {\n       [\"rows\"]=>\n       int(6)\n       [\"stored_size\"]=>\n       int(101)\n       [\"cache_hits\"]=>\n       int(0)\n       [\"run_time\"]=>\n       int(471)\n       [\"store_time\"]=>\n       int(27)\n       [\"min_run_time\"]=>\n       int(0)\n       [\"max_run_time\"]=>\n       int(0)\n       [\"min_store_time\"]=>\n       int(0)\n       [\"max_store_time\"]=>\n       int(0)\n       [\"avg_run_time\"]=>\n       int(0)\n       [\"avg_store_time\"]=>\n       int(0)\n     }\n     [\"metadata\"]=>\n     array(1) {\n       [0]=>\n       array(8) {\n         [\"name\"]=>\n         string(2) \"id\"\n         [\"orig_name\"]=>\n         string(2) \"id\"\n         [\"table\"]=>\n         string(4) \"test\"\n         [\"orig_table\"]=>\n         string(4) \"test\"\n         [\"db\"]=>\n         string(4) \"schema\"\n         [\"max_length\"]=>\n         int(1)\n         [\"length\"]=>\n         int(11)\n         [\"type\"]=>\n         int(3)\n       }\n     }\n   }\n }\n}"}],"mysqlnd_qc_get_core_stats":[{"title":"mysqlnd_qc_get_core_stats() example","source":"\/* Enable collection of statistics - default: disabled *\/\nini_set(\"mysqlnd_qc.collect_statistics\", 1);\n\n\/* Enable collection of all timing related statistics -\ndefault: enabled but overruled by mysqlnd_qc.collect_statistics = 0 *\/\nini_set(\"mysqlnd_qc.collect_time_statistics\", 1);\n\n\/* Populate the cache, e.g. using mysqli *\/\n$mysqli = new mysqli('host', 'user', 'password', 'schema');\n\n\/* Cache miss and cache put *\/\n$mysqli->query(\"\/*qc=on*\/SELECT id FROM test\");\n\/* Cache hit *\/\n$mysqli->query(\"\/*qc=on*\/SELECT id FROM test\");\n\n\/* Display core statistics *\/\nvar_dump(mysqlnd_qc_get_core_stats());","output":"array(26) {\n  [\"cache_hit\"]=>\n  string(1) \"1\"\n  [\"cache_miss\"]=>\n  string(1) \"1\"\n  [\"cache_put\"]=>\n  string(1) \"1\"\n  [\"query_should_cache\"]=>\n  string(1) \"2\"\n  [\"query_should_not_cache\"]=>\n  string(1) \"0\"\n  [\"query_not_cached\"]=>\n  string(1) \"0\"\n  [\"query_could_cache\"]=>\n  string(1) \"2\"\n  [\"query_found_in_cache\"]=>\n  string(1) \"1\"\n  [\"query_uncached_other\"]=>\n  string(1) \"0\"\n  [\"query_uncached_no_table\"]=>\n  string(1) \"0\"\n  [\"query_uncached_no_result\"]=>\n  string(1) \"0\"\n  [\"query_uncached_use_result\"]=>\n  string(1) \"0\"\n  [\"query_aggr_run_time_cache_hit\"]=>\n  string(1) \"4\"\n  [\"query_aggr_run_time_cache_put\"]=>\n  string(3) \"395\"\n  [\"query_aggr_run_time_total\"]=>\n  string(3) \"399\"\n  [\"query_aggr_store_time_cache_hit\"]=>\n  string(1) \"2\"\n  [\"query_aggr_store_time_cache_put\"]=>\n  string(1) \"8\"\n  [\"query_aggr_store_time_total\"]=>\n  string(2) \"10\"\n  [\"receive_bytes_recorded\"]=>\n  string(2) \"65\"\n  [\"receive_bytes_replayed\"]=>\n  string(2) \"65\"\n  [\"send_bytes_recorded\"]=>\n  string(2) \"29\"\n  [\"send_bytes_replayed\"]=>\n  string(2) \"29\"\n  [\"slam_stale_refresh\"]=>\n  string(1) \"0\"\n  [\"slam_stale_hit\"]=>\n  string(1) \"0\"\n  [\"request_counter\"]=>\n  int(1)\n  [\"process_hash\"]=>\n  int(3547549858)\n}"}],"mysqlnd_qc_get_normalized_query_trace_log":[{"title":"mysqlnd_qc_get_normalized_query_trace_log() example","source":"\/* Connect, create and populate test table *\/\n$mysqli = new mysqli(\"host\", \"user\", \"password\", \"schema\", \"port\", \"socket\");\n$mysqli->query(\"DROP TABLE IF EXISTS test\");\n$mysqli->query(\"CREATE TABLE test(id INT)\");\n$mysqli->query(\"INSERT INTO test(id) VALUES (1), (2)\");\n\n\/* not cached *\/\n$res = $mysqli->query(\"SELECT id FROM test WHERE id = 1\");\nvar_dump($res->fetch_assoc());\n$res->free();\n\n\/* cache put *\/\n$res = $mysqli->query(\"\/*\" . MYSQLND_QC_ENABLE_SWITCH . \"*\/\" . \"SELECT id FROM test WHERE id = 2\");\nvar_dump($res->fetch_assoc());\n$res->free();\n\n\/* cache hit *\/\n$res = $mysqli->query(\"\/*\" . MYSQLND_QC_ENABLE_SWITCH . \"*\/\" . \"SELECT id FROM test WHERE id = 2\");\nvar_dump($res->fetch_assoc());\n$res->free();\n\nvar_dump(mysqlnd_qc_get_normalized_query_trace_log());","output":"array(1) {\n  [\"id\"]=>\n  string(1) \"1\"\n}\narray(1) {\n  [\"id\"]=>\n  string(1) \"2\"\n}\narray(1) {\n  [\"id\"]=>\n  string(1) \"2\"\n}\narray(4) {\n  [0]=>\n  array(9) {\n    [\"query\"]=>\n    string(25) \"DROP TABLE IF EXISTS test\"\n    [\"occurences\"]=>\n    int(0)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"avg_run_time\"]=>\n    int(0)\n    [\"min_run_time\"]=>\n    int(0)\n    [\"max_run_time\"]=>\n    int(0)\n    [\"avg_store_time\"]=>\n    int(0)\n    [\"min_store_time\"]=>\n    int(0)\n    [\"max_store_time\"]=>\n    int(0)\n  }\n  [1]=>\n  array(9) {\n    [\"query\"]=>\n    string(27) \"CREATE TABLE test (id INT )\"\n    [\"occurences\"]=>\n    int(0)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"avg_run_time\"]=>\n    int(0)\n    [\"min_run_time\"]=>\n    int(0)\n    [\"max_run_time\"]=>\n    int(0)\n    [\"avg_store_time\"]=>\n    int(0)\n    [\"min_store_time\"]=>\n    int(0)\n    [\"max_store_time\"]=>\n    int(0)\n  }\n  [2]=>\n  array(9) {\n    [\"query\"]=>\n    string(40) \"INSERT INTO test (id ) VALUES (? ), (? )\"\n    [\"occurences\"]=>\n    int(0)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"avg_run_time\"]=>\n    int(0)\n    [\"min_run_time\"]=>\n    int(0)\n    [\"max_run_time\"]=>\n    int(0)\n    [\"avg_store_time\"]=>\n    int(0)\n    [\"min_store_time\"]=>\n    int(0)\n    [\"max_store_time\"]=>\n    int(0)\n  }\n  [3]=>\n  array(9) {\n    [\"query\"]=>\n    string(31) \"SELECT id FROM test WHERE id =?\"\n    [\"occurences\"]=>\n    int(2)\n    [\"eligible_for_caching\"]=>\n    bool(true)\n    [\"avg_run_time\"]=>\n    int(159)\n    [\"min_run_time\"]=>\n    int(12)\n    [\"max_run_time\"]=>\n    int(307)\n    [\"avg_store_time\"]=>\n    int(10)\n    [\"min_store_time\"]=>\n    int(8)\n    [\"max_store_time\"]=>\n    int(13)\n  }\n}"}],"mysqlnd_qc_get_query_trace_log":[{"title":"mysqlnd_qc_get_query_trace_log() example","source":"\/* Connect, create and populate test table *\/\n$mysqli = new mysqli(\"host\", \"user\", \"password\", \"schema\", \"port\", \"socket\");\n$mysqli->query(\"DROP TABLE IF EXISTS test\");\n$mysqli->query(\"CREATE TABLE test(id INT)\");\n$mysqli->query(\"INSERT INTO test(id) VALUES (1), (2)\");\n\n\/* not cached *\/\n$res = $mysqli->query(\"SELECT id FROM test WHERE id = 1\");\nvar_dump($res->fetch_assoc());\n$res->free();\n\n\/* cache put *\/\n$res = $mysqli->query(\"\/*\" . MYSQLND_QC_ENABLE_SWITCH . \"*\/\" . \"SELECT id FROM test WHERE id = 2\");\nvar_dump($res->fetch_assoc());\n$res->free();\n\n\/* cache hit *\/\n$res = $mysqli->query(\"\/*\" . MYSQLND_QC_ENABLE_SWITCH . \"*\/\" . \"SELECT id FROM test WHERE id = 2\");\nvar_dump($res->fetch_assoc());\n$res->free();\n\nvar_dump(mysqlnd_qc_get_query_trace_log());","output":"array(1) {\n  [\"id\"]=>\n  string(1) \"1\"\n}\narray(1) {\n  [\"id\"]=>\n  string(1) \"2\"\n}\narray(1) {\n  [\"id\"]=>\n  string(1) \"2\"\n}\narray(6) {\n  [0]=>\n  array(8) {\n    [\"query\"]=>\n    string(25) \"DROP TABLE IF EXISTS test\"\n    [\"origin\"]=>\n    string(102) \"#0 qc.php(4): mysqli->query('DROP TABLE IF E...')\n#1 {main}\"\n    [\"run_time\"]=>\n    int(0)\n    [\"store_time\"]=>\n    int(0)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"no_table\"]=>\n    bool(false)\n    [\"was_added\"]=>\n    bool(false)\n    [\"was_already_in_cache\"]=>\n    bool(false)\n  }\n  [1]=>\n  array(8) {\n    [\"query\"]=>\n    string(25) \"CREATE TABLE test(id INT)\"\n    [\"origin\"]=>\n    string(102) \"#0 qc.php(5): mysqli->query('CREATE TABLE te...')\n#1 {main}\"\n    [\"run_time\"]=>\n    int(0)\n    [\"store_time\"]=>\n    int(0)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"no_table\"]=>\n    bool(false)\n    [\"was_added\"]=>\n    bool(false)\n    [\"was_already_in_cache\"]=>\n    bool(false)\n  }\n  [2]=>\n  array(8) {\n    [\"query\"]=>\n    string(36) \"INSERT INTO test(id) VALUES (1), (2)\"\n    [\"origin\"]=>\n    string(102) \"#0 qc.php(6): mysqli->query('INSERT INTO tes...')\n#1 {main}\"\n    [\"run_time\"]=>\n    int(0)\n    [\"store_time\"]=>\n    int(0)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"no_table\"]=>\n    bool(false)\n    [\"was_added\"]=>\n    bool(false)\n    [\"was_already_in_cache\"]=>\n    bool(false)\n  }\n  [3]=>\n  array(8) {\n    [\"query\"]=>\n    string(32) \"SELECT id FROM test WHERE id = 1\"\n    [\"origin\"]=>\n    string(102) \"#0 qc.php(9): mysqli->query('SELECT id FROM ...')\n#1 {main}\"\n    [\"run_time\"]=>\n    int(0)\n    [\"store_time\"]=>\n    int(25)\n    [\"eligible_for_caching\"]=>\n    bool(false)\n    [\"no_table\"]=>\n    bool(false)\n    [\"was_added\"]=>\n    bool(false)\n    [\"was_already_in_cache\"]=>\n    bool(false)\n  }\n  [4]=>\n  array(8) {\n    [\"query\"]=>\n    string(41) \"\/*qc=on*\/SELECT id FROM test WHERE id = 2\"\n    [\"origin\"]=>\n    string(103) \"#0 qc.php(14): mysqli->query('\/*qc=on*\/SELECT...')\n#1 {main}\"\n    [\"run_time\"]=>\n    int(311)\n    [\"store_time\"]=>\n    int(13)\n    [\"eligible_for_caching\"]=>\n    bool(true)\n    [\"no_table\"]=>\n    bool(false)\n    [\"was_added\"]=>\n    bool(true)\n    [\"was_already_in_cache\"]=>\n    bool(false)\n  }\n  [5]=>\n  array(8) {\n    [\"query\"]=>\n    string(41) \"\/*qc=on*\/SELECT id FROM test WHERE id = 2\"\n    [\"origin\"]=>\n    string(103) \"#0 qc.php(19): mysqli->query('\/*qc=on*\/SELECT...')\n#1 {main}\"\n    [\"run_time\"]=>\n    int(13)\n    [\"store_time\"]=>\n    int(8)\n    [\"eligible_for_caching\"]=>\n    bool(true)\n    [\"no_table\"]=>\n    bool(false)\n    [\"was_added\"]=>\n    bool(false)\n    [\"was_already_in_cache\"]=>\n    bool(true)\n  }\n}"}],"mysqlnd_qc_set_cache_condition":[{"title":"mysqlnd_qc_set_cache_condition() example","source":"\/* Cache all accesses to tables with the name \"new%\" in schema\/database \"db_example\" for 1 second *\/\nif (!mysqlnd_qc_set_cache_condition(MYSQLND_QC_CONDITION_META_SCHEMA_PATTERN, \"db_example.new%\", 1)) {\n  die(\"Failed to set cache condition!\");\n}\n\n$mysqli = new mysqli(\"host\", \"user\", \"password\", \"db_example\", \"port\");\n\/* cached although no SQL hint given  *\/\n$mysqli->query(\"SELECT id, title FROM news\");\n\n$pdo_mysql = new PDO(\"mysql:host=host;dbname=db_example;port=port\", \"user\", \"password\");\n\/* not cached: no SQL hint, no pattern match *\/\n$pdo_mysql->query(\"SELECT id, title FROM latest_news\");\n\/* cached: TTL 1 second, pattern match *\/\n$pdo_mysql->query(\"SELECT id, title FROM news\");","output":null}],"mysqlnd_qc_set_is_select":[{"title":"mysqlnd_qc_set_is_select() example","source":"\/* callback which decides if query is cached *\/\nfunction is_select($query) {\n  static $patterns = array(\n   \/* true - use default from mysqlnd_qc.ttl *\/\n   \"@SELECT\\s+.*\\s+FROM\\s+test@ismU\" => true,\n   \/* 3 - use TTL = 3 seconds *\/\n   \"@SELECT\\s+.*\\s+FROM\\s+news@ismU\" => 3\n  );\n  \/* check if query does match pattern *\/\n  foreach ($patterns as $pattern => $ttl) {\n    if (preg_match($pattern, $query)) {\n      printf(\"is_select(%45s): cache\\n\", $query);\n      return $ttl;\n    }\n  }\n  printf(\"is_select(%45s): do not cache\\n\", $query);\n  return false;\n}\nmysqlnd_qc_set_is_select(\"is_select\");\n\n\/* Connect, create and populate test table *\/\n$mysqli = new mysqli(\"host\", \"user\", \"password\", \"schema\");\n$mysqli->query(\"DROP TABLE IF EXISTS test\");\n$mysqli->query(\"CREATE TABLE test(id INT)\");\n$mysqli->query(\"INSERT INTO test(id) VALUES (1), (2), (3)\");\n\n\/* cache put *\/\n$mysqli->query(\"SELECT id FROM test WHERE id = 1\");\n\/* cache hit *\/\n$mysqli->query(\"SELECT id FROM test WHERE id = 1\");\n\/* cache put *\/\n$mysqli->query(\"SELECT * FROM test\");","output":"is_select(                    DROP TABLE IF EXISTS test): do not cache\nis_select(                    CREATE TABLE test(id INT)): do not cache\nis_select(    INSERT INTO test(id) VALUES (1), (2), (3)): do not cache\nis_select(             SELECT id FROM test WHERE id = 1): cache\nis_select(             SELECT id FROM test WHERE id = 1): cache\nis_select(                           SELECT * FROM test): cache"}],"mysqlnd_qc_set_storage_handler":[{"title":"mysqlnd_qc_set_storage_handler() example","source":"var_dump(mysqlnd_qc_set_storage_handler(\"memcache\"));\n\nif (true === mysqlnd_qc_set_storage_handler(\"default\"))\n  printf(\"Default storage handler activated\");\n\n\/* Catchable fatal error *\/\nvar_dump(mysqlnd_qc_set_storage_handler(\"unknown\"));","output":"bool(true)\nDefault storage handler activated\nCatchable fatal error: mysqlnd_qc_set_storage_handler(): Unknown handler 'unknown' in (file) on line (line)"}],"mysqlnd_uh_convert_to_mysqlnd":[{"title":"mysqlnd_uh_convert_to_mysqlnd() example","source":"\/* PDO user API gives no access to connection thread id *\/\n$mysql_connection = new PDO(\"mysql:host=localhost;dbname=test\", \"root\", \"\");\n\n\/* Convert PDO MySQL handle to mysqlnd handle *\/\n$mysqlnd = mysqlnd_uh_convert_to_mysqlnd($mysql_connection);\n\n\/* Create Proxy to call mysqlnd connection class methods *\/\n$obj = new MySQLndUHConnection();\n\/* Call mysqlnd_conn::get_thread_id *\/\nvar_dump($obj->getThreadId($mysqlnd));\n\n\/* Use SQL to fetch connection thread id *\/\nvar_dump($mysql_connection->query(\"SELECT CONNECTION_ID()\")->fetchAll());","output":"int(27054)\narray(1) {\n  [0]=>\n  array(2) {\n    [\"CONNECTION_ID()\"]=>\n    string(5) \"27054\"\n    [0]=>\n    string(5) \"27054\"\n  }\n}"}],"mysqlnd_uh_set_connection_proxy":[{"title":"mysqlnd_uh_set_connection_proxy() example","source":"$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->query(\"SELECT 'No proxy installed, yet'\");\n\nclass proxy extends MysqlndUhConnection {\n public function query($res, $query) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::query($res, $query);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli->query(\"SELECT 'mysqlnd rocks!'\");\n\n$mysql = mysql_connect(\"localhost\", \"root\", \"\", \"test\");\nmysql_query(\"SELECT 'Ahoy Andrey!'\", $mysql);\n\n$pdo = new PDO(\"mysql:host=localhost;dbname=test\", \"root\", \"\");\n$pdo->query(\"SELECT 'Moin Johannes!'\");","output":"proxy::query(array (\n  0 => NULL,\n  1 => 'SELECT \\'mysqlnd rocks!\\'',\n))\nproxy::query returns true\nproxy::query(array (\n  0 => NULL,\n  1 => 'SELECT \\'Ahoy Andrey!\\'',\n))\nproxy::query returns true\nproxy::query(array (\n  0 => NULL,\n  1 => 'SELECT \\'Moin Johannes!\\'',\n))\nproxy::query returns true"}],"natcasesort":[{"title":"natcasesort() example","source":"$array1 = $array2 = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');\n\nsort($array1);\necho \"Standard sorting\\n\";\nprint_r($array1);\n\nnatcasesort($array2);\necho \"\\nNatural order sorting (case-insensitive)\\n\";\nprint_r($array2);","output":"Standard sorting\nArray\n(\n    [0] => IMG0.png\n    [1] => IMG3.png\n    [2] => img1.png\n    [3] => img10.png\n    [4] => img12.png\n    [5] => img2.png\n)\n\nNatural order sorting (case-insensitive)\nArray\n(\n    [0] => IMG0.png\n    [4] => img1.png\n    [3] => img2.png\n    [5] => IMG3.png\n    [2] => img10.png\n    [1] => img12.png\n)"}],"natsort":[{"title":"natsort() examples demonstrating basic usage","source":"$array1 = $array2 = array(\"img12.png\", \"img10.png\", \"img2.png\", \"img1.png\");\n\nasort($array1);\necho \"Standard sorting\\n\";\nprint_r($array1);\n\nnatsort($array2);\necho \"\\nNatural order sorting\\n\";\nprint_r($array2);","output":"Standard sorting\nArray\n(\n    [3] => img1.png\n    [1] => img10.png\n    [0] => img12.png\n    [2] => img2.png\n)\n\nNatural order sorting\nArray\n(\n    [3] => img1.png\n    [2] => img2.png\n    [1] => img10.png\n    [0] => img12.png\n)"},{"title":"natsort() examples demonstrating potential gotchas","source":"echo \"Negative numbers\\n\";\n$negative = array('-5','3','-2','0','-1000','9','1');\nprint_r($negative);\nnatsort($negative);\nprint_r($negative);\n\necho \"Zero padding\\n\";\n$zeros = array('09', '8', '10', '009', '011', '0'); \nprint_r($zeros);\nnatsort($zeros);\nprint_r($zeros);","output":"Negative numbers\nArray\n(\n    [0] => -5\n    [1] => 3\n    [2] => -2\n    [3] => 0\n    [4] => -1000\n    [5] => 9\n    [6] => 1\n)\nArray\n(\n    [2] => -2\n    [0] => -5\n    [4] => -1000\n    [3] => 0\n    [6] => 1\n    [1] => 3\n    [5] => 9\n)\n\nZero padding\nArray\n(\n    [0] => 09\n    [1] => 8\n    [2] => 10\n    [3] => 009\n    [4] => 011\n    [5] => 0\n)\nArray\n(\n    [5] => 0\n    [1] => 8\n    [3] => 009\n    [0] => 09\n    [2] => 10\n    [4] => 011\n)"}],"ncurses_color_set":[{"title":"Writing a string with a specified color to the screen","source":"ncurses_init();\n\n\/\/ If the terminal supports colors, initialize and set active color\nif (ncurses_has_colors()) {\n    ncurses_start_color();\n    ncurses_init_pair(1, NCURSES_COLOR_YELLOW, NCURSES_COLOR_BLUE);\n    ncurses_color_set(1);\n}\n\n\/\/ Write a string at specified location\nncurses_mvaddstr(10, 10, \"Hello world! Yellow on blue text!\");\n\n\/\/ Flush output to screen\nncurses_refresh();\n\nncurses_end();","output":null}],"ncurses_getmouse":[{"title":"ncurses_getmouse() example","source":"switch (ncurses_getch()){\n  case NCURSES_KEY_MOUSE:\n    if (!ncurses_getmouse($mevent)){\n      if ($mevent[\"mmask\"] & NCURSES_MOUSE_BUTTON1_PRESSED){\n        $mouse_x = $mevent[\"x\"]; \/\/ Save mouse position\n        $mouse_y = $mevent[\"y\"];\n      }\n    }\n  break;\n\n  default:\n    \/* .... *\/\n}","output":null}],"ncurses_has_colors":[{"title":"Writing a string with a specified color to the screen","source":"ncurses_init();\n\n\/\/ If the terminal supports colors, initialize and set active color\nif (ncurses_has_colors()) {\n    ncurses_start_color();\n    ncurses_init_pair(1, NCURSES_COLOR_YELLOW, NCURSES_COLOR_BLUE);\n    ncurses_color_set(1);\n}\n\n\/\/ Write a string at specified location\nncurses_mvaddstr(10, 10, \"Hello world! Yellow on blue text!\");\n\n\/\/ Flush output to screen\nncurses_refresh();\n\nncurses_end();","output":null}],"ncurses_init_pair":[{"title":"Writing a string with a specified color to the screen","source":"ncurses_init();\n\n\/\/ If the terminal supports colors, initialize and set active color\nif (ncurses_has_colors()) {\n    ncurses_start_color();\n    ncurses_init_pair(1, NCURSES_COLOR_YELLOW, NCURSES_COLOR_BLUE);\n    ncurses_color_set(1);\n}\n\n\/\/ Write a string at specified location\nncurses_mvaddstr(10, 10, \"Hello world! Yellow on blue text!\");\n\n\/\/ Flush output to screen\nncurses_refresh();\n\nncurses_end();","output":null}],"ncurses_mousemask":[{"title":"ncurses_mousemask() example","source":"$newmask = NCURSES_BUTTON1_CLICKED + NCURSES_BUTTON1_RELEASED;\n$mask = ncurses_mousemask($newmask, $oldmask);\nif ($mask & $newmask){\n    printf(\"All specified mouse options will be supported\\n\");\n}","output":null}],"ncurses_start_color":[{"title":"Writing a string with a specified color to the screen","source":"ncurses_init();\n\n\/\/ If the terminal supports colors, initialize and set active color\nif (ncurses_has_colors()) {\n    ncurses_start_color();\n    ncurses_init_pair(1, NCURSES_COLOR_YELLOW, NCURSES_COLOR_BLUE);\n    ncurses_color_set(1);\n}\n\n\/\/ Write a string at specified location\nncurses_mvaddstr(10, 10, \"Hello world! Yellow on blue text!\");\n\n\/\/ Flush output to screen\nncurses_refresh();\n\nncurses_end();","output":null}],"newt_button":[{"title":"A newt_button() example","source":"$form = newt_form();\n\n$ok_button = newt_button(5, 12, \"Run Tool\");\n    \nnewt_form_add_component($form, $ok_button);","output":null}],"newt_draw_root_text":[{"title":"A newt_draw_root_text() example","source":"newt_init();\n newt_cls();\n\n newt_draw_root_text (2, 0, \"Some root text\");\n newt_refresh();\n sleep(1);\n\n newt_draw_root_text (-30, 0, \"Root text in the other corner\");\n newt_refresh();\n sleep(1);\n\n newt_finished();","output":null}],"newt_form_add_component":[{"title":"A newt_form_add_component() example","source":"$form = newt_form();\n\n$options = array(\"Authentication configuration\", \"Firewall configuration\",\n\"Mouse configuration\", \"Network configuration\", \"Printer configuration\",\n\"System services\");\n\n$list = newt_listbox(3, 2, 10);\n\nforeach ($options as $l_item) {\n    newt_listbox_add_entry($list, $l_item, $l_item);\n}\n\nnewt_form_add_component($form, $list);","output":null}],"newt_form_add_components":[{"title":"A newt_form_add_components() example","source":"$form = newt_form();\n\n$b1 = newt_button(5, 12, \"Run Tool\");\n$b2 = newt_button(21, 12, \"Quit\");\n\nnewt_form_add_components($form, array($b1, $b2));","output":null}],"newt_form":[{"title":"A newt_form() example","source":"newt_init();\nnewt_cls();\n\n$myform = newt_form();\n$button = newt_button (5, 12, \"Quit\");\n\nnewt_form_add_component ($myform, $button);\nnewt_refresh ();\nnewt_run_form ($myform);\n\nnewt_finished ();\nnewt_form_destroy ($myform);","output":null}],"newt_get_screen_size":[{"title":"A newt_get_screen_size() example","source":"newt_init();\n newt_get_screen_size (&$cols, &$rows);\n newt_finished();\n\n print \"Your terminal size is: {$cols}x{$rows}\\n\";","output":"Your terminal size is: 138x47"}],"newt_win_entries":[{"title":"A newt_win_entries() example","source":"newt_init();\nnewt_cls();\n\n$entries[] = array('text' => 'First name:', 'value' => &$f_name);\n$entries[] = array('text' => 'Last name:',  'value' => &$l_name);\n\n$rc = newt_win_entries(\"User information\", \"Please enter your credentials:\", 50, 7, 7, 30, $entries, \"Ok\", \"Back\");\nnewt_finished ();\n\nif ($rc != 2) {\n    echo \"Your name is: $f_name $l_name\\n\";\n}","output":null}],"next":[{"title":"Example use of next() and friends","source":"$transport = array('foot', 'bike', 'car', 'plane');\n$mode = current($transport); \/\/ $mode = 'foot';\n$mode = next($transport);    \/\/ $mode = 'bike';\n$mode = next($transport);    \/\/ $mode = 'car';\n$mode = prev($transport);    \/\/ $mode = 'bike';\n$mode = end($transport);     \/\/ $mode = 'plane';","output":null}],"ngettext":[{"title":"ngettext() example","source":"setlocale(LC_ALL, 'cs_CZ');\nprintf(ngettext(\"%d window\", \"%d windows\", 1), 1); \/\/ 1 okno\nprintf(ngettext(\"%d window\", \"%d windows\", 2), 2); \/\/ 2 okna\nprintf(ngettext(\"%d window\", \"%d windows\", 5), 5); \/\/ 5 oken","output":null}],"nl2br":[{"title":"Using nl2br()","source":"echo nl2br(\"foo isn't\\n bar\");","output":"foo isn't<br \/>\n bar"},{"title":"Generating valid HTML markup using the is_xhtml parameter","source":"echo nl2br(\"Welcome\\r\\nThis is my HTML document\", false);","output":"Welcome<br>\nThis is my HTML document"},{"title":"Various newline separators","source":"$string = \"This\\r\\nis\\n\\ra\\nstring\\r\";\necho nl2br($string);","output":"This<br \/>\nis<br \/>\na<br \/>\nstring<br \/>"}],"nsapi_request_headers":[{"title":"nsapi_request_headers() example","source":"$headers = nsapi_request_headers();\n\nforeach ($headers as $header => $value) {\n  echo \"$header: $value <br \/>\\n\";\n}","output":null}],"ob_end_clean":[{"title":"ob_end_clean() example","source":"ob_start();\necho 'Text that won\\'t get displayed.';\nob_end_clean();","output":null}],"ob_end_flush":[{"title":"ob_end_flush() example","source":"while (@ob_end_flush());","output":null}],"ob_get_clean":[{"title":"A simple ob_get_clean() example","source":"ob_start();\n\necho \"Hello World\";\n\n$out = ob_get_clean();\n$out = strtolower($out);\n\nvar_dump($out);","output":"string(11) \"hello world\""}],"ob_get_contents":[{"title":"A simple ob_get_contents() example","source":"ob_start();\n\necho \"Hello \";\n\n$out1 = ob_get_contents();\n\necho \"World\";\n\n$out2 = ob_get_contents();\n\nob_end_clean();\n\nvar_dump($out1, $out2);","output":"string(6) \"Hello \"\nstring(11) \"Hello World\""}],"ob_get_flush":[{"title":"ob_get_flush() example","source":"\/\/using output_buffering=On\nprint_r(ob_list_handlers());\n\n\/\/save buffer in a file\n$buffer = ob_get_flush();\nfile_put_contents('buffer.txt', $buffer);\n\nprint_r(ob_list_handlers());","output":"Array\n(\n    [0] => default output handler\n)\nArray\n(\n)"}],"ob_get_length":[{"title":"A simple ob_get_length() example","source":"ob_start();\n\necho \"Hello \";\n\n$len1 = ob_get_length();\n\necho \"World\";\n\n$len2 = ob_get_length();\n\nob_end_clean();\n\necho $len1 . \", .\" . $len2;","output":"6, 11"}],"ob_get_status":[{"title":null,"source":"Get status of output buffers\n ob_get_level\n ob_gzhandler\n Output Control Functions\n PHP Manual\n\n \n  ob_get_status\n  (PHP 4 >= 4.2.0, PHP 5, PHP 7)ob_get_status — Get status of output buffers\n\n \n \n \n  Description\n  \n   array ob_get_status\n    ([ bool  $full_status  = FALSE\n  ] )\n\n  \n   ob_get_status() returns status information on either\n   the top level output buffer or all active output buffer levels if\n   full_status is set to TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \nfull_status\n\n     \n\n      \n       TRUE to return all active output buffer levels. If FALSE or not\n       set, only the top level output buffer is returned.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   If called without the full_status parameter\n   or with full_status = FALSE a simple array\n   with the following elements is returned:\n   \n    \nArray\n(\n    [level] => 2\n    [type] => 0\n    [status] => 0\n    [name] => URL-Rewriter\n    [del] => 1\n)\n\n    \n   \n   Simple ob_get_status() results\n    KeyValue\n    levelOutput nesting leveltypePHP_OUTPUT_HANDLER_INTERNAL (0) or PHP_OUTPUT_HANDLER_USER (1)statusOne of PHP_OUTPUT_HANDLER_START (0), PHP_OUTPUT_HANDLER_CONT (1) or PHP_OUTPUT_HANDLER_END (2)nameName of active output handler or ' default output handler' if none is setdelErase-flag as set by ob_start()\n   If called with full_status = TRUE an array\n   with one element for each active output buffer level is returned.\n   The output level is used as key of the top level array and each array\n   element itself is another array holding status information\n   on one active output level.\n   \n    \n\nArray\n(\n    [0] => Array\n        (\n            [chunk_size] => 0\n            [size] => 40960\n            [block_size] => 10240\n            [type] => 1\n            [status] => 0\n            [name] => default output handler\n            [del] => 1\n        )\n\n    [1] => Array\n        (\n            [chunk_size] => 0\n            [size] => 40960\n            [block_size] => 10240\n            [type] => 0\n            [buffer_size] => 0\n            [status] => 0\n            [name] => URL-Rewriter\n            [del] => 1\n        )\n\n)\n\n    \n   \n  \n  \n   The full output contains these additional elements:\n   Full ob_get_status() results\n    KeyValue\n    chunk_sizeChunk size as set by ob_start()size...blocksize...\n\n\n \n  See Also\n  \n   ob_get_level() - Return the nesting level of the output buffering mechanism\n    ob_list_handlers() - List all output handlers in use\n   \n\n\n\n ob_get_level\n ob_gzhandler\n Output Control Functions\n PHP Manual","output":null},{"title":null,"source":"Get status of output buffers\n ob_get_level\n ob_gzhandler\n Output Control Functions\n PHP Manual\n\n \n  ob_get_status\n  (PHP 4 >= 4.2.0, PHP 5, PHP 7)ob_get_status — Get status of output buffers\n\n \n \n \n  Description\n  \n   array ob_get_status\n    ([ bool  $full_status  = FALSE\n  ] )\n\n  \n   ob_get_status() returns status information on either\n   the top level output buffer or all active output buffer levels if\n   full_status is set to TRUE.\n  \n \n\n\n \n  Parameters\n  \n   \nfull_status\n\n     \n\n      \n       TRUE to return all active output buffer levels. If FALSE or not\n       set, only the top level output buffer is returned.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   If called without the full_status parameter\n   or with full_status = FALSE a simple array\n   with the following elements is returned:\n   \n    \nArray\n(\n    [level] => 2\n    [type] => 0\n    [status] => 0\n    [name] => URL-Rewriter\n    [del] => 1\n)\n\n    \n   \n   Simple ob_get_status() results\n    KeyValue\n    levelOutput nesting leveltypePHP_OUTPUT_HANDLER_INTERNAL (0) or PHP_OUTPUT_HANDLER_USER (1)statusOne of PHP_OUTPUT_HANDLER_START (0), PHP_OUTPUT_HANDLER_CONT (1) or PHP_OUTPUT_HANDLER_END (2)nameName of active output handler or ' default output handler' if none is setdelErase-flag as set by ob_start()\n   If called with full_status = TRUE an array\n   with one element for each active output buffer level is returned.\n   The output level is used as key of the top level array and each array\n   element itself is another array holding status information\n   on one active output level.\n   \n    \n\nArray\n(\n    [0] => Array\n        (\n            [chunk_size] => 0\n            [size] => 40960\n            [block_size] => 10240\n            [type] => 1\n            [status] => 0\n            [name] => default output handler\n            [del] => 1\n        )\n\n    [1] => Array\n        (\n            [chunk_size] => 0\n            [size] => 40960\n            [block_size] => 10240\n            [type] => 0\n            [buffer_size] => 0\n            [status] => 0\n            [name] => URL-Rewriter\n            [del] => 1\n        )\n\n)\n\n    \n   \n  \n  \n   The full output contains these additional elements:\n   Full ob_get_status() results\n    KeyValue\n    chunk_sizeChunk size as set by ob_start()size...blocksize...\n\n\n \n  See Also\n  \n   ob_get_level() - Return the nesting level of the output buffering mechanism\n    ob_list_handlers() - List all output handlers in use\n   \n\n\n\n ob_get_level\n ob_gzhandler\n Output Control Functions\n PHP Manual","output":"Array\n(\n    [0] => Array\n        (\n            [chunk_size] => 0\n            [size] => 40960\n            [block_size] => 10240\n            [type] => 1\n            [status] => 0\n            [name] => default output handler\n            [del] => 1\n        )\n\n    [1] => Array\n        (\n            [chunk_size] => 0\n            [size] => 40960\n            [block_size] => 10240\n            [type] => 0\n            [buffer_size] => 0\n            [status] => 0\n            [name] => URL-Rewriter\n            [del] => 1\n        )\n\n)"}],"ob_gzhandler":[{"title":"ob_gzhandler() example","source":"ob_start(\"ob_gzhandler\");\n\n?>\n<html>\n<body>\n<p>This should be a compressed page.<\/p>\n<\/body>\n<\/html>","output":null}],"ob_iconv_handler":[{"title":"ob_iconv_handler() example:","source":"iconv_set_encoding(\"internal_encoding\", \"UTF-8\");\niconv_set_encoding(\"output_encoding\", \"ISO-8859-1\");\nob_start(\"ob_iconv_handler\"); \/\/ start output buffering","output":null}],"ob_list_handlers":[{"title":"ob_list_handlers() example","source":"\/\/using output_buffering=On\nprint_r(ob_list_handlers());\nob_end_flush();\n\nob_start(\"ob_gzhandler\");\nprint_r(ob_list_handlers());\nob_end_flush();\n\n\/\/ anonymous functions\nob_start(function($string) { return $string; });\nprint_r(ob_list_handlers());\nob_end_flush();","output":"Array\n(\n    [0] => default output handler\n)\n\nArray\n(\n    [0] => ob_gzhandler\n)\n\nArray\n(\n    [0] => Closure::__invoke\n)"}],"ob_start":[{"title":"User defined callback function example","source":"function callback($buffer)\n{\n  \/\/ replace all the apples with oranges\n  return (str_replace(\"apples\", \"oranges\", $buffer));\n}\n\nob_start(\"callback\");\n\n?>\n<html>\n<body>\n<p>It's like comparing apples to oranges.<\/p>\n<\/body>\n<\/html>\n<?php\n\nob_end_flush();","output":"<html>\n<body>\n<p>It's like comparing oranges to oranges.<\/p>\n<\/body>\n<\/html>"},{"title":"Creating an uneraseable output buffer in a way compatible with both PHP 5.3 and 5.4","source":"if (version_compare(PHP_VERSION, '5.4.0', '>=')) {\n  ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^\n    PHP_OUTPUT_HANDLER_REMOVABLE);\n} else {\n  ob_start(null, 0, false);\n}","output":null}],"ob_tidyhandler":[{"title":"ob_tidyhandler() example","source":"ob_start('ob_tidyhandler');\n\necho '<p>test<\/i>';","output":"<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2\/\/EN\">\n<html>\n<head>\n<title><\/title>\n<\/head>\n<body>\n<p>test<\/p>\n<\/body>\n<\/html>"}],"oci_bind_array_by_name":[{"title":"oci_bind_array_by_name() example","source":"$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$create = \"CREATE TABLE bind_example(name VARCHAR(20))\";\n$stid = oci_parse($conn, $create);\noci_execute($stid);\n\n$create_pkg = \"\nCREATE OR REPLACE PACKAGE ARRAYBINDPKG1 AS\n  TYPE ARRTYPE IS TABLE OF VARCHAR(20) INDEX BY BINARY_INTEGER;\n  PROCEDURE iobind(c1 IN OUT ARRTYPE);\nEND ARRAYBINDPKG1;\";\n$stid = oci_parse($conn, $create_pkg);\noci_execute($stid);\n\n$create_pkg_body = \"\nCREATE OR REPLACE PACKAGE BODY ARRAYBINDPKG1 AS\n  CURSOR CUR IS SELECT name FROM bind_example;\n  PROCEDURE iobind(c1 IN OUT ARRTYPE) IS\n    BEGIN\n    -- Bulk Insert\n    FORALL i IN INDICES OF c1\n      INSERT INTO bind_example VALUES (c1(i));\n\n    -- Fetch and reverse\n    IF NOT CUR%ISOPEN THEN\n      OPEN CUR;\n    END IF;\n    FOR i IN REVERSE 1..5 LOOP\n      FETCH CUR INTO c1(i);\n      IF CUR%NOTFOUND THEN\n        CLOSE CUR;\n        EXIT;\n      END IF;\n    END LOOP;\n  END iobind;\nEND ARRAYBINDPKG1;\";\n$stid = oci_parse($conn, $create_pkg_body);\noci_execute($stid);\n\n$stid = oci_parse($conn, \"BEGIN arraybindpkg1.iobind(:c1); END;\");\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\");\noci_bind_array_by_name($stid, \":c1\", $array, 5, -1, SQLT_CHR);\noci_execute($stid);\n\nvar_dump($array);","output":null}],"oci_bind_by_name":[{"title":"Inserting data with oci_bind_by_name()","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (id NUMBER, text VARCHAR2(40));\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn,\"INSERT INTO mytab (id, text) VALUES(:id_bv, :text_bv)\");\n\n$id = 1;\n$text = \"Data to insert     \";\noci_bind_by_name($stid, \":id_bv\", $id);\noci_bind_by_name($stid, \":text_bv\", $text);\noci_execute($stid);\n\n\/\/ Table now contains: 1, 'Data to insert     '","output":null},{"title":"Binding once for multiple executions","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (id NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$a = array(1,3,5,7,11);  \/\/ data to insert\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (id) VALUES (:bv)');\noci_bind_by_name($stid, ':bv', $v, 20);\nforeach ($a as $v) {\n    $r = oci_execute($stid, OCI_DEFAULT);  \/\/ don't auto commit\n}\noci_commit($conn); \/\/ commit everything at once\n\n\/\/ Table contains five rows: 1, 3, 5, 7, 11\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding with a foreach() loop","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$sql = 'SELECT * FROM departments WHERE department_name = :dname AND location_id = :loc';\n$stid = oci_parse($conn, $sql);\n\n$ba = array(':dname' => 'IT Support', ':loc' => 1700);\n\nforeach ($ba as $key => $val) {\n\n    \/\/ oci_bind_by_name($stid, $key, $val) does not work\n    \/\/ because it binds each placeholder to the same location: $val\n    \/\/ instead use the actual location of the data: $ba[$key]\n    oci_bind_by_name($stid, $key, $ba[$key]);\n}\n\noci_execute($stid);\n$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);\nforeach ($row as $item) {\n    print $item.\"<br>\\n\";\n}\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding in a WHERE clause","source":"$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$sql = 'SELECT last_name FROM employees WHERE department_id = :didbv ORDER BY last_name';\n$stid = oci_parse($conn, $sql);\n$didbv = 60;\noci_bind_by_name($stid, ':didbv', $didbv);\noci_execute($stid);\nwhile (($row = oci_fetch_array($stid, OCI_ASSOC)) != false) {\n    echo $row['LAST_NAME'] .\"<br>\\n\";\n}\n\n\/\/ Output is\n\/\/    Austin\n\/\/    Ernst\n\/\/    Hunold\n\/\/    Lorentz\n\/\/    Pataballa\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding with a LIKE clause","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n\/\/ Find all cities that begin with 'South'\n$stid = oci_parse($conn, \"SELECT city FROM locations WHERE city LIKE :bv\");\n$city = 'South%';  \/\/ '%' is a wildcard in SQL\noci_bind_by_name($stid, \":bv\", $city);\noci_execute($stid);\noci_fetch_all($stid, $res);\n\nforeach ($res['CITY'] as $c) {\n    print $c . \"<br>\\n\";\n}\n\/\/ Output is\n\/\/   South Brunswick\n\/\/   South San Francisco\n\/\/   Southlake\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding with REGEXP_LIKE","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n\/\/ Find all cities that contain 'ing'\n$stid = oci_parse($conn, \"SELECT city FROM locations WHERE REGEXP_LIKE(city, :bv)\");\n$city = '.*ing.*';\noci_bind_by_name($stid, \":bv\", $city);\noci_execute($stid);\noci_fetch_all($stid, $res);\n\nforeach ($res['CITY'] as $c) {\n    print $c . \"<br>\\n\";\n}\n\/\/ Output is\n\/\/   Beijing\n\/\/   Singapore\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding Multiple Values in an IN Clause","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$sql = 'SELECT last_name FROM employees WHERE employee_id in (:e1, :e2, :e3)';\n$stid = oci_parse($conn, $sql);\n$mye1 = 103;\n$mye2 = 104;\n$mye3 = NULL; \/\/ pretend we were not given this value\noci_bind_by_name($stid, ':e1', $mye1);\noci_bind_by_name($stid, ':e2', $mye2);\noci_bind_by_name($stid, ':e3', $mye3);\noci_execute($stid);\noci_fetch_all($stid, $res);\nforeach ($res['LAST_NAME'] as $name) {\n    print $name .\"<br>\\n\";\n}\n\n\/\/ Output is\n\/\/   Ernst\n\/\/   Hunold\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding a ROWID returned by a query","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));\n\/\/   INSERT INTO mytab (id, salary, name) VALUES (1, 100, 'Chris');\n\/\/   COMMIT;\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT ROWID, name FROM mytab WHERE id = :id_bv FOR UPDATE');\n$id = 1;\noci_bind_by_name($stid, ':id_bv', $id);\noci_execute($stid);\n$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);\n$rid = $row['ROWID'];\n$name = $row['NAME'];\n\n\/\/ Change name to upper case & save the changes\n$name = strtoupper($name);\n$stid = oci_parse($conn, 'UPDATE mytab SET name = :n_bv WHERE ROWID = :r_bv');\noci_bind_by_name($stid, ':n_bv', $name);\noci_bind_by_name($stid, ':r_bv', $rid, -1, OCI_B_ROWID);\noci_execute($stid);\n\n\/\/ The table now contains 1, 100, CHRIS\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding a ROWID on INSERT","source":"\/\/ This example inserts an id & name, and then updates the salary\n\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));\n\/\/\n\/\/ Based on original ROWID example by thies at thieso dot net (980221)\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$sql = \"INSERT INTO mytab (id, name) VALUES(:id_bv, :name_bv)\n        RETURNING ROWID INTO :rid\";\n\n$ins_stid = oci_parse($conn, $sql);\n\n$rowid = oci_new_descriptor($conn, OCI_D_ROWID);\noci_bind_by_name($ins_stid, \":id_bv\",   $id,    10);\noci_bind_by_name($ins_stid, \":name_bv\", $name,  32);\noci_bind_by_name($ins_stid, \":rid\",     $rowid, -1, OCI_B_ROWID);\n\n$sql = \"UPDATE mytab SET salary = :salary WHERE ROWID = :rid\";\n$upd_stid = oci_parse($conn, $sql);\noci_bind_by_name($upd_stid, \":rid\", $rowid, -1, OCI_B_ROWID);\noci_bind_by_name($upd_stid, \":salary\", $salary,   32);\n\n\/\/ ids and names to insert\n$data = array(1111 => \"Larry\",\n              2222 => \"Bill\",\n              3333 => \"Jim\");\n\n\/\/ Salary of each person\n$salary = 10000;\n\n\/\/ Insert and immediately update each row\nforeach ($data as $id => $name) {\n    oci_execute($ins_stid);\n    oci_execute($upd_stid);\n}\n\n$rowid->free();\noci_free_statement($upd_stid);\noci_free_statement($ins_stid);\n\n\/\/ Show the new rows\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid);\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    var_dump($row);\n}\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding for a PL\/SQL stored function","source":"\/\/  Before running the PHP program, create a stored function in\n\/\/  SQL*Plus or SQL Developer:\n\/\/\n\/\/  CREATE OR REPLACE FUNCTION myfunc(p IN NUMBER) RETURN NUMBER AS\n\/\/  BEGIN\n\/\/      RETURN p * 3;\n\/\/  END;\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n$p = 8;\n\n$stid = oci_parse($conn, 'begin :r := myfunc(:p); end;');\noci_bind_by_name($stid, ':p', $p);\n\n\/\/ The return value is an OUT bind. The default type will be a string\n\/\/ type so binding a length 40 means that at most 40 digits will be\n\/\/ returned.\noci_bind_by_name($stid, ':r', $r, 40);\n\noci_execute($stid);\n\nprint \"$r\\n\";   \/\/ prints 24\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding parameters for a PL\/SQL stored procedure","source":"\/\/  Before running the PHP program, create a stored procedure in\n\/\/  SQL*Plus or SQL Developer:\n\/\/\n\/\/  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS\n\/\/  BEGIN\n\/\/      p2 := p1 * 2;\n\/\/  END;\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n$p1 = 8;\n\n$stid = oci_parse($conn, 'begin myproc(:p1, :p2); end;');\noci_bind_by_name($stid, ':p1', $p1);\n\n\/\/ The second procedure parameter is an OUT bind. The default type\n\/\/ will be a string type so binding a length 40 means that at most 40\n\/\/ digits will be returned.\noci_bind_by_name($stid, ':p2', $p2, 40);\n\noci_execute($stid);\n\nprint \"$p2\\n\";   \/\/ prints 16\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Binding a CLOB column","source":"\/\/ Before running, create the table:\n\/\/     CREATE TABLE mytab (mykey NUMBER, myclob CLOB);\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n$mykey = 12343;  \/\/ arbitrary key for this example;\n\n$sql = \"INSERT INTO mytab (mykey, myclob)\n        VALUES (:mykey, EMPTY_CLOB())\n        RETURNING myclob INTO :myclob\";\n\n$stid = oci_parse($conn, $sql);\n$clob = oci_new_descriptor($conn, OCI_D_LOB);\noci_bind_by_name($stid, \":mykey\", $mykey, 5);\noci_bind_by_name($stid, \":myclob\", $clob, -1, OCI_B_CLOB);\noci_execute($stid, OCI_DEFAULT);\n$clob->save(\"A very long string\");\n\noci_commit($conn);\n\n\/\/ Fetching CLOB data\n\n$query = 'SELECT myclob FROM mytab WHERE mykey = :mykey';\n\n$stid = oci_parse ($conn, $query);\noci_bind_by_name($stid, \":mykey\", $mykey, 5);\noci_execute($stid);\n\nprint '<table border=\"1\">';\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_LOBS)) {\n    print '<tr><td>'.$row['MYCLOB'].'<\/td><\/tr>';\n    \/\/ In a loop, freeing the large variable before the 2nd fetch reduces PHP's peak memory usage\n    unset($row);  \n}\nprint '<\/table>';","output":null},{"title":"Binding a PL\/SQL BOOLEAN","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n$plsql = \n  \"begin\n    :output1 := true;\n    :output2 := false;\n   end;\";\n\n$s = oci_parse($c, $plsql);\noci_bind_by_name($s, ':output1', $output1, -1, OCI_B_BOL);\noci_bind_by_name($s, ':output2', $output2, -1, OCI_B_BOL);\noci_execute($s);\nvar_dump($output1);  \/\/ true\nvar_dump($output2);  \/\/ false","output":null},{"title":null,"source":"foreach ($myarray as $key => $value)  {\n    oci_bind_by_name($stid, $key, $value);\n}","output":null},{"title":null,"source":"foreach ($myarray as $key => $value) {\n    oci_bind_by_name($stid, $key, $myarray[$key]);\n}","output":null}],"oci_client_version":[{"title":"oci_client_version() example","source":"echo \"Client Version: \" . oci_client_version(); \/\/ Client version: 11.2.0.2","output":null}],"oci_close":[{"title":"Closing a connection","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM departments');\n$r = oci_execute($stid);\noci_fetch_all($stid, $res);\nvar_dump($res);\n\n\/\/ Free the statement identifier when closing the connection\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Database connections are not closed until all references are closed","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM departments');  \/\/ this increases the refcount on $conn\noci_execute($stid);\noci_fetch_all($stid, $res);\nvar_dump($res);\n\noci_close($conn);\n\n\/\/ $conn is no longer usable in the script but the underlying database\n\/\/ connection is still held open until $stid is freed.\nvar_dump($conn);  \/\/ prints NULL  \n\n\/\/ While PHP sleeps, querying the Oracle V$SESSION view in a\n\/\/ terminal window will show that the database user is still connected.\nsleep(10);\n\n\/\/ When $stid is freed, the database connection is physically closed\noci_free_statement($stid);  \n\n\/\/ While PHP sleeps, querying the Oracle V$SESSION view in a\n\/\/ terminal window will show that the database user has disconnected.\nsleep(10);","output":null},{"title":"Closing a connection opened more than once","source":"$conn1 = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n\/\/ Using the same credentials reuses the same underlying database connection\n\/\/ Any uncommitted changes done on $conn1 will be visible in $conn2\n$conn2 = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n\/\/ While PHP sleeps, querying the Oracle V$SESSION view in a\n\/\/ terminal window will show that only one database user is connected.\nsleep(10);\n\noci_close($conn1); \/\/ doesn't close the underlying database connection\nvar_dump($conn1);  \/\/ prints NULL because the variable $conn1 is no longer usable\nvar_dump($conn2);  \/\/ displays that $conn2 is still a valid connection resource","output":null},{"title":"Connections are closed when variables go out of scope","source":"function myfunc() {\n    $conn = oci_connect('hr', 'hrpwd', 'localhost\/XE');\n    if (!$conn) {\n        $e = oci_error();\n        trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n    }\n\n    $stid = oci_parse($conn, 'UPDATE mytab SET id = 100');\n    oci_execute($stid, OCI_NO_AUTO_COMMIT);\n    return \"Finished\";\n}\n\n$r = myfunc();\n\/\/ At this point a rollback occurred and the underlying database connection was released.\n\nprint $r;  \/\/ displays the function return value \"Finished\"","output":null}],"oci_commit":[{"title":"oci_commit() example","source":"\/\/ Insert into several tables, rolling back the changes if an error occurs\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, \"INSERT INTO mysalary (id, name) VALUES (1, 'Chris')\");\n\n\/\/ The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately\n\/\/ Use OCI_DEFAULT as the flag for PHP <= 5.3.1.  The two flags are equivalent\n$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);\nif (!$r) {    \n    $e = oci_error($stid);\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'INSERT INTO myschedule (startday) VALUES (12)');\n$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);\nif (!$r) {    \n    $e = oci_error($stid);\n    oci_rollback($conn);  \/\/ rollback changes to both tables\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n\/\/ Commit the changes to both tables\n$r = oci_commit($conn);\nif (!$r) {\n    $e = oci_error($conn);\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}","output":null}],"oci_connect":[{"title":"Basic oci_connect() using Easy Connect syntax","source":"\/\/ Connects to the XE service (i.e. database) on the \"localhost\" machine\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\") . \"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"Basic oci_connect() using a Network Connect name","source":"\/\/ Connects to the MYDB database described in tnsnames.ora file,\n\/\/ One example tnsnames.ora entry for MYDB could be:\n\/\/   MYDB =\n\/\/     (DESCRIPTION =\n\/\/       (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.oracle.com)(PORT = 1521))\n\/\/       (CONNECT_DATA =\n\/\/         (SERVER = DEDICATED)\n\/\/         (SERVICE_NAME = XE)\n\/\/       )\n\/\/     )\n\n$conn = oci_connect('hr', 'welcome', 'MYDB');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\") . \"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"oci_connect() with an explicit character set","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE', 'AL32UTF8');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\") . \"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"Using multiple calls to oci_connect()","source":"$c1 = oci_connect(\"hr\", \"welcome\", 'localhost\/XE');\n$c2 = oci_connect(\"hr\", \"welcome\", 'localhost\/XE');\n\n\/\/ Both $c1 and $c2 show the same PHP resource id meaning they use the\n\/\/ same underlying database connection\necho \"c1 is $c1<br>\\n\";\necho \"c2 is $c2<br>\\n\";\n\nfunction create_table($conn)\n{\n    $stmt = oci_parse($conn, \"create table hallo (test varchar2(64))\");\n    oci_execute($stmt);\n    echo \"Created table<br>\\n\";\n}\n\nfunction drop_table($conn)\n{\n    $stmt = oci_parse($conn, \"drop table hallo\");\n    oci_execute($stmt);\n    echo \"Dropped table<br>\\n\";\n}\n\nfunction insert_data($connname, $conn)\n{\n    $stmt = oci_parse($conn, \"insert into hallo\n              values(to_char(sysdate,'DD-MON-YY HH24:MI:SS'))\");\n    oci_execute($stmt, OCI_DEFAULT);\n    echo \"$connname inserted row without committing<br>\\n\";\n}\n\nfunction rollback($connname, $conn)\n{\n    oci_rollback($conn);\n    echo \"$connname rollback<br>\\n\";\n}\n\nfunction select_data($connname, $conn)\n{\n    $stmt = oci_parse($conn, \"select * from hallo\");\n    oci_execute($stmt, OCI_DEFAULT);\n    echo \"$connname ----selecting<br>\\n\";\n    while (oci_fetch($stmt)) {\n        echo \"    \" . oci_result($stmt, \"TEST\") . \"<br>\\n\";\n    }\n    echo \"$connname ----done<br>\\n\";\n}\n\ncreate_table($c1);\n\ninsert_data('c1', $c1);   \/\/ Insert a row using c1\nsleep(2);                 \/\/ sleep to show a different timestamp for the 2nd row\ninsert_data('c2', $c2);   \/\/ Insert a row using c2\n\nselect_data('c1', $c1);   \/\/ Results of both inserts are returned\nselect_data('c2', $c2);   \/\/ Results of both inserts are returned\n\nrollback('c1', $c1);      \/\/ Rollback using c1\n\nselect_data('c1', $c1);   \/\/ Both inserts have been rolled back\nselect_data('c2', $c2);\n\ndrop_table($c1);\n\n\/\/ Closing one of the connections makes the PHP variable unusable, but\n\/\/ the other could be used\noci_close($c1);\necho \"c1 is $c1<br>\\n\";\necho \"c2 is $c2<br>\\n\";\n\n\n\/\/ Output is:\n\/\/    c1 is Resource id #5\n\/\/    c2 is Resource id #5\n\/\/    Created table\n\/\/    c1 inserted row without committing\n\/\/    c2 inserted row without committing\n\/\/    c1 ----selecting\n\/\/        09-DEC-09 12:14:43\n\/\/        09-DEC-09 12:14:45\n\/\/    c1 ----done\n\/\/    c2 ----selecting\n\/\/        09-DEC-09 12:14:43\n\/\/        09-DEC-09 12:14:45\n\/\/    c2 ----done\n\/\/    c1 rollback\n\/\/    c1 ----selecting\n\/\/    c1 ----done\n\/\/    c2 ----selecting\n\/\/    c2 ----done\n\/\/    Dropped table\n\/\/    c1 is \n\/\/    c2 is Resource id #5","output":null}],"oci_define_by_name":[{"title":"oci_define_by_name() example","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';\n$stid = oci_parse($conn, $sql);\n\n\/\/ The defines MUST be done before executing\noci_define_by_name($stid, 'LOCATION_ID', $locid);\noci_define_by_name($stid, 'CITY', $city);\n\noci_execute($stid);\n\n\/\/ Each fetch populates the previously defined variables with the next row's data\nwhile (oci_fetch($stid)) {\n    echo \"Location id $locid is $city<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   Location id 1000 is Roma\n\/\/   Location id 1100 is Venice\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_define_by_name() with case sensitive column names","source":"\/*\n  Before running, create the table with a case sensitive column name:\n    CREATE TABLE mytab (id NUMBER, \"MyDescription\" VARCHAR2(30));\n    INSERT INTO mytab (id, \"MyDescription\") values (1, 'Iced Coffee');\n    COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM mytab');\n\n\/\/ Use uppercase for non case-sensitive column names\noci_define_by_name($stid, 'ID', $id);\n\n\/\/ Use the exact case for case-sensitive column names\noci_define_by_name($stid, 'MyDescription', $mydesc);\n\noci_execute($stid);\n\nwhile (oci_fetch($stid)) {\n    echo \"id $id is $mydesc<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   id 1 is Iced Coffee\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_define_by_name() with LOB columns","source":"\/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, fruit CLOB);\n    INSERT INTO mytab (id, fruit) values (1, 'apple');\n    INSERT INTO mytab (id, fruit) values (2, 'orange');\n    COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM mytab');\n\n\/\/ The defines MUST be done before executing\noci_define_by_name($stid, 'ID', $id);\noci_define_by_name($stid, 'FRUIT', $fruit);  \/\/ $fruit will become a LOB descriptor\n\noci_execute($stid);\n\nwhile (oci_fetch($stid)) {\n    echo $id . \" is \" . $fruit->load(100) . \"<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   1 is apple\n\/\/   2 is orange\n\n$fruit->free();\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_define_by_name() with an explicit type","source":"\/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, fruit CLOB);\n    INSERT INTO mytab (id, fruit) values (1, 'apple');\n    INSERT INTO mytab (id, fruit) values (2, 'orange');\n    COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM mytab');\n\n\/\/ The defines MUST be done before executing\noci_define_by_name($stid, 'ID', $id);\n\n$fruit = oci_new_descriptor($conn, OCI_D_LOB);\noci_define_by_name($stid, 'FRUIT', $fruit, OCI_D_CLOB);\n\noci_execute($stid);\n\nwhile (oci_fetch($stid)) {\n    echo $id . \" is \" . $fruit->load(100) . \"<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   1 is apple\n\/\/   2 is orange\n\n$fruit->free();\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_error":[{"title":"Displaying the Oracle error message after a connection error","source":"$conn = oci_connect(\"hr\", \"welcome\", \"localhost\/XE\");\nif (!$conn) {\n    $e = oci_error();   \/\/ For oci_connect errors do not pass a handle\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}","output":null},{"title":"Displaying the Oracle error message after a parsing error","source":"$stid = oci_parse($conn, \"select ' from dual\");  \/\/ note mismatched quote\nif (!$stid) {\n    $e = oci_error($conn);  \/\/ For oci_parse errors pass the connection handle\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}","output":null},{"title":"Displaying the Oracle error message, the problematic statement, and the position of the problem of an execution error","source":"$stid = oci_parse($conn, \"select does_not_exist from dual\");\n$r = oci_execute($stid);\nif (!$r) {\n    $e = oci_error($stid);  \/\/ For oci_execute errors pass the statement handle\n    print htmlentities($e['message']);\n    print \"\\n<pre>\\n\";\n    print htmlentities($e['sqltext']);\n    printf(\"\\n%\".($e['offset']+1).\"s\", \"^\");\n    print  \"\\n<\/pre>\\n\";\n}","output":null}],"oci_execute":[{"title":"oci_execute() for queries","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\") . \"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"oci_execute() without specifying a mode example","source":"\/\/ Before running, create the table:\n\/\/   CREATE TABLE MYTABLE (col1 NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');\n\noci_execute($stid); \/\/ The row is committed and immediately visible to other users","output":null},{"title":"oci_execute() with OCI_NO_AUTO_COMMIT example","source":"\/\/ Before running, create the table:\n\/\/   CREATE TABLE MYTABLE (col1 NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (:bv)');\noci_bind_by_name($stid, ':bv', $i, 10);\nfor ($i = 1; $i <= 5; ++$i) {\n    oci_execute($stid, OCI_NO_AUTO_COMMIT);  \/\/ use OCI_DEFAULT for PHP <= 5.3.1\n}\noci_commit($conn);  \/\/ commits all new values: 1, 2, 3, 4, 5","output":null},{"title":"oci_execute() with different commit modes example","source":"\/\/ Before running, create the table:\n\/\/   CREATE TABLE MYTABLE (col1 NUMBER);\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (123)');\noci_execute($stid, OCI_NO_AUTO_COMMIT);  \/\/ data not committed\n\n$stid = oci_parse($conn, 'INSERT INTO mytab (col1) VALUES (456)');\noci_execute($stid);  \/\/ commits both 123 and 456 values","output":null},{"title":"oci_execute() with OCI_DESCRIBE_ONLY example","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'SELECT * FROM locations');\noci_execute($s, OCI_DESCRIBE_ONLY);\nfor ($i = 1; $i <= oci_num_fields($stid); ++$i) {\n    echo oci_field_name($stid, $i) . \"<br>\\n\";\n}","output":null}],"oci_fetch_all":[{"title":"oci_fetch_all() example","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');\noci_execute($stid);\n\n$nrows = oci_fetch_all($stid, $res);\n\necho \"$nrows rows fetched<br>\\n\";\nvar_dump($res);\n\n\/\/ var_dump output is:\n\/\/    2 rows fetched\n\/\/    array(2) {\n\/\/      [\"POSTAL_CODE\"]=>\n\/\/      array(2) {\n\/\/        [0]=>\n\/\/        string(6) \"00989x\"\n\/\/        [1]=>\n\/\/        string(6) \"10934x\"\n\/\/      }\n\/\/      [\"CITY\"]=>\n\/\/      array(2) {\n\/\/        [0]=>\n\/\/        string(4) \"Roma\"\n\/\/        [1]=>\n\/\/        string(6) \"Venice\"\n\/\/      }\n\/\/    }\n\n\/\/ Pretty-print the results\necho \"<table border='1'>\\n\";\nforeach ($res as $col) {\n    echo \"<tr>\\n\";\n    foreach ($col as $item) {\n        echo \"    <td>\".($item !== null ? htmlentities($item, ENT_QUOTES) : \"\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_all() example with OCI_FETCHSTATEMENT_BY_ROW","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');\noci_execute($stid);\n\n$nrows = oci_fetch_all($stid, $res, null, null, OCI_FETCHSTATEMENT_BY_ROW);\n\necho \"$nrows rows fetched<br>\\n\";\nvar_dump($res);\n\n\/\/ Output is:\n\/\/    2 rows fetched\n\/\/    array(2) {\n\/\/      [0]=>\n\/\/      array(2) {\n\/\/        [\"POSTAL_CODE\"]=>\n\/\/        string(6) \"00989x\"\n\/\/        [\"CITY\"]=>\n\/\/        string(4) \"Roma\"\n\/\/      }\n\/\/      [1]=>\n\/\/      array(2) {\n\/\/        [\"POSTAL_CODE\"]=>\n\/\/        string(6) \"10934x\"\n\/\/        [\"CITY\"]=>\n\/\/        string(6) \"Venice\"\n\/\/      }\n\/\/    }\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_all() with OCI_NUM","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');\noci_execute($stid);\n\n$nrows = oci_fetch_all($stid, $res, null, null, OCI_FETCHSTATEMENT_BY_ROW + OCI_NUM);\n\necho \"$nrows rows fetched<br>\\n\";\nvar_dump($res);\n\n\/\/ Output is:\n\/\/    2 rows fetched\n\/\/    array(2) {\n\/\/      [0]=>\n\/\/      array(2) {\n\/\/        [0]=>\n\/\/        string(6) \"00989x\"\n\/\/        [1]=>\n\/\/        string(4) \"Roma\"\n\/\/      }\n\/\/      [1]=>\n\/\/      array(2) {\n\/\/        [0]=>\n\/\/        string(6) \"10934x\"\n\/\/        [1]=>\n\/\/        string(6) \"Venice\"\n\/\/      }\n\/\/    }\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_fetch_array":[{"title":"oci_fetch_array() with OCI_BOTH","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT department_id, department_name FROM departments');\noci_execute($stid);\n\nwhile (($row = oci_fetch_array($stid, OCI_BOTH)) != false) {\n    \/\/ Use the uppercase column names for the associative array indices\n    echo $row[0] . \" and \" . $row['DEPARTMENT_ID']   . \" are the same<br>\\n\";\n    echo $row[1] . \" and \" . $row['DEPARTMENT_NAME'] . \" are the same<br>\\n\";\n}\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with OCI_NUM","source":"\/*\n  Before running, create the table:\n      CREATE TABLE mytab (id NUMBER, description CLOB);\n      INSERT INTO mytab (id, description) values (1, 'A very long string');\n      COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT id, description FROM mytab');\noci_execute($stid);\n\nwhile (($row = oci_fetch_array($stid, OCI_NUM)) != false) {\n    echo $row[0] . \"<br>\\n\";\n    echo $row[1]->read(11) . \"<br>\\n\"; \/\/ this will output first 11 bytes from DESCRIPTION\n}\n\n\/\/ Output is:\n\/\/    1\n\/\/    A very long\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with OCI_ASSOC","source":"\/*\n  Before running, create the table:\n      CREATE TABLE mytab (id NUMBER, description CLOB);\n      INSERT INTO mytab (id, description) values (1, 'A very long string');\n      COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT id, description FROM mytab');\noci_execute($stid);\n\nwhile (($row = oci_fetch_array($stid, OCI_ASSOC)) != false) {\n    echo $row['ID'] . \"<br>\\n\";\n    echo $row['DESCRIPTION']->read(11) . \"<br>\\n\"; \/\/ this will output first 11 bytes from DESCRIPTION\n}\n\n\/\/ Output is:\n\/\/    1\n\/\/    A very long\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with OCI_RETURN_NULLS","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT 1, null FROM dual');\noci_execute($stid);\nwhile (($row = oci_fetch_array ($stid, OCI_ASSOC)) != false) { \/\/ Ignore NULLs\n    var_dump($row);\n}\n\n\/*\nThe above code prints:\n  array(1) {\n    [1]=>\n    string(1) \"1\"\n  }\n*\/\n\n$stid = oci_parse($conn, 'SELECT 1, null FROM dual');\noci_execute($stid);\nwhile (($row = oci_fetch_array ($stid, OCI_ASSOC+OCI_RETURN_NULLS)) != false) { \/\/ Fetch NULLs\n    var_dump($row);\n}\n\n\/*\nThe above code prints:\n  array(2) {\n    [1]=>\n    string(1) \"1\"\n    [\"NULL\"]=>\n    NULL\n  }\n*\/","output":null},{"title":"oci_fetch_array() with OCI_RETURN_LOBS","source":"\/*\n  Before running, create the table:\n      CREATE TABLE mytab (id NUMBER, description CLOB);\n      INSERT INTO mytab (id, description) values (1, 'A very long string');\n      COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT id, description FROM mytab');\noci_execute($stid);\n\nwhile (($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_LOBS)) != false) {\n    echo $row['ID'] . \"<br>\\n\";\n    echo $row['DESCRIPTION'] . \"<br>\\n\"; \/\/ this contains all of DESCRIPTION\n    \/\/ In a loop, freeing the large variable before the 2nd fetch reduces PHP's peak memory usage\n    unset($row); \n}\n\n\/\/ Output is:\n\/\/    1\n\/\/    A very long string\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with case sensitive column names","source":"\/*\n   Before running, create the table:\n      CREATE TABLE mytab (\"Name\" VARCHAR2(20), city VARCHAR2(20));\n      INSERT INTO mytab (\"Name\", city) values ('Chris', 'Melbourne');\n      COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'select * from mytab');\noci_execute($stid);\n$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);\n\n\/\/ Because 'Name' was created as a case-sensitive column, that same\n\/\/ case is used for the array index.  However uppercase 'CITY' must\n\/\/ be used for the case-insensitive column index\nprint $row['Name'] . \"<br>\\n\";   \/\/  prints Chris\nprint $row['CITY'] . \"<br>\\n\";   \/\/  prints Melbourne\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with columns having duplicate names","source":"\/*\n  Before running, create the tables:\n      CREATE TABLE mycity (id NUMBER, name VARCHAR2(20));\n      INSERT INTO mycity (id, name) values (1, 'Melbourne');\n      CREATE TABLE mycountry (id NUMBER, name VARCHAR2(20));\n      INSERT INTO mycountry (id, name) values (1, 'Australia');\n      COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'SELECT mycity.name, mycountry.name\n        FROM mycity, mycountry\n        WHERE mycity.id = mycountry.id';\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n$row = oci_fetch_array($stid, OCI_ASSOC);\nvar_dump($row);\n\n\/\/ Output only contains one \"NAME\" entry:\n\/\/    array(1) {\n\/\/      [\"NAME\"]=>\n\/\/      string(9) \"Australia\"\n\/\/    }\n\n\/\/ To query a repeated column name, use an SQL column alias like \"AS ctnm\":\n$sql = 'SELECT mycity.name AS ctnm, mycountry.name \n        FROM mycity, mycountry \n        WHERE mycity.id = mycountry.id';\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n$row = oci_fetch_array($stid, OCI_ASSOC);\nvar_dump($row);\n\n\/\/ Output now contains both columns selected:\n\/\/    array(2) {\n\/\/      [\"CTNM\"]=>\n\/\/      string(9) \"Melbourne\"\n\/\/      [\"NAME\"]=>\n\/\/      string(9) \"Australia\"\n\/\/    }\n\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with DATE columns","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n\/\/ Set the date format for this connection.\n\/\/ For performance reasons, consider changing the format\n\/\/ in a trigger or with environment variables instead\n$stid = oci_parse($conn, \"ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD'\");\noci_execute($stid);\n\n$stid = oci_parse($conn, 'SELECT hire_date FROM employees WHERE employee_id = 188');\noci_execute($stid);\n$row = oci_fetch_array($stid, OCI_ASSOC);\necho $row['HIRE_DATE'] . \"<br>\\n\";  \/\/ prints 1997-06-14\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with REF CURSOR","source":"\/*\n  Create the PL\/SQL stored procedure as:\n\n  CREATE OR REPLACE PROCEDURE myproc(p1 OUT SYS_REFCURSOR) AS\n  BEGIN\n    OPEN p1 FOR SELECT * FROM all_objects WHERE ROWNUM < 5000;\n  END;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'BEGIN myproc(:rc); END;');\n$refcur = oci_new_cursor($conn);\noci_bind_by_name($stid, ':rc', $refcur, -1, OCI_B_CURSOR);\noci_execute($stid);\n\n\/\/ Execute the returned REF CURSOR and fetch from it like a statement identifier\noci_execute($refcur);  \necho \"<table border='1'>\\n\";\nwhile (($row = oci_fetch_array($refcur, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\".($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\noci_free_statement($refcur);\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Pagination with oci_fetch_array() using a LIMIT-like query","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n\/\/ Find the version of the database\npreg_match('\/Release ([0-9]+)\\.\/', oci_server_version($conn), $matches);\n$oracleversion = $matches[1];\n\n\/\/ This is the query you want to \"page\" through\n$sql = 'SELECT city, postal_code FROM locations ORDER BY city';\n\nif ($oracleversion >= 12) {\n    \/\/ Make use of Oracle 12c OFFSET \/ FETCH NEXT syntax\n    $sql = $sql . ' OFFSET :offset ROWS FETCH NEXT :numrows ROWS ONLY';\n} else {\n    \/\/ Older Oracle versions need a nested query selecting a subset\n    \/\/ from $sql.  Or, if the SQL statement is known at development\n    \/\/ time, consider using a row_number() function instead of this\n    \/\/ nested solution.  In production environments, be careful to\n    \/\/ avoid SQL Injection issues with concatenation.\n    $sql = \"SELECT * FROM (SELECT a.*, ROWNUM AS my_rnum\n                           FROM ($sql) a\n                           WHERE ROWNUM <= :offset + :numrows)\n            WHERE my_rnum > :offset\";\n}\n\n$offset  = 0;  \/\/ skip this many rows\n$numrows = 5;  \/\/ return 5 rows\n$stid = oci_parse($conn, $sql);\noci_bind_by_name($stid, ':numrows', $numrows);\noci_bind_by_name($stid, ':offset', $offset);\noci_execute($stid);\n\nwhile (($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) != false) {\n    echo $row['CITY'] . \" \" . $row['POSTAL_CODE'] . \"<br>\\n\";\n}\n\n\/\/ Output is:\n\/\/    Beijing 190518\n\/\/    Bern 3095\n\/\/    Bombay 490231\n\/\/    Geneva 1730\n\/\/    Hiroshima 6823\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_array() with Oracle Database 12c Implicit Result Sets","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/pdborcl');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n\/\/ Requires OCI8 2.0 and Oracle Database 12c\n\/\/ Also see oci_get_implicit_resultset()\n$sql = 'DECLARE\n           c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;';\n\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\n\/\/ Note: oci_fetch_all and oci_fetch() cannot be used in this manner\necho \"<table>\\n\";\nwhile (($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"  <td>\".($item!==null?htmlentities($item, ENT_QUOTES|ENT_SUBSTITUTE):\"&nbsp;\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\n\/\/ Output is:\n\/\/    Beijing 190518\n\/\/    Bern    3095\n\/\/    Bombay  490231\n\/\/    CN\n\/\/    CH\n\/\/    IN\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_fetch_assoc":[{"title":"oci_fetch_assoc() Example","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT department_id, department_name FROM departments');\noci_execute($stid);\n\nwhile (($row = oci_fetch_assoc($stid)) != false) {\n    echo $row['DEPARTMENT_ID'] . \" \" . $row['DEPARTMENT_NAME'] . \"<br>\\n\";\n}\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_fetch_object":[{"title":"oci_fetch_object() example","source":"\/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, description VARCHAR2(30));\n    INSERT INTO mytab (id, description) values (1, 'Fish and Chips');\n    COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT id, description FROM mytab');\noci_execute($stid);\n\nwhile (($row = oci_fetch_object($stid)) != false) {\n    \/\/ Use upper case attribute names for each standard Oracle column\n    echo $row->ID . \"<br>\\n\";\n    echo $row->DESCRIPTION . \"<br>\\n\"; \n}\n\n\/\/ Output is:\n\/\/    1\n\/\/    Fish and Chips\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_object() with case sensitive column names","source":"\/*\n  Before running, create the table with a case sensitive column name:\n    CREATE TABLE mytab (id NUMBER, \"MyDescription\" VARCHAR2(30));\n    INSERT INTO mytab (id, \"MyDescription\") values (1, 'Iced Coffee');\n    COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT id, \"MyDescription\" FROM mytab');\noci_execute($stid);\n\nwhile (($row = oci_fetch_object($stid)) != false) {\n    \/\/ Use upper case attribute names for each standard Oracle column\n    echo $row->ID . \"<br>\\n\";\n    \/\/ Use the exact case for the case sensitive column name\n    echo $row->MyDescription . \"<br>\\n\";   \n}\n\n\/\/ Output is:\n\/\/    1\n\/\/    Iced Coffee\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch_object() with LOBs","source":"\/*\n  Before running, create the table:\n    CREATE TABLE mytab (id NUMBER, description CLOB);\n    INSERT INTO mytab (id, description) values (1, 'A very long string');\n    COMMIT;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT id, description FROM mytab');\noci_execute($stid);\n\nwhile (($row = oci_fetch_object($stid)) != false) {\n    echo $row->ID . \"<br>\\n\";\n    \/\/ The following will output the first 11 bytes from DESCRIPTION\n    echo $row->DESCRIPTION->read(11) . \"<br>\\n\"; \n}\n\n\/\/ Output is:\n\/\/    1\n\/\/    A very long\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_fetch_row":[{"title":"oci_fetch_row() Example","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT department_id, department_name FROM departments');\noci_execute($stid);\n\nwhile (($row = oci_fetch_row($stid)) != false) {\n    echo $row[0] . \" \" . $row[1] . \"<br>\\n\";\n}\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_fetch":[{"title":"oci_fetch() with defined variables","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';\n$stid = oci_parse($conn, $sql);\n\n\/\/ The defines MUST be done before executing\noci_define_by_name($stid, 'LOCATION_ID', $locid);\noci_define_by_name($stid, 'CITY', $city);\n\noci_execute($stid);\n\n\/\/ Each fetch populates the previously defined variables with the next row's data\nwhile (oci_fetch($stid)) {\n    echo \"Location id $locid is $city<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   Location id 1000 is Roma\n\/\/   Location id 1100 is Venice\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"oci_fetch() with oci_result()","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\nwhile (oci_fetch($stid)) {\n    echo oci_result($stid, 'LOCATION_ID') . \" is \";\n    echo oci_result($stid, 'CITY') . \"<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   1000 is Roma\n\/\/   1100 is Venice\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_is_null":[{"title":"oci_field_name() example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (c1 NUMBER);\n\/\/   INSERT INTO mytab VALUES (1);\n\/\/   INSERT INTO mytab VALUES (NULL);\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid);\n\nwhile (($row = oci_fetch_array($stid, OCI_RETURN_NULLS)) != false) {\n    $ncols = oci_num_fields($stid);\n    for ($col = 1; $col <= $ncols; $col++) {\n        var_dump(oci_field_is_null($stid, $col));\n    }    \n}\n\n\/\/ Outputs:\n\/\/    bool(false)\n\/\/    bool(true)\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_name":[{"title":"oci_field_name() example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1),\n\/\/                       clob_col CLOB, date_col DATE);\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid, OCI_DESCRIBE_ONLY); \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n\necho \"<table border=\\\"1\\\">\\n\";\necho \"<tr>\";\necho \"<th>Name<\/th>\";\necho \"<th>Type<\/th>\";\necho \"<th>Length<\/th>\";\necho \"<\/tr>\\n\";\n\n$ncols = oci_num_fields($stid);\n\nfor ($i = 1; $i <= $ncols; $i++) {\n    $column_name  = oci_field_name($stid, $i);\n    $column_type  = oci_field_type($stid, $i);\n\n    echo \"<tr>\";\n    echo \"<td>$column_name<\/td>\";\n    echo \"<td>$column_type<\/td>\";\n    echo \"<\/tr>\\n\";\n}\n\necho \"<\/table>\\n\";\n\n\/\/ Outputs:\n\/\/    Name           Type\n\/\/    NUMBER_COL    NUMBER\n\/\/    VARCHAR2_COL  VARCHAR2\n\/\/    CLOB_COL      CLOB\n\/\/    DATE_COL      DATE\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_precision":[{"title":"oci_field_precision() Example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (c1 NUMBER, c2 FLOAT, c3 NUMBER(4), c4 NUMBER(5,3));\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid, OCI_DESCRIBE_ONLY); \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n\n$ncols = oci_num_fields($stid);\nfor ($i = 1; $i <= $ncols; $i++) {\n    echo oci_field_name($stid, $i) . \" \" \n        . oci_field_precision($stid, $i) . \" \" \n        . oci_field_scale($stid, $i) . \"<br>\\n\";\n}\n\n\/\/ Outputs:\n\/\/   C1    0 -127\n\/\/   C2  126 -127\n\/\/   C3    4    0\n\/\/   C4    5    3\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_scale":[{"title":"oci_field_scale() Example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (c1 NUMBER, c2 FLOAT, c3 NUMBER(4), c4 NUMBER(5,3));\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid, OCI_DESCRIBE_ONLY); \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n\n$ncols = oci_num_fields($stid);\nfor ($i = 1; $i <= $ncols; $i++) {\n    echo oci_field_name($stid, $i) . \" \" \n        . oci_field_precision($stid, $i) . \" \" \n        . oci_field_scale($stid, $i) . \"<br>\\n\";\n}\n\n\/\/ Outputs:\n\/\/   C1    0 -127\n\/\/   C2  126 -127\n\/\/   C3    4    0\n\/\/   C4    5    3\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_size":[{"title":"oci_field_size() example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1), \n\/\/                       clob_col CLOB, date_col DATE);\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid, OCI_DESCRIBE_ONLY); \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n\necho \"<table border=\\\"1\\\">\\n\";\necho \"<tr>\";\necho \"<th>Name<\/th>\";\necho \"<th>Type<\/th>\";\necho \"<th>Length<\/th>\";\necho \"<\/tr>\\n\";\n\n$ncols = oci_num_fields($stid);\n\nfor ($i = 1; $i <= $ncols; $i++) {\n    $column_name  = oci_field_name($stid, $i);\n    $column_type  = oci_field_type($stid, $i);\n    $column_size  = oci_field_size($stid, $i);\n\n    echo \"<tr>\";\n    echo \"<td>$column_name<\/td>\";\n    echo \"<td>$column_type<\/td>\";\n    echo \"<td>$column_size<\/td>\";\n    echo \"<\/tr>\\n\";\n}\n\necho \"<\/table>\\n\";\n\n\/\/ Outputs:\n\/\/    Name           Type       Length\n\/\/    NUMBER_COL    NUMBER        22\n\/\/    VARCHAR2_COL  VARCHAR2       1\n\/\/    CLOB_COL      CLOB        4000\n\/\/    DATE_COL      DATE           7\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_type_raw":[{"title":"oci_field_type_raw() Example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1), clob_col CLOB, date_col DATE);\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'select * from mytab');\noci_execute($stid, OCI_DESCRIBE_ONLY);  \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n$n = oci_num_fields($stid);\nfor ($i = 1; $i <= $n; ++$i) {\n    echo oci_field_name($stid, $i) . \" is raw type: \" . oci_field_type_raw($stid, $i) . \"<br>\\n\";\n}\n\n\/\/ Output is:\n\/\/    NUMBER_COL is raw type: 2\n\/\/    VARCHAR2_COL is raw type: 1\n\/\/    CLOB_COL is raw type: 112\n\/\/    DATE_COL is raw type: 12\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_field_type":[{"title":"oci_field_type() example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1), \n\/\/                       clob_col CLOB, date_col DATE);\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid, OCI_DESCRIBE_ONLY); \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n\necho \"<table border=\\\"1\\\">\\n\";\necho \"<tr>\";\necho \"<th>Name<\/th>\";\necho \"<th>Type<\/th>\";\necho \"<th>Length<\/th>\";\necho \"<\/tr>\\n\";\n\n$ncols = oci_num_fields($stid);\n\nfor ($i = 1; $i <= $ncols; $i++) {\n    $column_name  = oci_field_name($stid, $i);\n    $column_type  = oci_field_type($stid, $i);\n    $column_size  = oci_field_size($stid, $i);\n\n    echo \"<tr>\";\n    echo \"<td>$column_name<\/td>\";\n    echo \"<td>$column_type<\/td>\";\n    echo \"<td>$column_size<\/td>\";\n    echo \"<\/tr>\\n\";\n}\n\necho \"<\/table>\\n\";\n\n\/\/ Outputs:\n\/\/    Name           Type       Length\n\/\/    NUMBER_COL    NUMBER        22\n\/\/    VARCHAR2_COL  VARCHAR2       1\n\/\/    CLOB_COL      CLOB        4000\n\/\/    DATE_COL      DATE           7\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_get_implicit_resultset":[{"title":"Fetching Implicit Result Sets in a loop","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/pdborcl');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;';\n\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\nwhile (($stid_c = oci_get_implicit_resultset($stid))) {\n    echo \"<h2>New Implicit Result Set:<\/h2>\\n\";\n    echo \"<table>\\n\";\n    while (($row = oci_fetch_array($stid_c, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {\n        echo \"<tr>\\n\";\n        foreach ($row as $item) {\n            echo \"  <td>\".($item!==null?htmlentities($item, ENT_QUOTES|ENT_SUBSTITUTE):\"&nbsp;\").\"<\/td>\\n\";\n        }\n        echo \"<\/tr>\\n\";\n    }\n    echo \"<\/table>\\n\";\n}\n\n\/\/ Output is:\n\/\/    New Implicit Result Set:\n\/\/     Beijing 190518\n\/\/     Bern    3095\n\/\/     Bombay  490231\n\/\/    New Implicit Result Set:\n\/\/     CN\n\/\/     CH\n\/\/     IN\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Getting child statement handles individually","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/pdborcl');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;';\n\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\n$stid_1 = oci_get_implicit_resultset($stid);\n$stid_2 = oci_get_implicit_resultset($stid);\n\n$row = oci_fetch_array($stid_1, OCI_ASSOC+OCI_RETURN_NULLS);\nvar_dump($row);\n$row = oci_fetch_array($stid_2, OCI_ASSOC+OCI_RETURN_NULLS);\nvar_dump($row);\n$row = oci_fetch_array($stid_1, OCI_ASSOC+OCI_RETURN_NULLS);\nvar_dump($row);\n$row = oci_fetch_array($stid_2, OCI_ASSOC+OCI_RETURN_NULLS);\nvar_dump($row);\n\n\/\/ Output is:\n\/\/    array(2) {\n\/\/      [\"CITY\"]=>\n\/\/      string(7) \"Beijing\"\n\/\/      [\"POSTAL_CODE\"]=>\n\/\/      string(6) \"190518\"\n\/\/    }\n\/\/    array(1) {\n\/\/      [\"COUNTRY_ID\"]=>\n\/\/      string(2) \"CN\"\n\/\/    }\n\/\/    array(2) {\n\/\/      [\"CITY\"]=>\n\/\/      string(4) \"Bern\"\n\/\/      [\"POSTAL_CODE\"]=>\n\/\/      string(4) \"3095\"\n\/\/    }\n\/\/    array(1) {\n\/\/      [\"COUNTRY_ID\"]=>\n\/\/      string(2) \"CH\"\n\/\/    }\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Explicitly setting the Prefetch Count","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/pdborcl');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;';\n\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\n$stid_c = oci_get_implicit_resultset($stid);\noci_set_prefetch($stid_c, 200);   \/\/ Set the prefetch before fetching from the child statement\necho \"<table>\\n\";\nwhile (($row = oci_fetch_array($stid_c, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"  <td>\".($item!==null?htmlentities($item, ENT_QUOTES|ENT_SUBSTITUTE):\"&nbsp;\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Implicit Result Set example without using oci_get_implicit_resultset()","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/pdborcl');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'DECLARE\n            c1 SYS_REFCURSOR;\n        BEGIN\n           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;\n           DBMS_SQL.RETURN_RESULT(c1);\n        END;';\n\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\n\/\/ Note: oci_fetch_all and oci_fetch() cannot be used in this manner\necho \"<table>\\n\";\nwhile (($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"  <td>\".($item!==null?htmlentities($item, ENT_QUOTES|ENT_SUBSTITUTE):\"&nbsp;\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\n\/\/ Output is:\n\/\/    Beijing 190518\n\/\/    Bern 3095\n\/\/    Bombay 490231\n\/\/    CN\n\/\/    CH\n\/\/    IN\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_new_connect":[{"title":"oci_new_connect() example","source":"\/\/ create table mytab (mycol number);\n\nfunction query($name, $c)\n{\n    echo \"Querying $name\\n\";\n    $s = oci_parse($c, \"select * from mytab\");\n    oci_execute($s, OCI_NO_AUTO_COMMIT);\n    $row = oci_fetch_array($s, OCI_ASSOC);\n    if (!$row) {\n        echo \"No rows\\n\";\n    } else {\n        do {\n            foreach ($row as $item)\n                echo $item . \" \";\n            echo \"\\n\";\n        } while (($row = oci_fetch_array($s, OCI_ASSOC)) != false);\n    }\n}\n\n$c1 = oci_connect(\"hr\", \"welcome\", \"localhost\/orcl\");\n$c2 = oci_new_connect(\"hr\", \"welcome\", \"localhost\/orcl\");\n\n$s = oci_parse($c1, \"insert into mytab values(1234)\");\noci_execute($s, OCI_NO_AUTO_COMMIT);\n\nquery(\"basic connection\", $c1);\nquery(\"new connection\", $c2);\noci_commit($c1);\nquery(\"new connection after commit\", $c2);\n\n\/\/ Output is:\n\/\/   Querying basic connection\n\/\/   1234 \n\/\/   Querying new connection\n\/\/   No rows\n\/\/   Querying new connection after commit\n\/\/   1234","output":null}],"oci_new_cursor":[{"title":"Binding a REF CURSOR in an Oracle stored procedure call","source":"\/\/ Precreate:\n\/\/   create or replace procedure myproc(myrc out sys_refcursor) as\n\/\/   begin\n\/\/     open myrc for select first_name from employees;\n\/\/   end;\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$curs = oci_new_cursor($conn);\n$stid = oci_parse($conn, \"begin myproc(:cursbv); end;\");\noci_bind_by_name($stid, \":cursbv\", $curs, -1, OCI_B_CURSOR);\noci_execute($stid);\n\noci_execute($curs);  \/\/ Execute the REF CURSOR like a normal statement id\nwhile (($row = oci_fetch_array($curs, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {\n    echo $row['FIRST_NAME'] . \"<br \/>\\n\";\n}\n\noci_free_statement($stid);\noci_free_statement($curs);\noci_close($conn);","output":null}],"oci_new_descriptor":[{"title":"oci_new_descriptor() example","source":"\/* This script is designed to be called from a HTML form.\n * It expects $user, $password, $table, $where, and $commitsize\n * to be passed in from the form.  The script then deletes\n * the selected rows using the ROWID and commits after each\n * set of $commitsize rows. (Use with care, there is no rollback)\n *\/\n$conn = oci_connect($user, $password);\n$stmt = oci_parse($conn, \"select rowid from $table $where\");\n$rowid = oci_new_descriptor($conn, OCI_D_ROWID);\noci_define_by_name($stmt, \"ROWID\", $rowid);\noci_execute($stmt);\nwhile (oci_fetch($stmt)) {\n    $nrows = oci_num_rows($stmt);\n    $delete = oci_parse($conn, \"delete from $table where ROWID = :rid\");\n    oci_bind_by_name($delete, \":rid\", $rowid, -1, OCI_B_ROWID);\n    oci_execute($delete);\n    echo \"$nrows\\n\";\n    if (($nrows % $commitsize) == 0) {\n        oci_commit($conn);\n    }\n}\n$nrows = oci_num_rows($stmt);\necho \"$nrows deleted...\\n\";\noci_free_statement($stmt);\noci_close($conn);","output":null},{"title":"oci_new_descriptor() example","source":"\/* Calling PL\/SQL stored procedures which contain clobs as input\n * parameters.\n * Example PL\/SQL stored procedure signature is:\n *\n * PROCEDURE save_data\n *   Argument Name                  Type                    In\/Out Default?\n *   ------------------------------ ----------------------- ------ --------\n *   KEY                            NUMBER(38)              IN\n *   DATA                           CLOB                    IN\n *\n *\/\n\n$conn = oci_connect($user, $password);\n$stmt = oci_parse($conn, \"begin save_data(:key, :data); end;\");\n$clob = oci_new_descriptor($conn, OCI_D_LOB);\noci_bind_by_name($stmt, ':key', $key);\noci_bind_by_name($stmt, ':data', $clob, -1, OCI_B_CLOB);\n$clob->write($data);\noci_execute($stmt, OCI_DEFAULT);\noci_commit($conn);\n$clob->free();\noci_free_statement($stmt);","output":null}],"oci_num_fields":[{"title":"oci_num_fields() example","source":"\/\/ Create the table with:\n\/\/   CREATE TABLE mytab (id NUMBER, quantity NUMBER);\n\n$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"SELECT * FROM mytab\");\noci_execute($stid, OCI_DESCRIBE_ONLY); \/\/ Use OCI_DESCRIBE_ONLY if not fetching rows\n\n$ncols = oci_num_fields($stid);\nfor ($i = 1; $i <= $ncols; $i++) {\n    echo oci_field_name($stid, $i) . \" \" . oci_field_type($stid, $i) . \"<br>\\n\";\n}\n\n\/\/ Outputs:\n\/\/    ID NUMBER\n\/\/    QUANTITY NUMBER\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_num_rows":[{"title":"oci_num_rows() example","source":"$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\nif (!$conn) {\n    $m = oci_error();\n    trigger_error(htmlentities($m['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, \"create table emp2 as select * from employees\");\noci_execute($stid);\necho oci_num_rows($stid) . \" rows inserted.<br \/>\\n\";\noci_free_statement($stid);\n\n$stid = oci_parse($conn, \"delete from emp2\");\noci_execute($stid, OCI_DEFAULT);\necho oci_num_rows($stid) . \" rows deleted.<br \/>\\n\";\noci_commit($conn);\noci_free_statement($stid);\n\n$stid = oci_parse($conn, \"drop table emp2\");\noci_execute($stid);\noci_free_statement($stid);\n\noci_close($conn);","output":null}],"oci_parse":[{"title":"oci_parse() example for SQL statements","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n\/\/ Parse the statement. Note there is no final semi-colon in the SQL statement\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\") . \"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null},{"title":"oci_parse() example for PL\/SQL statements","source":"\/*\n  Before running the PHP program, create a stored procedure in\n  SQL*Plus or SQL Developer:\n\n  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS\n  BEGIN\n      p2 := p1 * 2;\n  END;\n\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$p1 = 8;\n\n\/\/ When parsing PL\/SQL programs, there should be a final semi-colon in the string\n$stid = oci_parse($conn, 'begin myproc(:p1, :p2); end;');\noci_bind_by_name($stid, ':p1', $p1);\noci_bind_by_name($stid, ':p2', $p2, 40);\n\noci_execute($stid);\n\nprint \"$p2\\n\";   \/\/ prints 16\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_pconnect":[{"title":"Basic oci_pconnect() Example using Easy Connect syntax","source":"\/\/ Connects to the XE service (i.e. database) on the \"localhost\" machine\n$conn = oci_pconnect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'SELECT * FROM employees');\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\" . ($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\") . \"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";","output":null}],"oci_result":[{"title":"oci_fetch() with oci_result()","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\nif (!$conn) {\n    $e = oci_error();\n    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);\n}\n\n$sql = 'SELECT location_id, city FROM locations WHERE location_id < 1200';\n$stid = oci_parse($conn, $sql);\noci_execute($stid);\n\nwhile (oci_fetch($stid)) {\n    echo oci_result($stid, 'LOCATION_ID') . \" is \";\n    echo oci_result($stid, 'CITY') . \"<br>\\n\";\n}\n\n\/\/ Displays:\n\/\/   1000 is Roma\n\/\/   1100 is Venice\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"oci_rollback":[{"title":"oci_rollback() example","source":"\/\/ Insert into several tables, rolling back the changes if an error occurs\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, \"INSERT INTO mysalary (id, name) VALUES (1, 'Chris')\");\n\n\/\/ The OCI_NO_AUTO_COMMIT flag tells Oracle not to commit the INSERT immediately\n\/\/ Use OCI_DEFAULT as the flag for PHP <= 5.3.1.  The two flags are equivalent\n$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);\nif (!$r) {    \n    $e = oci_error($stid);\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n$stid = oci_parse($conn, 'INSERT INTO myschedule (startday) VALUES (12)');\n$r = oci_execute($stid, OCI_NO_AUTO_COMMIT);\nif (!$r) {    \n    $e = oci_error($stid);\n    oci_rollback($conn);  \/\/ rollback changes to both tables\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}\n\n\/\/ Commit the changes to both tables\n$r = oci_commit($conn);\nif (!r) {\n    $e = oci_error($conn);\n    trigger_error(htmlentities($e['message']), E_USER_ERROR);\n}","output":null},{"title":"Rolling back to a SAVEPOINT example","source":"$stid = oci_parse($conn, 'UPDATE mytab SET id = 1111');\noci_execute($stid, OCI_NO_AUTO_COMMIT);\n\n\/\/ Create the savepoint\n$stid = oci_parse($conn, 'SAVEPOINT mysavepoint');\noci_execute($stid, OCI_NO_AUTO_COMMIT);\n\n$stid = oci_parse($conn, 'UPDATE mytab SET id = 2222');\noci_execute($stid, OCI_NO_AUTO_COMMIT);\n\n\/\/ Use an explicit SQL statement to rollback to the savepoint\n$stid = oci_parse($conn, 'ROLLBACK TO SAVEPOINT mysavepoint');\noci_execute($stid, OCI_NO_AUTO_COMMIT);\n\noci_commit($conn);  \/\/ mytab now has id of 1111","output":null}],"oci_server_version":[{"title":"oci_server_version() example","source":"$conn = oci_connect(\"hr\", \"hrpwd\", \"localhost\/XE\");\necho \"Server Version: \" . oci_server_version($conn);\n\n\/\/ Displays:\n\/\/ Server Version: Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production\n\/\/ With the Partitioning, OLAP, Data Mining and Real Application Testing option\n\noci_close($conn);","output":null}],"oci_set_action":[{"title":"Setting the action","source":"$c = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n\/\/ Record the action\noci_set_action($c, 'Friend Lookup');\n\n\/\/ Code that causes a roundtrip, for example a query:\n$s = oci_parse($c, 'select * from dual');\noci_execute($s);\noci_fetch_all($s, $res);\n\nsleep(30);","output":"\/\/ While the script is running, the administrator can see the actions\n\/\/ being performed:\n\nsqlplus system\/welcome\nSQL> select action from v$session;"}],"oci_set_client_identifier":[{"title":"Setting the client identifier to the application user","source":"\/\/ Find the application user's login name\nsession_start();\n$un = my_validate_session($_SESSION['username']);\n$c = oci_connect('myschema', 'welcome', 'localhost\/XE');\n\n\/\/ Tell Oracle who that user is\noci_set_client_identifier($c, $un);\n\n\/\/ The next roundtrip to the database will piggyback the identifier\n$s = oci_parse($c, 'select mydata from mytable');\noci_execute($s);\n\n\/\/ ...","output":null}],"oci_set_client_info":[{"title":"Setting the client information","source":"$c = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n\/\/ Record the client information\noci_set_client_info($c, 'My Application Version 2');\n\n\/\/ Code that causes a roundtrip, for example a query:\n$s = oci_parse($c, 'select * from dual');\noci_execute($s);\noci_fetch_all($s, $res);\n\nsleep(30);","output":"\/\/ While the script is running, the administrator can see the client\n\/\/ information:\n\nsqlplus system\/welcome\nSQL> select client_info from v$session;"}],"oci_set_edition":[{"title":"Two scripts can use different versions of myfunc() at the same time","source":"\/\/ File 1\n\necho \"Version 1 of application\\n\";\n\noci_set_edition('ORA$BASE');\n$c = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$s = oci_parse($c, \"begin :r := myfunc(); end;\");\noci_bind_by_name($s, \":r\", $r, 20);\noci_execute($s);\necho \"The result is $r\\n\";","output":null}],"oci_set_module_name":[{"title":"Setting the module name","source":"$c = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n\/\/ Record the module\noci_set_module_name($c, 'Home Page');\n\n\/\/ Code that causes a roundtrip, for example a query:\n$s = oci_parse($c, 'select * from dual');\noci_execute($s);\noci_fetch_all($s, $res);\n\nsleep(30);","output":"\/\/ While the script is running, the administrator can see the\n\/\/ modules in use:\n\nsqlplus system\/welcome\nSQL> select module from v$session;"}],"oci_set_prefetch":[{"title":"Changing the default prefetch value for a query","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'SELECT * FROM myverybigtable');\noci_set_prefetch($stid, 300);  \/\/ Set before calling oci_execute()\noci_execute($stid);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\".($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Changing the default prefetch for a REF CURSOR fetch","source":"\/*\n  Create the PL\/SQL stored procedure as:\n\n  CREATE OR REPLACE PROCEDURE myproc(p1 OUT SYS_REFCURSOR) AS\n  BEGIN\n    OPEN p1 FOR SELECT * FROM all_objects WHERE ROWNUM < 5000;\n  END;\n*\/\n\n$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'BEGIN myproc(:rc); END;');\n$refcur = oci_new_cursor($conn);\noci_bind_by_name($stid, ':rc', $refcur, -1, OCI_B_CURSOR);\noci_execute($stid);\n\n\/\/ Change the prefetch before executing the cursor.\n\/\/ REF CURSOR prefetching works when PHP is linked with Oracle 11gR2 or later Client libraries\noci_set_prefetch($refcur, 200);\noci_execute($refcur);\n\necho \"<table border='1'>\\n\";\nwhile ($row = oci_fetch_array($refcur, OCI_ASSOC+OCI_RETURN_NULLS)) {\n    echo \"<tr>\\n\";\n    foreach ($row as $item) {\n        echo \"    <td>\".($item !== null ? htmlentities($item, ENT_QUOTES) : \"&nbsp;\").\"<\/td>\\n\";\n    }\n    echo \"<\/tr>\\n\";\n}\necho \"<\/table>\\n\";\n\noci_free_statement($refcur);\noci_free_statement($stid);\noci_close($conn);","output":null},{"title":"Setting the prefetch value when passing a REF CURSOR back to Oracle","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/orcl');\n\n\/\/ get the REF CURSOR\n$stid = oci_parse($conn, 'BEGIN myproc(:rc_out); END;');\n$refcur = oci_new_cursor($conn);\noci_bind_by_name($stid, ':rc_out', $refcur, -1, OCI_B_CURSOR);\noci_execute($stid);\n\n\/\/ Display two rows, but don't prefetch any extra rows otherwise\n\/\/ those extra rows would not be passed back to myproc_use_rc().\n\/\/ A prefetch value of 0 is allowed in PHP 5.3.2 and PECL OCI8 1.4\noci_set_prefetch($refcur, 0);\noci_execute($refcur);\n$row = oci_fetch_array($refcur);\nvar_dump($row);\n$row = oci_fetch_array($refcur);\nvar_dump($row);\n\n\/\/ pass the REF CURSOR to myproc_use_rc() to do more data processing\n\/\/ with the result set\n$stid = oci_parse($conn, 'begin myproc_use_rc(:rc_in); end;'); \noci_bind_by_name($stid, ':rc_in', $refcur, -1, OCI_B_CURSOR);\noci_execute($stid);","output":null}],"oci_statement_type":[{"title":"oci_statement_type() example","source":"$conn = oci_connect('hr', 'welcome', 'localhost\/XE');\n\n$stid = oci_parse($conn, 'DELETE FROM departments WHERE department_id = 130;');\nif (oci_statement_type($stid) == \"DELETE\") {\n    trigger_error('You are not allowed to delete from this table', E_USER_ERROR);\n}\nelse {\n    oci_execute($stid);  \/\/ delete the row\n}\n\noci_free_statement($stid);\noci_close($conn);","output":null}],"octdec":[{"title":"octdec() example","source":"echo octdec('77') . \"\\n\";\necho octdec(decoct(45));","output":"63\n45"}],"odbc_connect":[{"title":"DSN-less connections","source":"\/\/ Microsoft SQL Server using the SQL Native Client 10.0 ODBC Driver - allows connection to SQL 7, 2000, 2005 and 2008\n$connection = odbc_connect(\"Driver={SQL Server Native Client 10.0};Server=$server;Database=$database;\", $user, $password);\n\n\/\/ Microsoft Access\n$connection = odbc_connect(\"Driver={Microsoft Access Driver (*.mdb)};Dbq=$mdbFilename\", $user, $password);\n\n\/\/ Microsoft Excel\n$excelFile = realpath('C:\/ExcelData.xls');\n$excelDir = dirname($excelFile);\n$connection = odbc_connect(\"Driver={Microsoft Excel Driver (*.xls)};DriverId=790;Dbq=$excelFile;DefaultDir=$excelDir\" , '', '');","output":null}],"odbc_execute":[{"title":"odbc_execute() and odbc_prepare() example","source":"$a = 1;\n$b = 2;\n$c = 3;\n$stmt    = odbc_prepare($conn, 'CALL myproc(?,?,?)');\n$success = odbc_execute($stmt, array($a, $b, $c));","output":null}],"odbc_fetch_into":[{"title":"odbc_fetch_into() examples","source":"$rc = odbc_fetch_into($res_id, $my_array);","output":null}],"odbc_next_result":[{"title":"odbc_next_result()","source":"$r_Connection = odbc_connect($dsn, $username, $password);\n\n$s_SQL = <<<END_SQL\nSELECT 'A'\nSELECT 'B'\nSELECT 'C'\nEND_SQL;\n\n$r_Results = odbc_exec($r_Connection, $s_SQL);\n\n$a_Row1 = odbc_fetch_array($r_Results);\n$a_Row2 = odbc_fetch_array($r_Results);\necho \"Dump first result set\";\nvar_dump($a_Row1, $a_Row2);\n\necho \"Get second results set \";\nvar_dump(odbc_next_result($r_Results));\n\n$a_Row1 = odbc_fetch_array($r_Results);\n$a_Row2 = odbc_fetch_array($r_Results);\necho \"Dump second result set \";\nvar_dump($a_Row1, $a_Row2);\n\necho \"Get third results set \";\nvar_dump(odbc_next_result($r_Results));\n\n$a_Row1 = odbc_fetch_array($r_Results);\n$a_Row2 = odbc_fetch_array($r_Results);\necho \"Dump third result set \";\nvar_dump($a_Row1, $a_Row2);\n\necho \"Try for a fourth result set \";\nvar_dump(odbc_next_result($r_Results));","output":"Dump first result set array(1) {\n  [\"A\"]=>\n  string(1) \"A\"\n}\nbool(false)\nGet second results set bool(true)\nDump second result set array(1) {\n  [\"B\"]=>\n  string(1) \"B\"\n}\nbool(false)\nGet third results set bool(true)\nDump third result set array(1) {\n  [\"C\"]=>\n  string(1) \"C\"\n}\nbool(false)\nTry for a fourth result set bool(false)"}],"odbc_prepare":[{"title":"odbc_execute() and odbc_prepare() example","source":"$a = 1;\n$b = 2;\n$c = 3;\n$stmt    = odbc_prepare($conn, 'CALL myproc(?,?,?)');\n$success = odbc_execute($stmt, array($a, $b, $c));","output":null}],"odbc_result":[{"title":"odbc_result() examples","source":"$item_3   = odbc_result($Query_ID, 3);\n$item_val = odbc_result($Query_ID, \"val\");","output":null}],"odbc_setoption":[{"title":"odbc_setoption() examples","source":"\/\/ 1. Option 102 of SQLSetConnectOption() is SQL_AUTOCOMMIT.\n\/\/    Value 1 of SQL_AUTOCOMMIT is SQL_AUTOCOMMIT_ON.\n\/\/    This example has the same effect as\n\/\/    odbc_autocommit($conn, true);\n\nodbc_setoption($conn, 1, 102, 1);\n\n\/\/ 2. Option 0 of SQLSetStmtOption() is SQL_QUERY_TIMEOUT.\n\/\/    This example sets the query to timeout after 30 seconds.\n\n$result = odbc_prepare($conn, $sql);\nodbc_setoption($result, 2, 0, 30);\nodbc_execute($result);","output":null}],"opendir":[{"title":"opendir() example","source":"$dir = \"\/etc\/php5\/\";\n\n\/\/ Open a known directory, and proceed to read its contents\nif (is_dir($dir)) {\n    if ($dh = opendir($dir)) {\n        while (($file = readdir($dh)) !== false) {\n            echo \"filename: $file : filetype: \" . filetype($dir . $file) . \"\\n\";\n        }\n        closedir($dh);\n    }\n}","output":"filename: . : filetype: dir\nfilename: .. : filetype: dir\nfilename: apache : filetype: dir\nfilename: cgi : filetype: dir\nfilename: cli : filetype: dir"}],"openssl_cipher_iv_length":[{"title":"openssl_cipher_iv_length() example","source":"$method = 'AES-128-CBC';\n$ivlen = openssl_cipher_iv_length($method);\n\necho $ivlen;","output":16}],"openssl_csr_new":[{"title":"Creating a self-signed-certificate","source":"\/\/ Fill in data for the distinguished name to be used in the cert\n\/\/ You must change the values of these keys to match your name and\n\/\/ company, or more precisely, the name and company of the person\/site\n\/\/ that you are generating the certificate for.\n\/\/ For SSL certificates, the commonName is usually the domain name of\n\/\/ that will be using the certificate, but for S\/MIME certificates,\n\/\/ the commonName will be the name of the individual who will use the\n\/\/ certificate.\n$dn = array(\n    \"countryName\" => \"UK\",\n    \"stateOrProvinceName\" => \"Somerset\",\n    \"localityName\" => \"Glastonbury\",\n    \"organizationName\" => \"The Brain Room Limited\",\n    \"organizationalUnitName\" => \"PHP Documentation Team\",\n    \"commonName\" => \"Wez Furlong\",\n    \"emailAddress\" => \"wez@example.com\"\n);\n\n\/\/ Generate a new private (and public) key pair\n$privkey = openssl_pkey_new();\n\n\/\/ Generate a certificate signing request\n$csr = openssl_csr_new($dn, $privkey);\n\n\/\/ You will usually want to create a self-signed certificate at this\n\/\/ point until your CA fulfills your request.\n\/\/ This creates a self-signed cert that is valid for 365 days\n$sscert = openssl_csr_sign($csr, null, $privkey, 365);\n\n\/\/ Now you will want to preserve your private key, CSR and self-signed\n\/\/ cert so that they can be installed into your web server, mail server\n\/\/ or mail client (depending on the intended use of the certificate).\n\/\/ This example shows how to get those things into variables, but you\n\/\/ can also store them directly into files.\n\/\/ Typically, you will send the CSR on to your CA who will then issue\n\/\/ you with the \"real\" certificate.\nopenssl_csr_export($csr, $csrout) and var_dump($csrout);\nopenssl_x509_export($sscert, $certout) and var_dump($certout);\nopenssl_pkey_export($privkey, $pkeyout, \"mypassword\") and var_dump($pkeyout);\n\n\/\/ Show any errors that occurred here\nwhile (($e = openssl_error_string()) !== false) {\n    echo $e . \"\\n\";\n}","output":null}],"openssl_csr_sign":[{"title":"openssl_csr_sign() example - signing a CSR (how to implement your own CA)","source":"\/\/ Let's assume that this script is set to receive a CSR that has\n\/\/ been pasted into a textarea from another page\n$csrdata = $_POST[\"CSR\"];\n\n\/\/ We will sign the request using our own \"certificate authority\"\n\/\/ certificate.  You can use any certificate to sign another, but\n\/\/ the process is worthless unless the signing certificate is trusted\n\/\/ by the software\/users that will deal with the newly signed certificate\n\n\/\/ We need our CA cert and its private key\n$cacert = \"file:\/\/path\/to\/ca.crt\";\n$privkey = array(\"file:\/\/path\/to\/ca.key\", \"your_ca_key_passphrase\");\n\n$usercert = openssl_csr_sign($csrdata, $cacert, $privkey, 365);\n\n\/\/ Now display the generated certificate so that the user can\n\/\/ copy and paste it into their local configuration (such as a file\n\/\/ to hold the certificate for their SSL server)\nopenssl_x509_export($usercert, $certout);\necho $certout;\n\n\/\/ Show any errors that occurred here\nwhile (($e = openssl_error_string()) !== false) {\n    echo $e . \"\\n\";\n}","output":null}],"openssl_error_string":[{"title":"openssl_error_string() example","source":"\/\/ lets assume you just called an openssl function that failed\nwhile ($msg = openssl_error_string())\n    echo $msg . \"<br \/>\\n\";","output":null}],"openssl_get_cert_locations":[{"title":"openssl_get_cert_locations() example","source":"var_dump(openssl_get_cert_locations());","output":"array(8) {\n  [\"default_cert_file\"]=>\n  string(21) \"\/usr\/lib\/ssl\/cert.pem\"\n  [\"default_cert_file_env\"]=>\n  string(13) \"SSL_CERT_FILE\"\n  [\"default_cert_dir\"]=>\n  string(18) \"\/usr\/lib\/ssl\/certs\"\n  [\"default_cert_dir_env\"]=>\n  string(12) \"SSL_CERT_DIR\"\n  [\"default_private_dir\"]=>\n  string(20) \"\/usr\/lib\/ssl\/private\"\n  [\"default_default_cert_area\"]=>\n  string(12) \"\/usr\/lib\/ssl\"\n  [\"ini_cafile\"]=>\n  string(0) \"\"\n  [\"ini_capath\"]=>\n  string(0) \"\"\n}"}],"openssl_get_cipher_methods":[{"title":"openssl_get_cipher_methods() example","source":"$ciphers             = openssl_get_cipher_methods();\n$ciphers_and_aliases = openssl_get_cipher_methods(true);\n$cipher_aliases      = array_diff($ciphers_and_aliases, $ciphers);\n\nprint_r($ciphers);\n\nprint_r($cipher_aliases);","output":"Array\n(\n    [0] => AES-128-CBC\n    [1] => AES-128-CFB\n    [2] => AES-128-CFB1\n    [3] => AES-128-CFB8\n    [4] => AES-128-ECB\n    [5] => AES-128-OFB\n    [6] => AES-192-CBC\n    [7] => AES-192-CFB\n    [8] => AES-192-CFB1\n    [9] => AES-192-CFB8\n    [10] => AES-192-ECB\n    [11] => AES-192-OFB\n    [12] => AES-256-CBC\n    [13] => AES-256-CFB\n    [14] => AES-256-CFB1\n    [15] => AES-256-CFB8\n    [16] => AES-256-ECB\n    [17] => AES-256-OFB\n    [18] => BF-CBC\n    [19] => BF-CFB\n    [20] => BF-ECB\n    [21] => BF-OFB\n    [22] => CAST5-CBC\n    [23] => CAST5-CFB\n    [24] => CAST5-ECB\n    [25] => CAST5-OFB\n    [26] => DES-CBC\n    [27] => DES-CFB\n    [28] => DES-CFB1\n    [29] => DES-CFB8\n    [30] => DES-ECB\n    [31] => DES-EDE\n    [32] => DES-EDE-CBC\n    [33] => DES-EDE-CFB\n    [34] => DES-EDE-OFB\n    [35] => DES-EDE3\n    [36] => DES-EDE3-CBC\n    [37] => DES-EDE3-CFB\n    [38] => DES-EDE3-OFB\n    [39] => DES-OFB\n    [40] => DESX-CBC\n    [41] => IDEA-CBC\n    [42] => IDEA-CFB\n    [43] => IDEA-ECB\n    [44] => IDEA-OFB\n    [45] => RC2-40-CBC\n    [46] => RC2-64-CBC\n    [47] => RC2-CBC\n    [48] => RC2-CFB\n    [49] => RC2-ECB\n    [50] => RC2-OFB\n    [51] => RC4\n    [52] => RC4-40\n    [53] => aes-128-cbc\n    [54] => aes-128-cfb\n    [55] => aes-128-cfb1\n    [56] => aes-128-cfb8\n    [57] => aes-128-ecb\n    [58] => aes-128-ofb\n    [59] => aes-192-cbc\n    [60] => aes-192-cfb\n    [61] => aes-192-cfb1\n    [62] => aes-192-cfb8\n    [63] => aes-192-ecb\n    [64] => aes-192-ofb\n    [65] => aes-256-cbc\n    [66] => aes-256-cfb\n    [67] => aes-256-cfb1\n    [68] => aes-256-cfb8\n    [69] => aes-256-ecb\n    [70] => aes-256-ofb\n    [71] => bf-cbc\n    [72] => bf-cfb\n    [73] => bf-ecb\n    [74] => bf-ofb\n    [75] => cast5-cbc\n    [76] => cast5-cfb\n    [77] => cast5-ecb\n    [78] => cast5-ofb\n    [79] => des-cbc\n    [80] => des-cfb\n    [81] => des-cfb1\n    [82] => des-cfb8\n    [83] => des-ecb\n    [84] => des-ede\n    [85] => des-ede-cbc\n    [86] => des-ede-cfb\n    [87] => des-ede-ofb\n    [88] => des-ede3\n    [89] => des-ede3-cbc\n    [90] => des-ede3-cfb\n    [91] => des-ede3-ofb\n    [92] => des-ofb\n    [93] => desx-cbc\n    [94] => idea-cbc\n    [95] => idea-cfb\n    [96] => idea-ecb\n    [97] => idea-ofb\n    [98] => rc2-40-cbc\n    [99] => rc2-64-cbc\n    [100] => rc2-cbc\n    [101] => rc2-cfb\n    [102] => rc2-ecb\n    [103] => rc2-ofb\n    [104] => rc4\n    [105] => rc4-40\n)\nArray\n(\n    [18] => AES128\n    [19] => AES192\n    [20] => AES256\n    [21] => BF\n    [26] => CAST\n    [27] => CAST-cbc\n    [32] => DES\n    [47] => DES3\n    [48] => DESX\n    [50] => IDEA\n    [55] => RC2\n    [82] => aes128\n    [83] => aes192\n    [84] => aes256\n    [85] => bf\n    [90] => blowfish\n    [91] => cast\n    [92] => cast-cbc\n    [97] => des\n    [112] => des3\n    [113] => desx\n    [115] => idea\n    [120] => rc2\n)"}],"openssl_get_md_methods":[{"title":"openssl_get_md_methods() example","source":"$digests             = openssl_get_md_methods();\n$digests_and_aliases = openssl_get_md_methods(true);\n$digest_aliases      = array_diff($digests_and_aliases, $digests);\n\nprint_r($digests);\n\nprint_r($digest_aliases);","output":"Array\n(\n    [0] => DSA\n    [1] => DSA-SHA\n    [2] => MD2\n    [3] => MD4\n    [4] => MD5\n    [5] => RIPEMD160\n    [6] => SHA\n    [7] => SHA1\n    [8] => SHA224\n    [9] => SHA256\n    [10] => SHA384\n    [11] => SHA512\n    [12] => dsaEncryption\n    [13] => dsaWithSHA\n    [14] => ecdsa-with-SHA1\n    [15] => md2\n    [16] => md4\n    [17] => md5\n    [18] => ripemd160\n    [19] => sha\n    [20] => sha1\n    [21] => sha224\n    [22] => sha256\n    [23] => sha384\n    [24] => sha512\n)\nArray\n(\n    [2] => DSA-SHA1\n    [3] => DSA-SHA1-old\n    [4] => DSS1\n    [9] => RSA-MD2\n    [10] => RSA-MD4\n    [11] => RSA-MD5\n    [12] => RSA-RIPEMD160\n    [13] => RSA-SHA\n    [14] => RSA-SHA1\n    [15] => RSA-SHA1-2\n    [16] => RSA-SHA224\n    [17] => RSA-SHA256\n    [18] => RSA-SHA384\n    [19] => RSA-SHA512\n    [28] => dsaWithSHA1\n    [29] => dss1\n    [32] => md2WithRSAEncryption\n    [34] => md4WithRSAEncryption\n    [36] => md5WithRSAEncryption\n    [37] => ripemd\n    [39] => ripemd160WithRSA\n    [40] => rmd160\n    [43] => sha1WithRSAEncryption\n    [45] => sha224WithRSAEncryption\n    [47] => sha256WithRSAEncryption\n    [49] => sha384WithRSAEncryption\n    [51] => sha512WithRSAEncryption\n    [52] => shaWithRSAEncryption\n    [53] => ssl2-md5\n    [54] => ssl3-md5\n    [55] => ssl3-sha1\n)"}],"openssl_open":[{"title":"openssl_open() example","source":"\/\/ $sealed and $env_key are assumed to contain the sealed data\n\/\/ and our envelope key, both given to us by the sealer.\n\n\/\/ fetch private key from file and ready it\n$fp = fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/key.pem\", \"r\");\n$priv_key = fread($fp, 8192);\nfclose($fp);\n$pkeyid = openssl_get_privatekey($priv_key);\n\n\/\/ decrypt the data and store it in $open\nif (openssl_open($sealed, $open, $env_key, $pkeyid)) {\n    echo \"here is the opened data: \", $open;\n} else {\n    echo \"failed to open data\";\n}\n\n\/\/ free the private key from memory\nopenssl_free_key($pkeyid);","output":null}],"openssl_pkcs12_read":[{"title":"openssl_pkcs12_read() example","source":"if (!$cert_store = file_get_contents(\"\/certs\/file.p12\")) {\n    echo \"Error: Unable to read the cert file\\n\";\n    exit;\n}\n\nif (openssl_pkcs12_read($cert_store, $cert_info, \"my_secret_pass\")) {\n    echo \"Certificate Information\\n\";\n    print_r($cert_info);\n} else {\n    echo \"Error: Unable to read the cert store.\\n\";\n    exit;\n}","output":null}],"openssl_pkcs7_decrypt":[{"title":"openssl_pkcs7_decrypt() example","source":"\/\/ $cert and $key are assumed to contain your personal certificate and private\n\/\/ key pair, and that you are the recipient of an S\/MIME message\n$infilename = \"encrypted.msg\";  \/\/ this file holds your encrypted message\n$outfilename = \"decrypted.msg\"; \/\/ make sure you can write to this file\n\nif (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key)) {\n    echo \"decrypted!\";\n} else {\n    echo \"failed to decrypt!\";\n}","output":null}],"openssl_pkcs7_encrypt":[{"title":"openssl_pkcs7_encrypt() example","source":"\/\/ the message you want to encrypt and send to your secret agent\n\/\/ in the field, known as nighthawk.  You have his certificate\n\/\/ in the file nighthawk.pem\n$data = <<<EOD\nNighthawk,\n\nTop secret, for your eyes only!\n\nThe enemy is closing in! Meet me at the cafe at 8.30am\nto collect your forged passport!\n\nHQ\nEOD;\n\n\/\/ load key\n$key = file_get_contents(\"nighthawk.pem\");\n\n\/\/ save message to file\n$fp = fopen(\"msg.txt\", \"w\");\nfwrite($fp, $data);\nfclose($fp);\n\n\/\/ encrypt it\nif (openssl_pkcs7_encrypt(\"msg.txt\", \"enc.txt\", $key,\n    array(\"To\" => \"nighthawk@example.com\", \/\/ keyed syntax\n          \"From: HQ <hq@example.com>\", \/\/ indexed syntax\n          \"Subject\" => \"Eyes only\"))) {\n    \/\/ message encrypted - send it!\n    exec(ini_get(\"sendmail_path\") . \" < enc.txt\");\n}","output":null}],"openssl_pkcs7_sign":[{"title":"openssl_pkcs7_sign() example","source":"\/\/ the message you want to sign so that recipient can be sure it was you that\n\/\/ sent it\n$data = <<<EOD\n\nYou have my authorization to spend $10,000 on dinner expenses.\n\nThe CEO\nEOD;\n\/\/ save message to file\n$fp = fopen(\"msg.txt\", \"w\");\nfwrite($fp, $data);\nfclose($fp);\n\/\/ encrypt it\nif (openssl_pkcs7_sign(\"msg.txt\", \"signed.txt\", \"file:\/\/mycert.pem\",\n    array(\"file:\/\/mycert.pem\", \"mypassphrase\"),\n    array(\"To\" => \"joes@example.com\", \/\/ keyed syntax\n          \"From: HQ <ceo@example.com>\", \/\/ indexed syntax\n          \"Subject\" => \"Eyes only\")\n    )) {\n    \/\/ message signed - send it!\n    exec(ini_get(\"sendmail_path\") . \" < signed.txt\");\n}","output":null}],"openssl_random_pseudo_bytes":[{"title":"openssl_random_pseudo_bytes() example","source":"for ($i = -1; $i <= 4; $i++) {\n    $bytes = openssl_random_pseudo_bytes($i, $cstrong);\n    $hex   = bin2hex($bytes);\n\n    echo \"Lengths: Bytes: $i and Hex: \" . strlen($hex) . PHP_EOL;\n    var_dump($hex);\n    var_dump($cstrong);\n    echo PHP_EOL;\n}","output":"Lengths: Bytes: -1 and Hex: 0\nstring(0) \"\"\nNULL\n\nLengths: Bytes: 0 and Hex: 0\nstring(0) \"\"\nNULL\n\nLengths: Bytes: 1 and Hex: 2\nstring(2) \"42\"\nbool(true)\n\nLengths: Bytes: 2 and Hex: 4\nstring(4) \"dc6e\"\nbool(true)\n\nLengths: Bytes: 3 and Hex: 6\nstring(6) \"288591\"\nbool(true)\n\nLengths: Bytes: 4 and Hex: 8\nstring(8) \"ab86d144\"\nbool(true)"}],"openssl_seal":[{"title":"openssl_seal() example","source":"\/\/ $data is assumed to contain the data to be sealed\n\n\/\/ fetch public keys for our recipients, and ready them\n$fp = fopen(\"\/src\/openssl-0.9.6\/demos\/maurice\/cert.pem\", \"r\");\n$cert = fread($fp, 8192);\nfclose($fp);\n$pk1 = openssl_get_publickey($cert);\n\/\/ Repeat for second recipient\n$fp = fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\", \"r\");\n$cert = fread($fp, 8192);\nfclose($fp);\n$pk2 = openssl_get_publickey($cert);\n\n\/\/ seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys\n\/\/ $ekeys[0] and $ekeys[1] respectively.\nopenssl_seal($data, $sealed, $ekeys, array($pk1, $pk2));\n\n\/\/ free the keys from memory\nopenssl_free_key($pk1);\nopenssl_free_key($pk2);","output":null}],"openssl_sign":[{"title":"openssl_sign() example","source":"\/\/ $data is assumed to contain the data to be signed\n\n\/\/ fetch private key from file and ready it\n$pkeyid = openssl_pkey_get_private(\"file:\/\/src\/openssl-0.9.6\/demos\/sign\/key.pem\");\n\n\/\/ compute signature\nopenssl_sign($data, $signature, $pkeyid);\n\n\/\/ free the key from memory\nopenssl_free_key($pkeyid);","output":null},{"title":"openssl_sign() example","source":"\/\/data you want to sign\n$data = 'my data';\n\n\/\/create new private and public key\n$new_key_pair = openssl_pkey_new(array(\n    \"private_key_bits\" => 2048,\n    \"private_key_type\" => OPENSSL_KEYTYPE_RSA,\n));\nopenssl_pkey_export($new_key_pair, $private_key_pem);\n\n$details = openssl_pkey_get_details($new_key_pair);\n$public_key_pem = $details['key'];\n\n\/\/create signature\nopenssl_sign($data, $signature, $private_key_pem, OPENSSL_ALGO_SHA256);\n\n\/\/save for later\nfile_put_contents('private_key.pem', $private_key_pem);\nfile_put_contents('public_key.pem', $public_key_pem);\nfile_put_contents('signature.dat', $signature);\n\n\/\/verify signature\n$r = openssl_verify($data, $signature, $public_key_pem, \"sha256WithRSAEncryption\");\nvar_dump($r);","output":null}],"openssl_spki_export_challenge":[{"title":"openssl_spki_export_challenge() example","source":"$pkey = openssl_pkey_new('secret password');\n$spkac = openssl_spki_new($pkey, 'challenge string');\n$challenge = openssl_spki_export_challenge(preg_replace('\/SPKAC=\/', '', $spkac));","output":null},{"title":"openssl_spki_export_challenge() example from <keygen>","source":"$challenge = openssl_spki_export_challenge(preg_replace('\/SPKAC=\/', '', $_POST['spkac']));\n?>\n<keygen name=\"spkac\" challenge=\"challenge string\" keytype=\"RSA\">","output":null}],"openssl_spki_export":[{"title":"openssl_spki_export() example","source":"$pkey = openssl_pkey_new('secret password');\n$spkac = openssl_spki_new($pkey, 'challenge string');\n$pubKey = openssl_spki_export(preg_replace('\/SPKAC=\/', '', $spkac));\n\nif ($pubKey) {\n    echo $pubKey;\n}","output":null},{"title":"openssl_spki_export() example from <keygen>","source":"$spkac = openssl_spki_export(preg_replace('\/SPKAC=\/', '', $_POST['spkac']));\nif ($spkac != NULL) {\n    echo $spkac;\n} else {\n    echo \"Extraction of pub key failed\";\n}\n?>\n<keygen name=\"spkac\" challenge=\"challenge string\" keytype=\"RSA\">","output":null}],"openssl_spki_new":[{"title":"openssl_spki_new() example","source":"$pkey = openssl_pkey_new('secret password');\n$spkac = openssl_spki_new($pkey, 'testing');\n\nif ($spkac !== NULL) {\n    echo $spkac;\n} else {\n    echo \"SPKAC generation failed\";\n}","output":"MIICRzCCAS8wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDM3V3sS4o4\nmB9dczziRnjGAmSp+JwPrHoYMAFGvDNmZGyiWfU586X4BKs++BAj7e\/FsAfno0Hd\nhN9FwpCNFSox30L03nQvLYJE7f\/WqigwBeMRT7Op\/xvFks4sT70xP2HRYv4KqP9a\nWRcKU6cFH8VxhFhqM2txEIxZKdFLaL28yT7bEDmcglf4JLDdgNMb9rET1dkgtKE6\ndOaJHPGjf1uvnOH4YwkQr7n4sLUR3Kdbh0ZJAFuQVDZulo+LLzxBBkqJJcB6FhF+\noXCdHTKZnqAhpWDz+NXYytAmevab6IYm5TWPWsJUv1YKJA5lg2mXbbloIZlN9Mgc\ni9fi03bdw+crAgMBAAEWB3Rlc3RpbmcwDQYJKoZIhvcNAQEEBQADggEBALyUvP\/o\npPSoWBlorFyZ2RnGwKf9qMpE0q2IJP7G3oDR4LyK\/m933DUiZ+YnqThrH\/CWb4Ek\ny5I3OCyl3S4wCuU1ibZZwDVwYShr5ELp0J9PEf7qMQZOhNsizoC7k+Czb2xB6hYW\nsKfsfTKm3cXBtH3fdgc\/Z1Z7VSWnAzYo38snqm72NTf5yFRnrQdphNNXi+kn1zHA\nlxXRyFDXHOcYsOnwAWfyXFA4QDHQ0ezz0UoCY8gJXovcZb4GRYqOLUAsF2HcNboy\n29WN8VqE29sL9QxVZFlwMcqyoLcNnyw38GvNvAGqSvzzbnEFP2MAQXJVe0H0hdp\/\nMML5G2iNVgNozAo="}],"openssl_spki_verify":[{"title":"openssl_spki_verify() example","source":"$pkey = openssl_pkey_new('secret password');\n$spkac = openssl_spki_new($pkey, 'challenge string');\n\nif (openssl_spki_verify(preg_replace('\/SPKAC=\/', '', $spkac))) {\n    echo $spkac;\n} else {\n    echo \"SPKAC validation failed\";\n}","output":null},{"title":"openssl_spki_verify() example from <keygen>","source":"if (openssl_spki_verify(preg_replace('\/SPKAC=\/', '', $_POST['spkac']))) {\n    echo $spkac;\n} else {\n    echo \"SPKAC validation failed\";\n}\n?>\n<keygen name=\"spkac\" challenge=\"challenge string\" keytype=\"RSA\">","output":null}],"openssl_verify":[{"title":"openssl_verify() example","source":"\/\/ $data and $signature are assumed to contain the data and the signature\n\n\/\/ fetch public key from certificate and ready it\n$pubkeyid = openssl_pkey_get_public(\"file:\/\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\");\n\n\/\/ state whether signature is okay or not\n$ok = openssl_verify($data, $signature, $pubkeyid);\nif ($ok == 1) {\n    echo \"good\";\n} elseif ($ok == 0) {\n    echo \"bad\";\n} else {\n    echo \"ugly, error checking signature\";\n}\n\/\/ free the key from memory\nopenssl_free_key($pubkeyid);","output":null},{"title":"openssl_verify() example","source":"\/\/data you want to sign\n$data = 'my data';\n\n\/\/create new private and public key\n$private_key_res = openssl_pkey_new(array(\n    \"private_key_bits\" => 2048,\n    \"private_key_type\" => OPENSSL_KEYTYPE_RSA,\n));\n$details = openssl_pkey_get_details($private_key_res);\n$public_key_res = openssl_pkey_get_public($details['key']);\n\n\/\/create signature\nopenssl_sign($data, $signature, $private_key_res, \"sha1WithRSAEncryption\");\n\n\/\/verify signature\n$ok = openssl_verify($data, $signature, $public_key_res, OPENSSL_ALGO_SHA1);\nif ($ok == 1) {\n    echo \"valid\";\n} elseif ($ok == 0) {\n    echo \"invalid\";\n} else {\n    echo \"error: \".openssl_error_string();\n}","output":null}],"ord":[{"title":"ord() example","source":"$str = \"\\n\";\nif (ord($str) == 10) {\n    echo \"The first character of \\$str is a line feed.\\n\";\n}","output":null}],"output_add_rewrite_var":[{"title":"output_add_rewrite_var() example","source":"output_add_rewrite_var('var', 'value');\n\n\/\/ some links\necho '<a href=\"file.php\">link<\/a>\n<a href=\"http:\/\/example.com\">link2<\/a>';\n\n\/\/ a form\necho '<form action=\"script.php\" method=\"post\">\n<input type=\"text\" name=\"var2\" \/>\n<\/form>';\n\nprint_r(ob_list_handlers());","output":"<a href=\"file.php?var=value\">link<\/a>\n<a href=\"http:\/\/example.com\">link2<\/a>\n\n<form action=\"script.php\" method=\"post\">\n<input type=\"hidden\" name=\"var\" value=\"value\" \/>\n<input type=\"text\" name=\"var2\" \/>\n<\/form>\n\nArray\n(\n    [0] => URL-Rewriter\n)"}],"output_reset_rewrite_vars":[{"title":"output_reset_rewrite_vars() example","source":"session_start();\noutput_add_rewrite_var('var', 'value');\n\necho '<a href=\"file.php\">link<\/a>';\nob_flush();\n\noutput_reset_rewrite_vars();\necho '<a href=\"file.php\">link<\/a>';","output":"<a href=\"file.php?PHPSESSID=xxx&var=value\">link<\/a>\n<a href=\"file.php\">link<\/a>"}],"override_function":[{"title":"override_function() example","source":"override_function('test', '$a,$b', 'echo \"DOING TEST\"; return $a * $b;');","output":null}],"pack":[{"title":"pack() example","source":"$binarydata = pack(\"nvc*\", 0x1234, 0x5678, 65, 66);","output":null}],"parse_ini_file":[{"title":"Contents of sample.ini","source":"Parse a configuration file\n move_uploaded_file\n parse_ini_string\n Filesystem Functions\n PHP Manual\n\n \n  parse_ini_file\n  (PHP 4, PHP 5, PHP 7)parse_ini_file — Parse a configuration file\n\n \n \n \n  Description\n  \n   array parse_ini_file\n    ( string $filename\n   [, bool $process_sections = false\n   [, int $scanner_mode = INI_SCANNER_NORMAL\n  ]] )\n\n  \n   parse_ini_file() loads in the\n   ini file specified in filename,\n   and returns the settings in it in an associative array.\n  \n  \n   The structure of the ini file is the same as the php.ini's.\n  \n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the ini file being parsed.\n      \n     \n\n    \n    \n     \nprocess_sections\n\n     \n\n      \n       By setting the process_sections\n       parameter to TRUE, you get a multidimensional array, with\n       the section names and settings included. The default\n       for process_sections is FALSE      \n      \n     \n\n    \n    \n     \nscanner_mode\n\n     \n\n      \n       Can either be INI_SCANNER_NORMAL (default) or \n       INI_SCANNER_RAW. If INI_SCANNER_RAW \n       is supplied, then option values will not be parsed.\n      \n      \n    As of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED.\n    In this mode boolean, null and integer types are preserved when possible.\n    String values \"true\", \"on\" and \"yes\"\n    are converted to TRUE. \"false\", \"off\", \"no\"\n    and \"none\" are considered FALSE. \"null\" is converted to NULL\n    in typed mode. Also, all numeric strings are converted to integer type if it is possible.\n   \n     \n\n    \n   \n\n \n \n  Return Values\n  \n   The settings are returned as an associative array on success,\n   and FALSE on failure.\n  \n \n\n\n \n \n  Changelog\n  \n   Version\n       Description\n      7.0.0\n       \n         Hash marks (#) are no longer recognized as comments.\n       \n      5.6.1\n       \n         Added new INI_SCANNER_TYPED mode.\n       \n      5.3.0\n       \n         Added optional scanner_mode parameter.\n         Single quotes may now be used around variable assignments.\n         Hash marks (#) should no longer be used as comments\n         and will throw a deprecation warning if used.\n       \n      5.2.7\n       \n        On syntax error this function will return FALSE rather than an empty\n        array.\n       \n      5.2.4\n       \n        Keys and section names consisting of numbers are now evaluated as PHP\n        integers thus numbers\n        starting by 0 are evaluated as octals and numbers starting by 0x are\n        evaluated as hexadecimals.\n       \n      5.0.0\n       \n        Values enclosed in double quotes can contain new lines.\n       \n      4.2.1\n       \n        This function is now affected by safe mode\n        and open_basedir.\n       \n      \n\n\n \n  Examples\n  \n   \n    Example #1 Contents of sample.ini\n    \n\n; This is a sample configuration file\n; Comments start with ';', as in php.ini\n\n[first_section]\none = 1\nfive = 5\nanimal = BIRD\n\n[second_section]\npath = \"\/usr\/local\/bin\"\nURL = \"http:\/\/www.example.com\/~username\"\n\n[third_section]\nphpversion[] = \"5.0\"\nphpversion[] = \"5.1\"\nphpversion[] = \"5.2\"\nphpversion[] = \"5.3\"\n\nurls[svn] = \"http:\/\/svn.php.net\"\nurls[git] = \"http:\/\/git.php.net\"\n\n    \n\n   \n   \n    Example #2 parse_ini_file() example\n    \n     Constants may also be parsed\n     in the ini file so if you define a constant as an ini value before\n     running parse_ini_file(), it will be integrated into\n     the results.  Only ini values are evaluated.  For example:\n    \n    \n\n<?php\n\ndefine('BIRD', 'Dodo bird');\n\n\/\/ Parse without sections\n$ini_array = parse_ini_file(\"sample.ini\");\nprint_r($ini_array);\n\n\/\/ Parse with sections\n$ini_array = parse_ini_file(\"sample.ini\", true);\nprint_r($ini_array);\n\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nArray\n(\n    [one] => 1\n    [five] => 5\n    [animal] => Dodo bird\n    [path] => \/usr\/local\/bin\n    [URL] => http:\/\/www.example.com\/~username\n    [phpversion] => Array\n        (\n            [0] => 5.0\n            [1] => 5.1\n            [2] => 5.2\n            [3] => 5.3\n        )\n\n    [urls] => Array\n        (\n            [svn] => http:\/\/svn.php.net\n            [git] => http:\/\/git.php.net\n        )\n\n)\nArray\n(\n    [first_section] => Array\n        (\n            [one] => 1\n            [five] => 5\n            [animal] => Dodo bird\n        )\n\n    [second_section] => Array\n        (\n            [path] => \/usr\/local\/bin\n            [URL] => http:\/\/www.example.com\/~username\n        )\n\n    [third_section] => Array\n        (\n            [phpversion] => Array\n                (\n                    [0] => 5.0\n                    [1] => 5.1\n                    [2] => 5.2\n                    [3] => 5.3\n                )\n\n            [urls] => Array\n                (\n                    [svn] => http:\/\/svn.php.net\n                    [git] => http:\/\/git.php.net\n                )\n\n        )\n\n)\n\n    \n   \n  \n  \n   \n    Example #3 parse_ini_file() parsing a php.ini file\n    \n\n<?php\n\/\/ A simple function used for comparing the results below\nfunction yesno($expression)\n{\n    return($expression ? 'Yes' : 'No');\n}\n\n\/\/ Get the path to php.ini using the php_ini_loaded_file() \n\/\/ function available as of PHP 5.2.4\n$ini_path = php_ini_loaded_file();\n\n\/\/ Parse php.ini\n$ini = parse_ini_file($ini_path);\n\n\/\/ Print and compare the values, note that using get_cfg_var()\n\/\/ will give the same results for parsed and loaded here\necho '(parsed) magic_quotes_gpc = ' . yesno($ini['magic_quotes_gpc']) . PHP_EOL;\necho '(loaded) magic_quotes_gpc = ' . yesno(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n(parsed) magic_quotes_gpc = Yes\n(loaded) magic_quotes_gpc = Yes\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: \n   \n    This function has nothing to do with the\n    php.ini file. It is already processed by\n    the time you run your script. This function can be used to\n    read in your own application's configuration files.\n   \n  \n  Note: \n   \n    If a value in the ini file contains any non-alphanumeric\n    characters it needs to be enclosed in double-quotes (\").\n   \n  \n  Note: \n   \n    There are reserved words which must not be used as keys for\n    ini files.  These include: null, yes,\n    no, true, false,\n    on, off, none.\n    Values null, off, no and\n    false result in \"\", and values\n    on, yes and true result\n    in \"1\", unless INI_SCANNER_TYPED mode is used (as of PHP 5.6.1).\n    Characters ?{}|&~!()^\" must not be used anywhere in\n    the key and have a special meaning in the value.\n   \n  \n  Note: \n   \n    Entries without an equal sign are ignored. For example, \"foo\"\n    is ignored whereas \"bar =\" is parsed and added with an empty\n    value. For example, MySQL has a \"no-auto-rehash\" setting \n    in my.cnf that does not take a value, so\n    it is ignored.\n   \n  \n \n\n \n \n  See Also\n  \n   parse_ini_string() - Parse a configuration string\n   \n\n\n\n move_uploaded_file\n parse_ini_string\n Filesystem Functions\n PHP Manual","output":"; This is a sample configuration file\n; Comments start with ';', as in php.ini\n\n[first_section]\none = 1\nfive = 5\nanimal = BIRD\n\n[second_section]\npath = \"\/usr\/local\/bin\"\nURL = \"http:\/\/www.example.com\/~username\"\n\n[third_section]\nphpversion[] = \"5.0\"\nphpversion[] = \"5.1\"\nphpversion[] = \"5.2\"\nphpversion[] = \"5.3\"\n\nurls[svn] = \"http:\/\/svn.php.net\"\nurls[git] = \"http:\/\/git.php.net\""},{"title":"parse_ini_file() example","source":"define('BIRD', 'Dodo bird');\n\n\/\/ Parse without sections\n$ini_array = parse_ini_file(\"sample.ini\");\nprint_r($ini_array);\n\n\/\/ Parse with sections\n$ini_array = parse_ini_file(\"sample.ini\", true);\nprint_r($ini_array);","output":"Array\n(\n    [one] => 1\n    [five] => 5\n    [animal] => Dodo bird\n    [path] => \/usr\/local\/bin\n    [URL] => http:\/\/www.example.com\/~username\n    [phpversion] => Array\n        (\n            [0] => 5.0\n            [1] => 5.1\n            [2] => 5.2\n            [3] => 5.3\n        )\n\n    [urls] => Array\n        (\n            [svn] => http:\/\/svn.php.net\n            [git] => http:\/\/git.php.net\n        )\n\n)\nArray\n(\n    [first_section] => Array\n        (\n            [one] => 1\n            [five] => 5\n            [animal] => Dodo bird\n        )\n\n    [second_section] => Array\n        (\n            [path] => \/usr\/local\/bin\n            [URL] => http:\/\/www.example.com\/~username\n        )\n\n    [third_section] => Array\n        (\n            [phpversion] => Array\n                (\n                    [0] => 5.0\n                    [1] => 5.1\n                    [2] => 5.2\n                    [3] => 5.3\n                )\n\n            [urls] => Array\n                (\n                    [svn] => http:\/\/svn.php.net\n                    [git] => http:\/\/git.php.net\n                )\n\n        )\n\n)"},{"title":"parse_ini_file() parsing a php.ini file","source":"\/\/ A simple function used for comparing the results below\nfunction yesno($expression)\n{\n    return($expression ? 'Yes' : 'No');\n}\n\n\/\/ Get the path to php.ini using the php_ini_loaded_file() \n\/\/ function available as of PHP 5.2.4\n$ini_path = php_ini_loaded_file();\n\n\/\/ Parse php.ini\n$ini = parse_ini_file($ini_path);\n\n\/\/ Print and compare the values, note that using get_cfg_var()\n\/\/ will give the same results for parsed and loaded here\necho '(parsed) magic_quotes_gpc = ' . yesno($ini['magic_quotes_gpc']) . PHP_EOL;\necho '(loaded) magic_quotes_gpc = ' . yesno(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;","output":"(parsed) magic_quotes_gpc = Yes\n(loaded) magic_quotes_gpc = Yes"}],"parse_str":[{"title":"Using parse_str()","source":"$str = \"first=value&arr[]=foo+bar&arr[]=baz\";\n\n\/\/ Recommended\nparse_str($str, $output);\necho $output['first'];  \/\/ value\necho $output['arr'][0]; \/\/ foo bar\necho $output['arr'][1]; \/\/ baz\n\n\/\/ DISCOURAGED\nparse_str($str);\necho $first;  \/\/ value\necho $arr[0]; \/\/ foo bar\necho $arr[1]; \/\/ baz","output":null},{"title":"parse_str() name mangling","source":"parse_str($\"My Value=Something\");\necho $My_Value; \/\/ Something\n\nparse_str($\"My Value=Something\", $output);\necho $output['My_Value']; \/\/ Something","output":null}],"parse_url":[{"title":"A parse_url() example","source":"$url = 'http:\/\/username:password@hostname:9090\/path?arg=value#anchor';\n\nvar_dump(parse_url($url));\nvar_dump(parse_url($url, PHP_URL_SCHEME));\nvar_dump(parse_url($url, PHP_URL_USER));\nvar_dump(parse_url($url, PHP_URL_PASS));\nvar_dump(parse_url($url, PHP_URL_HOST));\nvar_dump(parse_url($url, PHP_URL_PORT));\nvar_dump(parse_url($url, PHP_URL_PATH));\nvar_dump(parse_url($url, PHP_URL_QUERY));\nvar_dump(parse_url($url, PHP_URL_FRAGMENT));","output":"array(8) {\n  [\"scheme\"]=>\n  string(4) \"http\"\n  [\"host\"]=>\n  string(8) \"hostname\"\n  [\"port\"]=>\n  int(9090)\n  [\"user\"]=>\n  string(8) \"username\"\n  [\"pass\"]=>\n  string(8) \"password\"\n  [\"path\"]=>\n  string(5) \"\/path\"\n  [\"query\"]=>\n  string(9) \"arg=value\"\n  [\"fragment\"]=>\n  string(6) \"anchor\"\n}\nstring(4) \"http\"\nstring(8) \"username\"\nstring(8) \"password\"\nstring(8) \"hostname\"\nint(9090)\nstring(5) \"\/path\"\nstring(9) \"arg=value\"\nstring(6) \"anchor\""},{"title":"A parse_url() example with missing scheme","source":"$url = '\/\/www.example.com\/path?googleguy=googley';\n\n\/\/ Prior to 5.4.7 this would show the path as \"\/\/www.example.com\/path\"\nvar_dump(parse_url($url));","output":"array(3) {\n  [\"host\"]=>\n  string(15) \"www.example.com\"\n  [\"path\"]=>\n  string(5) \"\/path\"\n  [\"query\"]=>\n  string(17) \"googleguy=googley\"\n}"}],"parsekit_compile_file":[{"title":"parsekit_compile_file() example","source":"var_dump(parsekit_compile_file('hello_world.php', $errors, PARSEKIT_SIMPLE));","output":"array(5) {\n  [0]=>\n  string(37) \"ZEND_ECHO UNUSED 'Hello World' UNUSED\"\n  [1]=>\n  string(30) \"ZEND_RETURN UNUSED NULL UNUSED\"\n  [2]=>\n  string(42) \"ZEND_HANDLE_EXCEPTION UNUSED UNUSED UNUSED\"\n  [\"function_table\"]=>\n  NULL\n  [\"class_table\"]=>\n  NULL\n}"}],"parsekit_compile_string":[{"title":"parsekit_compile_string() example","source":"$ops = parsekit_compile_string('\necho \"Foo\\n\";\n', $errors, PARSEKIT_QUIET);\n\n  var_dump($ops);","output":"array(20) {\n  [\"type\"]=>\n  int(4)\n  [\"type_name\"]=>\n  string(14) \"ZEND_EVAL_CODE\"\n  [\"fn_flags\"]=>\n  int(0)\n  [\"num_args\"]=>\n  int(0)\n  [\"required_num_args\"]=>\n  int(0)\n  [\"pass_rest_by_reference\"]=>\n  bool(false)\n  [\"uses_this\"]=>\n  bool(false)\n  [\"line_start\"]=>\n  int(0)\n  [\"line_end\"]=>\n  int(0)\n  [\"return_reference\"]=>\n  bool(false)\n  [\"refcount\"]=>\n  int(1)\n  [\"last\"]=>\n  int(3)\n  [\"size\"]=>\n  int(3)\n  [\"T\"]=>\n  int(0)\n  [\"last_brk_cont\"]=>\n  int(0)\n  [\"current_brk_cont\"]=>\n  int(-1)\n  [\"backpatch_count\"]=>\n  int(0)\n  [\"done_pass_two\"]=>\n  bool(true)\n  [\"filename\"]=>\n  string(17) \"Parsekit Compiler\"\n  [\"opcodes\"]=>\n  array(3) {\n    [8594800]=>\n    array(5) {\n      [\"opcode\"]=>\n      int(40)\n      [\"opcode_name\"]=>\n      string(9) \"ZEND_ECHO\"\n      [\"flags\"]=>\n      int(768)\n      [\"op1\"]=>\n      array(3) {\n        [\"type\"]=>\n        int(1)\n        [\"type_name\"]=>\n        string(8) \"IS_CONST\"\n        [\"constant\"]=>\n        &string(4) \"Foo\n\"\n      }\n      [\"lineno\"]=>\n      int(2)\n    }\n    [\"859484C\"]=>\n    array(6) {\n      [\"opcode\"]=>\n      int(62)\n      [\"opcode_name\"]=>\n      string(11) \"ZEND_RETURN\"\n      [\"flags\"]=>\n      int(16777984)\n      [\"op1\"]=>\n      array(3) {\n        [\"type\"]=>\n        int(1)\n        [\"type_name\"]=>\n        string(8) \"IS_CONST\"\n        [\"constant\"]=>\n        &NULL\n      }\n      [\"extended_value\"]=>\n      int(0)\n      [\"lineno\"]=>\n      int(3)\n    }\n    [8594898]=>\n    array(4) {\n      [\"opcode\"]=>\n      int(149)\n      [\"opcode_name\"]=>\n      string(21) \"ZEND_HANDLE_EXCEPTION\"\n      [\"flags\"]=>\n      int(0)\n      [\"lineno\"]=>\n      int(3)\n    }\n  }\n}"}],"parsekit_func_arginfo":[{"title":"parsekit_func_arginfo() example","source":"function foo($bar, stdClass $baz, &$bomb, $bling = false) {\n}\n\nvar_dump(parsekit_func_arginfo('foo'));","output":"array(4) {\n  [0]=>\n  array(3) {\n    [\"name\"]=>\n    string(3) \"bar\"\n    [\"allow_null\"]=>\n    bool(true)\n    [\"pass_by_reference\"]=>\n    bool(false)\n  }\n  [1]=>\n  array(4) {\n    [\"name\"]=>\n    string(3) \"baz\"\n    [\"class_name\"]=>\n    string(8) \"stdClass\"\n    [\"allow_null\"]=>\n    bool(false)\n    [\"pass_by_reference\"]=>\n    bool(false)\n  }\n  [2]=>\n  array(3) {\n    [\"name\"]=>\n    string(4) \"bomb\"\n    [\"allow_null\"]=>\n    bool(true)\n    [\"pass_by_reference\"]=>\n    bool(true)\n  }\n  [3]=>\n  array(3) {\n    [\"name\"]=>\n    string(5) \"bling\"\n    [\"allow_null\"]=>\n    bool(true)\n    [\"pass_by_reference\"]=>\n    bool(false)\n  }\n}"}],"password_hash":[{"title":"password_hash() example","source":"\/**\n * We just want to hash our password using the current DEFAULT algorithm.\n * This is presently BCRYPT, and will produce a 60 character result.\n *\n * Beware that DEFAULT may change over time, so you would want to prepare\n * By allowing your storage to expand past 60 characters (255 would be good)\n *\/\necho password_hash(\"rasmuslerdorf\", PASSWORD_DEFAULT).\"\\n\";","output":"$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a"},{"title":"password_hash() example setting cost manually","source":"\/**\n * In this case, we want to increase the default cost for BCRYPT to 12.\n * Note that we also switched to BCRYPT, which will always be 60 characters.\n *\/\n$options = [\n    'cost' => 12,\n];\necho password_hash(\"rasmuslerdorf\", PASSWORD_BCRYPT, $options).\"\\n\";","output":"$2y$12$QjSH496pcT5CEbzjD\/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K"},{"title":"password_hash() example setting salt manually","source":"\/**\n * Note that the salt here is randomly generated.\n * Never use a static salt or one that is not randomly generated.\n *\n * For the VAST majority of use-cases, let password_hash generate the salt randomly for you\n *\/\n$options = [\n    'cost' => 11,\n    'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),\n];\necho password_hash(\"rasmuslerdorf\", PASSWORD_BCRYPT, $options).\"\\n\";","output":"$2y$11$q5MkhSBtlsJcNEVsYh64a.aCluzHnGog7TQAKVmQwO9C8xb.t89F."},{"title":"password_hash() example finding a good cost","source":"\/**\n * This code will benchmark your server to determine how high of a cost you can\n * afford. You want to set the highest cost that you can without slowing down\n * you server too much. 8-10 is a good baseline, and more is good if your servers\n * are fast enough. The code below aims for ≤ 50 milliseconds stretching time,\n * which is a good baseline for systems handling interactive logins.\n *\/\n$timeTarget = 0.05; \/\/ 50 milliseconds \n\n$cost = 8;\ndo {\n    $cost++;\n    $start = microtime(true);\n    password_hash(\"test\", PASSWORD_BCRYPT, [\"cost\" => $cost]);\n    $end = microtime(true);\n} while (($end - $start) < $timeTarget);\n\necho \"Appropriate Cost Found: \" . $cost . \"\\n\";","output":"Appropriate Cost Found: 10"}],"password_needs_rehash":[{"title":"Usage of password_needs_rehash()","source":"$password = 'rasmuslerdorf';\n$hash = '$2y$10$YCFsG6elYca568hBi2pZ0.3LDL5wjgxct1N8w\/oLR\/jfHsiQwCqTS';\n\n\/\/ The cost parameter can change over time as hardware improves\n$options = array('cost' => 11);\n\n\/\/ Verify stored hash against plain-text password\nif (password_verify($password, $hash)) {\n    \/\/ Check if a newer hashing algorithm is available\n    \/\/ or the cost has changed\n    if (password_needs_rehash($hash, PASSWORD_DEFAULT, $options)) {\n        \/\/ If so, create a new hash, and replace the old one\n        $newHash = password_hash($password, PASSWORD_DEFAULT, $options);\n    }\n\n    \/\/ Log user in\n}","output":null}],"password_verify":[{"title":"password_verify() example","source":"\/\/ See the password_hash() example to see where this came from.\n$hash = '$2y$07$BCryptRequires22Chrcte\/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq';\n\nif (password_verify('rasmuslerdorf', $hash)) {\n    echo 'Password is valid!';\n} else {\n    echo 'Invalid password.';\n}","output":"Password is valid!"}],"pathinfo":[{"title":"pathinfo() Example","source":"$path_parts = pathinfo('\/www\/htdocs\/inc\/lib.inc.php');\n\necho $path_parts['dirname'], \"\\n\";\necho $path_parts['basename'], \"\\n\";\necho $path_parts['extension'], \"\\n\";\necho $path_parts['filename'], \"\\n\"; \/\/ since PHP 5.2.0","output":"\/www\/htdocs\/inc\nlib.inc.php\nphp\nlib.inc"},{"title":"pathinfo() example showing difference between null and no extension","source":"$path_parts = pathinfo('\/path\/emptyextension.');\nvar_dump($path_parts['extension']);\n\n$path_parts = pathinfo('\/path\/noextension');\nvar_dump($path_parts['extension']);","output":"string(0) \"\"\n\nNotice: Undefined index: extension in test.php on line 6\nNULL"},{"title":"pathinfo() example for a dot-file","source":"print_r(pathinfo('\/some\/path\/.test'));","output":"Array\n(\n    [dirname] => \/some\/path\n    [basename] => .test\n    [extension] => test\n    [filename] => \n)"}],"pclose":[{"title":"pclose() example","source":"$handle = popen('\/bin\/ls', 'r');\npclose($handle);","output":null}],"pcntl_fork":[{"title":"pcntl_fork() example","source":"$pid = pcntl_fork();\nif ($pid == -1) {\n     die('could not fork');\n} else if ($pid) {\n     \/\/ we are the parent\n     pcntl_wait($status); \/\/Protect against Zombie children\n} else {\n     \/\/ we are the child\n}","output":null}],"pcntl_signal_dispatch":[{"title":"pcntl_signal_dispatch() example","source":"echo \"Installing signal handler...\\n\";\npcntl_signal(SIGHUP,  function($signo) {\n     echo \"signal handler called\\n\";\n});\n\necho \"Generating signal SIGHUP to self...\\n\";\nposix_kill(posix_getpid(), SIGHUP);\n\necho \"Dispatching...\\n\";\npcntl_signal_dispatch();\n\necho \"Done\\n\";","output":"Installing signal handler...\nGenerating signal SIGHUP to self...\nDispatching...\nsignal handler called\nDone"}],"pcntl_signal_get_handler":[{"title":"pcntl_signal_get_handler() example","source":"var_dump(pcntl_signal_get_handler(SIGUSR1)); \/\/ Outputs: int(0)\n\nfunction pcntl_test($signo) {}\npcntl_signal(SIGUSR1, 'pcntl_test');\nvar_dump(pcntl_signal_get_handler(SIGUSR1)); \/\/ Outputs: string(10) \"pcntl_test\"\n\npcntl_signal(SIGUSR1, SIG_DFL);\nvar_dump(pcntl_signal_get_handler(SIGUSR1)); \/\/ Outputs: int(0)\n\npcntl_signal(SIGUSR1, SIG_IGN);\nvar_dump(pcntl_signal_get_handler(SIGUSR1)); \/\/ Outputs: int(1)","output":null}],"pcntl_signal":[{"title":"pcntl_signal() example","source":"\/\/ tick use required as of PHP 4.3.0\ndeclare(ticks = 1);\n\n\/\/ signal handler function\nfunction sig_handler($signo)\n{\n\n     switch ($signo) {\n         case SIGTERM:\n             \/\/ handle shutdown tasks\n             exit;\n             break;\n         case SIGHUP:\n             \/\/ handle restart tasks\n             break;\n         case SIGUSR1:\n             echo \"Caught SIGUSR1...\\n\";\n             break;\n         default:\n             \/\/ handle all other signals\n     }\n\n}\n\necho \"Installing signal handler...\\n\";\n\n\/\/ setup signal handlers\npcntl_signal(SIGTERM, \"sig_handler\");\npcntl_signal(SIGHUP,  \"sig_handler\");\npcntl_signal(SIGUSR1, \"sig_handler\");\n\n\/\/ or use an object, available as of PHP 4.3.0\n\/\/ pcntl_signal(SIGUSR1, array($obj, \"do_something\"));\n\necho\"Generating signal SIGUSR1 to self...\\n\";\n\n\/\/ send SIGUSR1 to current process id\n\/\/ posix_* functions require the posix extension\nposix_kill(posix_getpid(), SIGUSR1);\n\necho \"Done\\n\";","output":null}],"pcntl_sigprocmask":[{"title":"pcntl_sigprocmask() example","source":"pcntl_sigprocmask(SIG_BLOCK, array(SIGHUP));\n$oldset = array();\npcntl_sigprocmask(SIG_UNBLOCK, array(SIGHUP), $oldset);","output":null}],"pcntl_sigwaitinfo":[{"title":"pcntl_sigwaitinfo() example","source":"echo \"Blocking SIGHUP signal\\n\";\npcntl_sigprocmask(SIG_BLOCK, array(SIGHUP));\n\necho \"Sending SIGHUP to self\\n\";\nposix_kill(posix_getpid(), SIGHUP);\n\necho \"Waiting for signals\\n\";\n$info = array();\npcntl_sigwaitinfo(array(SIGHUP), $info);","output":null}],"pg_affected_rows":[{"title":"pg_affected_rows() example","source":"$result = pg_query($conn, \"INSERT INTO authors VALUES ('Orwell', 2002, 'Animal Farm')\");\n\n$cmdtuples = pg_affected_rows($result);\n\necho $cmdtuples . \" tuples are affected.\\n\";","output":"1 tuples are affected."}],"pg_cancel_query":[{"title":"pg_cancel_query() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  if (!pg_connection_busy($dbconn)) {\n      pg_send_query($dbconn, \"select * from authors; select count(*) from authors;\");\n  }\n  \n  $res1 = pg_get_result($dbconn);\n  echo \"First call to pg_get_result(): $res1\\n\";\n  $rows1 = pg_num_rows($res1);\n  echo \"$res1 has $rows1 records\\n\\n\";\n  \n  \/\/ Cancel the currently running query.  Will be the second query if it is\n  \/\/ still running.\n  pg_cancel_query($dbconn);","output":"First call to pg_get_result(): Resource id #3\nResource id #3 has 3 records"}],"pg_client_encoding":[{"title":"pg_client_encoding() example","source":"\/\/ Assume $conn is a connection to a ISO-8859-1 database\n$encoding = pg_client_encoding($conn);\n\necho \"Client encoding is: \", $encoding, \"\\n\";","output":"Client encoding is: ISO-8859-1"}],"pg_close":[{"title":"pg_close() example","source":"$dbconn = pg_connect(\"host=localhost port=5432 dbname=mary\")\n   or die(\"Could not connect\");\necho \"Connected successfully\";\npg_close($dbconn);","output":"Connected successfully"}],"pg_connect":[{"title":"Using pg_connect()","source":"$dbconn = pg_connect(\"dbname=mary\");\n\/\/connect to a database named \"mary\"\n\n$dbconn2 = pg_connect(\"host=localhost port=5432 dbname=mary\");\n\/\/ connect to a database named \"mary\" on \"localhost\" at port \"5432\"\n\n$dbconn3 = pg_connect(\"host=sheep port=5432 dbname=mary user=lamb password=foo\");\n\/\/connect to a database named \"mary\" on the host \"sheep\" with a username and password\n\n$conn_string = \"host=sheep port=5432 dbname=test user=lamb password=bar\";\n$dbconn4 = pg_connect($conn_string);\n\/\/connect to a database named \"test\" on the host \"sheep\" with a username and password\n\n$dbconn5 = pg_connect(\"host=localhost options='--client_encoding=UTF8'\");\n\/\/connect to a database on \"localhost\" and set the command line parameter which tells the encoding is in UTF-8","output":null}],"pg_connection_busy":[{"title":"pg_connection_busy() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n  $bs = pg_connection_busy($dbconn);\n  if ($bs) {\n      echo 'connection is busy';\n  } else {\n     echo 'connection is not busy';\n  }","output":null}],"pg_connection_reset":[{"title":"pg_connection_reset() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n  $dbconn2 = pg_connection_reset($dbconn);\n  if ($dbconn2) {\n      echo \"reset successful\\n\";\n  } else {\n      echo \"reset failed\\n\";\n  }","output":null}],"pg_connection_status":[{"title":"pg_connection_status() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n  $stat = pg_connection_status($dbconn);\n  if ($stat === PGSQL_CONNECTION_OK) {\n      echo 'Connection status ok';\n  } else {\n      echo 'Connection status bad';\n  }","output":null}],"pg_copy_from":[{"title":"pg_copy_from() example","source":"$db = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n   \n   $rows = pg_copy_to($db, $table_name);\n   \n   pg_query($db, \"DELETE FROM $table_name\");\n   \n   pg_copy_from($db, $table_name, $rows);","output":null}],"pg_copy_to":[{"title":"pg_copy_to() example","source":"$db = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n   \n   $rows = pg_copy_to($db, $table_name);\n   \n   pg_query($db, \"DELETE FROM $table_name\");\n   \n   pg_copy_from($db, $table_name, $rows);","output":null}],"pg_dbname":[{"title":"pg_dbname() example","source":"error_reporting(E_ALL);\n\n  pg_connect(\"host=localhost port=5432 dbname=mary\");\n  echo pg_dbname(); \/\/ mary","output":null}],"pg_execute":[{"title":"Using pg_execute()","source":"\/\/ Connect to a database named \"mary\"\n$dbconn = pg_connect(\"dbname=mary\");\n\n\/\/ Prepare a query for execution\n$result = pg_prepare($dbconn, \"my_query\", 'SELECT * FROM shops WHERE name = $1');\n\n\/\/ Execute the prepared query.  Note that it is not necessary to escape\n\/\/ the string \"Joe's Widgets\" in any way\n$result = pg_execute($dbconn, \"my_query\", array(\"Joe's Widgets\"));\n\n\/\/ Execute the same prepared query, this time with a different parameter\n$result = pg_execute($dbconn, \"my_query\", array(\"Clothes Clothes Clothes\"));","output":null}],"pg_fetch_row":[{"title":"pg_fetch_row() example","source":"$conn = pg_pconnect(\"dbname=publisher\");\nif (!$conn) {\n  echo \"An error occurred.\\n\";\n  exit;\n}\n\n$result = pg_query($conn, \"SELECT author, email FROM authors\");\nif (!$result) {\n  echo \"An error occurred.\\n\";\n  exit;\n}\n\nwhile ($row = pg_fetch_row($result)) {\n  echo \"Author: $row[0]  E-mail: $row[1]\";\n  echo \"<br \/>\\n\";\n}","output":null}],"pg_field_name":[{"title":"Getting information about fields","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  $res = pg_query($dbconn, \"select * from authors where author = 'Orwell'\");\n  $i = pg_num_fields($res);\n  for ($j = 0; $j < $i; $j++) {\n      echo \"column $j\\n\";\n      $fieldname = pg_field_name($res, $j);\n      echo \"fieldname: $fieldname\\n\";\n      echo \"printed length: \" . pg_field_prtlen($res, $fieldname) . \" characters\\n\";\n      echo \"storage length: \" . pg_field_size($res, $j) . \" bytes\\n\";\n      echo \"field type: \" . pg_field_type($res, $j) . \" \\n\\n\";\n  }","output":"column 0\nfieldname: author\nprinted length: 6 characters\nstorage length: -1 bytes\nfield type: varchar \n\ncolumn 1\nfieldname: year\nprinted length: 4 characters\nstorage length: 2 bytes\nfield type: int2 \n\ncolumn 2\nfieldname: title\nprinted length: 24 characters\nstorage length: -1 bytes\nfield type: varchar"}],"pg_field_num":[{"title":"Getting information about fields","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  $res = pg_query($dbconn, \"select author, year, title from authors where author = 'Orwell'\");\n  \n  echo \"Column 'title' is field number: \", pg_field_num($res, 'title');","output":"Column 'title' is field number: 2"}],"pg_field_size":[{"title":"Getting information about fields","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  $res = pg_query($dbconn, \"select * from authors where author = 'Orwell'\");\n  $i = pg_num_fields($res);\n  for ($j = 0; $j < $i; $j++) {\n      echo \"column $j\\n\";\n      $fieldname = pg_field_name($res, $j);\n      echo \"fieldname: $fieldname\\n\";\n      echo \"printed length: \" . pg_field_prtlen($res, $fieldname) . \" characters\\n\";\n      echo \"storage length: \" . pg_field_size($res, $j) . \" bytes\\n\";\n      echo \"field type: \" . pg_field_type($res, $j) . \" \\n\\n\";\n  }","output":"column 0\nfieldname: author\nprinted length: 6 characters\nstorage length: -1 bytes\nfield type: varchar \n\ncolumn 1\nfieldname: year\nprinted length: 4 characters\nstorage length: 2 bytes\nfield type: int2 \n\ncolumn 2\nfieldname: title\nprinted length: 24 characters\nstorage length: -1 bytes\nfield type: varchar"}],"pg_field_table":[{"title":"Getting table information about a field","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n$res = pg_query($dbconn, \"SELECT bar FROM foo\");\n\necho pg_field_table($res, 0);\necho pg_field_table($res, 0, true);\n\n$res = pg_query($dbconn, \"SELECT version()\");\nvar_dump(pg_field_table($res, 0));","output":"foo\n14379580\n\nbool(false)"}],"pg_field_type_oid":[{"title":"Getting information about fields","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  \/\/ Assume 'title' is a varchar type\n  $res = pg_query($dbconn, \"select title from authors where author = 'Orwell'\");\n\n  echo \"Title field type OID: \", pg_field_type_oid($res, 0);","output":"Title field type OID: 1043"}],"pg_field_type":[{"title":"Getting information about fields","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  \/\/ Assume 'title' is a varchar type\n  $res = pg_query($dbconn, \"select title from authors where author = 'Orwell'\");\n\n  echo \"Title field type: \", pg_field_type($res, 0);","output":"Title field type: varchar"}],"pg_free_result":[{"title":"pg_free_result() example","source":"$db = pg_connect(\"dbname=users user=me\") || die();\n\n$res = pg_query($db, \"SELECT 1 UNION ALL SELECT 2\");\n\n$val = pg_fetch_result($res, 1, 0);\n\necho \"First field in the second row is: \", $val, \"\\n\";\n\npg_free_result($res);","output":"First field in the second row is: 2"}],"pg_get_result":[{"title":"pg_get_result() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  if (!pg_connection_busy($dbconn)) {\n      pg_send_query($dbconn, \"select * from authors; select count(*) from authors;\");\n  }\n  \n  $res1 = pg_get_result($dbconn);\n  echo \"First call to pg_get_result(): $res1\\n\";\n  $rows1 = pg_num_rows($res1);\n  echo \"$res1 has $rows1 records\\n\\n\";\n  \n  $res2 = pg_get_result($dbconn);\n  echo \"Second call to pg_get_result(): $res2\\n\";\n  $rows2 = pg_num_rows($res2);\n  echo \"$res2 has $rows2 records\\n\";","output":"First call to pg_get_result(): Resource id #3\nResource id #3 has 3 records\n\nSecond call to pg_get_result(): Resource id #4\nResource id #4 has 1 records"}],"pg_host":[{"title":"pg_host() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n\nif ($pgsql_conn) {\n   print \"Successfully connected to: \" . pg_host($pgsql_conn) . \"<br\/>\\n\";\n} else {\n   print pg_last_error($pgsql_conn);\n   exit;\n}","output":null}],"pg_last_error":[{"title":"pg_last_error() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  \/\/ Query that fails\n  $res = pg_query($dbconn, \"select * from doesnotexist\");\n  \n  echo pg_last_error($dbconn);","output":null}],"pg_last_notice":[{"title":"pg_last_notice() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n  \n  $res = pg_query(\"CREATE TABLE test (id SERIAL)\");\n  \n  $notice = pg_last_notice($pgsql_conn);\n  \n  echo $notice;","output":"CREATE TABLE will create implicit sequence \"test_id_seq\" for \"serial\" column \"test.id\""}],"pg_last_oid":[{"title":"pg_last_oid() example","source":"\/\/ Connect to the database\n  pg_connect(\"dbname=mark host=localhost\");\n\n  \/\/ Create a sample table\n  pg_query(\"CREATE TABLE test (a INTEGER) WITH OIDS\");\n\n  \/\/ Insert some data into it\n  $res = pg_query(\"INSERT INTO test VALUES (1)\");\n\n  $oid = pg_last_oid($res);","output":null}],"pg_lo_close":[{"title":"pg_lo_close() example","source":"$database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $oid = pg_lo_create($database);\n   echo \"$oid\\n\";\n   $handle = pg_lo_open($database, $oid, \"w\");\n   echo \"$handle\\n\";\n   pg_lo_write($handle, \"large object data\");\n   pg_lo_close($handle);\n   pg_query($database, \"commit\");","output":null}],"pg_lo_export":[{"title":"pg_lo_export() example","source":"$database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $oid = pg_lo_create($database);\n   $handle = pg_lo_open($database, $oid, \"w\");\n   pg_lo_write($handle, \"large object data\");\n   pg_lo_close($handle);\n   pg_lo_export($database, $oid, '\/tmp\/lob.dat');\n   pg_query($database, \"commit\");","output":null}],"pg_lo_import":[{"title":"pg_lo_import() example","source":"$database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $oid = pg_lo_import($database, '\/tmp\/lob.dat');\n   pg_query($database, \"commit\");","output":null}],"pg_lo_open":[{"title":"pg_lo_open() example","source":"$database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $oid = pg_lo_create($database);\n   echo \"$oid\\n\";\n   $handle = pg_lo_open($database, $oid, \"w\");\n   echo \"$handle\\n\";\n   pg_lo_write($handle, \"large object data\");\n   pg_lo_close($handle);\n   pg_query($database, \"commit\");","output":null}],"pg_lo_read_all":[{"title":"pg_lo_read_all() example","source":"header('Content-type: image\/jpeg');\n   $image_oid = 189762345;\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $handle = pg_lo_open($database, $image_oid, \"r\");\n   pg_lo_read_all($handle);\n   pg_query($database, \"commit\");","output":null}],"pg_lo_read":[{"title":"pg_lo_read() example","source":"$doc_oid = 189762345;\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $handle = pg_lo_open($database, $doc_oid, \"r\");\n   $data = pg_lo_read($handle, 50000);\n   pg_query($database, \"commit\");\n   echo $data;","output":null}],"pg_lo_seek":[{"title":"pg_lo_seek() example","source":"$doc_oid = 189762345;\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $handle = pg_lo_open($database, $doc_oid, \"r\");\n   \/\/ Skip first 50000 bytes\n   pg_lo_seek($handle, 50000, PGSQL_SEEK_SET);\n   \/\/ Read the next 10000 bytes\n   $data = pg_lo_read($handle, 10000);\n   pg_query($database, \"commit\");\n   echo $data;","output":null}],"pg_lo_tell":[{"title":"pg_lo_tell() example","source":"$doc_oid = 189762345;\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $handle = pg_lo_open($database, $doc_oid, \"r\");\n   \/\/ Skip first 50000 bytes\n   pg_lo_seek($handle, 50000, PGSQL_SEEK_SET);\n   \/\/ See how far we've skipped\n   $offset = pg_lo_tell($handle);\n   echo \"Seek position is: $offset\";\n   pg_query($database, \"commit\");","output":"Seek position is: 50000"}],"pg_lo_truncate":[{"title":"pg_lo_truncate() example","source":"$doc_oid = 189762345;\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $handle = pg_lo_open($database, $doc_oid, \"r\");\n   \/\/ Truncate to 0\n   pg_lo_truncate($handle, 0);\n   pg_query($database, \"commit\");\n   echo $data;","output":null}],"pg_lo_unlink":[{"title":"pg_lo_unlink() example","source":"\/\/ OID of the large object to delete\n   $doc_oid = 189762345;\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   pg_lo_unlink($database, $doc_oid);\n   pg_query($database, \"commit\");","output":null}],"pg_lo_write":[{"title":"pg_lo_write() example","source":"$doc_oid = 189762345;\n   $data = \"This will overwrite the start of the large object.\";\n   $database = pg_connect(\"dbname=jacarta\");\n   pg_query($database, \"begin\");\n   $handle = pg_lo_open($database, $doc_oid, \"w\");\n   $data = pg_lo_write($handle, $data);\n   pg_query($database, \"commit\");","output":null}],"pg_meta_data":[{"title":"Getting table metadata","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  $meta = pg_meta_data($dbconn, 'authors');\n  if (is_array($meta)) {\n      echo '<pre>';\n      var_dump($meta);\n      echo '<\/pre>';\n  }","output":"array(3) {\n[\"author\"]=>\narray(5) {\n  [\"num\"]=>\n  int(1)\n  [\"type\"]=>\n  string(7) \"varchar\"\n  [\"len\"]=>\n  int(-1)\n  [\"not null\"]=>\n  bool(false)\n  [\"has default\"]=>\n  bool(false)\n}\n[\"year\"]=>\narray(5) {\n  [\"num\"]=>\n  int(2)\n  [\"type\"]=>\n  string(4) \"int2\"\n  [\"len\"]=>\n  int(2)\n  [\"not null\"]=>\n  bool(false)\n  [\"has default\"]=>\n  bool(false)\n}\n[\"title\"]=>\narray(5) {\n  [\"num\"]=>\n  int(3)\n  [\"type\"]=>\n  string(7) \"varchar\"\n  [\"len\"]=>\n  int(-1)\n  [\"not null\"]=>\n  bool(false)\n  [\"has default\"]=>\n  bool(false)\n}\n}"}],"pg_num_fields":[{"title":"pg_num_fields() example","source":"$result = pg_query($conn, \"SELECT 1, 2\");\n\n$num = pg_num_fields($result);\n\necho $num . \" field(s) returned.\\n\";","output":"2 field(s) returned."}],"pg_num_rows":[{"title":"pg_num_rows() example","source":"$result = pg_query($conn, \"SELECT 1\");\n\n$rows = pg_num_rows($result);\n\necho $rows . \" row(s) returned.\\n\";","output":"1 row(s) returned."}],"pg_options":[{"title":"pg_options() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n   echo pg_options($pgsql_conn);","output":null}],"pg_parameter_status":[{"title":"pg_parameter_status() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  echo \"Server encoding: \", pg_parameter_status($dbconn, \"server_encoding\");","output":"Server encoding: SQL_ASCII"}],"pg_pconnect":[{"title":"Using pg_pconnect()","source":"$dbconn = pg_pconnect(\"dbname=mary\");\n\/\/connect to a database named \"mary\"\n\n$dbconn2 = pg_pconnect(\"host=localhost port=5432 dbname=mary\");\n\/\/ connect to a database named \"mary\" on \"localhost\" at port \"5432\"\n\n$dbconn3 = pg_pconnect(\"host=sheep port=5432 dbname=mary user=lamb password=foo\");\n\/\/connect to a database named \"mary\" on the host \"sheep\" with a username and password\n\n$conn_string = \"host=sheep port=5432 dbname=test user=lamb password=bar\";\n$dbconn4 = pg_pconnect($conn_string);\n\/\/connect to a database named \"test\" on the host \"sheep\" with a username and password","output":null}],"pg_port":[{"title":"pg_port() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n\nif ($pgsql_conn) {\n   print \"Successfully connected to port: \" . pg_port($pgsql_conn) . \"<br\/>\\n\";\n} else {\n   print pg_last_error($pgsql_conn);\n   exit;\n}","output":null}],"pg_prepare":[{"title":"Using pg_prepare()","source":"\/\/ Connect to a database named \"mary\"\n$dbconn = pg_connect(\"dbname=mary\");\n\n\/\/ Prepare a query for execution\n$result = pg_prepare($dbconn, \"my_query\", 'SELECT * FROM shops WHERE name = $1');\n\n\/\/ Execute the prepared query.  Note that it is not necessary to escape\n\/\/ the string \"Joe's Widgets\" in any way\n$result = pg_execute($dbconn, \"my_query\", array(\"Joe's Widgets\"));\n\n\/\/ Execute the same prepared query, this time with a different parameter\n$result = pg_execute($dbconn, \"my_query\", array(\"Clothes Clothes Clothes\"));","output":null}],"pg_query_params":[{"title":"Using pg_query_params()","source":"\/\/ Connect to a database named \"mary\"\n$dbconn = pg_connect(\"dbname=mary\");\n\n\/\/ Find all shops named Joe's Widgets.  Note that it is not necessary to\n\/\/ escape \"Joe's Widgets\"\n$result = pg_query_params($dbconn, 'SELECT * FROM shops WHERE name = $1', array(\"Joe's Widgets\"));\n\n\/\/ Compare against just using pg_query\n$str = pg_escape_string(\"Joe's Widgets\");\n$result = pg_query($dbconn, \"SELECT * FROM shops WHERE name = '{$str}'\");","output":null}],"pg_query":[{"title":"pg_query() example","source":"$conn = pg_pconnect(\"dbname=publisher\");\nif (!$conn) {\n  echo \"An error occurred.\\n\";\n  exit;\n}\n\n$result = pg_query($conn, \"SELECT author, email FROM authors\");\nif (!$result) {\n  echo \"An error occurred.\\n\";\n  exit;\n}\n\nwhile ($row = pg_fetch_row($result)) {\n  echo \"Author: $row[0]  E-mail: $row[1]\";\n  echo \"<br \/>\\n\";\n}","output":null},{"title":"Using pg_query() with multiple statements","source":"$conn = pg_pconnect(\"dbname=publisher\");\n\n\/\/ these statements will be executed as one transaction\n\n$query = \"UPDATE authors SET author=UPPER(author) WHERE id=1;\";\n$query .= \"UPDATE authors SET author=LOWER(author) WHERE id=2;\";\n$query .= \"UPDATE authors SET author=NULL WHERE id=3;\";\n\npg_query($conn, $query);","output":null}],"pg_result_error_field":[{"title":"pg_result_error_field() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  if (!pg_connection_busy($dbconn)) {\n      pg_send_query($dbconn, \"select * from doesnotexist;\");\n  }\n  \n  $res1 = pg_get_result($dbconn);\n  echo pg_result_error_field($res1, PGSQL_DIAG_SQLSTATE);","output":null}],"pg_result_error":[{"title":"pg_result_error() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  if (!pg_connection_busy($dbconn)) {\n      pg_send_query($dbconn, \"select * from doesnotexist;\");\n  }\n  \n  $res1 = pg_get_result($dbconn);\n  echo pg_result_error($res1);","output":null}],"pg_result_seek":[{"title":"pg_result_seek() example","source":"\/\/ Connect to the database\n$conn = pg_pconnect(\"dbname=publisher\");\n\n\/\/ Execute a query\n$result = pg_query($conn, \"SELECT author, email FROM authors\");\n\n\/\/ Seek to the 3rd row (assuming there are 3 rows)\npg_result_seek($result, 2);\n\n\/\/ Fetch the 3rd row\n$row = pg_fetch_row($result);","output":null}],"pg_result_status":[{"title":"pg_result_status() example","source":"\/\/ Connect to the database\n$conn = pg_pconnect(\"dbname=publisher\");\n\n\/\/ Execute a COPY\n$result = pg_query($conn, \"COPY authors FROM STDIN;\");\n\n\/\/ Get the result status\n$status = pg_result_status($result);\n\n\/\/ Determine status\nif ($status == PGSQL_COPY_IN)\n   echo \"Copy began.\";\nelse\n   echo \"Copy failed.\";","output":"Copy began."}],"pg_send_execute":[{"title":"Using pg_send_execute()","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  \/\/ Prepare a query for execution\n  if (!pg_connection_busy($dbconn)) {\n    pg_send_prepare($dbconn, \"my_query\", 'SELECT * FROM shops WHERE name = $1');\n    $res1 = pg_get_result($dbconn);\n  }\n\n  \/\/ Execute the prepared query.  Note that it is not necessary to escape\n  \/\/ the string \"Joe's Widgets\" in any way\n  if (!pg_connection_busy($dbconn)) {\n    pg_send_execute($dbconn, \"my_query\", array(\"Joe's Widgets\"));\n    $res2 = pg_get_result($dbconn);\n  }\n  \n  \/\/ Execute the same prepared query, this time with a different parameter\n  if (!pg_connection_busy($dbconn)) {\n    pg_send_execute($dbconn, \"my_query\", array(\"Clothes Clothes Clothes\"));\n    $res3 = pg_get_result($dbconn);\n  }","output":null}],"pg_send_prepare":[{"title":"Using pg_send_prepare()","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  \/\/ Prepare a query for execution\n  if (!pg_connection_busy($dbconn)) {\n    pg_send_prepare($dbconn, \"my_query\", 'SELECT * FROM shops WHERE name = $1');\n    $res1 = pg_get_result($dbconn);\n  }\n\n  \/\/ Execute the prepared query.  Note that it is not necessary to escape\n  \/\/ the string \"Joe's Widgets\" in any way\n  if (!pg_connection_busy($dbconn)) {\n    pg_send_execute($dbconn, \"my_query\", array(\"Joe's Widgets\"));\n    $res2 = pg_get_result($dbconn);\n  }\n  \n  \/\/ Execute the same prepared query, this time with a different parameter\n  if (!pg_connection_busy($dbconn)) {\n    pg_send_execute($dbconn, \"my_query\", array(\"Clothes Clothes Clothes\"));\n    $res3 = pg_get_result($dbconn);\n  }","output":null}],"pg_send_query_params":[{"title":"Using pg_send_query_params()","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  \/\/ Using parameters.  Note that it is not necessary to quote or escape\n  \/\/ the parameter.\n  pg_send_query_params($dbconn, 'select count(*) from authors where city = $1', array('Perth'));\n  \n  \/\/ Compare against basic pg_send_query usage\n  $str = pg_escape_string('Perth');\n  pg_send_query($dbconn, \"select count(*) from authors where city = '${str}'\");","output":null}],"pg_send_query":[{"title":"pg_send_query() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  if (!pg_connection_busy($dbconn)) {\n      pg_send_query($dbconn, \"select * from authors; select count(*) from authors;\");\n  }\n  \n  $res1 = pg_get_result($dbconn);\n  echo \"First call to pg_get_result(): $res1\\n\";\n  $rows1 = pg_num_rows($res1);\n  echo \"$res1 has $rows1 records\\n\\n\";\n  \n  $res2 = pg_get_result($dbconn);\n  echo \"Second call to pg_get_result(): $res2\\n\";\n  $rows2 = pg_num_rows($res2);\n  echo \"$res2 has $rows2 records\\n\";","output":"First call to pg_get_result(): Resource id #3\nResource id #3 has 3 records\n\nSecond call to pg_get_result(): Resource id #4\nResource id #4 has 1 records"}],"pg_set_client_encoding":[{"title":"pg_set_client_encoding() example","source":"$conn = pg_pconnect(\"dbname=publisher\");\nif (!$conn) {\n  echo \"An error occurred.\\n\";\n  exit;\n}\n\n\/\/ Set the client encoding to UNICODE.  Data will be automatically\n\/\/ converted from the backend encoding to the frontend.\npg_set_client_encoding($conn, \"UNICODE\");\n\n$result = pg_query($conn, \"SELECT author, email FROM authors\");\nif (!$result) {\n  echo \"An error occurred.\\n\";\n  exit;\n}\n\n\/\/ Write out UTF-8 data\nwhile ($row = pg_fetch_row($result)) {\n  echo \"Author: $row[0]  E-mail: $row[1]\";\n  echo \"<br \/>\\n\";\n}","output":null}],"pg_set_error_verbosity":[{"title":"pg_set_error_verbosity() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n\n  if (!pg_connection_busy($dbconn)) {\n      pg_send_query($dbconn, \"select * from doesnotexist;\");\n  }\n  \n  pg_set_error_verbosity($dbconn, PGSQL_ERRORS_VERBOSE);\n  $res1 = pg_get_result($dbconn);\n  echo pg_result_error($res1);","output":null}],"pg_trace":[{"title":"pg_trace() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n\nif ($pgsql_conn) {\n   pg_trace('\/tmp\/trace.log', 'w', $pgsql_conn);\n   pg_query(\"SELECT 1\");\n   pg_untrace($pgsql_conn);\n   \/\/ Now \/tmp\/trace.log will contain backend communication\n} else {\n   print pg_last_error($pgsql_conn);\n   exit;\n}","output":null}],"pg_transaction_status":[{"title":"pg_transaction_status() example","source":"$dbconn = pg_connect(\"dbname=publisher\") or die(\"Could not connect\");\n  $stat = pg_transaction_status($dbconn);\n  if ($stat === PGSQL_TRANSACTION_UNKNOWN) {\n      echo 'Connection is bad';\n  } else if ($stat === PGSQL_TRANSACTION_IDLE) {\n      echo 'Connection is currently idle';\n  } else {\n      echo 'Connection is in a transaction state';\n  }","output":null}],"pg_tty":[{"title":"pg_tty() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n\nif ($pgsql_conn) {\n   print \"Server debug TTY is: \" . pg_tty($pgsql_conn) . \"<br\/>\\n\";\n} else {\n   print pg_last_error($pgsql_conn);\n   exit;\n}","output":null}],"pg_untrace":[{"title":"pg_untrace() example","source":"$pgsql_conn = pg_connect(\"dbname=mark host=localhost\");\n\nif ($pgsql_conn) {\n   pg_trace('\/tmp\/trace.log', 'w', $pgsql_conn);\n   pg_query(\"SELECT 1\");\n   pg_untrace($pgsql_conn);\n   \/\/ Now tracing of backend communication is disabled\n} else {\n   print pg_last_error($pgsql_conn);\n   exit;\n}","output":null}],"pg_version":[{"title":"pg_version() example","source":"$dbconn = pg_connect(\"host=localhost port=5432 dbname=mary\")\n     or die(\"Could not connect\");\n     \n  $v = pg_version($dbconn);\n  \n  echo $v['client'];","output":7.4}],"php_ini_loaded_file":[{"title":"php_ini_loaded_file() example","source":"$inipath = php_ini_loaded_file();\n\nif ($inipath) {\n    echo 'Loaded php.ini: ' . $inipath;\n} else {\n    echo 'A php.ini file is not loaded';\n}","output":"Loaded php.ini: \/usr\/local\/php\/php.ini"}],"php_ini_scanned_files":[{"title":"A simple example to list the returned ini files","source":"if ($filelist = php_ini_scanned_files()) {\n    if (strlen($filelist) > 0) {\n        $files = explode(',', $filelist);\n\n        foreach ($files as $file) {\n            echo \"<li>\" . trim($file) . \"<\/li>\\n\";\n        }\n    }\n}","output":null}],"php_logo_guid":[{"title":"php_logo_guid() example","source":"echo '<img src=\"' . $_SERVER['PHP_SELF'] .\n     '?=' . php_logo_guid() . '\" alt=\"PHP Logo !\" \/>';","output":null}],"php_sapi_name":[{"title":"php_sapi_name() example","source":"$sapi_type = php_sapi_name();\nif (substr($sapi_type, 0, 3) == 'cgi') {\n    echo \"You are using CGI PHP\\n\";\n} else {\n    echo \"You are not using CGI PHP\\n\";\n}","output":null}],"php_strip_whitespace":[{"title":"php_strip_whitespace() example","source":"\/\/ PHP comment here\n\n\/*\n * Another PHP comment\n *\/\n\necho        php_strip_whitespace(__FILE__);\n\/\/ Newlines are considered whitespace, and are removed too:\ndo_nothing();","output":"<?php\n echo php_strip_whitespace(__FILE__); do_nothing(); ?>"}],"php_uname":[{"title":"Some php_uname() examples","source":"echo php_uname();\necho PHP_OS;\n\n\/* Some possible outputs:\nLinux localhost 2.4.21-0.13mdk #1 Fri Mar 14 15:08:06 EST 2003 i686\nLinux\n\nFreeBSD localhost 3.2-RELEASE #15: Mon Dec 17 08:46:02 GMT 2001\nFreeBSD\n\nWindows NT XN1 5.1 build 2600\nWINNT\n*\/\n\nif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n    echo 'This is a server using Windows!';\n} else {\n    echo 'This is a server not using Windows!';\n}","output":null},{"title":"A few OS related constant examples","source":"\/\/ *nix\necho DIRECTORY_SEPARATOR; \/\/ \/\necho PHP_SHLIB_SUFFIX;    \/\/ so\necho PATH_SEPARATOR;      \/\/ :\n\n\/\/ Win*\necho DIRECTORY_SEPARATOR; \/\/ \\\necho PHP_SHLIB_SUFFIX;    \/\/ dll\necho PATH_SEPARATOR;      \/\/ ;","output":null}],"phpcredits":[{"title":"Prints the general credits","source":"phpcredits(CREDITS_GENERAL);","output":null},{"title":"Prints the core developers and the documentation group","source":"phpcredits(CREDITS_GROUP | CREDITS_DOCS | CREDITS_FULLPAGE);","output":null},{"title":"Printing all the credits","source":"<html>\n <head>\n  <title>My credits page<\/title>\n <\/head>\n <body>\n<?php\n\/\/ some code of your own\nphpcredits(CREDITS_ALL - CREDITS_FULLPAGE);\n\/\/ some more code\n?>\n <\/body>\n<\/html>","output":null}],"phpinfo":[{"title":"phpinfo() Example","source":"\/\/ Show all information, defaults to INFO_ALL\nphpinfo();\n\n\/\/ Show just the module information.\n\/\/ phpinfo(8) yields identical results.\nphpinfo(INFO_MODULES);","output":null}],"phpversion":[{"title":"phpversion() example","source":"\/\/ prints e.g. 'Current PHP version: 4.1.1'\necho 'Current PHP version: ' . phpversion();\n\n\/\/ prints e.g. '2.0' or nothing if the extension isn't enabled\necho phpversion('tidy');","output":null},{"title":"PHP_VERSION_ID example and usage","source":"\/\/ PHP_VERSION_ID is available as of PHP 5.2.7, if our \n\/\/ version is lower than that, then emulate it\nif (!defined('PHP_VERSION_ID')) {\n    $version = explode('.', PHP_VERSION);\n\n    define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));\n}\n\n\/\/ PHP_VERSION_ID is defined as a number, where the higher the number \n\/\/ is, the newer a PHP version is used. It's defined as used in the above \n\/\/ expression:\n\/\/\n\/\/ $version_id = $major_version * 10000 + $minor_version * 100 + $release_version;\n\/\/\n\/\/ Now with PHP_VERSION_ID we can check for features this PHP version \n\/\/ may have, this doesn't require to use version_compare() everytime \n\/\/ you check if the current PHP version may not support a feature.\n\/\/\n\/\/ For example, we may here define the PHP_VERSION_* constants thats \n\/\/ not available in versions prior to 5.2.7\n\nif (PHP_VERSION_ID < 50207) {\n    define('PHP_MAJOR_VERSION',   $version[0]);\n    define('PHP_MINOR_VERSION',   $version[1]);\n    define('PHP_RELEASE_VERSION', $version[2]);\n\n    \/\/ and so on, ...\n}","output":null}],"pi":[{"title":"pi() example","source":"echo pi(); \/\/ 3.1415926535898\necho M_PI; \/\/ 3.1415926535898","output":null}],"png2wbmp":[{"title":"png2wbmp() example","source":"\/\/ Path to the target png\n$path = '.\/test.png';\n\n\/\/ Get the image sizes\n$image = getimagesize($path);\n\n\/\/ Convert image\npng2wbmp($path, '.\/test.wbmp', $image[1], $image[0], 7);","output":null}],"popen":[{"title":"popen() example","source":"$handle = popen(\"\/bin\/ls\", \"r\");","output":null},{"title":"popen() example","source":"error_reporting(E_ALL);\n\n\/* Add redirection so we can get stderr. *\/\n$handle = popen('\/path\/to\/executable 2>&1', 'r');\necho \"'$handle'; \" . gettype($handle) . \"\\n\";\n$read = fread($handle, 2096);\necho $read;\npclose($handle);","output":null}],"posix_access":[{"title":"posix_access() example","source":"$file = 'some_file';\n\nif (posix_access($file, POSIX_R_OK | POSIX_W_OK)) {\n    echo 'The file is readable and writable!';\n\n} else {\n    $error = posix_get_last_error();\n\n    echo \"Error $error: \" . posix_strerror($error);\n}","output":null}],"posix_ctermid":[{"title":"posix_ctermid() example","source":"echo \"I am running from \".posix_ctermid();","output":null}],"posix_get_last_error":[{"title":"posix_get_last_error() example","source":"posix_kill(999459,SIGKILL);\necho 'Your error returned was '.posix_get_last_error(); \/\/Your error was ___","output":null}],"posix_getcwd":[{"title":"posix_getcwd() example","source":"echo 'My current working directory is '.posix_getcwd();","output":null}],"posix_getegid":[{"title":"posix_getegid() example","source":"echo 'My real group id is '.posix_getgid(); \/\/20\nposix_setegid(40);\necho 'My real group id is '.posix_getgid(); \/\/20\necho 'My effective group id is '.posix_getegid(); \/\/40","output":null}],"posix_geteuid":[{"title":"posix_geteuid() example","source":"echo posix_getuid().\"\\n\"; \/\/10001\necho posix_geteuid().\"\\n\"; \/\/10001\nposix_seteuid(10000);\necho posix_getuid().\"\\n\"; \/\/10001\necho posix_geteuid().\"\\n\"; \/\/10000","output":null}],"posix_getgid":[{"title":"posix_getgid() example","source":"echo 'My real group id is '.posix_getgid(); \/\/20\nposix_setegid(40);\necho 'My real group id is '.posix_getgid(); \/\/20\necho 'My effective group id is '.posix_getegid(); \/\/40","output":null}],"posix_getgrgid":[{"title":"Example use of posix_getgrgid()","source":"$groupid   = posix_getegid();\n$groupinfo = posix_getgrgid($groupid);\n\nprint_r($groupinfo);","output":"Array\n(\n    [name]    => toons\n    [passwd]  => x\n    [members] => Array\n        (\n            [0] => tom\n            [1] => jerry\n        )\n    [gid]     => 42\n)"}],"posix_getgrnam":[{"title":"Example use of posix_getgrnam()","source":"$groupinfo = posix_getgrnam(\"toons\");\n\nprint_r($groupinfo);","output":"Array\n(\n    [name]    => toons\n    [passwd]  => x\n    [members] => Array\n        (\n            [0] => tom\n            [1] => jerry\n        )\n    [gid]     => 42\n)"}],"posix_getgroups":[{"title":"Example use of posix_getgroups()","source":"$groups = posix_getgroups();\n\nprint_r($groups);","output":"Array\n(\n    [0] => 4\n    [1] => 20\n    [2] => 24\n    [3] => 25\n    [4] => 29\n    [5] => 30\n    [6] => 33\n    [7] => 44\n    [8] => 46\n    [9] => 104\n    [10] => 109\n    [11] => 110\n    [12] => 1000\n)"}],"posix_getlogin":[{"title":"Example use of posix_getlogin()","source":"echo posix_getlogin(); \/\/apache","output":null}],"posix_getpgid":[{"title":"Example use of posix_getpgid()","source":"$pid = posix_getppid();\necho posix_getpgid($pid); \/\/35","output":null}],"posix_getpid":[{"title":"Example use of posix_getpid()","source":"echo posix_getpid(); \/\/8805","output":null}],"posix_getppid":[{"title":"Example use of posix_getppid()","source":"echo posix_getppid(); \/\/8259","output":null}],"posix_getpwnam":[{"title":"Example use of posix_getpwnam()","source":"$userinfo = posix_getpwnam(\"tom\");\n\nprint_r($userinfo);","output":"Array\n(\n    [name]    => tom\n    [passwd]  => x\n    [uid]     => 10000\n    [gid]     => 42\n    [gecos]   => \"tom,,,\"\n    [dir]     => \"\/home\/tom\"\n    [shell]   => \"\/bin\/bash\"\n)"}],"posix_getpwuid":[{"title":"Example use of posix_getpwuid()","source":"$userinfo = posix_getpwuid(10000);\n\nprint_r($userinfo);","output":"Array\n(\n    [name]    => tom\n    [passwd]  => x\n    [uid]     => 10000\n    [gid]     => 42\n    [gecos]   => \"tom,,,\"\n    [dir]     => \"\/home\/tom\"\n    [shell]   => \"\/bin\/bash\"\n)"}],"posix_getrlimit":[{"title":"Example use of posix_getrlimit()","source":"$limits = posix_getrlimit();\n\nprint_r($limits);","output":"Array\n(\n    [soft core] => 0\n    [hard core] => unlimited\n    [soft data] => unlimited\n    [hard data] => unlimited\n    [soft stack] => 8388608\n    [hard stack] => unlimited\n    [soft totalmem] => unlimited\n    [hard totalmem] => unlimited\n    [soft rss] => unlimited\n    [hard rss] => unlimited\n    [soft maxproc] => unlimited\n    [hard maxproc] => unlimited\n    [soft memlock] => unlimited\n    [hard memlock] => unlimited\n    [soft cpu] => unlimited\n    [hard cpu] => unlimited\n    [soft filesize] => unlimited\n    [hard filesize] => unlimited\n    [soft openfiles] => 1024\n    [hard openfiles] => 1024\n)"}],"posix_getsid":[{"title":"Example use of posix_getsid()","source":"$pid = posix_getpid();\necho posix_getsid($pid); \/\/8805","output":null}],"posix_getuid":[{"title":"Example use of posix_getuid()","source":"echo posix_getuid(); \/\/10000","output":null}],"posix_mknod":[{"title":"A posix_mknod() example","source":"$file = '\/tmp\/tmpfile';  \/\/ file name\n$type = POSIX_S_IFBLK;   \/\/ file type\n$permissions = 0777;     \/\/ octal\n$major = 1;\n$minor = 8;              \/\/ \/dev\/random\n\nif (!posix_mknod($file, $type | $permissions, $major, $minor)) {\n    die('Error ' . posix_get_last_error() . ': ' . posix_strerror(posix_get_last_error()));\n}","output":null}],"posix_setegid":[{"title":"posix_setegid() example","source":"echo 'My real group id is '.posix_getgid(); \/\/20\nposix_setegid(40);\necho 'My real group id is '.posix_getgid(); \/\/20\necho 'My effective group id is '.posix_getegid(); \/\/40","output":null}],"posix_setgid":[{"title":"posix_setgid() example","source":"echo 'My real group id is '.posix_getgid(); \/\/20\nposix_setgid(40);\necho 'My real group id is '.posix_getgid(); \/\/40\necho 'My effective group id is '.posix_getegid(); \/\/40","output":null}],"posix_setuid":[{"title":"posix_setuid() example","source":"echo posix_getuid().\"\\n\"; \/\/10001\necho posix_geteuid().\"\\n\"; \/\/10001\nposix_setuid(10000);\necho posix_getuid().\"\\n\"; \/\/10000\necho posix_geteuid().\"\\n\"; \/\/10000","output":null}],"posix_strerror":[{"title":"posix_strerror() example","source":"posix_kill(50,SIGKILL);\necho posix_strerror(posix_get_last_error()).\"\\n\";","output":"No such process"}],"posix_times":[{"title":"Example use of posix_times()","source":"$times = posix_times();\n\nprint_r($times);","output":"Array\n(\n    [ticks] => 25814410\n    [utime] => 1\n    [stime] => 1\n    [cutime] => 0\n    [cstime] => 0\n)"}],"posix_uname":[{"title":"Example use of posix_uname()","source":"$uname=posix_uname();\nprint_r($uname);","output":"Array\n(\n    [sysname] => Linux\n    [nodename] => funbox\n    [release] => 2.6.20-15-server\n    [version] => #2 SMP Sun Apr 15 07:41:34 UTC 2007\n    [machine] => i686\n)"}],"pow":[{"title":"Some examples of pow()","source":"var_dump(pow(2, 8)); \/\/ int(256)\necho pow(-1, 20); \/\/ 1\necho pow(0, 0); \/\/ 1\necho pow(10, -1); \/\/ 0.1\n\necho pow(-1, 5.5); \/\/ PHP >=5.2.2: NAN\necho pow(-1, 5.5); \/\/ PHP <5.2.2: -NAN","output":null}],"preg_filter":[{"title":"Example comparing preg_filter() with preg_replace()","source":"$subject = array('1', 'a', '2', 'b', '3', 'A', 'B', '4'); \n$pattern = array('\/\\d\/', '\/[a-z]\/', '\/[1a]\/'); \n$replace = array('A:$0', 'B:$0', 'C:$0'); \n\necho \"preg_filter returns\\n\";\nprint_r(preg_filter($pattern, $replace, $subject)); \n\necho \"preg_replace returns\\n\";\nprint_r(preg_replace($pattern, $replace, $subject));","output":"preg_filter returns\nArray\n(\n    [0] => A:C:1\n    [1] => B:C:a\n    [2] => A:2\n    [3] => B:b\n    [4] => A:3\n    [7] => A:4\n)\npreg_replace returns\nArray\n(\n    [0] => A:C:1\n    [1] => B:C:a\n    [2] => A:2\n    [3] => B:b\n    [4] => A:3\n    [5] => A\n    [6] => B\n    [7] => A:4\n)"}],"preg_grep":[{"title":"preg_grep() example","source":"\/\/ return all array elements\n\/\/ containing floating point numbers\n$fl_array = preg_grep(\"\/^(\\d+)?\\.\\d+$\/\", $array);","output":null}],"preg_last_error":[{"title":"preg_last_error() example","source":"preg_match('\/(?:\\D+|<\\d+>)*[!?]\/', 'foobar foobar foobar');\n\nif (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {\n    print 'Backtrack limit was exhausted!';\n}","output":"Backtrack limit was exhausted!"}],"preg_match_all":[{"title":"The above example will output:","source":"preg_match_all(\"|<[^>]+>(.*)<\/[^>]+>|U\",\n    \"<b>example: <\/b><div align=left>this is a test<\/div>\",\n    $out, PREG_PATTERN_ORDER);\necho $out[0][0] . \", \" . $out[0][1] . \"\\n\";\necho $out[1][0] . \", \" . $out[1][1] . \"\\n\";","output":"<b>example: <\/b>, <div align=left>this is a test<\/div>\nexample: , this is a test"},{"title":"The above example will output:","source":"preg_match_all(\n    '\/(?J)(?<match>foo)|(?<match>bar)\/',\n    'foo bar',\n    $matches,\n    PREG_PATTERN_ORDER\n);\nprint_r($matches['match']);","output":"Array\n(\n    [0] => \n    [1] => bar\n)"},{"title":"The above example will output:","source":"preg_match_all(\"|<[^>]+>(.*)<\/[^>]+>|U\",\n    \"<b>example: <\/b><div align=\\\"left\\\">this is a test<\/div>\",\n    $out, PREG_SET_ORDER);\necho $out[0][0] . \", \" . $out[0][1] . \"\\n\";\necho $out[1][0] . \", \" . $out[1][1] . \"\\n\";","output":"<b>example: <\/b>, example:\n<div align=\"left\">this is a test<\/div>, this is a test"},{"title":"The above example will output:","source":"preg_match_all('\/(foo)(bar)(baz)\/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);\nprint_r($matches);","output":"Array\n(\n    [0] => Array\n        (\n            [0] => Array\n                (\n                    [0] => foobarbaz\n                    [1] => 0\n                )\n\n        )\n\n    [1] => Array\n        (\n            [0] => Array\n                (\n                    [0] => foo\n                    [1] => 0\n                )\n\n        )\n\n    [2] => Array\n        (\n            [0] => Array\n                (\n                    [0] => bar\n                    [1] => 3\n                )\n\n        )\n\n    [3] => Array\n        (\n            [0] => Array\n                (\n                    [0] => baz\n                    [1] => 6\n                )\n\n        )\n\n)"},{"title":"Getting all phone numbers out of some text.","source":"preg_match_all(\"\/\\(?  (\\d{3})?  \\)?  (?(1)  [\\-\\s] ) \\d{3}-\\d{4}\/x\",\n                \"Call 555-1212 or 1-800-555-1212\", $phones);","output":null},{"title":"Find matching HTML tags (greedy)","source":"\/\/ The \\\\2 is an example of backreferencing. This tells pcre that\n\/\/ it must match the second set of parentheses in the regular expression\n\/\/ itself, which would be the ([\\w]+) in this case. The extra backslash is\n\/\/ required because the string is in double quotes.\n$html = \"<b>bold text<\/b><a href=howdy.html>click me<\/a>\";\n\npreg_match_all(\"\/(<([\\w]+)[^>]*>)(.*?)(<\\\/\\\\2>)\/\", $html, $matches, PREG_SET_ORDER);\n\nforeach ($matches as $val) {\n    echo \"matched: \" . $val[0] . \"\\n\";\n    echo \"part 1: \" . $val[1] . \"\\n\";\n    echo \"part 2: \" . $val[2] . \"\\n\";\n    echo \"part 3: \" . $val[3] . \"\\n\";\n    echo \"part 4: \" . $val[4] . \"\\n\\n\";\n}","output":"matched: <b>bold text<\/b>\npart 1: <b>\npart 2: b\npart 3: bold text\npart 4: <\/b>\n\nmatched: <a href=howdy.html>click me<\/a>\npart 1: <a href=howdy.html>\npart 2: a\npart 3: click me\npart 4: <\/a>"},{"title":"Using named subpattern","source":"$str = <<<FOO\na: 1\nb: 2\nc: 3\nFOO;\n\npreg_match_all('\/(?P<name>\\w+): (?P<digit>\\d+)\/', $str, $matches);\n\n\/* This also works in PHP 5.2.2 (PCRE 7.0) and later, however \n * the above form is recommended for backwards compatibility *\/\n\/\/ preg_match_all('\/(?<name>\\w+): (?<digit>\\d+)\/', $str, $matches);\n\nprint_r($matches);","output":"Array\n(\n    [0] => Array\n        (\n            [0] => a: 1\n            [1] => b: 2\n            [2] => c: 3\n        )\n\n    [name] => Array\n        (\n            [0] => a\n            [1] => b\n            [2] => c\n        )\n\n    [1] => Array\n        (\n            [0] => a\n            [1] => b\n            [2] => c\n        )\n\n    [digit] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n    [2] => Array\n        (\n            [0] => 1\n            [1] => 2\n            [2] => 3\n        )\n\n)"}],"preg_match":[{"title":"The above example will output:","source":"preg_match('\/(foo)(bar)(baz)\/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);\nprint_r($matches);","output":"Array\n(\n    [0] => Array\n        (\n            [0] => foobarbaz\n            [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => foo\n            [1] => 0\n        )\n\n    [2] => Array\n        (\n            [0] => bar\n            [1] => 3\n        )\n\n    [3] => Array\n        (\n            [0] => baz\n            [1] => 6\n        )\n\n)"},{"title":"The above example will output:","source":"$subject = \"abcdef\";\n$pattern = '\/^def\/';\npreg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);\nprint_r($matches);","output":"Array\n(\n)"},{"title":"Find the string of text \"php\"","source":"\/\/ The \"i\" after the pattern delimiter indicates a case-insensitive search\nif (preg_match(\"\/php\/i\", \"PHP is the web scripting language of choice.\")) {\n    echo \"A match was found.\";\n} else {\n    echo \"A match was not found.\";\n}","output":null},{"title":"Find the word \"web\"","source":"\/* The \\b in the pattern indicates a word boundary, so only the distinct\n * word \"web\" is matched, and not a word partial like \"webbing\" or \"cobweb\" *\/\nif (preg_match(\"\/\\bweb\\b\/i\", \"PHP is the web scripting language of choice.\")) {\n    echo \"A match was found.\";\n} else {\n    echo \"A match was not found.\";\n}\n\nif (preg_match(\"\/\\bweb\\b\/i\", \"PHP is the website scripting language of choice.\")) {\n    echo \"A match was found.\";\n} else {\n    echo \"A match was not found.\";\n}","output":null},{"title":"Getting the domain name out of a URL","source":"\/\/ get host name from URL\npreg_match('@^(?:http:\/\/)?([^\/]+)@i',\n    \"http:\/\/www.php.net\/index.html\", $matches);\n$host = $matches[1];\n\n\/\/ get last two segments of host name\npreg_match('\/[^.]+\\.[^.]+$\/', $host, $matches);\necho \"domain name is: {$matches[0]}\\n\";","output":"domain name is: php.net"},{"title":"Using named subpattern","source":"$str = 'foobar: 2008';\n\npreg_match('\/(?P<name>\\w+): (?P<digit>\\d+)\/', $str, $matches);\n\n\/* This also works in PHP 5.2.2 (PCRE 7.0) and later, however \n * the above form is recommended for backwards compatibility *\/\n\/\/ preg_match('\/(?<name>\\w+): (?<digit>\\d+)\/', $str, $matches);\n\nprint_r($matches);","output":"Array\n(\n    [0] => foobar: 2008\n    [name] => foobar\n    [1] => foobar\n    [digit] => 2008\n    [2] => 2008\n)"}],"preg_quote":[{"title":"preg_quote() example","source":"$keywords = '$40 for a g3\/400';\n$keywords = preg_quote($keywords, '\/');\necho $keywords; \/\/ returns \\$40 for a g3\\\/400","output":null},{"title":"Italicizing a word within some text","source":"\/\/ In this example, preg_quote($word) is used to keep the\n\/\/ asterisks from having special meaning to the regular\n\/\/ expression.\n\n$textbody = \"This book is *very* difficult to find.\";\n$word = \"*very*\";\n$textbody = preg_replace (\"\/\" . preg_quote($word, '\/') . \"\/\",\n                          \"<i>\" . $word . \"<\/i>\",\n                          $textbody);","output":null}],"preg_replace_callback_array":[{"title":"preg_replace_callback_array() example","source":"$subject = 'Aaaaaa Bbb';\n\npreg_replace_callback_array(\n    [\n        '~[a]+~i' => function ($match) {\n            echo strlen($match[0]), ' matches for \"a\" found', PHP_EOL;\n        },\n        '~[b]+~i' => function ($match) {\n            echo strlen($match[0]), ' matches for \"b\" found', PHP_EOL;\n        }\n    ],\n    $subject\n);","output":"6 matches for \"a\" found\n3 matches for \"b\" found"}],"preg_replace_callback":[{"title":"preg_replace_callback() and anonymous function","source":"\/* a unix-style command line filter to convert uppercase\n * letters at the beginning of paragraphs to lowercase *\/\n$fp = fopen(\"php:\/\/stdin\", \"r\") or die(\"can't read stdin\");\nwhile (!feof($fp)) {\n    $line = fgets($fp);\n    $line = preg_replace_callback(\n        '|<p>\\s*\\w|',\n        function ($matches) {\n            return strtolower($matches[0]);\n        },\n        $line\n    );\n    echo $line;\n}\nfclose($fp);","output":null},{"title":"preg_replace_callback() example","source":"\/\/ this text was used in 2002\n\/\/ we want to get this up to date for 2003\n$text = \"April fools day is 04\/01\/2002\\n\";\n$text.= \"Last christmas was 12\/24\/2001\\n\";\n\/\/ the callback function\nfunction next_year($matches)\n{\n  \/\/ as usual: $matches[0] is the complete match\n  \/\/ $matches[1] the match for the first subpattern\n  \/\/ enclosed in '(...)' and so on\n  return $matches[1].($matches[2]+1);\n}\necho preg_replace_callback(\n            \"|(\\d{2}\/\\d{2}\/)(\\d{4})|\",\n            \"next_year\",\n            $text);","output":"April fools day is 04\/01\/2003\nLast christmas was 12\/24\/2002"},{"title":"preg_replace_callback() using recursive structure to handle encapsulated BB code","source":"$input = \"plain [indent] deep [indent] deeper [\/indent] deep [\/indent] plain\";\n\nfunction parseTagsRecursive($input)\n{\n\n    $regex = '#\\[indent]((?:[^[]|\\[(?!\/?indent])|(?R))+)\\[\/indent]#';\n\n    if (is_array($input)) {\n        $input = '<div style=\"margin-left: 10px\">'.$input[1].'<\/div>';\n    }\n\n    return preg_replace_callback($regex, 'parseTagsRecursive', $input);\n}\n\n$output = parseTagsRecursive($input);\n\necho $output;","output":null}],"preg_replace":[{"title":"Using backreferences followed by numeric literals","source":"$string = 'April 15, 2003';\n$pattern = '\/(\\w+) (\\d+), (\\d+)\/i';\n$replacement = '${1}1,$3';\necho preg_replace($pattern, $replacement, $string);","output":"April1,2003"},{"title":"Using indexed arrays with preg_replace()","source":"$string = 'The quick brown fox jumps over the lazy dog.';\n$patterns = array();\n$patterns[0] = '\/quick\/';\n$patterns[1] = '\/brown\/';\n$patterns[2] = '\/fox\/';\n$replacements = array();\n$replacements[2] = 'bear';\n$replacements[1] = 'black';\n$replacements[0] = 'slow';\necho preg_replace($patterns, $replacements, $string);","output":"The bear black slow jumps over the lazy dog."},{"title":"Replacing several values","source":"$patterns = array ('\/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})\/',\n                   '\/^\\s*{(\\w+)}\\s*=\/');\n$replace = array ('\\3\/\\4\/\\1\\2', '$\\1 =');\necho preg_replace($patterns, $replace, '{startDate} = 1999-5-27');","output":"$startDate = 5\/27\/1999"},{"title":"Strip whitespace","source":"$str = 'foo   o';\n$str = preg_replace('\/\\s\\s+\/', ' ', $str);\n\/\/ This will be 'foo o' now\necho $str;","output":null},{"title":"Using the count parameter","source":"$count = 0;\n\necho preg_replace(array('\/\\d\/', '\/\\s\/'), '*', 'xp 4 to', -1 , $count);\necho $count; \/\/3","output":"xp***to\n3"}],"preg_split":[{"title":"preg_split() example : Get the parts of a search string","source":"\/\/ split the phrase by any number of commas or space characters,\n\/\/ which include \" \", \\r, \\t, \\n and \\f\n$keywords = preg_split(\"\/[\\s,]+\/\", \"hypertext language, programming\");\nprint_r($keywords);","output":"Array\n(\n    [0] => hypertext\n    [1] => language\n    [2] => programming\n)"},{"title":"Splitting a string into component characters","source":"$str = 'string';\n$chars = preg_split('\/\/', $str, -1, PREG_SPLIT_NO_EMPTY);\nprint_r($chars);","output":"Array\n(\n    [0] => s\n    [1] => t\n    [2] => r\n    [3] => i\n    [4] => n\n    [5] => g\n)"},{"title":"Splitting a string into matches and their offsets","source":"$str = 'hypertext language programming';\n$chars = preg_split('\/ \/', $str, -1, PREG_SPLIT_OFFSET_CAPTURE);\nprint_r($chars);","output":"Array\n(\n    [0] => Array\n        (\n            [0] => hypertext\n            [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => language\n            [1] => 10\n        )\n\n    [2] => Array\n        (\n            [0] => programming\n            [1] => 19\n        )\n\n)"}],"prev":[{"title":"Example use of prev() and friends","source":"$transport = array('foot', 'bike', 'car', 'plane');\n$mode = current($transport); \/\/ $mode = 'foot';\n$mode = next($transport);    \/\/ $mode = 'bike';\n$mode = next($transport);    \/\/ $mode = 'car';\n$mode = prev($transport);    \/\/ $mode = 'bike';\n$mode = end($transport);     \/\/ $mode = 'plane';","output":null}],"print_r":[{"title":"print_r() example","source":"<pre>\n<?php\n$a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x', 'y', 'z'));\nprint_r ($a);\n?>\n<\/pre>","output":"<pre>\nArray\n(\n    [a] => apple\n    [b] => banana\n    [c] => Array\n        (\n            [0] => x\n            [1] => y\n            [2] => z\n        )\n)\n<\/pre>"},{"title":"return parameter example","source":"$b = array ('m' => 'monkey', 'foo' => 'bar', 'x' => array ('x', 'y', 'z'));\n$results = print_r($b, true); \/\/ $results now contains output from print_r","output":null}],"print":[{"title":"print examples","source":"print(\"Hello World\");\n\nprint \"print() also works without parentheses.\";\n\nprint \"This spans\nmultiple lines. The newlines will be\noutput as well\";\n\nprint \"This spans\\nmultiple lines. The newlines will be\\noutput as well.\";\n\nprint \"escaping characters is done \\\"Like this\\\".\";\n\n\/\/ You can use variables inside a print statement\n$foo = \"foobar\";\n$bar = \"barbaz\";\n\nprint \"foo is $foo\"; \/\/ foo is foobar\n\n\/\/ You can also use arrays\n$bar = array(\"value\" => \"foo\");\n\nprint \"this is {$bar['value']} !\"; \/\/ this is foo !\n\n\/\/ Using single quotes will print the variable name, not the value\nprint 'foo is $foo'; \/\/ foo is $foo\n\n\/\/ If you are not using any other characters, you can just print variables\nprint $foo;          \/\/ foobar\n\nprint <<<END\nThis uses the \"here document\" syntax to output\nmultiple lines with $variable interpolation. Note\nthat the here document terminator must appear on a\nline with just a semicolon no extra whitespace!\nEND;","output":null}],"proc_nice":[{"title":"Using proc_nice() to set the process priority to high","source":"\/\/ Highest priority\nproc_nice(-20);","output":null}],"proc_open":[{"title":"A proc_open() example","source":"$descriptorspec = array(\n   0 => array(\"pipe\", \"r\"),  \/\/ stdin is a pipe that the child will read from\n   1 => array(\"pipe\", \"w\"),  \/\/ stdout is a pipe that the child will write to\n   2 => array(\"file\", \"\/tmp\/error-output.txt\", \"a\") \/\/ stderr is a file to write to\n);\n\n$cwd = '\/tmp';\n$env = array('some_option' => 'aeiou');\n\n$process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);\n\nif (is_resource($process)) {\n    \/\/ $pipes now looks like this:\n    \/\/ 0 => writeable handle connected to child stdin\n    \/\/ 1 => readable handle connected to child stdout\n    \/\/ Any error output will be appended to \/tmp\/error-output.txt\n\n    fwrite($pipes[0], '<?php print_r($_ENV); ?>');\n    fclose($pipes[0]);\n\n    echo stream_get_contents($pipes[1]);\n    fclose($pipes[1]);\n\n    \/\/ It is important that you close any pipes before calling\n    \/\/ proc_close in order to avoid a deadlock\n    $return_value = proc_close($process);\n\n    echo \"command returned $return_value\\n\";\n}","output":"Array\n(\n    [some_option] => aeiou\n    [PWD] => \/tmp\n    [SHLVL] => 1\n    [_] => \/usr\/local\/bin\/php\n)\ncommand returned 0"}],"property_exists":[{"title":"A property_exists() example","source":"class myClass {\n    public $mine;\n    private $xpto;\n    static protected $test;\n\n    static function test() {\n        var_dump(property_exists('myClass', 'xpto')); \/\/true\n    }\n}\n\nvar_dump(property_exists('myClass', 'mine'));   \/\/true\nvar_dump(property_exists(new myClass, 'mine')); \/\/true\nvar_dump(property_exists('myClass', 'xpto'));   \/\/true, as of PHP 5.3.0\nvar_dump(property_exists('myClass', 'bar'));    \/\/false\nvar_dump(property_exists('myClass', 'test'));   \/\/true, as of PHP 5.3.0\nmyClass::test();","output":null}],"ps_begin_pattern":[{"title":"Creating and using a pattern","source":"$ps = ps_new();\n\nif (!ps_open_file($ps, \"pattern.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_parameter($ps, \"warning\", \"true\");\nps_set_info($ps, \"Creator\", \"pattern.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Pattern example\");\n\n\n$pspattern = ps_begin_pattern($ps, 10.0, 10.0, 10.0, 10.0, 1);\nps_setlinewidth($ps, 0.2);\nps_setcolor($ps, \"stroke\", \"rgb\", 0.0, 0.0, 1.0, 0.0);\nps_moveto($ps, 0, 0);\nps_lineto($ps, 7, 7);\nps_stroke($ps);\nps_moveto($ps, 0, 7);\nps_lineto($ps, 7, 0);\nps_stroke($ps);\nps_end_pattern($ps);\n\nps_begin_page($ps, 596, 842);\nps_setcolor($ps, \"both\", \"pattern\", $pspattern, 0.0, 0.0, 0.0);\nps_rect($ps, 50, 400, 200, 200);\nps_fill($ps);\nps_end_page($ps);\n\nps_close($ps);\nps_delete($ps);","output":null}],"ps_begin_template":[{"title":"Creating and using a template","source":"$ps = ps_new();\n\nif (!ps_open_file($ps, \"template.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_parameter($ps, \"warning\", \"true\");\nps_set_info($ps, \"Creator\", \"template.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Template example\");\n\n$pstemplate = ps_begin_template($ps, 30.0, 30.0);\nps_moveto($ps, 0, 0);\nps_lineto($ps, 30, 30);\nps_moveto($ps, 0, 30);\nps_lineto($ps, 30, 0);\nps_stroke($ps);\nps_end_template($ps);\n\nps_begin_page($ps, 596, 842);\nps_place_image($ps, $pstemplate, 20.0, 20.0, 1.0);\nps_place_image($ps, $pstemplate, 50.0, 30.0, 0.5);\nps_place_image($ps, $pstemplate, 70.0, 70.0, 0.6);\nps_place_image($ps, $pstemplate, 30.0, 50.0, 1.3);\nps_end_page($ps);\n\nps_close($ps);\nps_delete($ps);","output":null}],"ps_hyphenate":[{"title":"Hyphennate a text","source":"$word = \"Koordinatensystem\";\n$psdoc = ps_new();\nps_set_parameter($psdoc, \"hyphendict\", \"hyph_de.dic\");\n$hyphens = ps_hyphenate($psdoc, $word);\nfor($i=0; $i<strlen($word); $i++) {\n  echo $word[$i];\n  if(in_array($i, $hyphens))\n    echo \"-\";\n}\nps_delete($psdoc);","output":"Ko-ordi-na-ten-sys-tem"}],"ps_lineto":[{"title":"Drawing a rectangle","source":"$ps = ps_new();\nif (!ps_open_file($ps, \"rectangle.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_info($ps, \"Creator\", \"rectangle.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Lineto example\");\n\nps_begin_page($ps, 596, 842);\nps_moveto($ps, 100, 100);\nps_lineto($ps, 100, 200);\nps_lineto($ps, 200, 200);\nps_lineto($ps, 200, 100);\nps_lineto($ps, 100, 100);\nps_stroke($ps);\nps_end_page($ps);\n\nps_delete($ps);","output":null}],"ps_makespotcolor":[{"title":"Creating and using a spot color","source":"$ps = ps_new();\nif (!ps_open_file($ps, \"spotcolor.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_info($ps, \"Creator\", \"spotcolor.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Spot color example\");\n\nps_begin_page($ps, 596, 842);\nps_setcolor($ps, \"fill\", \"cmyk\", 0.37, 0.0, 0.34, 0.34);\n$spotcolor = ps_makespotcolor($ps, \"PANTONE 5565 C\", 0);\nps_setcolor($ps, \"fill\", \"spot\", $spotcolor, 0.5, 0.0, 0.0);\nps_moveto($ps, 100, 100);\nps_lineto($ps, 100, 200);\nps_lineto($ps, 200, 200);\nps_lineto($ps, 200, 100);\nps_lineto($ps, 100, 100);\nps_fill($ps);\nps_end_page($ps);\n\nps_delete($ps);","output":null}],"ps_rotate":[{"title":"Rotation of the coordinate system","source":"function rectangle($ps) {\n    ps_moveto($ps, 0, 0);\n    ps_lineto($ps, 0, 50);\n    ps_lineto($ps, 50, 50);\n    ps_lineto($ps, 50, 0);\n    ps_lineto($ps, 0, 0);\n    ps_stroke($ps);\n}\n\n$ps = ps_new();\nif (!ps_open_file($ps, \"rotation.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_info($ps, \"Creator\", \"rotation.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Rotation example\");\nps_set_info($ps, \"BoundingBox\", \"0 0 596 842\");\n\n$psfont = ps_findfont($ps, \"Helvetica\", \"\", 0);\n\nps_begin_page($ps, 596, 842);\nps_set_text_pos($ps, 100, 100);\nps_save($ps);\nps_translate($ps, 100, 100);\nps_rotate($ps, 45);\nrectangle($ps);\nps_restore($ps);\nps_setfont($ps, $psfont, 8.0);\nps_show($ps, \"Text without rotation\");\nps_end_page($ps);\n\nps_delete($ps);","output":null}],"ps_set_text_pos":[{"title":"Placing text at a given position","source":"$ps = ps_new();\nif (!ps_open_file($ps, \"text.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_info($ps, \"Creator\", \"rectangle.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Text placement example\");\n\nps_begin_page($ps, 596, 842);\n$psfont = ps_findfont($ps, \"Helvetica\", \"\", 0);\nps_setfont($ps, $psfont, 8.0);\nps_show_xy($ps, \"Some text at (100, 100)\", 100, 100);\n\nps_set_value($ps, \"textx\", 100);\nps_set_value($ps, \"texty\", 120);\nps_show($ps, \"Some text at (100, 120)\");\nps_end_page($ps);\n\nps_delete($ps);","output":null}],"ps_setpolydash":[{"title":"Drawing a dashed line","source":"$ps = ps_new();\nif (!ps_open_file($ps, \"polydash.ps\")) {\n   print \"Cannot open PostScript file\\n\";\n     exit;\n}\n\nps_set_info($ps, \"Creator\", \"polydash.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Poly dash example\");\n\nps_begin_page($ps, 596, 842);\nps_setpolydash($ps, array(10, 5, 2, 5));\nps_moveto($ps, 100, 100);\nps_lineto($ps, 200, 200);\nps_stroke($ps);\nps_end_page($ps);\n\nps_delete($ps);","output":null}],"ps_translate":[{"title":"Translation of the coordinate system","source":"function rectangle($ps) {\n    ps_moveto($ps, 0, 0);\n    ps_lineto($ps, 0, 50);\n    ps_lineto($ps, 50, 50);\n    ps_lineto($ps, 50, 0);\n    ps_lineto($ps, 0, 0);\n    ps_stroke($ps);\n}\n\n$ps = ps_new();\nif (!ps_open_file($ps, \"translate.ps\")) {\n  print \"Cannot open PostScript file\\n\";\n  exit;\n}\n\nps_set_info($ps, \"Creator\", \"translate.php\");\nps_set_info($ps, \"Author\", \"Uwe Steinmann\");\nps_set_info($ps, \"Title\", \"Translated example\");\nps_set_info($ps, \"BoundingBox\", \"0 0 596 842\");\n\n$psfont = ps_findfont($ps, \"Helvetica\", \"\", 0);\n\nps_begin_page($ps, 596, 842);\nps_set_text_pos($ps, 100, 100);\nps_translate($ps, 500, 750);\nrectangle($ps);\nps_translate($ps, -500, -750);\nps_setfont($ps, $psfont, 8.0);\nps_show($ps, \"Text at initial position\");\nps_end_page($ps);\n\nps_begin_page($ps, 596, 842);\nps_set_text_pos($ps, 100, 100);\nps_save($ps);\nps_translate($ps, 500, 750);\nrectangle($ps);\nps_restore($ps);\nps_setfont($ps, $psfont, 8.0);\nps_show($ps, \"Text at initial position\");\nps_end_page($ps);\n\nps_delete($ps);","output":null}],"pspell_add_to_personal":[{"title":"pspell_add_to_personal()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\n$pspell_link = pspell_new_config($pspell_config);\n\npspell_add_to_personal($pspell_link, \"Vlad\");\npspell_save_wordlist($pspell_link);","output":null}],"pspell_check":[{"title":"pspell_check() Example","source":"$pspell_link = pspell_new(\"en\");\n\nif (pspell_check($pspell_link, \"testt\")) {\n    echo \"This is a valid spelling\";\n} else {\n    echo \"Sorry, wrong spelling\";\n}","output":null}],"pspell_clear_session":[{"title":"pspell_add_to_personal() Example","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\n$pspell_link = pspell_new_config($pspell_config);\n\npspell_add_to_personal($pspell_link, \"Vlad\");\npspell_clear_session($pspell_link);\npspell_save_wordlist($pspell_link);    \/\/\"Vlad\" will not be saved","output":null}],"pspell_config_create":[{"title":"pspell_config_create()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\npspell_config_repl($pspell_config, \"\/var\/dictionaries\/custom.repl\");\n$pspell_link = pspell_new_personal($pspell_config, \"en\");","output":null}],"pspell_config_ignore":[{"title":"pspell_config_ignore()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_ignore($pspell_config, 5);\n$pspell_link = pspell_new_config($pspell_config);\npspell_check($pspell_link, \"abcd\");    \/\/will not result in an error","output":null}],"pspell_config_mode":[{"title":"pspell_config_mode() Example","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_mode($pspell_config, PSPELL_FAST);\n$pspell_link = pspell_new_config($pspell_config);\npspell_check($pspell_link, \"thecat\");","output":null}],"pspell_config_personal":[{"title":"pspell_config_personal()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\n$pspell_link = pspell_new_config($pspell_config);\npspell_check($pspell_link, \"thecat\");","output":null}],"pspell_config_repl":[{"title":"pspell_config_repl()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\npspell_config_repl($pspell_config, \"\/var\/dictionaries\/custom.repl\");\n$pspell_link = pspell_new_config($pspell_config);\npspell_check($pspell_link, \"thecat\");","output":null}],"pspell_config_runtogether":[{"title":"pspell_config_runtogether()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_runtogether($pspell_config, true);\n$pspell_link = pspell_new_config($pspell_config);\npspell_check($pspell_link, \"thecat\");","output":null}],"pspell_new_config":[{"title":"pspell_new_config()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\npspell_config_repl($pspell_config, \"\/var\/dictionaries\/custom.repl\");\n$pspell_link = pspell_new_config($pspell_config);","output":null}],"pspell_new_personal":[{"title":"pspell_new_personal()","source":"$pspell_link = pspell_new_personal (\"\/var\/dictionaries\/custom.pws\",\n        \"en\", \"\", \"\", \"\", PSPELL_FAST|PSPELL_RUN_TOGETHER);","output":null}],"pspell_new":[{"title":"pspell_new()","source":"$pspell_link = pspell_new(\"en\", \"\", \"\", \"\",\n                           (PSPELL_FAST|PSPELL_RUN_TOGETHER));","output":null}],"pspell_save_wordlist":[{"title":"pspell_add_to_personal()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/tmp\/dicts\/newdict\");\n$pspell_link = pspell_new_config($pspell_config);\n\npspell_add_to_personal($pspell_link, \"Vlad\");\npspell_save_wordlist($pspell_link);","output":null}],"pspell_store_replacement":[{"title":"pspell_store_replacement()","source":"$pspell_config = pspell_config_create(\"en\");\npspell_config_personal($pspell_config, \"\/var\/dictionaries\/custom.pws\");\npspell_config_repl($pspell_config, \"\/var\/dictionaries\/custom.repl\");\n$pspell_link = pspell_new_config($pspell_config);\n\npspell_store_replacement($pspell_link, $misspelled, $correct);\npspell_save_wordlist($pspell_link);","output":null}],"pspell_suggest":[{"title":"pspell_suggest() example","source":"$pspell_link = pspell_new(\"en\");\n\nif (!pspell_check($pspell_link, \"testt\")) {\n    $suggestions = pspell_suggest($pspell_link, \"testt\");\n\n    foreach ($suggestions as $suggestion) {\n        echo \"Possible spelling: $suggestion<br \/>\";\n    }\n}","output":null}],"putenv":[{"title":"Setting an environment variable","source":"putenv(\"UNIQID=$uniqid\");","output":null}],"px_create_fp":[{"title":"Creating a Paradox database with two fields","source":"if(!$pxdoc = px_new()) {\n  \/* Error handling *\/\n}\n$fp = fopen(\"test.db\", \"w+\");\n$fields = array(array(\"col1\", \"S\"), array(\"col2\", \"I\"));\nif(!px_create_fp($pxdoc, $fp, $fields)) {\n  \/* Error handling *\/\n}\npx_set_parameter($pxdoc, \"tablename\", \"testtable\");\nfor($i=-50; $i<50; $i++) {\n  $rec = array($i, -$i);\n  px_put_record($pxdoc, $rec);\n}   \npx_close($pxdoc);\npx_delete($pxdoc);\nfclose($fp);","output":null}],"px_date2string":[{"title":"Turn a paradox date into a human readable form","source":"$px = px_new();\n\n\/* make up a date as it could be stored in *\/\n\/* a date field of a paradox db. *\/\n\/* 700000 days since 1.1.0000. *\/\n$days = 700000;\n\n\/* Use the calendar functions to print a *\/\n\/* human readable format of the date *\/\necho jdtogregorian($days+1721425).\"\\n\";\n\/* px_date2string() outputs the same *\/\necho px_date2string($px, $days, \"n\/d\/Y\").\"\\n\";\n\npx_delete($px);","output":"7\/15\/1917\n7\/15\/1917"}],"px_insert_record":[{"title":"Set the date\/time fields in a paradox database to the current date\/time","source":"$px = px_new();\n$fp = fopen(\"test.db\", \"w+\");\npx_create_fp($px, $fp, array(array(\"timestamp\", \"@\"), array(\"time\", \"T\"), array(\"date\", \"D\")));\n\n$curdate = getdate();\n$jd = gregoriantojd($curdate[\"mon\"], $curdate[\"mday\"], $curdate[\"year\"]);\n$days = $jd - 1721425; \/* Number of days between 1.1.4714 b.c. and 1.1.0000 *\/\n$secs = $curdate[\"hours\"]*3600 + $curdate[\"minutes\"]*60 + $curdate[\"seconds\"];\npx_insert_record($px, array($days*86400000.0 + $secs*1000.0, $secs*1000.0, $days));\n\n$curtimestamp = microtime(true);\n$days = (int) ($curtimestamp\/86400);\n$secs = $curtimestamp - ($days * 86400.0);\n$days += 2440588; \/* Number of days between 1.1.4714 b.c. and 1.1.1970 *\/\n$days -= 1721425; \/* Number of days between 1.1.4714 b.c. and 1.1.0000 *\/\npx_insert_record($px, array($days*86400000.0 + $secs*1000.0, $secs*1000.0, $days));\nfor($i=0; $i<2; $i++) {\n    $rec = px_retrieve_record($px, $i);\n    echo px_timestamp2string($px, $rec[\"timestamp\"], \"n\/d\/Y H:i:s\").\"\\n\";\n    echo px_date2string($px, $rec[\"date\"], \"n\/d\/Y\").\"\\n\";\n}\npx_close($px);\npx_delete($px);","output":"2\/21\/2006 21:42:30\n2\/21\/2006\n2\/21\/2006 20:42:30\n2\/21\/2006"}],"px_new":[{"title":"Opening a Paradox database","source":"if(!$pxdoc = px_new()) {\n  \/* Error handling *\/\n}\n$fp = fopen(\"test.db\", \"r\");\nif(!px_open_fp($pxdoc, $fp)) {\n  \/* Error handling *\/\n}\n\/\/ ...\npx_close($pxdoc);\npx_delete($pxdoc);\nfclose($fp);","output":null},{"title":"Opening a Paradox database","source":"$fp = fopen(\"test.db\", \"r\");\n$pxdoc = new paradox_db();\nif(!$pxdoc->open_fp($fp)) {\n  \/* Error handling *\/\n}\n\/\/ ...\n$pxdoc->close();\nfclose($fp);","output":null}],"px_timestamp2string":[{"title":"Turn a paradox timestamp into a human readable form","source":"$px = px_new();\n\n\/* make up a date as it could be stored in *\/\n\/* a date field of a paradox db. *\/\n\/* 700000 days since 1.1.0000. *\/\n$days = 700000;\n\n\/* Use the calendar functions to print a *\/\n\/* human readable format of the date *\/\necho jdtogregorian($days+1721425).\"\\n\";\n\n\/* Turn it into a timestamp as it stored in a paradox database *\/\n\/* Timestamps are stored in miliseconds since 0001-01-02 *\/\n$stamp = $days * 86400.0 * 1000.0;\n\/* Add one hour *\/\n$stamp += 3600000.0;\n\/* The following will output '7\/15\/1917 01:00:00'. *\/\necho px_timestamp2string($px, $stamp, \"n\/d\/Y H:i:s\").\"\\n\";\n\npx_delete($px);","output":"7\/15\/1917\n7\/15\/1917 01:00:00"}],"rad2deg":[{"title":"rad2deg() example","source":"echo rad2deg(M_PI_4); \/\/ 45","output":null}],"radius_acct_open":[{"title":"radius_acct_open() example","source":"$res = radius_acct_open ()\n    or die (\"Could not create handle\");\nprint(\"Handle successfully created\");","output":null}],"radius_add_server":[{"title":"radius_add_server() example","source":"if (!radius_add_server($res, 'radius.example.com', 1812, 'testing123', 3, 3)) {\n    echo 'RadiusError:' . radius_strerror($res). \"\\n<br>\";\n    exit;\n}","output":null}],"radius_auth_open":[{"title":"radius_auth_open() example","source":"$radh = radius_auth_open()\n    or die (\"Could not create handle\");\necho \"Handle successfully created\";","output":null}],"radius_create_request":[{"title":"radius_create_request() example","source":"if (!radius_create_request($res, RADIUS_ACCESS_REQUEST)) {\n    echo 'RadiusError:' . radius_strerror($res). \"\\n<br \/>\";\n    exit;\n}","output":null}],"radius_cvt_addr":[{"title":"radius_cvt_addr() example","source":"while ($resa = radius_get_attr($res)) {\n\n    if (!is_array($resa)) {\n        printf (\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n    \n    switch ($attr) {\n\n    case RADIUS_FRAMED_IP_ADDRESS:\n        $ip = radius_cvt_addr($data);\n        echo \"IP: $ip<br>\\n\";\n        break;\n\n    case RADIUS_FRAMED_IP_NETMASK:\n        $mask = radius_cvt_addr($data);\n        echo \"MASK: $mask<br>\\n\";\n        break;\n    }\n}","output":null}],"radius_cvt_int":[{"title":"radius_cvt_int() example","source":"while ($resa = radius_get_attr($res)) {\n\n    if (!is_array($resa)) {\n        printf (\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n    \n    switch ($attr) {\n\n    case RADIUS_FRAMED_MTU:\n        $mtu = radius_cvt_int($data);\n        echo \"MTU: $mtu<br>\\n\";\n        break;\n    }\n}","output":null}],"radius_cvt_string":[{"title":"radius_cvt_string() example","source":"while ($resa = radius_get_attr($res)) {\n\n    if (!is_array($resa)) {\n        printf (\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n    \n    switch ($attr) {\n\n    case RADIUS_FILTER_ID:\n        $id = radius_cvt_string($data);\n        echo \"Filter ID: $id<br>\\n\";\n        break;\n    }\n}","output":null}],"radius_get_attr":[{"title":"radius_get_attr() example","source":"while ($resa = radius_get_attr($res)) {\n\n    if (!is_array($resa)) {\n        printf(\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n    printf(\"Got Attr:%d %d Bytes %s\\n\", $attr, strlen($data), bin2hex($data));\n}","output":null}],"radius_get_tagged_attr_data":[{"title":"radius_get_tagged_attr_data() example","source":"while ($resa = radius_get_attr($res)) {\n    if (!is_array($resa)) {\n        printf (\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n\n    $tag = radius_get_tagged_attr_tag($data);\n    $value = radius_get_tagged_attr_data($data);\n\n    printf(\"Got tagged attribute with tag %d and value %s\\n\", $tag, $value);\n}","output":null}],"radius_get_tagged_attr_tag":[{"title":"radius_get_tagged_attr_tag() example","source":"while ($resa = radius_get_attr($res)) {\n    if (!is_array($resa)) {\n        printf (\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n\n    $tag = radius_get_tagged_attr_tag($data);\n    $value = radius_get_tagged_attr_data($data);\n\n    printf(\"Got tagged attribute with tag %d and value %s\\n\", $tag, $value);\n}","output":null}],"radius_get_vendor_attr":[{"title":"radius_get_vendor_attr() example","source":"while ($resa = radius_get_attr($res)) {\n\n    if (!is_array($resa)) {\n        printf (\"Error getting attribute: %s\\n\",  radius_strerror($res));\n        exit;\n    }\n\n    $attr = $resa['attr'];\n    $data = $resa['data'];\n    printf(\"Got Attr:%d %d Bytes %s\\n\", $attr, strlen($data), bin2hex($data));\n    if ($attr == RADIUS_VENDOR_SPECIFIC) {\n\n        $resv = radius_get_vendor_attr($data);\n        if (is_array($resv)) {\n            $vendor = $resv['vendor'];\n            $attrv = $resv['attr'];\n            $datav = $resv['data'];    \n            printf(\"Got Vendor Attr:%d %d Bytes %s\\n\", $attrv, strlen($datav), bin2hex($datav));\n        }\n        \n    }\n}","output":null}],"radius_put_attr":[{"title":"radius_put_attr() example","source":"mt_srand(time());\n$chall = mt_rand();\n$chapval = md5(pack('Ca*',1 , 'sepp' . $chall));\n$pass = pack('CH*', 1, $chapval);\nif (!radius_put_attr($res, RADIUS_CHAP_PASSWORD, $pass)) {\n    echo 'RadiusError:' . radius_strerror($res). \"\\n<br \/>\";\n    exit;\n}","output":null}],"radius_put_int":[{"title":"radius_put_int() example","source":"if (!radius_put_int($res, RAD_FRAMED_PROTOCOL, RAD_PPP)) {\n   echo 'RadiusError:' . radius_strerror($res). \"\\n<br \/>\";\n   exit;\n}","output":null}],"radius_put_string":[{"title":"radius_put_string() example","source":"if (!radius_put_string($res, RADIUS_USER_NAME, 'billy')) {\n    echo 'RadiusError:' . radius_strerror($res). \"\\n<br \/>\";\n    exit;\n}","output":null}],"radius_put_vendor_attr":[{"title":"radius_put_vendor_attr() example","source":"if (!radius_put_vendor_attr($res, RADIUS_VENDOR_MICROSOFT, RAD_MICROSOFT_MS_CHAP_CHALLENGE, $challenge)) {\n    echo 'RadiusError:' . radius_strerror($res). \"\\n<br \/>\";\n    exit;\n}","output":null}],"random_bytes":[{"title":"random_bytes() example","source":"$bytes = random_bytes(5);\nvar_dump(bin2hex($bytes));","output":"string(10) \"385e33f741\""}],"random_int":[{"title":"random_int() example","source":"var_dump(random_int(100, 999));\nvar_dump(random_int(-1000, 0));","output":"int(248)\nint(-898)"}],"range":[{"title":"range() examples","source":"\/\/ array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\nforeach (range(0, 12) as $number) {\n    echo $number;\n}\n\n\/\/ The step parameter\n\/\/ array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\nforeach (range(0, 100, 10) as $number) {\n    echo $number;\n}\n\n\/\/ Usage of character sequences\n\/\/ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i');\nforeach (range('a', 'i') as $letter) {\n    echo $letter;\n}\n\/\/ array('c', 'b', 'a');\nforeach (range('c', 'a') as $letter) {\n    echo $letter;\n}","output":null}],"rawurldecode":[{"title":"rawurldecode() example","source":"echo rawurldecode('foo%20bar%40baz'); \/\/ foo bar@baz","output":null}],"rawurlencode":[{"title":"including a password in an FTP URL","source":"echo '<a href=\"ftp:\/\/user:', rawurlencode('foo @+%\/'),\n     '@ftp.example.com\/x.txt\">';","output":"<a href=\"ftp:\/\/user:foo%20%40%2B%25%2F@ftp.example.com\/x.txt\">"},{"title":"rawurlencode() example 2","source":"echo '<a href=\"http:\/\/example.com\/department_list_script\/',\n    rawurlencode('sales and marketing\/Miami'), '\">';","output":"<a href=\"http:\/\/example.com\/department_list_script\/sales%20and%20marketing%2FMiami\">"}],"readdir":[{"title":"List all entries in a directory","source":"if ($handle = opendir('\/path\/to\/files')) {\n    echo \"Directory handle: $handle\\n\";\n    echo \"Entries:\\n\";\n\n    \/* This is the correct way to loop over the directory. *\/\n    while (false !== ($entry = readdir($handle))) {\n        echo \"$entry\\n\";\n    }\n\n    \/* This is the WRONG way to loop over the directory. *\/\n    while ($entry = readdir($handle)) {\n        echo \"$entry\\n\";\n    }\n\n    closedir($handle);\n}","output":null},{"title":"List all entries in the current directory and strip out . and ..","source":"if ($handle = opendir('.')) {\n    while (false !== ($entry = readdir($handle))) {\n        if ($entry != \".\" && $entry != \"..\") {\n            echo \"$entry\\n\";\n        }\n    }\n    closedir($handle);\n}","output":null}],"readfile":[{"title":"Forcing a download using readfile()","source":"$file = 'monkey.gif';\n\nif (file_exists($file)) {\n    header('Content-Description: File Transfer');\n    header('Content-Type: application\/octet-stream');\n    header('Content-Disposition: attachment; filename=\"'.basename($file).'\"');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate');\n    header('Pragma: public');\n    header('Content-Length: ' . filesize($file));\n    readfile($file);\n    exit;\n}","output":null}],"readline_callback_handler_install":[{"title":"Readline Callback Interface Example","source":"function rl_callback($ret)\n{\n    global $c, $prompting;\n\n    echo \"You entered: $ret\\n\";\n    $c++;\n\n    if ($c > 10) {\n        $prompting = false;\n        readline_callback_handler_remove();\n    } else {\n        readline_callback_handler_install(\"[$c] Enter something: \", 'rl_callback');\n    }\n}\n\n$c = 1;\n$prompting = true;\n\nreadline_callback_handler_install(\"[$c] Enter something: \", 'rl_callback');\n\nwhile ($prompting) {\n    $w = NULL;\n    $e = NULL;\n    $n = stream_select($r = array(STDIN), $w, $e, null);\n    if ($n && in_array(STDIN, $r)) {\n        \/\/ read a character, will call the callback when a newline is entered\n        readline_callback_read_char();\n    }\n}\n\necho \"Prompting disabled. All done.\\n\";","output":null}],"readline":[{"title":"readline() Example","source":"\/\/get 3 commands from user\nfor ($i=0; $i < 3; $i++) {\n        $line = readline(\"Command: \");\n        readline_add_history($line);\n}\n\n\/\/dump history\nprint_r(readline_list_history());\n\n\/\/dump variables\nprint_r(readline_info());","output":null}],"readlink":[{"title":"readlink() example","source":"\/\/ output e.g. \/boot\/vmlinux-2.4.20-xfs\necho readlink('\/vmlinuz');","output":null}],"realpath_cache_get":[{"title":"realpath_cache_get() example","source":"var_dump(realpath_cache_get());","output":"array(2) {\n  [\"\/test\"]=>\n  array(4) {\n    [\"key\"]=>\n    int(123456789)\n    [\"is_dir\"]=>\n    bool(true)\n    [\"realpath\"]=>\n    string(5) \"\/test\"\n    [\"expires\"]=>\n    int(1260318939)\n  }\n  [\"\/test\/test.php\"]=>\n  array(4) {\n    [\"key\"]=>\n    int(987654321)\n    [\"is_dir\"]=>\n    bool(false)\n    [\"realpath\"]=>\n    string(12) \"\/root\/test.php\"\n    [\"expires\"]=>\n    int(1260318939)\n  }\n}"}],"realpath_cache_size":[{"title":"realpath_cache_size() example","source":"var_dump(realpath_cache_size());","output":"int(412)"}],"realpath":[{"title":"realpath() example","source":"chdir('\/var\/www\/');\necho realpath('.\/..\/..\/etc\/passwd') . PHP_EOL;\n\necho realpath('\/tmp\/') . PHP_EOL;","output":"\/etc\/passwd\n\/tmp"},{"title":"realpath() on Windows","source":"echo realpath('\/windows\/system32');\n\necho realpath('C:\\Program Files\\\\');","output":"C:\\WINDOWS\\System32\nC:\\Program Files"}],"recode_file":[{"title":"Basic recode_file() example","source":"$input = fopen('input.txt', 'r');\n$output = fopen('output.txt', 'w');\nrecode_file(\"us..flat\", $input, $output);","output":null}],"recode_string":[{"title":"Basic recode_string() example","source":"echo recode_string(\"us..flat\", \"The following character has a diacritical mark: á\");","output":null}],"register_shutdown_function":[{"title":"register_shutdown_function() example","source":"function shutdown()\n{\n    \/\/ This is our shutdown function, in \n    \/\/ here we can do any last operations\n    \/\/ before the script is complete.\n\n    echo 'Script executed with success', PHP_EOL;\n}\n\nregister_shutdown_function('shutdown');","output":null}],"register_tick_function":[{"title":"register_tick_function() example","source":"declare(ticks=1);\n\n\/\/ using a function as the callback\nregister_tick_function('my_function', true);\n\n\/\/ using an object->method\n$object = new my_class();\nregister_tick_function(array(&$object, 'my_method'), true);","output":null}],"rename_function":[{"title":"rename_function() example","source":"rename_function('mysql_connect', 'debug_mysql_connect' );","output":null}],"rename":[{"title":"Example with rename()","source":"rename(\"\/tmp\/tmp_file.txt\", \"\/home\/user\/login\/docs\/my_file.txt\");","output":null}],"reset":[{"title":"reset() example","source":"$array = array('step one', 'step two', 'step three', 'step four');\n\n\/\/ by default, the pointer is on the first element\necho current($array) . \"<br \/>\\n\"; \/\/ \"step one\"\n\n\/\/ skip two steps\nnext($array);\nnext($array);\necho current($array) . \"<br \/>\\n\"; \/\/ \"step three\"\n\n\/\/ reset pointer, start again on step one\nreset($array);\necho current($array) . \"<br \/>\\n\"; \/\/ \"step one\"","output":null}],"restore_error_handler":[{"title":"restore_error_handler() example","source":"function unserialize_handler($errno, $errstr)\n{\n    echo \"Invalid serialized value.\\n\";\n}\n\n$serialized = 'foo';\nset_error_handler('unserialize_handler');\n$original = unserialize($serialized);\nrestore_error_handler();","output":"Invalid serialized value."}],"restore_exception_handler":[{"title":"restore_exception_handler() example","source":"function exception_handler_1(Exception $e)\n    {\n        echo '[' . __FUNCTION__ . '] ' . $e->getMessage();\n    }\n\n    function exception_handler_2(Exception $e)\n    {\n        echo '[' . __FUNCTION__ . '] ' . $e->getMessage();\n    }\n\n    set_exception_handler('exception_handler_1');\n    set_exception_handler('exception_handler_2');\n\n    restore_exception_handler();\n\n    throw new Exception('This triggers the first exception handler...');","output":"[exception_handler_1] This triggers the first exception handler..."}],"restore_include_path":[{"title":"restore_include_path() example","source":"echo get_include_path();  \/\/ .:\/usr\/local\/lib\/php\n\nset_include_path('\/inc');\n\necho get_include_path();  \/\/ \/inc\n\nrestore_include_path();\n\n\/\/ Or using ini_restore()\nini_restore('include_path');\n\necho get_include_path();  \/\/ .:\/usr\/local\/lib\/php","output":null}],"rewind":[{"title":"rewind() overwriting example","source":"$handle = fopen('output.txt', 'r+');\n\nfwrite($handle, 'Really long sentence.');\nrewind($handle);\nfwrite($handle, 'Foo');\nrewind($handle);\n\necho fread($handle, filesize('output.txt'));\n\nfclose($handle);","output":"Foolly long sentence."}],"rmdir":[{"title":"rmdir() example","source":"if (!is_dir('examples')) {\n    mkdir('examples');\n}\n\nrmdir('examples');","output":null}],"round":[{"title":"round() examples","source":"echo round(3.4);         \/\/ 3\necho round(3.5);         \/\/ 4\necho round(3.6);         \/\/ 4\necho round(3.6, 0);      \/\/ 4\necho round(1.95583, 2);  \/\/ 1.96\necho round(1241757, -3); \/\/ 1242000\necho round(5.045, 2);    \/\/ 5.05\necho round(5.055, 2);    \/\/ 5.06","output":null},{"title":"mode examples","source":"echo round(9.5, 0, PHP_ROUND_HALF_UP);   \/\/ 10\necho round(9.5, 0, PHP_ROUND_HALF_DOWN); \/\/ 9\necho round(9.5, 0, PHP_ROUND_HALF_EVEN); \/\/ 10\necho round(9.5, 0, PHP_ROUND_HALF_ODD);  \/\/ 9\n\necho round(8.5, 0, PHP_ROUND_HALF_UP);   \/\/ 9\necho round(8.5, 0, PHP_ROUND_HALF_DOWN); \/\/ 8\necho round(8.5, 0, PHP_ROUND_HALF_EVEN); \/\/ 8\necho round(8.5, 0, PHP_ROUND_HALF_ODD);  \/\/ 9","output":null},{"title":"mode with precision examples","source":"\/* Using PHP_ROUND_HALF_UP with 1 decimal digit precision *\/\necho round( 1.55, 1, PHP_ROUND_HALF_UP);   \/\/  1.6\necho round( 1.54, 1, PHP_ROUND_HALF_UP);   \/\/  1.5\necho round(-1.55, 1, PHP_ROUND_HALF_UP);   \/\/ -1.6\necho round(-1.54, 1, PHP_ROUND_HALF_UP);   \/\/ -1.5\n\n\/* Using PHP_ROUND_HALF_DOWN with 1 decimal digit precision *\/\necho round( 1.55, 1, PHP_ROUND_HALF_DOWN); \/\/  1.5\necho round( 1.54, 1, PHP_ROUND_HALF_DOWN); \/\/  1.5\necho round(-1.55, 1, PHP_ROUND_HALF_DOWN); \/\/ -1.5\necho round(-1.54, 1, PHP_ROUND_HALF_DOWN); \/\/ -1.5\n\n\/* Using PHP_ROUND_HALF_EVEN with 1 decimal digit precision *\/\necho round( 1.55, 1, PHP_ROUND_HALF_EVEN); \/\/  1.6\necho round( 1.54, 1, PHP_ROUND_HALF_EVEN); \/\/  1.5\necho round(-1.55, 1, PHP_ROUND_HALF_EVEN); \/\/ -1.6\necho round(-1.54, 1, PHP_ROUND_HALF_EVEN); \/\/ -1.5\n\n\/* Using PHP_ROUND_HALF_ODD with 1 decimal digit precision *\/\necho round( 1.55, 1, PHP_ROUND_HALF_ODD);  \/\/  1.5\necho round( 1.54, 1, PHP_ROUND_HALF_ODD);  \/\/  1.5\necho round(-1.55, 1, PHP_ROUND_HALF_ODD);  \/\/ -1.5\necho round(-1.54, 1, PHP_ROUND_HALF_ODD);  \/\/ -1.5","output":null}],"rpm_close":[{"title":"rpm_close() example","source":"$file = \"\/path\/to\/file.rpm\";\n$rpmr = rpm_open($file);\n\nrpm_close($rpmr);","output":null}],"rpm_get_tag":[{"title":"rpm_get_tag() example","source":"$file = \"\/path\/to\/file.rpm\";\n$rpmr = rpm_open($file);\n\n$name = rpm_get_tag($rpmr, RPMREADER_NAME);\necho \"$name<br>\\n\";\n\nrpm_close($rpmr);","output":null}],"rpm_is_valid":[{"title":"rpm_is_valid() example","source":"$file = \"\/path\/to\/file.rpm\";\n\nif (rpm_is_valid($file)) {\n    echo \"File is recognized as an RPM file.<br>\\n\";\n}\nelse {\n    echo \"File is not recognized as an RPM file.<br>\\n\";\n}","output":null}],"rpm_open":[{"title":"rpm_open() example","source":"$file = \"\/path\/to\/file.rpm\";\n$rpmr = rpm_open($file);\n\nrpm_close($rpmr);","output":null}],"rpm_version":[{"title":"rpm_version() example","source":"$rpmr_ver = rpm_version();\n\necho \"$rpmr_ver<br \/>\\n\";","output":null}],"rsort":[{"title":"rsort() example","source":"$fruits = array(\"lemon\", \"orange\", \"banana\", \"apple\");\nrsort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"$key = $val\\n\";\n}","output":"0 = orange\n1 = lemon\n2 = banana\n3 = apple"}],"rtrim":[{"title":"Usage example of rtrim()","source":"$text = \"\\t\\tThese are a few words :) ...  \";\n$binary = \"\\x09Example string\\x0A\";\n$hello  = \"Hello World\";\nvar_dump($text, $binary, $hello);\n\nprint \"\\n\";\n\n$trimmed = rtrim($text);\nvar_dump($trimmed);\n\n$trimmed = rtrim($text, \" \\t.\");\nvar_dump($trimmed);\n\n$trimmed = rtrim($hello, \"Hdle\");\nvar_dump($trimmed);\n\n\/\/ trim the ASCII control characters at the end of $binary\n\/\/ (from 0 to 31 inclusive)\n$clean = rtrim($binary, \"\\x00..\\x1F\");\nvar_dump($clean);","output":"string(32) \"        These are a few words :) ...  \"\nstring(16) \"    Example string\n\"\nstring(11) \"Hello World\"\n\nstring(30) \"        These are a few words :) ...\"\nstring(26) \"        These are a few words :)\"\nstring(9) \"Hello Wor\"\nstring(15) \"    Example string\""}],"runkit_class_adopt":[{"title":"A runkit_class_adopt() example","source":"class myParent {\n  function parentFunc() {\n    echo \"Parent Function Output\\n\";\n  }\n}\n\nclass myChild {\n}\n\nrunkit_class_adopt('myChild','myParent');\nmyChild::parentFunc();","output":"Parent Function Output"}],"runkit_class_emancipate":[{"title":"A runkit_class_emancipate() example","source":"class myParent {\n  function parentFunc () {\n    echo \"Parent Function Output\\n\";\n  }\n}\nclass myChild extends myParent {\n}\n\nmyChild::parentFunc();\nrunkit_class_emancipate('myChild');\nmyChild::parentFunc();","output":"Parent Function Output\nFatal error: Call to undefined function:  parentFunc() in example.php on line 12"}],"runkit_function_copy":[{"title":"A runkit_function_copy() example","source":"function original() {\n  echo \"In a function\\n\";\n}\nrunkit_function_copy('original','duplicate');\noriginal();\nduplicate();","output":"In a function\nIn a function"}],"runkit_import":[{"title":"runkit_import() example","source":"\/\/ import classes entirely\nrunkit_import('myfile.inc', RUNKIT_IMPORT_CLASSES);\n\n\/* import classes, but not imports their static properties\n   (RUNKIT_IMPORT_CLASS_STATIC_PROPS is available since 1.0.1) *\/\nrunkit_import('myfile.inc', RUNKIT_IMPORT_CLASSES & ~RUNKIT_IMPORT_CLASS_STATIC_PROPS);\n\n\/* import only static properties of classes\n   (RUNKIT_IMPORT_CLASS_STATIC_PROPS is available since 1.0.1) *\/\nrunkit_import('myfile.inc', RUNKIT_IMPORT_CLASS_STATIC_PROPS);","output":null}],"runkit_method_copy":[{"title":"runkit_method_copy() example","source":"class Foo {\n    function example() {\n        return \"foo!\\n\";\n    }\n}\n\nclass Bar {\n    \/\/ initially, no methods\n}\n\n\/\/ copy the example() method from the Foo class to the Bar class, as baz()\nrunkit_method_copy('Bar', 'baz', 'Foo', 'example');\n\n\/\/ output copied function\necho Bar::baz();","output":"foo!"}],"runkit_method_remove":[{"title":"runkit_method_remove() example","source":"class Example {\n    function foo() {\n        return \"foo!\\n\";\n    }\n\n    function bar() {\n        return \"bar!\\n\";\n    }\n}\n\n\/\/ Remove the 'foo' method\nrunkit_method_remove(\n    'Example',\n    'foo'\n);\n\necho implode(' ', get_class_methods('Example'));","output":"bar"}],"runkit_method_rename":[{"title":"runkit_method_rename() example","source":"class Example {\n    function foo() {\n        return \"foo!\\n\";\n    }\n}\n\n\/\/ Rename the 'foo' method to 'bar'\nrunkit_method_rename(\n    'Example',\n    'foo',\n    'bar'\n);\n\n\/\/ output renamed function\necho Example::bar();","output":"foo!"}],"runkit_return_value_used":[{"title":"runkit_return_value_used() example","source":"function foo() {\n  var_dump(runkit_return_value_used());\n}\n\nfoo();\n$f = foo();","output":"bool(false)\nbool(true)"}],"runkit_sandbox_output_handler":[{"title":"Feeding output to a variable","source":"function capture_output($str) {\n  $GLOBALS['sandbox_output'] .= $str;\n\n  return '';\n}\n\n$sandbox_output = '';\n\n$php = new Runkit_Sandbox();\nrunkit_sandbox_output_handler($php, 'capture_output');\n$php->echo(\"Hello\\n\");\n$php->eval('var_dump(\"Excuse me\");');\n$php->die(\"I lost myself.\");\nunset($php);\n\necho \"Sandbox Complete\\n\\n\";\necho $sandbox_output;","output":"Sandbox Complete\n\nHello\nstring(9) \"Excuse me\"\nI lost myself."}],"scandir":[{"title":"A simple scandir() example","source":"$dir    = '\/tmp';\n$files1 = scandir($dir);\n$files2 = scandir($dir, 1);\n\nprint_r($files1);\nprint_r($files2);","output":"Array\n(\n    [0] => .\n    [1] => ..\n    [2] => bar.php\n    [3] => foo.txt\n    [4] => somedir\n)\nArray\n(\n    [0] => somedir\n    [1] => foo.txt\n    [2] => bar.php\n    [3] => ..\n    [4] => .\n)"}],"serialize":[{"title":"serialize() example","source":"\/\/ $session_data contains a multi-dimensional array with session\n\/\/ information for the current user.  We use serialize() to store\n\/\/ it in a database at the end of the request.\n\n$conn = odbc_connect(\"webdb\", \"php\", \"chicken\");\n$stmt = odbc_prepare($conn,\n      \"UPDATE sessions SET data = ? WHERE id = ?\");\n$sqldata = array (serialize($session_data), $_SERVER['PHP_AUTH_USER']);\nif (!odbc_execute($stmt, $sqldata)) {\n    $stmt = odbc_prepare($conn,\n     \"INSERT INTO sessions (id, data) VALUES(?, ?)\");\n    if (!odbc_execute($stmt, $sqldata)) {\n        \/* Something went wrong.. *\/\n    }\n}","output":null}],"session_cache_expire":[{"title":"session_cache_expire() example","source":"\/* set the cache limiter to 'private' *\/\n\nsession_cache_limiter('private');\n$cache_limiter = session_cache_limiter();\n\n\/* set the cache expire to 30 minutes *\/\nsession_cache_expire(30);\n$cache_expire = session_cache_expire();\n\n\/* start the session *\/\n\nsession_start();\n\necho \"The cache limiter is now set to $cache_limiter<br \/>\";\necho \"The cached session pages expire after $cache_expire minutes\";","output":null}],"session_cache_limiter":[{"title":"session_cache_limiter() example","source":"\/* set the cache limiter to 'private' *\/\n\nsession_cache_limiter('private');\n$cache_limiter = session_cache_limiter();\n\necho \"The cache limiter is now set to $cache_limiter<br \/>\";","output":null}],"session_create_id":[{"title":"session_create_id() example with session_regenerate_id()","source":"\/\/ My session start function support timestamp management\nfunction my_session_start() {\n    session_start();\n    \/\/ Do not allow to use too old session ID\n    if (!empty($_SESSION['deleted_time']) && $_SESSION['deleted_time'] < time() - 180) {\n        session_destroy();\n        session_start();\n    }\n}\n\n\/\/ My session regenerate id function\nfunction my_session_regenerate_id() {\n    \/\/ Call session_create_id() while session is active to \n    \/\/ make sure collision free.\n    if (session_status() != PHP_SESSION_ACTIVE) {\n        session_start();\n    }\n    \/\/ WARNING: Never use confidential strings for prefix!\n    $newid = session_create_id('myprefix-');\n    \/\/ Set deleted timestamp. Session data must not be deleted immediately for reasons.\n    $_SESSION['deleted_time'] = time();\n    \/\/ Finish session\n    session_commit();\n    \/\/ Make sure to accept user defined session ID\n    \/\/ NOTE: You must enable use_strict_mode for normal operations.\n    ini_set('session.use_strict_mode', 0);\n    \/\/ Set new custome session ID\n    session_id($newid);\n    \/\/ Start with custome session ID\n    session_start();\n}\n\n\/\/ Make sure use_strict_mode is enabled.\n\/\/ use_strict_mode is mandatory for security reasons.\nini_set('session.use_strict_mode', 1);\nmy_session_start();\n\n\/\/ Session ID must be regenerated when\n\/\/  - User logged in\n\/\/  - User logged out\n\/\/  - Certain period has passed\nmy_session_regenerate_id();\n\n\/\/ Write useful codes","output":null}],"session_destroy":[{"title":"Destroying a session with $_SESSION","source":"\/\/ Initialize the session.\n\/\/ If you are using session_name(\"something\"), don't forget it now!\nsession_start();\n\n\/\/ Unset all of the session variables.\n$_SESSION = array();\n\n\/\/ If it's desired to kill the session, also delete the session cookie.\n\/\/ Note: This will destroy the session, and not just the session data!\nif (ini_get(\"session.use_cookies\")) {\n    $params = session_get_cookie_params();\n    setcookie(session_name(), '', time() - 42000,\n        $params[\"path\"], $params[\"domain\"],\n        $params[\"secure\"], $params[\"httponly\"]\n    );\n}\n\n\/\/ Finally, destroy the session.\nsession_destroy();","output":null}],"session_gc":[{"title":"session_gc() example for task managers like cron","source":"\/\/ Note: This script should be executed by the same user of web server process.\n\n\/\/ Need active session to initialize session data storage access.\nsession_start();\n\n\/\/ Executes GC immediately\nsession_gc();\n\n\/\/ Clean up session ID created by session_gc()\nsession_destroy();","output":null},{"title":"session_gc() example for user accessible script","source":"\/\/ Note: session_gc() is recommended to be used by task manager script, but\n\/\/ it may be used as follows.\n\n\/\/ Used for last GC time check\n$gc_time = '\/tmp\/php_session_last_gc';\n$gc_period = 1800;\n\nsession_start();\n\/\/ Execute GC only when GC period elapsed. \n\/\/ i.e. Calling session_gc() every request is waste of resources. \nif (file_exists($gc_time)) {\n    if (filemtime($gc_time) < time() - $gc_period) {\n        session_gc();\n        touch($gc_time);\n    }\n} else {\n    touch($gc_time);\n}","output":null}],"session_name":[{"title":"session_name() example","source":"\/* set the session name to WebsiteID *\/\n\n$previous_name = session_name(\"WebsiteID\");\n\necho \"The previous session name was $previous_name<br \/>\";","output":null}],"session_regenerate_id":[{"title":"A session_regenerate_id() example","source":"\/\/ NOTE: This code is not fully working code, but an example!\n\nsession_start();\n\n\/\/ Check destroyed time-stamp\nif (isset($_SESSION['destroyed'])\n    && $_SESSION['destroyed'] < time() - 300) {\n    \/\/ Should not happen usually. This could be attack or due to unstable network.\n    \/\/ Remove all authentication status of this users session.\n    remove_all_authentication_flag_from_active_sessions($_SESSION['userid']);\n    throw(new DestroyedSessionAccessException);\n}\n\n$old_sessionid = session_id();\n\n\/\/ Set destroyed timestamp\n$_SESSION['destroyed'] = time(); \/\/ Since PHP 7.0.0 and up, session_regenerate_id() saves old session data\n\n\/\/ Simply calling session_regenerate_id() may result in lost session, etc.\n\/\/ See next example.\nsession_regenerate_id();\n\n\/\/ New session does not need destroyed timestamp\nunset($_SESSION['destroyed']);\n\n$new_sessionid = session_id();\n\necho \"Old Session: $old_sessionid<br \/>\";\necho \"New Session: $new_sessionid<br \/>\";\n\nprint_r($_SESSION);","output":null},{"title":"Avoiding lost session by session_regenerate_id()","source":"\/\/ NOTE: This code is not fully working code, but an example!\n\/\/ my_session_start() and my_session_regenerate_id() avoid lost sessions by\n\/\/ unstable network. In addition, this code may prevent exploiting stolen\n\/\/ session by attackers.\n\nfunction my_session_start() {\n    session_start();\n    if (isset($_SESSION['destroyed'])) {\n       if ($_SESSION['destroyed'] < time()-300) {\n           \/\/ Should not happen usually. This could be attack or due to unstable network.\n           \/\/ Remove all authentication status of this users session.\n           remove_all_authentication_flag_from_active_sessions($_SESSION['userid']);\n           throw(new DestroyedSessionAccessException);\n       }\n       if (isset($_SESSION['new_session_id'])) {\n           \/\/ Not fully expired yet. Could be lost cookie by unstable network.\n           \/\/ Try again to set proper session ID cookie.\n           \/\/ NOTE: Do not try to set session ID again if you would like to remove\n           \/\/ authentication flag.\n           session_commit();\n           session_id($_SESSION['new_session_id']);\n           \/\/ New session ID should exist\n           session_start();\n           return;\n       }\n   }\n}\n\nfunction my_session_regenerate_id() {\n    \/\/ New session ID is required to set proper session ID\n    \/\/ when session ID is not set due to unstable network.\n    $new_session_id = session_create_id();\n    $_SESSION['new_session_id'] = $new_session_id;\n    \n    \/\/ Set destroy timestamp\n    $_SESSION['destroyed'] = time();\n    \n    \/\/ Write and close current session;\n    session_commit();\n\n    \/\/ Start session with new session ID\n    session_id($new_session_id);\n    ini_set('session.use_strict_mode', 0);\n    session_start();\n    ini_set('session.use_strict_mode', 1);\n    \n    \/\/ New session does not need them\n    unset($_SESSION['destroyed']);\n    unset($_SESSION['new_session_id']);\n}","output":null}],"session_register":[{"title":null,"source":"\/\/ Use of session_register() is deprecated\n$barney = \"A big purple dinosaur.\";\nsession_register(\"barney\");\n\n\/\/ Use of $_SESSION is preferred\n$_SESSION[\"zim\"] = \"An invader from another planet.\";","output":null}],"session_start":[{"title":"page1.php","source":"\/\/ page1.php\n\nsession_start();\n\necho 'Welcome to page #1';\n\n$_SESSION['favcolor'] = 'green';\n$_SESSION['animal']   = 'cat';\n$_SESSION['time']     = time();\n\n\/\/ Works if session cookie was accepted\necho '<br \/><a href=\"page2.php\">page 2<\/a>';\n\n\/\/ Or maybe pass along the session id, if needed\necho '<br \/><a href=\"page2.php?' . SID . '\">page 2<\/a>';","output":null},{"title":"page2.php","source":"\/\/ page2.php\n\nsession_start();\n\necho 'Welcome to page #2<br \/>';\n\necho $_SESSION['favcolor']; \/\/ green\necho $_SESSION['animal'];   \/\/ cat\necho date('Y m d H:i:s', $_SESSION['time']);\n\n\/\/ You may want to use SID here, like we did in page1.php\necho '<br \/><a href=\"page1.php\">page 1<\/a>';","output":null},{"title":"Overriding the cookie lifetime","source":"\/\/ This sends a persistent cookie that lasts a day.\nsession_start([\n    'cookie_lifetime' => 86400,\n]);","output":null},{"title":"Reading the session and closing it","source":"\/\/ If we know we don't need to change anything in the\n\/\/ session, we can just read and close rightaway to avoid\n\/\/ locking the session file and blocking other pages\nsession_start([\n    'cookie_lifetime' => 86400,\n    'read_and_close'  => true,\n]);","output":null}],"set_error_handler":[{"title":"Error handling with set_error_handler() and trigger_error()","source":"\/\/ error handler function\nfunction myErrorHandler($errno, $errstr, $errfile, $errline)\n{\n    if (!(error_reporting() & $errno)) {\n        \/\/ This error code is not included in error_reporting, so let it fall\n        \/\/ through to the standard PHP error handler\n        return false;\n    }\n\n    switch ($errno) {\n    case E_USER_ERROR:\n        echo \"<b>My ERROR<\/b> [$errno] $errstr<br \/>\\n\";\n        echo \"  Fatal error on line $errline in file $errfile\";\n        echo \", PHP \" . PHP_VERSION . \" (\" . PHP_OS . \")<br \/>\\n\";\n        echo \"Aborting...<br \/>\\n\";\n        exit(1);\n        break;\n\n    case E_USER_WARNING:\n        echo \"<b>My WARNING<\/b> [$errno] $errstr<br \/>\\n\";\n        break;\n\n    case E_USER_NOTICE:\n        echo \"<b>My NOTICE<\/b> [$errno] $errstr<br \/>\\n\";\n        break;\n\n    default:\n        echo \"Unknown error type: [$errno] $errstr<br \/>\\n\";\n        break;\n    }\n\n    \/* Don't execute PHP internal error handler *\/\n    return true;\n}\n\n\/\/ function to test the error handling\nfunction scale_by_log($vect, $scale)\n{\n    if (!is_numeric($scale) || $scale <= 0) {\n        trigger_error(\"log(x) for x <= 0 is undefined, you used: scale = $scale\", E_USER_ERROR);\n    }\n\n    if (!is_array($vect)) {\n        trigger_error(\"Incorrect input vector, array of values expected\", E_USER_WARNING);\n        return null;\n    }\n\n    $temp = array();\n    foreach($vect as $pos => $value) {\n        if (!is_numeric($value)) {\n            trigger_error(\"Value at position $pos is not a number, using 0 (zero)\", E_USER_NOTICE);\n            $value = 0;\n        }\n        $temp[$pos] = log($scale) * $value;\n    }\n\n    return $temp;\n}\n\n\/\/ set to the user defined error handler\n$old_error_handler = set_error_handler(\"myErrorHandler\");\n\n\/\/ trigger some errors, first define a mixed array with a non-numeric item\necho \"vector a\\n\";\n$a = array(2, 3, \"foo\", 5.5, 43.3, 21.11);\nprint_r($a);\n\n\/\/ now generate second array\necho \"----\\nvector b - a notice (b = log(PI) * a)\\n\";\n\/* Value at position $pos is not a number, using 0 (zero) *\/\n$b = scale_by_log($a, M_PI);\nprint_r($b);\n\n\/\/ this is trouble, we pass a string instead of an array\necho \"----\\nvector c - a warning\\n\";\n\/* Incorrect input vector, array of values expected *\/\n$c = scale_by_log(\"not array\", 2.3);\nvar_dump($c); \/\/ NULL\n\n\/\/ this is a critical error, log of zero or negative number is undefined\necho \"----\\nvector d - fatal error\\n\";\n\/* log(x) for x <= 0 is undefined, you used: scale = $scale\" *\/\n$d = scale_by_log($a, -2.5);\nvar_dump($d); \/\/ Never reached","output":"vector a\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => foo\n    [3] => 5.5\n    [4] => 43.3\n    [5] => 21.11\n)\n----\nvector b - a notice (b = log(PI) * a)\n<b>My NOTICE<\/b> [1024] Value at position 2 is not a number, using 0 (zero)<br \/>\nArray\n(\n    [0] => 2.2894597716988\n    [1] => 3.4341896575482\n    [2] => 0\n    [3] => 6.2960143721717\n    [4] => 49.566804057279\n    [5] => 24.165247890281\n)\n----\nvector c - a warning\n<b>My WARNING<\/b> [512] Incorrect input vector, array of values expected<br \/>\nNULL\n----\nvector d - fatal error\n<b>My ERROR<\/b> [256] log(x) for x <= 0 is undefined, you used: scale = -2.5<br \/>\n  Fatal error on line 35 in file trigger_error.php, PHP 5.2.1 (FreeBSD)<br \/>\nAborting...<br \/>"}],"set_exception_handler":[{"title":"set_exception_handler() example","source":"function exception_handler($exception) {\n  echo \"Uncaught exception: \" , $exception->getMessage(), \"\\n\";\n}\n\nset_exception_handler('exception_handler');\n\nthrow new Exception('Uncaught Exception');\necho \"Not Executed\\n\";","output":null}],"set_include_path":[{"title":"set_include_path() example","source":"set_include_path('\/usr\/lib\/pear');\n\n\/\/ Or using ini_set()\nini_set('include_path', '\/usr\/lib\/pear');","output":null},{"title":"Adding to the include path","source":"$path = '\/usr\/lib\/pear';\nset_include_path(get_include_path() . PATH_SEPARATOR . $path);","output":null}],"set_magic_quotes_runtime":[{"title":"set_magic_quotes_runtime() example","source":"\/\/ Create a temporary file pointer\n$fp = tmpfile();\n\n\/\/ Write some data to the pointer\nfwrite($fp, '\\'PHP\\' is a Recursive acronym');\n\n\/\/ Without magic_quotes_runtime\nrewind($fp);\nset_magic_quotes_runtime(false);\n\necho 'Without magic_quotes_runtime: ' . fread($fp, 64), PHP_EOL;\n\n\/\/ With magic_quotes_runtime\nrewind($fp);\nset_magic_quotes_runtime(true);\n\necho 'With magic_quotes_runtime: ' . fread($fp, 64), PHP_EOL;\n\n\/\/ Clean up\nfclose($fp);","output":"Without magic_quotes_runtime: 'PHP' is a Recursive acronym\nWith magic_quotes_runtime: \\'PHP\\' is a Recursive acronym"}],"setcookie":[{"title":"setcookie() send example","source":"$value = 'something from somewhere';\n\nsetcookie(\"TestCookie\", $value);\nsetcookie(\"TestCookie\", $value, time()+3600);  \/* expire in 1 hour *\/\nsetcookie(\"TestCookie\", $value, time()+3600, \"\/~rasmus\/\", \"example.com\", 1);","output":null},{"title":null,"source":"\/\/ Print an individual cookie\necho $_COOKIE[\"TestCookie\"];\n\n\/\/ Another way to debug\/test is to view all cookies\nprint_r($_COOKIE);","output":null},{"title":"setcookie() delete example","source":"\/\/ set the expiration date to one hour ago\nsetcookie(\"TestCookie\", \"\", time() - 3600);\nsetcookie(\"TestCookie\", \"\", time() - 3600, \"\/~rasmus\/\", \"example.com\", 1);","output":null},{"title":"setcookie() and arrays","source":"\/\/ set the cookies\nsetcookie(\"cookie[three]\", \"cookiethree\");\nsetcookie(\"cookie[two]\", \"cookietwo\");\nsetcookie(\"cookie[one]\", \"cookieone\");\n\n\/\/ after the page reloads, print them out\nif (isset($_COOKIE['cookie'])) {\n    foreach ($_COOKIE['cookie'] as $name => $value) {\n        $name = htmlspecialchars($name);\n        $value = htmlspecialchars($value);\n        echo \"$name : $value <br \/>\\n\";\n    }\n}","output":"three : cookiethree\ntwo : cookietwo\none : cookieone"}],"setproctitle":[{"title":"setproctitle() example","source":"setproctitle(\"myscript\");","output":"$ ps a\n  PID TTY      STAT   TIME COMMAND\n 1168 pts\/3    S      0:00 myscript"}],"setthreadtitle":[{"title":"setthreadtitle() example","source":"setthreadtitle(\"myscript\");","output":"$ ps c\n  PID TTY      STAT   TIME COMMAND\n 1178 pts\/3    S      0:00 myscript"}],"settype":[{"title":"settype() example","source":"$foo = \"5bar\"; \/\/ string\n$bar = true;   \/\/ boolean\n\nsettype($foo, \"integer\"); \/\/ $foo is now 5   (integer)\nsettype($bar, \"string\");  \/\/ $bar is now \"1\" (string)","output":null}],"sha1_file":[{"title":"sha1_file() example","source":"foreach(glob('\/home\/Kalle\/myproject\/*.php') as $ent)\n{\n    if(is_dir($ent))\n    {\n        continue;\n    }\n\n    echo $ent . ' (SHA1: ' . sha1_file($ent) . ')', PHP_EOL;\n}","output":null}],"sha1":[{"title":"A sha1() example","source":"$str = 'apple';\n\nif (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {\n    echo \"Would you like a green or red apple?\";\n}","output":null}],"shell_exec":[{"title":"A shell_exec() example","source":"$output = shell_exec('ls -lart');\necho \"<pre>$output<\/pre>\";","output":null}],"shm_attach":[{"title":null,"source":"\/\/ Create a temporary file and return its path\n$tmp = tempnam('\/tmp', 'PHP');\n\n\/\/ Get the file token key\n$key = ftok($tmp, 'a');\n\n\/\/ Attach the SHM resource, notice the cast afterwards\n$id = shm_attach($key);\n\nif ($id === false) {\n    die('Unable to create the shared memory segment');\n}\n\n\/\/ Cast to integer, since prior to PHP 5.3.0 the resource id \n\/\/ is returned which can be exposed when casting a resource\n\/\/ to an integer\n$id = (integer) $id;","output":null}],"shmop_close":[{"title":"Closing shared memory block","source":"shmop_close($shm_id);","output":null}],"shmop_delete":[{"title":"Deleting shared memory block","source":"shmop_delete($shm_id);","output":null}],"shmop_open":[{"title":"Create a new shared memory block","source":"$shm_key = ftok(__FILE__, 't');\n$shm_id = shmop_open($shm_key, \"c\", 0644, 100);","output":null}],"shmop_read":[{"title":"Reading shared memory block","source":"$shm_data = shmop_read($shm_id, 0, 50);","output":null}],"shmop_size":[{"title":"Getting the size of the shared memory block","source":"$shm_size = shmop_size($shm_id);","output":null}],"shmop_write":[{"title":"Writing to shared memory block","source":"$shm_bytes_written = shmop_write($shm_id, $my_string, 0);","output":null}],"shuffle":[{"title":"shuffle() example","source":"$numbers = range(1, 20);\nshuffle($numbers);\nforeach ($numbers as $number) {\n    echo \"$number \";\n}","output":null}],"simplexml_import_dom":[{"title":"Importing DOM","source":"$dom = new DOMDocument;\n$dom->loadXML('<books><book><title>blah<\/title><\/book><\/books>');\nif (!$dom) {\n    echo 'Error while parsing the document';\n    exit;\n}\n\n$s = simplexml_import_dom($dom);\n\necho $s->book[0]->title;","output":"blah"}],"simplexml_load_file":[{"title":"Interpret an XML document","source":"\/\/ The file test.xml contains an XML document with a root element\n\/\/ and at least an element \/[root]\/title.\n\nif (file_exists('test.xml')) {\n    $xml = simplexml_load_file('test.xml');\n \n    print_r($xml);\n} else {\n    exit('Failed to open test.xml.');\n}","output":"SimpleXMLElement Object\n(\n  [title] => Example Title\n  ...\n)"}],"simplexml_load_string":[{"title":"Interpret an XML string","source":"$string = <<<XML\n<?xml version='1.0'?> \n<document>\n <title>Forty What?<\/title>\n <from>Joe<\/from>\n <to>Jane<\/to>\n <body>\n  I know that's the answer -- but what's the question?\n <\/body>\n<\/document>\nXML;\n\n$xml = simplexml_load_string($string);\n\nprint_r($xml);","output":"SimpleXMLElement Object\n(\n  [title] => Forty What?\n  [from] => Joe\n  [to] => Jane\n  [body] =>\n   I know that's the answer -- but what's the question?\n)"}],"sin":[{"title":"sin() example","source":"\/\/ Precision depends on your precision directive\necho sin(deg2rad(60));  \/\/  0.866025403 ...\necho sin(60);           \/\/ -0.304810621 ...","output":null}],"sleep":[{"title":"sleep() example","source":"\/\/ current time\necho date('h:i:s') . \"\\n\";\n\n\/\/ sleep for 10 seconds\nsleep(10);\n\n\/\/ wake up !\necho date('h:i:s') . \"\\n\";","output":"05:31:23\n05:31:33"}],"snmp_get_quick_print":[{"title":"snmp_get_quick_print() example","source":"$quickprint = snmp_get_quick_print();","output":null}],"snmp_get_valueretrieval":[{"title":"Using snmp_get_valueretrieval","source":"$ret = snmpget('localhost', 'public', 'IF-MIB::ifName.1');\n if (snmp_get_valueretrieval() & SNMP_VALUE_OBJECT) {\n   echo $ret->value;\n } else {\n   echo $ret;\n }","output":null}],"snmp_read_mib":[{"title":"Using snmp_read_mib()","source":"print_r( snmprealwalk('localhost', 'public', '.1.3.6.1.2.1.2.3.4.5') );\n \n snmp_read_mib('.\/FOO-BAR-MIB.txt');\n print_r( snmprealwalk('localhost', 'public', 'FOO-BAR-MIB::someTable' );","output":null}],"snmp_set_enum_print":[{"title":"Using snmp_set_enum_print()","source":"snmp_set_enum_print(0);\n echo snmpget('localhost', 'public', 'IF-MIB::ifOperStatus.3') . \"\\n\";\n snmp_set_enum_print(1);\n echo snmpget('localhost', 'public', 'IF-MIB::ifOperStatus.3') . \"\\n\";","output":null}],"snmp_set_oid_output_format":[{"title":"Using snmprealwalk()","source":"snmp_read_mib(\"\/usr\/share\/mibs\/netsnmp\/NET-SNMP-TC\");\n\n \/\/ default or SNMP_OID_OUTPUT_MODULE in PHP >= 5.3.6\n print_r( snmprealwalk('localhost', 'public', 'RFC1213-MIB::sysObjectID') );\n\n snmp_set_oid_output_format(SNMP_OID_OUTPUT_NUMERIC);\n print_r( snmprealwalk('localhost', 'public', 'RFC1213-MIB::sysObjectID') );\n\n snmp_set_oid_output_format(SNMP_OID_OUTPUT_FULL);\n print_r( snmprealwalk('localhost', 'public', 'RFC1213-MIB::sysObjectID') );","output":"Array\n (\n    [RFC1213-MIB::sysObjectID.0] => OID: NET-SNMP-TC::linux\n )\n Array\n (\n    [.1.3.6.1.2.1.1.2.0] => OID: .1.3.6.1.4.1.8072.3.2.10\n )\n Array\n (\n    [.iso.org.dod.internet.mgmt.mib-2.system.sysObjectID.0] => OID: .iso.org.dod.internet.private.enterprises.netSnmp.netSnmpEnumerations.netSnmpAgentOIDs.linux\n )"}],"snmp_set_quick_print":[{"title":"Using snmp_set_quick_print()","source":"snmp_set_quick_print(0);\n$a = snmpget(\"127.0.0.1\", \"public\", \".1.3.6.1.2.1.2.2.1.9.1\");\necho \"$a\\n\";\nsnmp_set_quick_print(1);\n$a = snmpget(\"127.0.0.1\", \"public\", \".1.3.6.1.2.1.2.2.1.9.1\");\necho \"$a\\n\";","output":"'Timeticks: (0) 0:00:00.00'\n'0:00:00.00'"}],"snmp_set_valueretrieval":[{"title":"Using snmp_set_valueretrieval()","source":"snmp_set_valueretrieval(SNMP_VALUE_LIBRARY);\n $ret = snmpget('localhost', 'public', 'IF-MIB::ifName.1');\n \/\/ $ret = \"STRING: lo\"\n\n snmp_set_valueretrieval(SNMP_VALUE_PLAIN);\n $ret = snmpget('localhost', 'public', 'IF-MIB::ifName.1');\n \/\/ $ret = \"lo\";\n\n snmp_set_valueretrieval(SNMP_VALUE_OBJECT);\n $ret = snmpget('localhost', 'public', 'IF-MIB::ifName.1');\n \/\/ stdClass Object\n \/\/ (\n \/\/   [type] => 4        <-- SNMP_OCTET_STR, see constants\n \/\/   [value] => lo\n \/\/ )\n\n \/\/ PHP 5.4+ examples\n snmp_set_valueretrieval(SNMP_VALUE_OBJECT | SNMP_VALUE_PLAIN);\n $ret = snmpget('localhost', 'public', 'IF-MIB::ifName.1');\n \/\/ stdClass Object\n \/\/ (\n \/\/   [type] => 4        <-- SNMP_OCTET_STR, see constants\n \/\/   [value] => lo\n \/\/ )\n\n snmp_set_valueretrieval(SNMP_VALUE_OBJECT | SNMP_VALUE_LIBRARY);\n $ret = snmpget('localhost', 'public', 'IF-MIB::ifName.1');\n \/\/ stdClass Object\n \/\/ (\n \/\/   [type] => 4        <-- SNMP_OCTET_STR, see constants\n \/\/   [value] => STRING: lo\n \/\/ )","output":null}],"snmp2_get":[{"title":"Using snmp2_get()","source":"$syscontact = snmp2_get(\"127.0.0.1\", \"public\", \"system.SysContact.0\");","output":null}],"snmp2_getnext":[{"title":"Using snmp2_get_next()","source":"$nameOfSecondInterface = snmp2_get_next('localhost', 'public', 'IF-MIB::ifName.1';","output":null}],"snmp2_real_walk":[{"title":"Using snmp2_real_walk()","source":"print_r(snmp2_real_walk(\"localhost\", \"public\", \"IF-MIB::ifName\"));","output":"Array\n      (\n      [IF-MIB::ifName.1] => STRING: lo\n      [IF-MIB::ifName.2] => STRING: eth0\n      [IF-MIB::ifName.3] => STRING: eth2\n      [IF-MIB::ifName.4] => STRING: sit0\n      [IF-MIB::ifName.5] => STRING: sixxs\n    )"}],"snmp2_set":[{"title":"Using snmp2_set()","source":"snmp2_set(\"localhost\", \"public\", \"IF-MIB::ifAlias.3\", \"s\", \"foo\");","output":null},{"title":"Using snmp2_set() for setting BITS SNMP object id","source":"snmp2_set(\"localhost\", \"public\", 'FOO-MIB::bar.42', 'b', '0 1 2 3 4');\n\/\/ or\n  snmp2_set(\"localhost\", \"public\", 'FOO-MIB::bar.42', 'x', 'F0');","output":null}],"snmp2_walk":[{"title":"snm2_pwalk() Example","source":"$a = snmp2_walk(\"127.0.0.1\", \"public\", \"\");\n\nforeach ($a as $val) {\n    echo \"$val\\n\";\n}","output":null}],"snmp3_get":[{"title":"Using snmp3_get()","source":"$nameOfSecondInterface = snmp3_get('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifName.2');","output":null}],"snmp3_getnext":[{"title":"Using snmp3_getnext()","source":"$nameOfSecondInterface = snmp3_getnext('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifName.1');","output":null}],"snmp3_real_walk":[{"title":"Using snmp3_real_walk()","source":"var_export(snmp3_real_walk('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifName'));","output":"array (\n  'IF-MIB::ifName.1' => 'STRING: lo',\n  'IF-MIB::ifName.2' => 'STRING: eth0',\n  'IF-MIB::ifName.3' => 'STRING: eth2',\n  'IF-MIB::ifName.4' => 'STRING: sit0',\n  'IF-MIB::ifName.5' => 'STRING: sixxs',\n)"}],"snmp3_set":[{"title":"Using snmp3_set()","source":"snmp3_set('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifAlias.3', 's', \"foo\");","output":null},{"title":"Using snmp3_set() for setting BITS SNMP object id","source":"snmp3_set('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'FOO-MIB::bar.42', 'b', '0 1 2 3 4');\n\/\/ or\n  snmp3_set('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'FOO-MIB::bar.42', 'x', 'F0');","output":null}],"snmp3_walk":[{"title":"snmp3_walk() Example","source":"$ret = snmp3_walk('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifName');\nvar_export($ret);","output":null}],"snmpget":[{"title":"Using snmpget()","source":"$syscontact = snmpget(\"127.0.0.1\", \"public\", \"system.SysContact.0\");","output":null}],"snmpgetnext":[{"title":"Using snmpgetnext()","source":"$nameOfSecondInterface = snmpgetnetxt('localhost', 'public', 'IF-MIB::ifName.1';","output":null}],"snmprealwalk":[{"title":"Using snmprealwalk()","source":"print_r(snmprealwalk(\"localhost\", \"public\", \"IF-MIB::ifName\"));","output":"Array\n      (\n      [IF-MIB::ifName.1] => STRING: lo\n      [IF-MIB::ifName.2] => STRING: eth0\n      [IF-MIB::ifName.3] => STRING: eth2\n      [IF-MIB::ifName.4] => STRING: sit0\n      [IF-MIB::ifName.5] => STRING: sixxs\n    )"}],"snmpset":[{"title":"Using snmpset()","source":"snmpset(\"localhost\", \"public\", \"IF-MIB::ifAlias.3\", \"s\", \"foo\");","output":null},{"title":"Using snmpset() for setting BITS SNMP object id","source":"snmpset(\"localhost\", \"public\", 'FOO-MIB::bar.42', 'b', '0 1 2 3 4');\n\/\/ or\n  snmpset(\"localhost\", \"public\", 'FOO-MIB::bar.42', 'x', 'F0');","output":null}],"snmpwalk":[{"title":"snmpwalk() Example","source":"$a = snmpwalk(\"127.0.0.1\", \"public\", \"\"); \n\nforeach ($a as $val) {\n    echo \"$val\\n\";\n}","output":null}],"snmpwalkoid":[{"title":"snmpwalkoid() Example","source":"$a = snmpwalkoid(\"127.0.0.1\", \"public\", \"\"); \nfor (reset($a); $i = key($a); next($a)) {\n    echo \"$i: $a[$i]<br \/>\\n\";\n}","output":null}],"socket_bind":[{"title":"Using socket_bind() to set the source address","source":"\/\/ Create a new socket\n$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\n\/\/ An example list of IP addresses owned by the computer\n$sourceips['kevin']    = '127.0.0.1';\n$sourceips['madcoder'] = '127.0.0.2';\n\n\/\/ Bind the source address\nsocket_bind($sock, $sourceips['madcoder']);\n\n\/\/ Connect to destination address\nsocket_connect($sock, '127.0.0.1', 80);\n\n\/\/ Write\n$request = 'GET \/ HTTP\/1.1' . \"\\r\\n\" .\n           'Host: example.com' . \"\\r\\n\\r\\n\";\nsocket_write($sock, $request);\n\n\/\/ Close\nsocket_close($sock);","output":null}],"socket_create_pair":[{"title":"socket_create_pair() example","source":"$sockets = array();\n\n\/* On Windows we need to use AF_INET *\/\n$domain = (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? AF_INET : AF_UNIX);\n\n\/* Setup socket pair *\/\nif (socket_create_pair($domain, SOCK_STREAM, 0, $sockets) === false) {\n    echo \"socket_create_pair failed. Reason: \".socket_strerror(socket_last_error());\n}\n\/* Send and Recieve Data *\/\nif (socket_write($sockets[0], \"ABCdef123\\n\", strlen(\"ABCdef123\\n\")) === false) {\n    echo \"socket_write() failed. Reason: \".socket_strerror(socket_last_error($sockets[0]));\n}\nif (($data = socket_read($sockets[1], strlen(\"ABCdef123\\n\"), PHP_BINARY_READ)) === false) {\n    echo \"socket_read() failed. Reason: \".socket_strerror(socket_last_error($sockets[1]));\n}\nvar_dump($data);\n\n\/* Close sockets *\/\nsocket_close($sockets[0]);\nsocket_close($sockets[1]);","output":null},{"title":"socket_create_pair() IPC example","source":"$ary = array();\n$strone = 'Message From Parent.';\n$strtwo = 'Message From Child.';\n\nif (socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $ary) === false) {\n    echo \"socket_create_pair() failed. Reason: \".socket_strerror(socket_last_error());\n}\n$pid = pcntl_fork();\nif ($pid == -1) {\n    echo 'Could not fork Process.';\n} elseif ($pid) {\n    \/*parent*\/\n    socket_close($ary[0]);\n    if (socket_write($ary[1], $strone, strlen($strone)) === false) {\n        echo \"socket_write() failed. Reason: \".socket_strerror(socket_last_error($ary[1]));\n    }\n    if (socket_read($ary[1], strlen($strtwo), PHP_BINARY_READ) == $strtwo) {\n        echo \"Recieved $strtwo\\n\";\n    }\n    socket_close($ary[1]);\n} else {\n    \/*child*\/\n    socket_close($ary[1]);\n    if (socket_write($ary[0], $strtwo, strlen($strtwo)) === false) {\n        echo \"socket_write() failed. Reason: \".socket_strerror(socket_last_error($ary[0]));\n    }\n    if (socket_read($ary[0], strlen($strone), PHP_BINARY_READ) == $strone) {\n        echo \"Recieved $strone\\n\";\n    }\n    socket_close($ary[0]);\n}","output":null}],"socket_get_option":[{"title":"socket_get_option() example","source":"$socket = socket_create_listen(1223);\n\n$linger = array('l_linger' => 1, 'l_onoff' => 1);\nsocket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);\n\nvar_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));","output":null}],"socket_import_stream":[{"title":"socket_import_stream() example","source":"$stream = stream_socket_server(\"udp:\/\/0.0.0.0:58380\", $errno, $errstr, STREAM_SERVER_BIND); \n$sock   = socket_import_stream($stream);","output":null}],"socket_last_error":[{"title":"socket_last_error() example","source":"$socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\nif ($socket === false) {\n    $errorcode = socket_last_error();\n    $errormsg = socket_strerror($errorcode);\n    \n    die(\"Couldn't create socket: [$errorcode] $errormsg\");\n}","output":null}],"socket_recv":[{"title":"socket_recv() example","source":"error_reporting(E_ALL);\n\necho \"<h2>TCP\/IP Connection<\/h2>\\n\";\n\n\/* Get the port for the WWW service. *\/\n$service_port = getservbyname('www', 'tcp');\n\n\/* Get the IP address for the target host. *\/\n$address = gethostbyname('www.example.com');\n\n\/* Create a TCP\/IP socket. *\/\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\nif ($socket === false) {\n    echo \"socket_create() failed: reason: \" . socket_strerror(socket_last_error()) . \"\\n\";\n} else {\n    echo \"OK.\\n\";\n}\n\necho \"Attempting to connect to '$address' on port '$service_port'...\";\n$result = socket_connect($socket, $address, $service_port);\nif ($result === false) {\n    echo \"socket_connect() failed.\\nReason: ($result) \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n} else {\n    echo \"OK.\\n\";\n}\n\n$in = \"HEAD \/ HTTP\/1.1\\r\\n\";\n$in .= \"Host: www.example.com\\r\\n\";\n$in .= \"Connection: Close\\r\\n\\r\\n\";\n$out = '';\n\necho \"Sending HTTP HEAD request...\";\nsocket_write($socket, $in, strlen($in));\necho \"OK.\\n\";\n\necho \"Reading response:\\n\\n\";\n$buf = 'This is my buffer.';\nif (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {\n    echo \"Read $bytes bytes from socket_recv(). Closing socket...\";\n} else {\n    echo \"socket_recv() failed; reason: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n}\nsocket_close($socket);\n\necho $buf . \"\\n\";\necho \"OK.\\n\\n\";","output":"<h2>TCP\/IP Connection<\/h2>\nOK.\nAttempting to connect to '208.77.188.166' on port '80'...OK.\nSending HTTP HEAD request...OK.\nReading response:\n\nRead 123 bytes from socket_recv(). Closing socket...HTTP\/1.1 200 OK\nDate: Mon, 14 Sep 2009 08:56:36 GMT\nServer: Apache\/2.2.3 (Red Hat)\nLast-Modified: Tue, 15 Nov 2005 13:24:10 GMT\nETag: \"b80f4-1b6-80bfd280\"\nAccept-Ranges: bytes\nContent-Length: 438\nConnection: close\nContent-Type: text\/html; charset=UTF-8\n\nOK."}],"socket_recvfrom":[{"title":"socket_recvfrom() example","source":"error_reporting(E_ALL | E_STRICT);\n\n$socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\nsocket_bind($socket, '127.0.0.1', 1223);\n\n$from = '';\n$port = 0;\nsocket_recvfrom($socket, $buf, 12, 0, $from, $port);\n\necho \"Received $buf from remote address $from and remote port $port\" . PHP_EOL;","output":null}],"socket_select":[{"title":"Using NULL with socket_select()","source":"$e = NULL;\nsocket_select($r, $w, $e, 0);","output":null},{"title":"Understanding socket_select()'s result","source":"$e = NULL;\nif (false === socket_select($r, $w, $e, 0)) {\n    echo \"socket_select() failed, reason: \" .\n        socket_strerror(socket_last_error()) . \"\\n\";\n}","output":null},{"title":"socket_select() example","source":"\/* Prepare the read array *\/\n$read   = array($socket1, $socket2);\n$write  = NULL;\n$except = NULL;\n$num_changed_sockets = socket_select($read, $write, $except, 0);\n\nif ($num_changed_sockets === false) {\n    \/* Error handling *\/\n} else if ($num_changed_sockets > 0) {\n    \/* At least at one of the sockets something interesting happened *\/\n}","output":null}],"socket_sendto":[{"title":"socket_sendto() Example","source":"$sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n\n    $msg = \"Ping !\";\n    $len = strlen($msg);\n\n    socket_sendto($sock, $msg, $len, 0, '127.0.0.1', 1223);\n    socket_close($sock);","output":null}],"socket_set_block":[{"title":"socket_set_block() example","source":"$socket = socket_create_listen(1223);\nsocket_set_block($socket);\n\nsocket_accept($socket);","output":null}],"socket_set_nonblock":[{"title":"socket_set_nonblock() example","source":"$socket = socket_create_listen(1223);\nsocket_set_nonblock($socket);\n\nsocket_accept($socket);","output":null}],"socket_set_option":[{"title":"socket_set_option() example","source":"$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n\nif (!is_resource($socket)) {\n    echo 'Unable to create socket: '. socket_strerror(socket_last_error()) . PHP_EOL;\n}\n\nif (!socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1)) {\n    echo 'Unable to set option on socket: '. socket_strerror(socket_last_error()) . PHP_EOL;\n}\n\nif (!socket_bind($socket, '127.0.0.1', 1223)) {\n    echo 'Unable to bind socket: '. socket_strerror(socket_last_error()) . PHP_EOL;\n}\n\n$rval = socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR);\n\nif ($rval === false) {\n    echo 'Unable to get socket option: '. socket_strerror(socket_last_error()) . PHP_EOL;\n} else if ($rval !== 0) {\n    echo 'SO_REUSEADDR is set on socket !' . PHP_EOL;\n}","output":null}],"socket_strerror":[{"title":"socket_strerror() example","source":"if (false == ($socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {\n   echo \"socket_create() failed: reason: \" . socket_strerror(socket_last_error()) . \"\\n\";\n}\n\nif (false == (@socket_bind($socket, '127.0.0.1', 80))) {\n   echo \"socket_bind() failed: reason: \" . socket_strerror(socket_last_error($socket)) . \"\\n\";\n}","output":"socket_bind() failed: reason: Permission denied"}],"solr_get_version":[{"title":"solr_get_version() example","source":"$solr_version = solr_get_version();\n\nprint $solr_version;","output":"0.9.6"}],"sort":[{"title":"sort() example","source":"$fruits = array(\"lemon\", \"orange\", \"banana\", \"apple\");\nsort($fruits);\nforeach ($fruits as $key => $val) {\n    echo \"fruits[\" . $key . \"] = \" . $val . \"\\n\";\n}","output":"fruits[0] = apple\nfruits[1] = banana\nfruits[2] = lemon\nfruits[3] = orange"},{"title":"sort() example using case-insensitive natural ordering","source":"$fruits = array(\n    \"Orange1\", \"orange2\", \"Orange3\", \"orange20\"\n);\nsort($fruits, SORT_NATURAL | SORT_FLAG_CASE);\nforeach ($fruits as $key => $val) {\n    echo \"fruits[\" . $key . \"] = \" . $val . \"\\n\";\n}","output":"fruits[0] = Orange1\nfruits[1] = orange2\nfruits[2] = Orange3\nfruits[3] = orange20"}],"soundex":[{"title":"Soundex Examples","source":"soundex(\"Euler\")       == soundex(\"Ellery\");    \/\/ E460\nsoundex(\"Gauss\")       == soundex(\"Ghosh\");     \/\/ G200\nsoundex(\"Hilbert\")     == soundex(\"Heilbronn\"); \/\/ H416\nsoundex(\"Knuth\")       == soundex(\"Kant\");      \/\/ K530\nsoundex(\"Lloyd\")       == soundex(\"Ladd\");      \/\/ L300\nsoundex(\"Lukasiewicz\") == soundex(\"Lissajous\"); \/\/ L222","output":null}],"spl_autoload_register":[{"title":"spl_autoload_register() as a replacement for an __autoload() function","source":"\/\/ function __autoload($class) {\n\/\/     include 'classes\/' . $class . '.class.php';\n\/\/ }\n\nfunction my_autoloader($class) {\n    include 'classes\/' . $class . '.class.php';\n}\n\nspl_autoload_register('my_autoloader');\n\n\/\/ Or, using an anonymous function as of PHP 5.3.0\nspl_autoload_register(function ($class) {\n    include 'classes\/' . $class . '.class.php';\n});","output":null},{"title":"spl_autoload_register() example where the class is not loaded","source":"namespace Foobar;\n\nclass Foo {\n    static public function test($name) {\n        print '[['. $name .']]';\n    }\n}\n\nspl_autoload_register(__NAMESPACE__ .'\\Foo::test'); \/\/ As of PHP 5.3.0\n\nnew InexistentClass;","output":"[[Foobar\\InexistentClass]]\nFatal error: Class 'Foobar\\InexistentClass' not found in ..."}],"spl_classes":[{"title":"spl_classes() example","source":"print_r(spl_classes());","output":"Array\n(\n    [ArrayObject] => ArrayObject\n    [ArrayIterator] => ArrayIterator\n    [CachingIterator] => CachingIterator\n    [RecursiveCachingIterator] => RecursiveCachingIterator\n    [DirectoryIterator] => DirectoryIterator\n    [FilterIterator] => FilterIterator\n    [LimitIterator] => LimitIterator\n    [ParentIterator] => ParentIterator\n    [RecursiveDirectoryIterator] => RecursiveDirectoryIterator\n    [RecursiveIterator] => RecursiveIterator\n    [RecursiveIteratorIterator] => RecursiveIteratorIterator\n    [SeekableIterator] => SeekableIterator\n    [SimpleXMLIterator] => SimpleXMLIterator\n)"}],"spl_object_hash":[{"title":"A spl_object_hash() example","source":"$id = spl_object_hash($object);\n$storage[$id] = $object;","output":null}],"split":[{"title":"split() example","source":"list($user, $pass, $uid, $gid, $extra) =\n    split(\":\", $passwd_line, 5);","output":null},{"title":"split() example","source":"\/\/ Delimiters may be slash, dot, or hyphen\n$date = \"04\/30\/1973\";\nlist($month, $day, $year) = split('[\/.-]', $date);\necho \"Month: $month; Day: $day; Year: $year<br \/>\\n\";","output":null}],"spliti":[{"title":"spliti() example","source":"$string = \"aBBBaCCCADDDaEEEaGGGA\";\n$chunks = spliti (\"a\", $string, 5);\nprint_r($chunks);","output":"Array\n(\n  [0] =>\n  [1] => BBB\n  [2] => CCC\n  [3] => DDD\n  [4] => EEEaGGGA\n)"}],"sprintf":[{"title":"Argument swapping","source":"$num = 5;\n$location = 'tree';\n\n$format = 'There are %d monkeys in the %s';\necho sprintf($format, $num, $location);","output":null},{"title":"Argument swapping","source":"$format = 'The %s contains %d monkeys';\necho sprintf($format, $num, $location);","output":null},{"title":"Argument swapping","source":"$format = 'The %2$s contains %1$d monkeys';\necho sprintf($format, $num, $location);","output":null},{"title":"Argument swapping","source":"$format = 'The %2$s contains %1$d monkeys.\n           That\\'s a nice %2$s full of %1$d monkeys.';\necho sprintf($format, $num, $location);","output":null},{"title":"Specifying padding character","source":"echo sprintf(\"%'.9d\\n\", 123);\necho sprintf(\"%'.09d\\n\", 123);","output":"......123\n000000123"},{"title":"Position specifier with other specifiers","source":"$format = 'The %2$s contains %1$04d monkeys';\necho sprintf($format, $num, $location);","output":"The tree contains 0005 monkeys"},{"title":"printf(): various examples","source":"$n =  43951789;\n$u = -43951789;\n$c = 65; \/\/ ASCII 65 is 'A'\n\n\/\/ notice the double %%, this prints a literal '%' character\nprintf(\"%%b = '%b'\\n\", $n); \/\/ binary representation\nprintf(\"%%c = '%c'\\n\", $c); \/\/ print the ascii character, same as chr() function\nprintf(\"%%d = '%d'\\n\", $n); \/\/ standard integer representation\nprintf(\"%%e = '%e'\\n\", $n); \/\/ scientific notation\nprintf(\"%%u = '%u'\\n\", $n); \/\/ unsigned integer representation of a positive integer\nprintf(\"%%u = '%u'\\n\", $u); \/\/ unsigned integer representation of a negative integer\nprintf(\"%%f = '%f'\\n\", $n); \/\/ floating point representation\nprintf(\"%%o = '%o'\\n\", $n); \/\/ octal representation\nprintf(\"%%s = '%s'\\n\", $n); \/\/ string representation\nprintf(\"%%x = '%x'\\n\", $n); \/\/ hexadecimal representation (lower-case)\nprintf(\"%%X = '%X'\\n\", $n); \/\/ hexadecimal representation (upper-case)\n\nprintf(\"%%+d = '%+d'\\n\", $n); \/\/ sign specifier on a positive integer\nprintf(\"%%+d = '%+d'\\n\", $u); \/\/ sign specifier on a negative integer","output":"%b = '10100111101010011010101101'\n%c = 'A'\n%d = '43951789'\n%e = '4.39518e+7'\n%u = '43951789'\n%u = '4251015507'\n%f = '43951789.000000'\n%o = '247523255'\n%s = '43951789'\n%x = '29ea6ad'\n%X = '29EA6AD'\n%+d = '+43951789'\n%+d = '-43951789'"},{"title":"printf(): string specifiers","source":"$s = 'monkey';\n$t = 'many monkeys';\n\nprintf(\"[%s]\\n\",      $s); \/\/ standard string output\nprintf(\"[%10s]\\n\",    $s); \/\/ right-justification with spaces\nprintf(\"[%-10s]\\n\",   $s); \/\/ left-justification with spaces\nprintf(\"[%010s]\\n\",   $s); \/\/ zero-padding works on strings too\nprintf(\"[%'#10s]\\n\",  $s); \/\/ use the custom padding character '#'\nprintf(\"[%10.10s]\\n\", $t); \/\/ left-justification but with a cutoff of 10 characters","output":"[monkey]\n[    monkey]\n[monkey    ]\n[0000monkey]\n[####monkey]\n[many monke]"},{"title":"sprintf(): zero-padded integers","source":"$isodate = sprintf(\"%04d-%02d-%02d\", $year, $month, $day);","output":null},{"title":"sprintf(): formatting currency","source":"$money1 = 68.75;\n$money2 = 54.35;\n$money = $money1 + $money2;\n\/\/ echo $money will output \"123.1\";\n$formatted = sprintf(\"%01.2f\", $money);\n\/\/ echo $formatted will output \"123.10\"","output":null},{"title":"sprintf(): scientific notation","source":"$number = 362525200;\n\necho sprintf(\"%.3e\", $number); \/\/ outputs 3.625e+8","output":null}],"sql_regcase":[{"title":"sql_regcase() example","source":"echo sql_regcase(\"Foo - bar.\");","output":"[Ff][Oo][Oo] - [Bb][Aa][Rr]."}],"sqlite_busy_timeout":[{"title":"Procedural style","source":"$dbhandle = sqlite_open('sqlitedb');\nsqlite_busy_timeout($dbhandle, 10000); \/\/ set timeout to 10 seconds\nsqlite_busy_timeout($dbhandle, 0); \/\/ disable busy handler","output":null},{"title":"Object oriented style","source":"$dbhandle = new SQLiteDatabase('sqlitedb');\n$dbhandle->busyTimeout(10000); \/\/ 10 seconds\n$dbhandle->busyTimeout(0); \/\/ disable","output":null}],"sqlite_changes":[{"title":"Procedural style","source":"$dbhandle = sqlite_open('mysqlitedb');\n$query = sqlite_query($dbhandle, \"UPDATE users SET email='jDoe@example.com' WHERE username='jDoe'\");\nif (!$query) {\n    exit('Error in query.');\n} else {\n    echo 'Number of rows modified: ', sqlite_changes($dbhandle);\n}","output":null},{"title":"Object oriented style","source":"$dbhandle = new SQLiteDatabase('mysqlitedb');\n$query = $dbhandle->query(\"UPDATE users SET email='jDoe@example.com' WHERE username='jDoe'\");\nif (!$query) {\n    exit('Error in query.');\n} else {\n    echo 'Number of rows modified: ', $dbhandle->changes();\n}","output":null}],"sqlite_close":[{"title":"sqlite_close() example","source":"$dbhandle = sqlite_open('sqlitedb');\nsqlite_close($dbhandle);","output":null}],"sqlite_create_aggregate":[{"title":"max_length aggregation function example","source":"$data = array(\n   'one',\n   'two',\n   'three',\n   'four',\n   'five',\n   'six',\n   'seven',\n   'eight',\n   'nine',\n   'ten',\n   );\n$dbhandle = sqlite_open(':memory:');\nsqlite_query($dbhandle, \"CREATE TABLE strings(a)\");\nforeach ($data as $str) {\n    $str = sqlite_escape_string($str);\n    sqlite_query($dbhandle, \"INSERT INTO strings VALUES ('$str')\");\n}\n\nfunction max_len_step(&$context, $string) \n{\n    if (strlen($string) > $context) {\n        $context = strlen($string);\n    }\n}\n\nfunction max_len_finalize(&$context) \n{\n    return $context;\n}\n\nsqlite_create_aggregate($dbhandle, 'max_len', 'max_len_step', 'max_len_finalize');\n\nvar_dump(sqlite_array_query($dbhandle, 'SELECT max_len(a) from strings'));","output":null}],"sqlite_create_function":[{"title":"sqlite_create_function() example","source":"function md5_and_reverse($string) \n{\n    return strrev(md5($string));\n}\n\nif ($dbhandle = sqlite_open('mysqlitedb', 0666, $sqliteerror)) {\n    \n    sqlite_create_function($dbhandle, 'md5rev', 'md5_and_reverse', 1);\n    \n    $sql  = 'SELECT md5rev(filename) FROM files';\n    $rows = sqlite_array_query($dbhandle, $sql);\n} else {\n    echo 'Error opening sqlite db: ' . $sqliteerror;\n    exit;\n}","output":null},{"title":"Example of using the PHP function","source":"$rows = sqlite_array_query($dbhandle, \"SELECT php('md5', filename) from files\");","output":null}],"sqlite_factory":[{"title":"sqlite_factory() example","source":"$dbhandle = sqlite_factory('sqlitedb');\n$dbhandle->query('SELECT user_id, username FROM users');\n\n\/* functionally equivalent to: *\/\n\n$dbhandle = new SQLiteDatabase('sqlitedb');\n$dbhandle->query('SELECT user_id, username FROM users');","output":null}],"sqlite_fetch_all":[{"title":"Procedural example","source":"$dbhandle = sqlite_open('sqlitedb');\n$query = sqlite_query($dbhandle, 'SELECT name, email FROM users LIMIT 25');\n$result = sqlite_fetch_all($query, SQLITE_ASSOC);\nforeach ($result as $entry) {\n    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];\n}","output":null},{"title":"Object-oriented example","source":"$dbhandle = new SQLiteDatabase('sqlitedb');\n\n$query = $dbhandle->query('SELECT name, email FROM users LIMIT 25'); \/\/ buffered result set\n$query = $dbhandle->unbufferedQuery('SELECT name, email FROM users LIMIT 25'); \/\/ unbuffered result set\n\n$result = $query->fetchAll(SQLITE_ASSOC);\nforeach ($result as $entry) {\n    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];\n}","output":null}],"sqlite_fetch_array":[{"title":"Procedural example","source":"$dbhandle = sqlite_open('sqlitedb');\n$query = sqlite_query($dbhandle, 'SELECT name, email FROM users LIMIT 25');\nwhile ($entry = sqlite_fetch_array($query, SQLITE_ASSOC)) {\n    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];\n}","output":null},{"title":"Object-oriented example","source":"$dbhandle = new SQLiteDatabase('sqlitedb');\n\n$query = $dbhandle->query('SELECT name, email FROM users LIMIT 25'); \/\/ buffered result set\n$query = $dbhandle->unbufferedQuery('SELECT name, email FROM users LIMIT 25'); \/\/ unbuffered result set\n\nwhile ($entry = $query->fetch(SQLITE_ASSOC)) {\n    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];\n}","output":null}],"sqlite_fetch_column_types":[{"title":"Procedural example","source":"$db = sqlite_open('mysqlitedb');\nsqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');\n$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);\n\nforeach ($cols as $column => $type) {\n    echo \"Column: $column  Type: $type\\n\";\n}","output":null},{"title":"Object-oriented example","source":"$db = new SQLiteDatabase('mysqlitedb');\n$db->query('CREATE TABLE foo (bar varchar(10), arf text)');\n$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);\n\nforeach ($cols as $column => $type) {\n    echo \"Column: $column  Type: $type\\n\";\n}","output":"Column: bar  Type: VARCHAR\nColumn: arf  Type: TEXT"}],"sqlite_fetch_single":[{"title":"A sqlite_fetch_single() example","source":"if ($dbhandle = sqlite_open('mysqlitedb', 0666, $sqliteerror)) {\n\n    $sql = \"SELECT id FROM sometable WHERE id = 42\";\n    $res = sqlite_query($dbhandle, $sql);\n\n    if (sqlite_num_rows($res) > 0) {\n        echo sqlite_fetch_single($res); \/\/ 42\n    }\n    \n    sqlite_close($dbhandle);\n}","output":null}],"sqlite_num_rows":[{"title":"Procedural example","source":"$db = sqlite_open('mysqlitedb');\n$result = sqlite_query($db, \"SELECT * FROM mytable WHERE name='John Doe'\");\n$rows = sqlite_num_rows($result);\n\necho \"Number of rows: $rows\";","output":null},{"title":"Object-oriented example","source":"$db = new SQLiteDatabase('mysqlitedb');\n$result = $db->query(\"SELECT * FROM mytable WHERE name='John Doe'\");\n$rows = $result->numRows();\n\necho \"Number of rows: $rows\";","output":null}],"sqlite_open":[{"title":"sqlite_open() example","source":"if ($db = sqlite_open('mysqlitedb', 0666, $sqliteerror)) { \n    sqlite_query($db, 'CREATE TABLE foo (bar varchar(10))');\n    sqlite_query($db, \"INSERT INTO foo VALUES ('fnord')\");\n    $result = sqlite_query($db, 'select bar from foo');\n    var_dump(sqlite_fetch_array($result)); \n} else {\n    die($sqliteerror);\n}","output":null}],"sqlite_udf_decode_binary":[{"title":"binary-safe max_length aggregation function example","source":"$data = array(\n   'one',\n   'two',\n   'three',\n   'four',\n   'five',\n   'six',\n   'seven',\n   'eight',\n   'nine',\n   'ten',\n   );\n$db = sqlite_open(':memory:');\nsqlite_query($db, \"CREATE TABLE strings(a)\");\nforeach ($data as $str) {\n    $str = sqlite_escape_string($str);\n    sqlite_query($db, \"INSERT INTO strings VALUES ('$str')\");\n}\n\nfunction max_len_step(&$context, $string) \n{\n    $string = sqlite_udf_decode_binary($string);\n    if (strlen($string) > $context) {\n        $context = strlen($string);\n    }\n}\n\nfunction max_len_finalize(&$context) \n{\n    return $context;\n}\n\nsqlite_create_aggregate($db, 'max_len', 'max_len_step', 'max_len_finalize');\n\nvar_dump(sqlite_array_query($db, 'SELECT max_len(a) from strings'));","output":null}],"sqlsrv_begin_transaction":[{"title":"sqlsrv_begin_transaction() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"userName\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n    die( print_r( sqlsrv_errors(), true ));\n}\n\n\/* Begin the transaction. *\/\nif ( sqlsrv_begin_transaction( $conn ) === false ) {\n     die( print_r( sqlsrv_errors(), true ));\n}\n\n\/* Initialize parameter values. *\/\n$orderId = 1; $qty = 10; $productId = 100;\n\n\/* Set up and execute the first query. *\/\n$sql1 = \"INSERT INTO OrdersTable (ID, Quantity, ProductID)\n          VALUES (?, ?, ?)\";\n$params1 = array( $orderId, $qty, $productId );\n$stmt1 = sqlsrv_query( $conn, $sql1, $params1 );\n\n\/* Set up and execute the second query. *\/\n$sql2 = \"UPDATE InventoryTable \n          SET Quantity = (Quantity - ?) \n          WHERE ProductID = ?\";\n$params2 = array($qty, $productId);\n$stmt2 = sqlsrv_query( $conn, $sql2, $params2 );\n\n\/* If both queries were successful, commit the transaction. *\/\n\/* Otherwise, rollback the transaction. *\/\nif( $stmt1 && $stmt2 ) {\n     sqlsrv_commit( $conn );\n     echo \"Transaction committed.<br \/>\";\n} else {\n     sqlsrv_rollback( $conn );\n     echo \"Transaction rolled back.<br \/>\";\n}","output":null}],"sqlsrv_cancel":[{"title":"sqlsrv_cancel() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT Sales FROM Table_1\";\n\n$stmt = sqlsrv_prepare( $conn, $sql);\n\nif( $stmt === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\nif( sqlsrv_execute( $stmt ) === false) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$salesTotal = 0;\n$count = 0;\n\nwhile( ($row = sqlsrv_fetch_array( $stmt)) && $salesTotal <=100000)\n{\n     $qty = $row[0];\n     $price = $row[1];\n     $salesTotal += ( $price * $qty);\n     $count++;\n}\n\necho \"$count sales accounted for the first $$salesTotal in revenue.<br \/>\";\n\n\/\/ Cancel the pending results. The statement can be reused.\nsqlsrv_cancel( $stmt);","output":null}],"sqlsrv_client_info":[{"title":"sqlsrv_client_info() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connOptions = array(\"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connOptions );\n\nif( $conn === false ) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\nif( $client_info = sqlsrv_client_info( $conn)) {\n    foreach( $client_info as $key => $value) {\n        echo $key.\": \".$value.\"<br \/>\";\n    }\n} else {\n    echo \"Error in retrieving client info.<br \/>\";\n}","output":null}],"sqlsrv_close":[{"title":"sqlsrv_close() example","source":"$serverName = \"serverName\\sqlexpres\";\n$connOptions = array(\"UID\"=>\"username\", \"PWD\"=>\"password\", \"Database\"=>\"dbname\");\n$conn = sqlsrv_connect( $serverName, $connOptions );\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/-------------------------------------\n\/\/ Perform database operations here.\n\/\/-------------------------------------\n\n\/\/ Close the connection.\nsqlsrv_close( $conn );","output":null}],"sqlsrv_commit":[{"title":"sqlsrv_commit() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"userName\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n    die( print_r( sqlsrv_errors(), true ));\n}\n\n\/* Begin the transaction. *\/\nif ( sqlsrv_begin_transaction( $conn ) === false ) {\n     die( print_r( sqlsrv_errors(), true ));\n}\n\n\/* Initialize parameter values. *\/\n$orderId = 1; $qty = 10; $productId = 100;\n\n\/* Set up and execute the first query. *\/\n$sql1 = \"INSERT INTO OrdersTable (ID, Quantity, ProductID)\n         VALUES (?, ?, ?)\";\n$params1 = array( $orderId, $qty, $productId );\n$stmt1 = sqlsrv_query( $conn, $sql1, $params1 );\n\n\/* Set up and execute the second query. *\/\n$sql2 = \"UPDATE InventoryTable \n         SET Quantity = (Quantity - ?) \n         WHERE ProductID = ?\";\n$params2 = array($qty, $productId);\n$stmt2 = sqlsrv_query( $conn, $sql2, $params2 );\n\n\/* If both queries were successful, commit the transaction. *\/\n\/* Otherwise, rollback the transaction. *\/\nif( $stmt1 && $stmt2 ) {\n     sqlsrv_commit( $conn );\n     echo \"Transaction committed.<br \/>\";\n} else {\n     sqlsrv_rollback( $conn );\n     echo \"Transaction rolled back.<br \/>\";\n}","output":null}],"sqlsrv_connect":[{"title":"Connect using Windows Authentication.","source":"$serverName = \"serverName\\sqlexpress\"; \/\/serverName\\instanceName\n\n\/\/ Since UID and PWD are not specified in the $connectionInfo array,\n\/\/ The connection will be attempted using Windows Authentication.\n$connectionInfo = array( \"Database\"=>\"dbName\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\n\nif( $conn ) {\n     echo \"Connection established.<br \/>\";\n}else{\n     echo \"Connection could not be established.<br \/>\";\n     die( print_r( sqlsrv_errors(), true));\n}","output":null},{"title":"Connect by specifying a user name and password.","source":"$serverName = \"serverName\\sqlexpress\"; \/\/serverName\\instanceName\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"userName\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\n\nif( $conn ) {\n     echo \"Connection established.<br \/>\";\n}else{\n     echo \"Connection could not be established.<br \/>\";\n     die( print_r( sqlsrv_errors(), true));\n}","output":null},{"title":"Connect on a specifed port.","source":"$serverName = \"serverName\\sqlexpress, 1542\"; \/\/serverName\\instanceName, portNumber (default is 1433)\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"userName\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\n\nif( $conn ) {\n     echo \"Connection established.<br \/>\";\n}else{\n     echo \"Connection could not be established.<br \/>\";\n     die( print_r( sqlsrv_errors(), true));\n}","output":null}],"sqlsrv_errors":[{"title":"functionname() example","source":"$serverName = \"serverName\/sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/* Set up a query to select an invalid column name. *\/\n$sql = \"SELECT BadColumnName FROM Table_1\";\n\n\/* Execution of the query will fail because of the bad column name. *\/\n$stmt = sqlsrv_query( $conn, $sql );\nif( $stmt === false ) {\n    if( ($errors = sqlsrv_errors() ) != null) {\n        foreach( $errors as $error ) {\n            echo \"SQLSTATE: \".$error[ 'SQLSTATE'].\"<br \/>\";\n            echo \"code: \".$error[ 'code'].\"<br \/>\";\n            echo \"message: \".$error[ 'message'].\"<br \/>\";\n        }\n    }\n}","output":null}],"sqlsrv_execute":[{"title":"sqlsrv_execute() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"UPDATE Table_1\n        SET OrderQty = ?\n        WHERE SalesOrderID = ?\";\n\n\/\/ Initialize parameters and prepare the statement. \n\/\/ Variables $qty and $id are bound to the statement, $stmt.\n$qty = 0; $id = 0;\n$stmt = sqlsrv_prepare( $conn, $sql, array( &$qty, &$id));\nif( !$stmt ) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Set up the SalesOrderDetailID and OrderQty information. \n\/\/ This array maps the order ID to order quantity in key=>value pairs.\n$orders = array( 1=>10, 2=>20, 3=>30);\n\n\/\/ Execute the statement for each order.\nforeach( $orders as $id => $qty) {\n    \/\/ Because $id and $qty are bound to $stmt1, their updated\n    \/\/ values are used with each execution of the statement. \n    if( sqlsrv_execute( $stmt ) === false ) {\n          die( print_r( sqlsrv_errors(), true));\n    }\n}","output":null}],"sqlsrv_fetch_array":[{"title":"Retrieving an associative array.","source":"$serverName = \"serverName\\instanceName\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo );\nif( $conn === false ) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT FirstName, LastName FROM SomeTable\";\n$stmt = sqlsrv_query( $conn, $sql );\nif( $stmt === false) {\n    die( print_r( sqlsrv_errors(), true) );\n}\n\nwhile( $row = sqlsrv_fetch_array( $stmt, SQLSRV_FETCH_ASSOC) ) {\n      echo $row['LastName'].\", \".$row['FirstName'].\"<br \/>\";\n}\n\nsqlsrv_free_stmt( $stmt);","output":null},{"title":"Retrieving a numeric array.","source":"$serverName = \"serverName\\instanceName\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo );\nif( $conn === false ) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT FirstName, LastName FROM SomeTable\";\n$stmt = sqlsrv_query( $conn, $sql );\nif( $stmt === false) {\n    die( print_r( sqlsrv_errors(), true) );\n}\n\nwhile( $row = sqlsrv_fetch_array( $stmt, SQLSRV_FETCH_NUMERIC) ) {\n      echo $row[0].\", \".$row[1].\"<br \/>\";\n}\n\nsqlsrv_free_stmt( $stmt);","output":null}],"sqlsrv_fetch_object":[{"title":"sqlsrv_fetch_object() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT fName, lName FROM Table_1\";\n$stmt = sqlsrv_query( $conn, $sql);\nif( $stmt === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Retrieve each row as an object.\n\/\/ Because no class is specified, each row will be retrieved as a stdClass object.\n\/\/ Property names correspond to field names.\nwhile( $obj = sqlsrv_fetch_object( $stmt)) {\n      echo $obj->fName.\", \".$obj->lName.\"<br \/>\";\n}","output":null}],"sqlsrv_fetch":[{"title":"sqlsrv_fetch() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT Name, Comment \n        FROM Table_1\n        WHERE ReviewID=1\";\n$stmt = sqlsrv_query( $conn, $sql);\nif( $stmt === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Make the first (and in this case, only) row of the result set available for reading.\nif( sqlsrv_fetch( $stmt ) === false) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Get the row fields. Field indeces start at 0 and must be retrieved in order.\n\/\/ Retrieving row fields by name is not supported by sqlsrv_get_field.\n$name = sqlsrv_get_field( $stmt, 0);\necho \"$name: \";\n\n$comment = sqlsrv_get_field( $stmt, 1);\necho $comment;","output":null}],"sqlsrv_field_metadata":[{"title":"sqlsrv_field_metadata() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"AdventureWorks\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n   die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT * FROM Table_1\";\n$stmt = sqlsrv_prepare( $conn, $sql );\n\nforeach( sqlsrv_field_metadata( $stmt ) as $fieldMetadata ) {\n    foreach( $fieldMetadata as $name => $value) {\n       echo \"$name: $value<br \/>\";\n    }\n      echo \"<br \/>\";\n}","output":null}],"sqlsrv_free_stmt":[{"title":"sqlsrv_free_stmt() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$stmt = sqlsrv_query( $conn, \"SELECT * FROM Table_1\");\nif( $stmt === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/*-------------------------------\n     Process query results here.\n-------------------------------*\/\n\n\/* Free the statement resources. *\/\nsqlsrv_free_stmt( $stmt);","output":null}],"sqlsrv_get_field":[{"title":"sqlsrv_get_field() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT Name, Comment \n        FROM Table_1\n        WHERE ReviewID=1\";\n$stmt = sqlsrv_query( $conn, $sql);\nif( $stmt === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Make the first (and in this case, only) row of the result set available for reading.\nif( sqlsrv_fetch( $stmt ) === false) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Get the row fields. Field indeces start at 0 and must be retrieved in order.\n\/\/ Retrieving row fields by name is not supported by sqlsrv_get_field.\n$name = sqlsrv_get_field( $stmt, 0);\necho \"$name: \";\n\n$comment = sqlsrv_get_field( $stmt, 1);\necho $comment;","output":null}],"sqlsrv_has_rows":[{"title":"sqlsrv_has_rows() example","source":"$server = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\" )\n$conn = sqlsrv_connect( $server, $connectionInfo );\n\n$stmt = sqlsrv_query( $conn, \"SELECT * FROM Table_1\");\n\nif ($stmt) {\n   $rows = sqlsrv_has_rows( $stmt );\n   if ($rows === true)\n      echo \"There are rows. <br \/>\";\n   else \n      echo \"There are no rows. <br \/>\";\n}","output":null}],"sqlsrv_next_result":[{"title":"sqlsrv_next_result() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array(\"Database\"=>\"dbName\", \"UID\"=>\"userName\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\n\n$query = \"INSERT INTO Table_1 (id, data) VALUES (?,?); SELECT * FROM TABLE_1;\";\n$params = array(1, \"some data\");\n$stmt = sqlsrv_query($conn, $query, $params);\n\n\/\/ Consume the first result (rows affected by INSERT) without calling sqlsrv_next_result.\necho \"Rows affected: \".sqlsrv_rows_affected($stmt).\"<br \/>\";\n\n\/\/ Move to the next result and display results.\n$next_result = sqlsrv_next_result($stmt);\nif( $next_result ) {\n   while( $row = sqlsrv_fetch_array( $stmt, SQLSRV_FETCH_ASSOC)){\n      echo $row['id'].\": \".$row['data'].\"<br \/>\"; \n   }\n} elseif( is_null($next_result)) {\n     echo \"No more results.<br \/>\";\n} else {\n     die(print_r(sqlsrv_errors(), true));\n}","output":null}],"sqlsrv_num_fields":[{"title":"sqlsrv_num_fields() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n   die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"SELECT * FROM Table_1\";\n$stmt = sqlsrv_query($conn, $sql);\nif( $stmt === false) {\n   die( print_r( sqlsrv_errors(), true));\n}\n\n$numFields = sqlsrv_num_fields( $stmt );\n\nwhile( sqlsrv_fetch( $stmt )) {\n   \/\/ Iterate through the fields of each row.\n   for($i = 0; $i < $numFields; $i++) { \n      echo sqlsrv_get_field($stmt, $i).\" \";\n   }\n   echo \"<br \/>\";\n}","output":null}],"sqlsrv_num_rows":[{"title":"sqlsrv_num_rows() example","source":"$server = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\" );\n$conn = sqlsrv_connect( $server, $connectionInfo );\n\n$sql = \"SELECT * FROM Table_1\";\n$params = array();\n$options =  array( \"Scrollable\" => SQLSRV_CURSOR_KEYSET );\n$stmt = sqlsrv_query( $conn, $sql , $params, $options );\n\n$row_count = sqlsrv_num_rows( $stmt );\n   \nif ($row_count === false)\n   echo \"Error in retrieveing row count.\";\nelse\n   echo $row_count;","output":null}],"sqlsrv_prepare":[{"title":"sqlsrv_prepare() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"UPDATE Table_1\n        SET OrderQty = ?\n        WHERE SalesOrderID = ?\";\n\n\/\/ Initialize parameters and prepare the statement. \n\/\/ Variables $qty and $id are bound to the statement, $stmt.\n$qty = 0; $id = 0;\n$stmt = sqlsrv_prepare( $conn, $sql, array( &$qty, &$id));\nif( !$stmt ) {\n    die( print_r( sqlsrv_errors(), true));\n}\n\n\/\/ Set up the SalesOrderDetailID and OrderQty information. \n\/\/ This array maps the order ID to order quantity in key=>value pairs.\n$orders = array( 1=>10, 2=>20, 3=>30);\n\n\/\/ Execute the statement for each order.\nforeach( $orders as $id => $qty) {\n    \/\/ Because $id and $qty are bound to $stmt1, their updated\n    \/\/ values are used with each execution of the statement. \n    if( sqlsrv_execute( $stmt ) === false ) {\n          die( print_r( sqlsrv_errors(), true));\n    }\n}","output":null}],"sqlsrv_query":[{"title":"sqlsrv_query() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\" );\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"INSERT INTO Table_1 (id, data) VALUES (?, ?)\";\n$params = array(1, \"some data\");\n\n$stmt = sqlsrv_query( $conn, $sql, $params);\nif( $stmt === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}","output":null}],"sqlsrv_rollback":[{"title":"sqlsrv_rollback() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"userName\", \"PWD\"=>\"password\");\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n    die( print_r( sqlsrv_errors(), true ));\n}\n\n\/* Begin the transaction. *\/\nif ( sqlsrv_begin_transaction( $conn ) === false ) {\n     die( print_r( sqlsrv_errors(), true ));\n}\n\n\/* Initialize parameter values. *\/\n$orderId = 1; $qty = 10; $productId = 100;\n\n\/* Set up and execute the first query. *\/\n$sql1 = \"INSERT INTO OrdersTable (ID, Quantity, ProductID)\n         VALUES (?, ?, ?)\";\n$params1 = array( $orderId, $qty, $productId );\n$stmt1 = sqlsrv_query( $conn, $sql1, $params1 );\n\n\/* Set up and execute the second query. *\/\n$sql2 = \"UPDATE InventoryTable \n         SET Quantity = (Quantity - ?) \n         WHERE ProductID = ?\";\n$params2 = array($qty, $productId);\n$stmt2 = sqlsrv_query( $conn, $sql2, $params2 );\n\n\/* If both queries were successful, commit the transaction. *\/\n\/* Otherwise, rollback the transaction. *\/\nif( $stmt1 && $stmt2 ) {\n     sqlsrv_commit( $conn );\n     echo \"Transaction committed.<br \/>\";\n} else {\n     sqlsrv_rollback( $conn );\n     echo \"Transaction rolled back.<br \/>\";\n}","output":null}],"sqlsrv_rows_affected":[{"title":"sqlsrv_rows_affected() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\" );\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"UPDATE Table_1 SET data = ? WHERE id = ?\";\n\n$params = array(\"updated data\", 1);\n\n$stmt = sqlsrv_query( $conn, $sql, $params);\n\n$rows_affected = sqlsrv_rows_affected( $stmt);\nif( $rows_affected === false) {\n     die( print_r( sqlsrv_errors(), true));\n} elseif( $rows_affected == -1) {\n      echo \"No information available.<br \/>\";\n} else {\n      echo $rows_affected.\" rows were updated.<br \/>\";\n}","output":null}],"sqlsrv_send_stream_data":[{"title":"sqlsrv_send_stream_data() example","source":"$serverName = \"serverName\\sqlexpress\";\n$connectionInfo = array( \"Database\"=>\"dbName\", \"UID\"=>\"username\", \"PWD\"=>\"password\" );\n$conn = sqlsrv_connect( $serverName, $connectionInfo);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$sql = \"UPDATE Table_1 SET data = ( ?) WHERE id = 100\";\n\n\/\/ Open parameter data as a stream and put it in the $params array.\n$data = fopen( \"data:\/\/text\/plain,[ Lengthy content here. ]\", \"r\");\n$params = array( &$data);\n\n\/\/ Prepare the statement. Use the $options array to turn off the\n\/\/ default behavior, which is to send all stream data at the time of query\n\/\/ execution.\n$options = array(\"SendStreamParamsAtExec\"=>0);\n$stmt = sqlsrv_prepare( $conn, $sql, $params, $options);\n\nsqlsrv_execute( $stmt);\n\n\/\/ Send up to 8K of parameter data to the server \n\/\/ with each call to sqlsrv_send_stream_data.\n$i = 1;\nwhile( sqlsrv_send_stream_data( $stmt)) {\n      $i++;\n}\necho \"$i calls were made.\";","output":null}],"sqlsrv_server_info":[{"title":"sqlsrv_server_info() example","source":"$serverName = \"serverName\\sqlexpress\";\n$conn = sqlsrv_connect( $serverName);\nif( $conn === false ) {\n     die( print_r( sqlsrv_errors(), true));\n}\n\n$server_info = sqlsrv_server_info( $conn);\nif( $server_info )\n{\n    foreach( $server_info as $key => $value) {\n       echo $key.\": \".$value.\"<br \/>\";\n    }\n} else {\n      die( print_r( sqlsrv_errors(), true));\n}","output":null}],"sqrt":[{"title":"sqrt() example","source":"\/\/ Precision depends on your precision directive\necho sqrt(9); \/\/ 3\necho sqrt(10); \/\/ 3.16227766 ...","output":null}],"srand":[{"title":"srand() example","source":"\/\/ seed with microseconds\nfunction make_seed()\n{\n  list($usec, $sec) = explode(' ', microtime());\n  return $sec + $usec * 1000000;\n}\nsrand(make_seed());\n$randval = rand();","output":null}],"sscanf":[{"title":"sscanf() Example","source":"\/\/ getting the serial number\nlist($serial) = sscanf(\"SN\/2350001\", \"SN\/%d\");\n\/\/ and the date of manufacturing\n$mandate = \"January 01 2000\";\nlist($month, $day, $year) = sscanf($mandate, \"%s %d %d\");\necho \"Item $serial was manufactured on: $year-\" . substr($month, 0, 3) . \"-$day\\n\";","output":null},{"title":"sscanf() - using optional parameters","source":"\/\/ get author info and generate DocBook entry\n$auth = \"24\\tLewis Carroll\";\n$n = sscanf($auth, \"%d\\t%s %s\", $id, $first, $last);\necho \"<author id='$id'>\n    <firstname>$first<\/firstname>\n    <surname>$last<\/surname>\n<\/author>\\n\";","output":null}],"ssh2_auth_agent":[{"title":"Authenticating with a ssh agent","source":"$connection = ssh2_connect('shell.example.com', 22);\n\nif (ssh2_auth_agent($connection, 'username')) {\n  echo \"Authentication Successful!\\n\";\n} else {\n  die('Authentication Failed...');\n}","output":null}],"ssh2_auth_hostbased_file":[{"title":"Authentication using a public hostkey","source":"$connection = ssh2_connect('shell.example.com', 22, array('hostkey'=>'ssh-rsa'));\n\nif (ssh2_auth_hostbased_file($connection, 'remoteusername', 'myhost.example.com',\n                             '\/usr\/local\/etc\/hostkey_rsa.pub',\n                             '\/usr\/local\/etc\/hostkey_rsa', 'secret',\n                             'localusername')) {\n  echo \"Public Key Hostbased Authentication Successful\\n\";\n} else {\n  die('Public Key Hostbased Authentication Failed');\n}","output":null}],"ssh2_auth_none":[{"title":"Retrieving a list of authentication methods","source":"$connection = ssh2_connect('shell.example.com', 22);\n\n$auth_methods = ssh2_auth_none($connection, 'user');\n\nif (in_array('password', $auth_methods)) {\n  echo \"Server supports password based authentication\\n\";\n}","output":null}],"ssh2_auth_password":[{"title":"Authenticating with a password","source":"$connection = ssh2_connect('shell.example.com', 22);\n\nif (ssh2_auth_password($connection, 'username', 'secret')) {\n  echo \"Authentication Successful!\\n\";\n} else {\n  die('Authentication Failed...');\n}","output":null}],"ssh2_auth_pubkey_file":[{"title":"Authentication using a public key","source":"$connection = ssh2_connect('shell.example.com', 22, array('hostkey'=>'ssh-rsa'));\n\nif (ssh2_auth_pubkey_file($connection, 'username',\n                          '\/home\/username\/.ssh\/id_rsa.pub',\n                          '\/home\/username\/.ssh\/id_rsa', 'secret')) {\n  echo \"Public Key Authentication Successful\\n\";\n} else {\n  die('Public Key Authentication Failed');\n}","output":null}],"ssh2_connect":[{"title":"ssh2_connect() example","source":"\/* Notify the user if the server terminates the connection *\/\nfunction my_ssh_disconnect($reason, $message, $language) {\n  printf(\"Server disconnected with reason code [%d] and message: %s\\n\",\n         $reason, $message);\n}\n\n$methods = array(\n  'kex' => 'diffie-hellman-group1-sha1',\n  'client_to_server' => array(\n    'crypt' => '3des-cbc',\n    'comp' => 'none'),\n  'server_to_client' => array(\n    'crypt' => 'aes256-cbc,aes192-cbc,aes128-cbc',\n    'comp' => 'none'));\n\n$callbacks = array('disconnect' => 'my_ssh_disconnect');\n\n$connection = ssh2_connect('shell.example.com', 22, $methods, $callbacks);\nif (!$connection) die('Connection failed');","output":null}],"ssh2_exec":[{"title":"Executing a command","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\n$stream = ssh2_exec($connection, '\/usr\/local\/bin\/php -i');","output":null}],"ssh2_fetch_stream":[{"title":"Opening a shell and retrieving the stderr stream associated with it","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\n$stdio_stream = ssh2_shell($connection);\n$stderr_stream = ssh2_fetch_stream($stdio_stream, SSH2_STREAM_STDERR);","output":null}],"ssh2_fingerprint":[{"title":"Checking the fingerprint against a known value","source":"$known_host = '6F89C2F0A719B30CC38ABDF90755F2E4';\n\n$connection = ssh2_connect('shell.example.com', 22);\n\n$fingerprint = ssh2_fingerprint($connection,\n               SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX);\n\nif ($fingerprint != $known_host) {\n  die(\"HOSTKEY MISMATCH!\\n\" .\n      \"Possible Man-In-The-Middle Attack?\");\n}","output":null}],"ssh2_methods_negotiated":[{"title":"Determining what methods were negotiated","source":"$connection = ssh2_connect('shell.example.com', 22);\n$methods = ssh2_methods_negotiated($connection);\n\necho \"Encryption keys were negotiated using: {$methods['kex']}\\n\";\necho \"Server identified using an {$methods['hostkey']} with \";\necho \"fingerprint: \" . ssh2_fingerprint($connection) . \"\\n\";\n\necho \"Client to Server packets will use methods:\\n\";\necho \"\\tCrypt: {$methods['client_to_server']['crypt']}\\n\";\necho \"\\tComp: {$methods['client_to_server']['comp']}\\n\";\necho \"\\tMAC: {$methods['client_to_server']['mac']}\\n\";\n\necho \"Server to Client packets will use methods:\\n\";\necho \"\\tCrypt: {$methods['server_to_client']['crypt']}\\n\";\necho \"\\tComp: {$methods['server_to_client']['comp']}\\n\";\necho \"\\tMAC: {$methods['server_to_client']['mac']}\\n\";","output":null}],"ssh2_publickey_add":[{"title":"Adding a publickey with ssh2_publickey_add()","source":"$ssh2 = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($ssh2, 'jdoe', 'password');\n$pkey = ssh2_publickey_init($ssh2);\n\n$keyblob = base64_decode('\nAAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5PTrLRdjNONxXH1tVFGn0\nBd26BF0aCP9qyJRlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xj\nzaLpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VEHYckxQ16CjSTibI5X\n69GmnYC9PNqEYq\/1TP+HF10=');\n\nssh2_publickey_add($pkey, 'ssh-rsa', $keyblob, false, array('comment'=>\"John's Key\"));","output":null}],"ssh2_publickey_list":[{"title":"Listing authorized keys with ssh2_publickey_list()","source":"$ssh2 = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($ssh2, 'jdoe', 'secret');\n$pkey = ssh2_publickey_init($ssh2);\n\n$list = ssh2_publickey_list($pkey);\n\nforeach($list as $key) {\n  echo \"Key: {$key['name']}\\n\";\n  echo \"Blob: \" . chunk_split(base64_encode($key['blob']), 40, \"\\n\") . \"\\n\";\n  echo \"Comment: {$key['attrs']['comment']}\\n\\n\";\n}","output":"Key: ssh-rsa\nBlob: AAAAB3NzaC1yc2EAAAABIwAAAIEA5HVt6VqSGd5P\nTrLRdjNONxXH1tVFGn0Bd26BF0aCP9qyJRlvdJ3j\n4WBeX4ZmrveGrjMgkseSYc4xZ26sDHwfL351xjza\nLpipu\\BGRrw17mWVBhuCExo476ri5tQFzbTc54VE\nHYckxQ16CjSTibI5X69GmnYC9PNqEYq\/1TP+HF10\nComment: John's Key\n\nKey: ssh-rsa\nBlob: AAAAB3NzaHVt6VqSGd5C1yc2EAAAABIwA232dnJA\nAIEA5HVt6VqSGd5PTrLRdjNONxX\/1TP+HF1HVt6V\nqSGd50H1tVFGn0BB3NzaC1yc2EAd26BF0aCP9qyJ\nRlvdJ3j4WBeX4ZmrveGrjMgkseSYc4xZ26HVt6Vq\nSGd5sDHwfL351xjzaLpipu\\BGB3NzaC1yc2EA\/1T\nComment: Alice's Key"}],"ssh2_scp_recv":[{"title":"Downloading a file via SCP","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\nssh2_scp_recv($connection, '\/remote\/filename', '\/local\/filename');","output":null}],"ssh2_scp_send":[{"title":"Uploading a file via SCP","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\nssh2_scp_send($connection, '\/local\/filename', '\/remote\/filename', 0644);","output":null}],"ssh2_sftp_chmod":[{"title":"Changing the mode of a file on a remote server","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\nssh2_sftp_chmod($sftp, '\/somedir\/somefile', 0755);","output":null}],"ssh2_sftp_lstat":[{"title":"Stating a symbolic link via SFTP","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\n$sftp = ssh2_sftp($connection);\n$statinfo = ssh2_sftp_lstat($sftp, '\/path\/to\/symlink');\n\n$filesize = $statinfo['size'];\n$group = $statinfo['gid'];\n$owner = $statinfo['uid'];\n$atime = $statinfo['atime'];\n$mtime = $statinfo['mtime'];\n$mode = $statinfo['mode'];","output":null}],"ssh2_sftp_mkdir":[{"title":"Creating a directory on a remote server","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\nssh2_sftp_mkdir($sftp, '\/home\/username\/newdir');\n\/* Or:  mkdir(\"ssh2.sftp:\/\/$sftp\/home\/username\/newdir\"); *\/","output":null}],"ssh2_sftp_readlink":[{"title":"Reading a symbolic link","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\n$target = ssh2_sftp_readlink($sftp, '\/tmp\/mysql.sock');\n\/* $target is now (e.g.): '\/var\/run\/mysql.sock' *\/","output":null}],"ssh2_sftp_realpath":[{"title":"Resolving a pathname","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\n$realpath = ssh2_sftp_realpath($sftp, '\/home\/username\/..\/..\/..\/..\/\/.\/usr\/..\/etc\/passwd');\n\/* $realpath is now: '\/etc\/passwd' *\/","output":null}],"ssh2_sftp_rename":[{"title":"Renaming a file via sftp","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\nssh2_sftp_rename($sftp, '\/home\/username\/oldname', '\/home\/username\/newname');","output":null}],"ssh2_sftp_rmdir":[{"title":"Removing a directory on a remote server","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\nssh2_sftp_rmdir($sftp, '\/home\/username\/deltodel');\n\/* Or:  rmdir(\"ssh2.sftp:\/\/$sftp\/home\/username\/dirtodel\"); *\/","output":null}],"ssh2_sftp_stat":[{"title":"Stating a file via SFTP","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\n$sftp = ssh2_sftp($connection);\n$statinfo = ssh2_sftp_stat($sftp, '\/path\/to\/file');\n\n$filesize = $statinfo['size'];\n$group = $statinfo['gid'];\n$owner = $statinfo['uid'];\n$atime = $statinfo['atime'];\n$mtime = $statinfo['mtime'];\n$mode = $statinfo['mode'];","output":null}],"ssh2_sftp_symlink":[{"title":"Creating a symbolic link","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\nssh2_sftp_symlink($sftp, '\/var\/run\/mysql.sock', '\/tmp\/mysql.sock');","output":null}],"ssh2_sftp_unlink":[{"title":"Deleting a file","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n$sftp = ssh2_sftp($connection);\n\nssh2_sftp_unlink($sftp, '\/home\/username\/stale_file');","output":null}],"ssh2_sftp":[{"title":"Opening a file via SFTP","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\n$sftp = ssh2_sftp($connection);\n\n$stream = fopen(\"ssh2.sftp:\/\/$sftp\/path\/to\/file\", 'r');","output":null}],"ssh2_shell":[{"title":"Requesting an interactive shell","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_password($connection, 'username', 'password');\n\n$stream = ssh2_shell($connection, 'vt102', null, 80, 24, SSH2_TERM_UNIT_CHARS);","output":null}],"ssh2_tunnel":[{"title":"Opening a tunnel to an arbitrary host","source":"$connection = ssh2_connect('shell.example.com', 22);\nssh2_auth_pubkey_file($connection, 'username', 'id_dsa.pub', 'id_dsa');\n\n$tunnel = ssh2_tunnel($connection, '10.0.0.101', 12345);","output":null}],"stat":[{"title":"stat() example","source":"\/* Get file stat *\/\n$stat = stat('C:\\php\\php.exe');\n\n\/*\n * Print file access time, this is the same \n * as calling fileatime()\n *\/\necho 'Access time: ' . $stat['atime'];\n\n\/*\n * Print file modification time, this is the \n * same as calling filemtime()\n *\/\necho 'Modification time: ' . $stat['mtime'];\n\n\/* Print the device number *\/\necho 'Device number: ' . $stat['dev'];","output":null},{"title":"Using stat() information together with touch()","source":"\/* Get file stat *\/\n$stat = stat('C:\\php\\php.exe');\n\n\/* Did we failed to get stat information? *\/\nif (!$stat) {\n    echo 'stat() call failed...';\n} else {\n    \/*\n     * We want the access time to be 1 week \n     * after the current access time.\n     *\/\n    $atime = $stat['atime'] + 604800;\n\n    \/* Touch the file *\/\n    if (!touch('some_file.txt', time(), $atime)) {\n        echo 'Failed to touch file...';\n    } else {\n        echo 'touch() returned success...';\n    }\n}","output":null}],"stomp_connect_error":[{"title":"stomp_connect_error() example","source":"$link = stomp_connect('http:\/\/localhost:61613');\n\nif(!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}","output":"Connection failed: Invalid Broker URI scheme"}],"stomp_version":[{"title":"stomp_version() example","source":"var_dump(stomp_version());","output":"string(5) \"0.2.0\""}],"str_ireplace":[{"title":"str_ireplace() example","source":"$bodytag = str_ireplace(\"%body%\", \"black\", \"<body text=%BODY%>\");\necho $bodytag; \/\/ <body text=black>","output":null}],"str_pad":[{"title":"str_pad() example","source":"$input = \"Alien\";\necho str_pad($input, 10);                      \/\/ produces \"Alien     \"\necho str_pad($input, 10, \"-=\", STR_PAD_LEFT);  \/\/ produces \"-=-=-Alien\"\necho str_pad($input, 10, \"_\", STR_PAD_BOTH);   \/\/ produces \"__Alien___\"\necho str_pad($input,  6, \"___\");               \/\/ produces \"Alien_\"\necho str_pad($input,  3, \"*\");                 \/\/ produces \"Alien\"","output":null}],"str_repeat":[{"title":"str_repeat() example","source":"echo str_repeat(\"-=\", 10);","output":"-=-=-=-=-=-=-=-=-=-="}],"str_replace":[{"title":"Basic str_replace() examples","source":"\/\/ Provides: <body text='black'>\n$bodytag = str_replace(\"%body%\", \"black\", \"<body text='%body%'>\");\n\n\/\/ Provides: Hll Wrld f PHP\n$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n$onlyconsonants = str_replace($vowels, \"\", \"Hello World of PHP\");\n\n\/\/ Provides: You should eat pizza, beer, and ice cream every day\n$phrase  = \"You should eat fruits, vegetables, and fiber every day.\";\n$healthy = array(\"fruits\", \"vegetables\", \"fiber\");\n$yummy   = array(\"pizza\", \"beer\", \"ice cream\");\n\n$newphrase = str_replace($healthy, $yummy, $phrase);\n\n\/\/ Provides: 2\n$str = str_replace(\"ll\", \"\", \"good golly miss molly!\", $count);\necho $count;","output":null},{"title":"Examples of potential str_replace() gotchas","source":"\/\/ Order of replacement\n$str     = \"Line 1\\nLine 2\\rLine 3\\r\\nLine 4\\n\";\n$order   = array(\"\\r\\n\", \"\\n\", \"\\r\");\n$replace = '<br \/>';\n\n\/\/ Processes \\r\\n's first so they aren't converted twice.\n$newstr = str_replace($order, $replace, $str);\n\n\/\/ Outputs F because A is replaced with B, then B is replaced with C, and so on...\n\/\/ Finally E is replaced with F, because of left to right replacements.\n$search  = array('A', 'B', 'C', 'D', 'E');\n$replace = array('B', 'C', 'D', 'E', 'F');\n$subject = 'A';\necho str_replace($search, $replace, $subject);\n\n\/\/ Outputs: apearpearle pear\n\/\/ For the same reason mentioned above\n$letters = array('a', 'p');\n$fruit   = array('apple', 'pear');\n$text    = 'a p';\n$output  = str_replace($letters, $fruit, $text);\necho $output;","output":null}],"str_rot13":[{"title":"str_rot13() example","source":"echo str_rot13('PHP 4.3.0'); \/\/ CUC 4.3.0","output":null}],"str_shuffle":[{"title":"str_shuffle() example","source":"$str = 'abcdef';\n$shuffled = str_shuffle($str);\n\n\/\/ This will echo something like: bfdaec\necho $shuffled;","output":null}],"str_split":[{"title":"Example uses of str_split()","source":"$str = \"Hello Friend\";\n\n$arr1 = str_split($str);\n$arr2 = str_split($str, 3);\n\nprint_r($arr1);\nprint_r($arr2);","output":"Array\n(\n    [0] => H\n    [1] => e\n    [2] => l\n    [3] => l\n    [4] => o\n    [5] =>\n    [6] => F\n    [7] => r\n    [8] => i\n    [9] => e\n    [10] => n\n    [11] => d\n)\n\nArray\n(\n    [0] => Hel\n    [1] => lo\n    [2] => Fri\n    [3] => end\n)"}],"str_word_count":[{"title":"A str_word_count() example","source":"$str = \"Hello fri3nd, you're\n       looking          good today!\";\n\nprint_r(str_word_count($str, 1));\nprint_r(str_word_count($str, 2));\nprint_r(str_word_count($str, 1, 'àáãç3'));\n\necho str_word_count($str);","output":"Array\n(\n    [0] => Hello\n    [1] => fri\n    [2] => nd\n    [3] => you're\n    [4] => looking\n    [5] => good\n    [6] => today\n)\n\nArray\n(\n    [0] => Hello\n    [6] => fri\n    [10] => nd\n    [14] => you're\n    [29] => looking\n    [46] => good\n    [51] => today\n)\n\nArray\n(\n    [0] => Hello\n    [1] => fri3nd\n    [2] => you're\n    [3] => looking\n    [4] => good\n    [5] => today\n)\n\n7"}],"strcasecmp":[{"title":"strcasecmp() example","source":"$var1 = \"Hello\";\n$var2 = \"hello\";\nif (strcasecmp($var1, $var2) == 0) {\n    echo '$var1 is equal to $var2 in a case-insensitive string comparison';\n}","output":null}],"strcmp":[{"title":"strcmp() example","source":"$var1 = \"Hello\";\n$var2 = \"hello\";\nif (strcmp($var1, $var2) !== 0) {\n    echo '$var1 is not equal to $var2 in a case sensitive string comparison';\n}","output":null}],"strcspn":[{"title":"strcspn() example","source":"$a = strcspn('abcd',  'apple');\n$b = strcspn('abcd',  'banana');\n$c = strcspn('hello', 'l');\n$d = strcspn('hello', 'world');\n$e = strcspn('abcdhelloabcd', 'abcd', -9);\n$f = strcspn('abcdhelloabcd', 'abcd', -9, -5);\n\nvar_dump($a);\nvar_dump($b);\nvar_dump($c);\nvar_dump($d);\nvar_dump($e);\nvar_dump($f);","output":"int(0)\nint(0)\nint(2)\nint(2)\nint(5)\nint(4)"}],"stream_bucket_prepend":[{"title":"stream_bucket_prepend() examples","source":"class foo extends php_user_filter {\n  protected $calls = 0;\n  public function filter($in, $out, &$consumed, $closing) {\n    while ($bucket = stream_bucket_make_writeable($in)) {\n      $consumed += $bucket->datalen;\n      if ($this->calls++ == 2) {\n        \/\/ This bucket will appear again before any other bucket.\n        stream_bucket_prepend($in, $bucket);\n      }\n    }\n    return PSFS_FEED_ME;\n  }\n}\nstream_filter_register('test', 'foo');\nprint  file_get_contents('php:\/\/filter\/read=test\/resource=foo');","output":null}],"stream_context_create":[{"title":"Using stream_context_create()","source":"$opts = array(\n  'http'=>array(\n    'method'=>\"GET\",\n    'header'=>\"Accept-language: en\\r\\n\" .\n              \"Cookie: foo=bar\\r\\n\"\n  )\n);\n\n$context = stream_context_create($opts);\n\n\/* Sends an http request to www.example.com\n   with additional headers shown above *\/\n$fp = fopen('http:\/\/www.example.com', 'r', false, $context);\nfpassthru($fp);\nfclose($fp);","output":null}],"stream_context_get_default":[{"title":"Using stream_context_get_default()","source":"$default_opts = array(\n  'http'=>array(\n    'method'=>\"GET\",\n    'header'=>\"Accept-language: en\\r\\n\" .\n              \"Cookie: foo=bar\",\n    'proxy'=>\"tcp:\/\/10.54.1.39:8000\"\n  )\n);\n\n\n$alternate_opts = array(\n  'http'=>array(\n    'method'=>\"POST\",\n    'header'=>\"Content-type: application\/x-www-form-urlencoded\\r\\n\" .\n              \"Content-length: \" . strlen(\"baz=bomb\"),\n    'content'=>\"baz=bomb\"\n  )\n);\n\n$default = stream_context_get_default($default_opts);\n$alternate = stream_context_create($alternate_opts);\n\n\/* Sends a regular GET request to proxy server at 10.54.1.39\n * For www.example.com using context options specified in $default_opts\n *\/\nreadfile('http:\/\/www.example.com');\n\n\/* Sends a POST request directly to www.example.com\n * Using context options specified in $alternate_opts\n *\/\nreadfile('http:\/\/www.example.com', false, $alternate);","output":null}],"stream_context_get_options":[{"title":"stream_context_get_options() example","source":"$params = array(\"method\" => \"POST\");\n\nstream_context_set_default(array(\"http\" => $params));\n\nvar_dump(stream_context_get_options(stream_context_get_default()));","output":"array(1) {\n  [\"http\"]=>\n  array(1) {\n    [\"method\"]=>\n    string(4) \"POST\"\n  }\n}"}],"stream_context_get_params":[{"title":"stream_context_get_params() example","source":"$ctx = stream_context_create();\n$params = array(\"notification\" => \"stream_notification_callback\");\nstream_context_set_params($ctx, $params);\n\nvar_dump(stream_context_get_params($ctx));","output":"array(2) {\n  [\"notification\"]=>\n  string(28) \"stream_notification_callback\"\n  [\"options\"]=>\n  array(0) {\n  }\n}"}],"stream_context_set_default":[{"title":"stream_context_set_default() example","source":"$default_opts = array(\n  'http'=>array(\n    'method'=>\"GET\",\n    'header'=>\"Accept-language: en\\r\\n\" .\n              \"Cookie: foo=bar\",\n    'proxy'=>\"tcp:\/\/10.54.1.39:8000\"\n  )\n);\n\n$default = stream_context_set_default($default_opts);\n\n\/* Sends a regular GET request to proxy server at 10.54.1.39\n * For www.example.com using context options specified in $default_opts\n *\/\nreadfile('http:\/\/www.example.com');","output":null}],"stream_copy_to_stream":[{"title":"A stream_copy_to_stream() example","source":"$src = fopen('http:\/\/www.example.com', 'r');\n$dest1 = fopen('first1k.txt', 'w');\n$dest2 = fopen('remainder.txt', 'w');\n\necho stream_copy_to_stream($src, $dest1, 1024) . \" bytes copied to first1k.txt\\n\";\necho stream_copy_to_stream($src, $dest2) . \" bytes copied to remainder.txt\\n\";","output":null}],"stream_filter_append":[{"title":"Controlling where filters are applied","source":"\/* Open a test file for reading and writing *\/\n$fp = fopen('test.txt', 'w+');\n\n\/* Apply the ROT13 filter to the\n * write filter chain, but not the\n * read filter chain *\/\nstream_filter_append($fp, \"string.rot13\", STREAM_FILTER_WRITE);\n\n\/* Write a simple string to the file\n * it will be ROT13 transformed on the\n * way out *\/\nfwrite($fp, \"This is a test\\n\");\n\n\/* Back up to the beginning of the file *\/\nrewind($fp);\n\n\/* Read the contents of the file back out.\n * Had the filter been applied to the\n * read filter chain as well, we would see\n * the text ROT13ed back to its original state *\/\nfpassthru($fp);\n\nfclose($fp);\n\n\/* Expected Output\n   ---------------\n\nGuvf vf n grfg\n\n *\/","output":null}],"stream_filter_register":[{"title":"Filter for capitalizing characters on foo-bar.txt stream","source":"\/* Define our filter class *\/\nclass strtoupper_filter extends php_user_filter {\n  function filter($in, $out, &$consumed, $closing)\n  {\n    while ($bucket = stream_bucket_make_writeable($in)) {\n      $bucket->data = strtoupper($bucket->data);\n      $consumed += $bucket->datalen;\n      stream_bucket_append($out, $bucket);\n    }\n    return PSFS_PASS_ON;\n  }\n}\n\n\/* Register our filter with PHP *\/\nstream_filter_register(\"strtoupper\", \"strtoupper_filter\")\n    or die(\"Failed to register filter\");\n\n$fp = fopen(\"foo-bar.txt\", \"w\");\n\n\/* Attach the registered filter to the stream just opened *\/\nstream_filter_append($fp, \"strtoupper\");\n\nfwrite($fp, \"Line1\\n\");\nfwrite($fp, \"Word - 2\\n\");\nfwrite($fp, \"Easy As 123\\n\");\n\nfclose($fp);\n\n\/* Read the contents back out\n *\/\nreadfile(\"foo-bar.txt\");","output":"LINE1\nWORD - 2\nEASY AS 123"},{"title":"Registering a generic filter class to match multiple filter names.","source":"\/* Define our filter class *\/\nclass string_filter extends php_user_filter {\n  var $mode;\n\n  function filter($in, $out, &$consumed, $closing)\n  {\n    while ($bucket = stream_bucket_make_writeable($in)) {\n      if ($this->mode == 1) {\n        $bucket->data = strtoupper($bucket->data);\n      } elseif ($this->mode == 0) {\n        $bucket->data = strtolower($bucket->data);\n      }\n\n      $consumed += $bucket->datalen;\n      stream_bucket_append($out, $bucket);\n    }\n    return PSFS_PASS_ON;\n  }\n\n  function onCreate()\n  {\n    if ($this->filtername == 'str.toupper') {\n      $this->mode = 1;\n    } elseif ($this->filtername == 'str.tolower') {\n      $this->mode = 0;\n    } else {\n      \/* Some other str.* filter was asked for,\n         report failure so that PHP will keep looking *\/\n      return false;\n    }\n\n    return true;\n  }\n}\n\n\/* Register our filter with PHP *\/\nstream_filter_register(\"str.*\", \"string_filter\")\n    or die(\"Failed to register filter\");\n\n$fp = fopen(\"foo-bar.txt\", \"w\");\n\n\/* Attach the registered filter to the stream just opened\n   We could alternately bind to str.tolower here *\/\nstream_filter_append($fp, \"str.toupper\");\n\nfwrite($fp, \"Line1\\n\");\nfwrite($fp, \"Word - 2\\n\");\nfwrite($fp, \"Easy As 123\\n\");\n\nfclose($fp);\n\n\/* Read the contents back out\n *\/\nreadfile(\"foo-bar.txt\");","output":"LINE1\nWORD - 2\nEASY AS 123"}],"stream_filter_remove":[{"title":"Dynamicly refiltering a stream","source":"\/* Open a test file for reading and writing *\/\n$fp = fopen(\"test.txt\", \"rw\");\n\n$rot13_filter = stream_filter_append($fp, \"string.rot13\", STREAM_FILTER_WRITE);\nfwrite($fp, \"This is \");\nstream_filter_remove($rot13_filter);\nfwrite($fp, \"a test\\n\");\n\nrewind($fp);\nfpassthru($fp);\nfclose($fp);","output":"Guvf vf a test"}],"stream_get_contents":[{"title":"stream_get_contents() example","source":"if ($stream = fopen('http:\/\/www.example.com', 'r')) {\n    \/\/ print all the page starting at the offset 10\n    echo stream_get_contents($stream, -1, 10);\n\n    fclose($stream);\n}\n\n\nif ($stream = fopen('http:\/\/www.example.net', 'r')) {\n    \/\/ print the first 5 bytes\n    echo stream_get_contents($stream, 5);\n\n    fclose($stream);\n}","output":null}],"stream_get_filters":[{"title":"Using stream_get_filters()","source":"$streamlist = stream_get_filters();\nprint_r($streamlist);","output":"Array (\n  [0] => string.rot13\n  [1] => string.toupper\n  [2] => string.tolower\n  [3] => string.base64\n  [4] => string.quoted-printable\n)"}],"stream_get_meta_data":[{"title":"stream_get_meta_data() example","source":"$url = 'http:\/\/www.example.com\/';\n\nif (!$fp = fopen($url, 'r')) {\n    trigger_error(\"Unable to open URL ($url)\", E_USER_ERROR);\n}\n\n$meta = stream_get_meta_data($fp);\n\nprint_r($meta);\n\nfclose($fp);","output":"Array\n(\n    [wrapper_data] => Array\n        (\n            [0] => HTTP\/1.1 200 OK\n            [1] => Server: Apache\/2.2.3 (Red Hat)\n            [2] => Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT\n            [3] => ETag: \"b300b4-1b6-4059a80bfd280\"\n            [4] => Accept-Ranges: bytes\n            [5] => Content-Type: text\/html; charset=UTF-8\n            [6] => Set-Cookie: FOO=BAR; expires=Fri, 21-Dec-2012 12:00:00 GMT; path=\/; domain=.example.com\n            [6] => Connection: close     \n            [7] => Date: Fri, 16 Oct 2009 12:00:00 GMT\n            [8] => Age: 1164   \n            [9] => Content-Length: 438\n        )\n\n    [wrapper_type] => http\n    [stream_type] => tcp_socket\/ssl\n    [mode] => r\n    [unread_bytes] => 438\n    [seekable] => \n    [uri] => http:\/\/www.example.com\/\n    [timed_out] => \n    [blocked] => 1\n    [eof] => \n)"}],"stream_get_transports":[{"title":"Using stream_get_transports()","source":"$xportlist = stream_get_transports();\nprint_r($xportlist);","output":"Array (\n  [0] => tcp\n  [1] => udp\n  [2] => unix\n  [3] => udg\n)"}],"stream_get_wrappers":[{"title":"stream_get_wrappers() example","source":"print_r(stream_get_wrappers());","output":"Array\n(\n    [0] => php\n    [1] => file\n    [2] => http\n    [3] => ftp\n    [4] => compress.bzip2\n    [5] => compress.zlib\n)"},{"title":"Checking for the existence of a stream wrapper","source":"\/\/ check for the existence of the bzip2 stream wrapper\nif (in_array('compress.bzip2', stream_get_wrappers())) {\n    echo 'compress.bzip2:\/\/ support enabled.';\n} else {\n    echo 'compress.bzip2:\/\/ support not enabled.';\n}","output":null}],"stream_is_local":[{"title":"stream_is_local() example","source":"var_dump(stream_is_local(\"http:\/\/example.com\"));\nvar_dump(stream_is_local(\"\/etc\"));","output":"bool(false)\nbool(true)"}],"stream_notification_callback":[{"title":"stream_notification_callback() example","source":"function stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max) {\n\n    switch($notification_code) {\n        case STREAM_NOTIFY_RESOLVE:\n        case STREAM_NOTIFY_AUTH_REQUIRED:\n        case STREAM_NOTIFY_COMPLETED:\n        case STREAM_NOTIFY_FAILURE:\n        case STREAM_NOTIFY_AUTH_RESULT:\n            var_dump($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max);\n            \/* Ignore *\/\n            break;\n\n        case STREAM_NOTIFY_REDIRECTED:\n            echo \"Being redirected to: \", $message;\n            break;\n\n        case STREAM_NOTIFY_CONNECT:\n            echo \"Connected...\";\n            break;\n\n        case STREAM_NOTIFY_FILE_SIZE_IS:\n            echo \"Got the filesize: \", $bytes_max;\n            break;\n\n        case STREAM_NOTIFY_MIME_TYPE_IS:\n            echo \"Found the mime-type: \", $message;\n            break;\n\n        case STREAM_NOTIFY_PROGRESS:\n            echo \"Made some progress, downloaded \", $bytes_transferred, \" so far\";\n            break;\n    }\n    echo \"\\n\";\n}\n\n$ctx = stream_context_create();\nstream_context_set_params($ctx, array(\"notification\" => \"stream_notification_callback\"));\n\nfile_get_contents(\"http:\/\/php.net\/contact\", false, $ctx);","output":"Connected...\nFound the mime-type: text\/html; charset=utf-8\nBeing redirected to: http:\/\/no.php.net\/contact\nConnected...\nGot the filesize: 0\nFound the mime-type: text\/html; charset=utf-8\nBeing redirected to: http:\/\/no.php.net\/contact.php\nConnected...\nGot the filesize: 4589\nFound the mime-type: text\/html;charset=utf-8\nMade some progress, downloaded 0 so far\nMade some progress, downloaded 0 so far\nMade some progress, downloaded 0 so far\nMade some progress, downloaded 1440 so far\nMade some progress, downloaded 2880 so far\nMade some progress, downloaded 4320 so far\nMade some progress, downloaded 5760 so far\nMade some progress, downloaded 6381 so far\nMade some progress, downloaded 7002 so far"},{"title":"Simple progressbar for commandline download client","source":"function usage($argv) {\n    echo \"Usage:\\n\";\n    printf(\"\\tphp %s <http:\/\/example.com\/file> <localfile>\\n\", $argv[0]);\n    exit(1);\n}\n\nfunction stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max) {\n    static $filesize = null;\n\n    switch($notification_code) {\n    case STREAM_NOTIFY_RESOLVE:\n    case STREAM_NOTIFY_AUTH_REQUIRED:\n    case STREAM_NOTIFY_COMPLETED:\n    case STREAM_NOTIFY_FAILURE:\n    case STREAM_NOTIFY_AUTH_RESULT:\n        \/* Ignore *\/\n        break;\n\n    case STREAM_NOTIFY_REDIRECTED:\n        echo \"Being redirected to: \", $message, \"\\n\";\n        break;\n\n    case STREAM_NOTIFY_CONNECT:\n        echo \"Connected...\\n\";\n        break;\n\n    case STREAM_NOTIFY_FILE_SIZE_IS:\n        $filesize = $bytes_max;\n        echo \"Filesize: \", $filesize, \"\\n\";\n        break;\n\n    case STREAM_NOTIFY_MIME_TYPE_IS:\n        echo \"Mime-type: \", $message, \"\\n\";\n        break;\n\n    case STREAM_NOTIFY_PROGRESS:\n        if ($bytes_transferred > 0) {\n            if (!isset($filesize)) {\n                printf(\"\\rUnknown filesize.. %2d kb done..\", $bytes_transferred\/1024);\n            } else {\n                $length = (int)(($bytes_transferred\/$filesize)*100);\n                printf(\"\\r[%-100s] %d%% (%2d\/%2d kb)\", str_repeat(\"=\", $length). \">\", $length, ($bytes_transferred\/1024), $filesize\/1024);\n            }\n        }\n        break;\n    }\n}\n\nisset($argv[1], $argv[2]) or usage($argv);\n\n$ctx = stream_context_create();\nstream_context_set_params($ctx, array(\"notification\" => \"stream_notification_callback\"));\n\n$fp = fopen($argv[1], \"r\", false, $ctx);\nif (is_resource($fp) && file_put_contents($argv[2], $fp)) {\n    echo \"\\nDone!\\n\";\n    exit(0);\n}\n\n$err = error_get_last();\necho \"\\nErrrrrorr..\\n\", $err[\"message\"], \"\\n\";\nexit(1);","output":"Connected...\nMime-type: text\/html; charset=utf-8\nBeing redirected to: http:\/\/no2.php.net\/distributions\/php-5.2.5.tar.bz2\nConnected...\nFilesize: 7773024\nMime-type: application\/octet-stream\n[========================================>                                                           ] 40% (3076\/7590 kb)"}],"stream_resolve_include_path":[{"title":"stream_resolve_include_path() example","source":"var_dump(stream_resolve_include_path(\"test.php\"));","output":"string(22) \"\/var\/www\/html\/test.php\""}],"stream_select":[{"title":"stream_select() Example","source":"\/* Prepare the read array *\/\n$read   = array($stream1, $stream2);\n$write  = NULL;\n$except = NULL;\nif (false === ($num_changed_streams = stream_select($read, $write, $except, 0))) {\n    \/* Error handling *\/\n} elseif ($num_changed_streams > 0) {\n    \/* At least on one of the streams something interesting happened *\/\n}","output":null}],"stream_set_timeout":[{"title":"stream_set_timeout() example","source":"$fp = fsockopen(\"www.example.com\", 80);\nif (!$fp) {\n    echo \"Unable to open\\n\";\n} else {\n\n    fwrite($fp, \"GET \/ HTTP\/1.0\\r\\n\\r\\n\");\n    stream_set_timeout($fp, 2);\n    $res = fread($fp, 2000);\n\n    $info = stream_get_meta_data($fp);\n    fclose($fp);\n\n    if ($info['timed_out']) {\n        echo 'Connection timed out!';\n    } else {\n        echo $res;\n    }\n\n}","output":null}],"stream_set_write_buffer":[{"title":"stream_set_write_buffer() example","source":"$fp = fopen($file, \"w\");\nif ($fp) {\n  if (stream_set_write_buffer($fp, 0) !== 0) {\n      \/\/ changing the buffering failed\n  }\n  fwrite($fp, $output);\n  fclose($fp);\n}","output":null}],"stream_socket_client":[{"title":"stream_socket_client() example","source":"$fp = stream_socket_client(\"tcp:\/\/www.example.com:80\", $errno, $errstr, 30);\nif (!$fp) {\n    echo \"$errstr ($errno)<br \/>\\n\";\n} else {\n    fwrite($fp, \"GET \/ HTTP\/1.0\\r\\nHost: www.example.com\\r\\nAccept: *\/*\\r\\n\\r\\n\");\n    while (!feof($fp)) {\n        echo fgets($fp, 1024);\n    }\n    fclose($fp);\n}","output":null},{"title":"Using UDP connection","source":"$fp = stream_socket_client(\"udp:\/\/127.0.0.1:13\", $errno, $errstr);\nif (!$fp) {\n    echo \"ERROR: $errno - $errstr<br \/>\\n\";\n} else {\n    fwrite($fp, \"\\n\");\n    echo fread($fp, 26);\n    fclose($fp);\n}","output":null}],"stream_socket_enable_crypto":[{"title":"stream_socket_enable_crypto() example","source":"$fp = stream_socket_client(\"tcp:\/\/myproto.example.com:31337\", $errno, $errstr, 30);\nif (!$fp) {\n    die(\"Unable to connect: $errstr ($errno)\");\n}\n\n\/* Turn on encryption for login phase *\/\nstream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_SSLv23_CLIENT);\nfwrite($fp, \"USER god\\r\\n\");\nfwrite($fp, \"PASS secret\\r\\n\");\n\n\/* Turn off encryption for the rest *\/\nstream_socket_enable_crypto($fp, false);\n\nwhile ($motd = fgets($fp)) {\n    echo $motd;\n}\n\nfclose($fp);","output":null}],"stream_socket_pair":[{"title":"A stream_socket_pair() example","source":"$sockets = stream_socket_pair(STREAM_PF_UNIX, STREAM_SOCK_STREAM, STREAM_IPPROTO_IP);\n$pid     = pcntl_fork();\n\nif ($pid == -1) {\n     die('could not fork');\n\n} else if ($pid) {\n     \/* parent *\/\n    fclose($sockets[0]);\n\n    fwrite($sockets[1], \"child PID: $pid\\n\");\n    echo fgets($sockets[1]);\n\n    fclose($sockets[1]);\n\n} else {\n    \/* child *\/\n    fclose($sockets[1]);\n\n    fwrite($sockets[0], \"message from child\\n\");\n    echo fgets($sockets[0]);\n\n    fclose($sockets[0]);\n}","output":"child PID: 1378\nmessage from child"}],"stream_socket_recvfrom":[{"title":"stream_socket_recvfrom() example","source":"\/* Open a server socket to port 1234 on localhost *\/\n$server = stream_socket_server('tcp:\/\/127.0.0.1:1234');\n\n\/* Accept a connection *\/\n$socket = stream_socket_accept($server);\n\n\/* Grab a packet (1500 is a typical MTU size) of OOB data *\/\necho \"Received Out-Of-Band: '\" . stream_socket_recvfrom($socket, 1500, STREAM_OOB) . \"'\\n\";\n\n\/* Take a peek at the normal in-band data, but don't comsume it. *\/\necho \"Data: '\" . stream_socket_recvfrom($socket, 1500, STREAM_PEEK) . \"'\\n\";\n\n\/* Get the exact same packet again, but remove it from the buffer this time. *\/\necho \"Data: '\" . stream_socket_recvfrom($socket, 1500) . \"'\\n\";\n\n\/* Close it up *\/\nfclose($socket);\nfclose($server);","output":null}],"stream_socket_sendto":[{"title":"stream_socket_sendto() Example","source":"\/* Open a socket to port 1234 on localhost *\/\n$socket = stream_socket_client('tcp:\/\/127.0.0.1:1234');\n\n\/* Send ordinary data via ordinary channels. *\/\nfwrite($socket, \"Normal data transmit.\");\n\n\/* Send more data out of band. *\/\nstream_socket_sendto($socket, \"Out of Band data.\", STREAM_OOB);\n\n\/* Close it up *\/\nfclose($socket);","output":null}],"stream_socket_server":[{"title":"Using TCP server sockets","source":"$socket = stream_socket_server(\"tcp:\/\/0.0.0.0:8000\", $errno, $errstr);\nif (!$socket) {\n  echo \"$errstr ($errno)<br \/>\\n\";\n} else {\n  while ($conn = stream_socket_accept($socket)) {\n    fwrite($conn, 'The local time is ' . date('n\/j\/Y g:i a') . \"\\n\");\n    fclose($conn);\n  }\n  fclose($socket);\n}","output":null},{"title":"Using UDP server sockets","source":"$socket = stream_socket_server(\"udp:\/\/127.0.0.1:1113\", $errno, $errstr, STREAM_SERVER_BIND);\nif (!$socket) {\n    die(\"$errstr ($errno)\");\n}\n\ndo {\n    $pkt = stream_socket_recvfrom($socket, 1, 0, $peer);\n    echo \"$peer\\n\";\n    stream_socket_sendto($socket, date(\"D M j H:i:s Y\\r\\n\"), 0, $peer);\n} while ($pkt !== false);","output":null}],"stream_socket_shutdown":[{"title":"A stream_socket_shutdown() example","source":"$server = stream_socket_server('tcp:\/\/127.0.0.1:1337');\n$client = stream_socket_client('tcp:\/\/127.0.0.1:1337');\n\nvar_dump(fputs($client, \"hello\"));\n\nstream_socket_shutdown($client, STREAM_SHUT_WR);\nvar_dump(fputs($client, \"hello\")); \/\/ doesn't work now","output":"int(5)\n\nNotice: fputs(): send of 5 bytes failed with errno=32 Broken pipe in test.php on line 9\nint(0)"}],"stream_wrapper_register":[{"title":"How to register a stream wrapper","source":"$existed = in_array(\"var\", stream_get_wrappers());\nif ($existed) {\n    stream_wrapper_unregister(\"var\");\n}\nstream_wrapper_register(\"var\", \"VariableStream\");\n$myvar = \"\";\n\n$fp = fopen(\"var:\/\/myvar\", \"r+\");\n\nfwrite($fp, \"line1\\n\");\nfwrite($fp, \"line2\\n\");\nfwrite($fp, \"line3\\n\");\n\nrewind($fp);\nwhile (!feof($fp)) {\n    echo fgets($fp);\n}\nfclose($fp);\nvar_dump($myvar);\n\nif ($existed) {\n    stream_wrapper_restore(\"var\");\n}","output":"line1\nline2\nline3\nstring(18) \"line1\nline2\nline3\n\""}],"strftime":[{"title":"strftime() locale examples","source":"setlocale(LC_TIME, \"C\");\necho strftime(\"%A\");\nsetlocale(LC_TIME, \"fi_FI\");\necho strftime(\" in Finnish is %A,\");\nsetlocale(LC_TIME, \"fr_FR\");\necho strftime(\" in French %A and\");\nsetlocale(LC_TIME, \"de_DE\");\necho strftime(\" in German %A.\\n\");","output":null},{"title":"ISO 8601:1988 week number example","source":"\/*     December 2002 \/ January 2003\nISOWk  M   Tu  W   Thu F   Sa  Su\n----- ----------------------------\n51     16  17  18  19  20  21  22\n52     23  24  25  26  27  28  29\n1      30  31   1   2   3   4   5\n2       6   7   8   9  10  11  12\n3      13  14  15  16  17  18  19   *\/\n\n\/\/ Outputs: 12\/28\/2002 - %V,%G,%Y = 52,2002,2002\necho \"12\/28\/2002 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\", strtotime(\"12\/28\/2002\")) . \"\\n\";\n\n\/\/ Outputs: 12\/30\/2002 - %V,%G,%Y = 1,2003,2002\necho \"12\/30\/2002 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\", strtotime(\"12\/30\/2002\")) . \"\\n\";\n\n\/\/ Outputs: 1\/3\/2003 - %V,%G,%Y = 1,2003,2003\necho \"1\/3\/2003 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2003\")) . \"\\n\";\n\n\/\/ Outputs: 1\/10\/2003 - %V,%G,%Y = 2,2003,2003\necho \"1\/10\/2003 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\",strtotime(\"1\/10\/2003\")) . \"\\n\";\n\n\n\n\/*     December 2004 \/ January 2005\nISOWk  M   Tu  W   Thu F   Sa  Su\n----- ----------------------------\n51     13  14  15  16  17  18  19\n52     20  21  22  23  24  25  26\n53     27  28  29  30  31   1   2\n1       3   4   5   6   7   8   9\n2      10  11  12  13  14  15  16   *\/\n\n\/\/ Outputs: 12\/23\/2004 - %V,%G,%Y = 52,2004,2004\necho \"12\/23\/2004 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\",strtotime(\"12\/23\/2004\")) . \"\\n\";\n\n\/\/ Outputs: 12\/31\/2004 - %V,%G,%Y = 53,2004,2004\necho \"12\/31\/2004 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\",strtotime(\"12\/31\/2004\")) . \"\\n\";\n\n\/\/ Outputs: 1\/2\/2005 - %V,%G,%Y = 53,2004,2005\necho \"1\/2\/2005 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\",strtotime(\"1\/2\/2005\")) . \"\\n\";\n\n\/\/ Outputs: 1\/3\/2005 - %V,%G,%Y = 1,2005,2005\necho \"1\/3\/2005 - %V,%G,%Y = \" . strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2005\")) . \"\\n\";","output":null},{"title":"Cross platform compatible example using the %e modifier","source":"\/\/ Jan 1: results in: '%e%1%' (%%, e, %%, %e, %%)\n$format = '%%e%%%e%%';\n\n\/\/ Check for Windows to find and replace the %e \n\/\/ modifier correctly\nif (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN') {\n    $format = preg_replace('#(?<!%)((?:%%)*)%e#', '\\1%#d', $format);\n}\n\necho strftime($format);","output":null},{"title":"Display all known and unknown formats.","source":"\/\/ Describe the formats.\n$strftimeFormats = array(\n    'A' => 'A full textual representation of the day',\n    'B' => 'Full month name, based on the locale',\n    'C' => 'Two digit representation of the century (year divided by 100, truncated to an integer)',\n    'D' => 'Same as \"%m\/%d\/%y\"',\n    'E' => '',\n    'F' => 'Same as \"%Y-%m-%d\"',\n    'G' => 'The full four-digit version of %g',\n    'H' => 'Two digit representation of the hour in 24-hour format',\n    'I' => 'Two digit representation of the hour in 12-hour format',\n    'J' => '',\n    'K' => '',\n    'L' => '',\n    'M' => 'Two digit representation of the minute',\n    'N' => '',\n    'O' => '',\n    'P' => 'lower-case \"am\" or \"pm\" based on the given time',\n    'Q' => '',\n    'R' => 'Same as \"%H:%M\"',\n    'S' => 'Two digit representation of the second',\n    'T' => 'Same as \"%H:%M:%S\"',\n    'U' => 'Week number of the given year, starting with the first Sunday as the first week',\n    'V' => 'ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week',\n    'W' => 'A numeric representation of the week of the year, starting with the first Monday as the first week',\n    'X' => 'Preferred time representation based on locale, without the date',\n    'Y' => 'Four digit representation for the year',\n    'Z' => 'The time zone offset\/abbreviation option NOT given by %z (depends on operating system)',\n    'a' => 'An abbreviated textual representation of the day',\n    'b' => 'Abbreviated month name, based on the locale',\n    'c' => 'Preferred date and time stamp based on local',\n    'd' => 'Two-digit day of the month (with leading zeros)',\n    'e' => 'Day of the month, with a space preceding single digits',\n    'f' => '',\n    'g' => 'Two digit representation of the year going by ISO-8601:1988 standards (see %V)',\n    'h' => 'Abbreviated month name, based on the locale (an alias of %b)',\n    'i' => '',\n    'j' => 'Day of the year, 3 digits with leading zeros',\n    'k' => 'Hour in 24-hour format, with a space preceding single digits',\n    'l' => 'Hour in 12-hour format, with a space preceding single digits',\n    'm' => 'Two digit representation of the month',\n    'n' => 'A newline character (\"\\n\")',\n    'o' => '',\n    'p' => 'UPPER-CASE \"AM\" or \"PM\" based on the given time',\n    'q' => '',\n    'r' => 'Same as \"%I:%M:%S %p\"',\n    's' => 'Unix Epoch Time timestamp',\n    't' => 'A Tab character (\"\\t\")',\n    'u' => 'ISO-8601 numeric representation of the day of the week',\n    'v' => '',\n    'w' => 'Numeric representation of the day of the week',\n    'x' => 'Preferred date representation based on locale, without the time',\n    'y' => 'Two digit representation of the year',\n    'z' => 'Either the time zone offset from UTC or the abbreviation (depends on operating system)',\n    '%' => 'A literal percentage character (\"%\")',\n);\n\n\/\/ Results.\n$strftimeValues = array();\n\n\/\/ Evaluate the formats whilst suppressing any errors.\nforeach($strftimeFormats as $format => $description){\n    if (False !== ($value = @strftime(\"%{$format}\"))){\n        $strftimeValues[$format] = $value;\n    }\n}\n\n\/\/ Find the longest value.\n$maxValueLength = 2 + max(array_map('strlen', $strftimeValues));\n\n\/\/ Report known formats.\nforeach($strftimeValues as $format => $value){\n    echo \"Known format   : '{$format}' = \", str_pad(\"'{$value}'\", $maxValueLength), \" ( {$strftimeFormats[$format]} )\\n\";\n}\n\n\/\/ Report unknown formats.\nforeach(array_diff_key($strftimeFormats, $strftimeValues) as $format => $description){\n    echo \"Unknown format : '{$format}'   \", str_pad(' ', $maxValueLength), ($description ? \" ( {$description} )\" : ''), \"\\n\";\n}","output":"Known format   : 'A' = 'Friday'            ( A full textual representation of the day )\nKnown format   : 'B' = 'December'          ( Full month name, based on the locale )\nKnown format   : 'H' = '11'                ( Two digit representation of the hour in 24-hour format )\nKnown format   : 'I' = '11'                ( Two digit representation of the hour in 12-hour format )\nKnown format   : 'M' = '24'                ( Two digit representation of the minute )\nKnown format   : 'S' = '44'                ( Two digit representation of the second )\nKnown format   : 'U' = '48'                ( Week number of the given year, starting with the first Sunday as the first week )\nKnown format   : 'W' = '48'                ( A numeric representation of the week of the year, starting with the first Monday as the first week )\nKnown format   : 'X' = '11:24:44'          ( Preferred time representation based on locale, without the date )\nKnown format   : 'Y' = '2010'              ( Four digit representation for the year )\nKnown format   : 'Z' = 'GMT Standard Time' ( The time zone offset\/abbreviation option NOT given by %z (depends on operating system) )\nKnown format   : 'a' = 'Fri'               ( An abbreviated textual representation of the day )\nKnown format   : 'b' = 'Dec'               ( Abbreviated month name, based on the locale )\nKnown format   : 'c' = '12\/03\/10 11:24:44' ( Preferred date and time stamp based on local )\nKnown format   : 'd' = '03'                ( Two-digit day of the month (with leading zeros) )\nKnown format   : 'j' = '337'               ( Day of the year, 3 digits with leading zeros )\nKnown format   : 'm' = '12'                ( Two digit representation of the month )\nKnown format   : 'p' = 'AM'                ( UPPER-CASE \"AM\" or \"PM\" based on the given time )\nKnown format   : 'w' = '5'                 ( Numeric representation of the day of the week )\nKnown format   : 'x' = '12\/03\/10'          ( Preferred date representation based on locale, without the time )\nKnown format   : 'y' = '10'                ( Two digit representation of the year )\nKnown format   : 'z' = 'GMT Standard Time' ( Either the time zone offset from UTC or the abbreviation (depends on operating system) )\nKnown format   : '%' = '%'                 ( A literal percentage character (\"%\") )\nUnknown format : 'C'                       ( Two digit representation of the century (year divided by 100, truncated to an integer) )\nUnknown format : 'D'                       ( Same as \"%m\/%d\/%y\" )\nUnknown format : 'E'\nUnknown format : 'F'                       ( Same as \"%Y-%m-%d\" )\nUnknown format : 'G'                       ( The full four-digit version of %g )\nUnknown format : 'J'\nUnknown format : 'K'\nUnknown format : 'L'\nUnknown format : 'N'\nUnknown format : 'O'\nUnknown format : 'P'                       ( lower-case \"am\" or \"pm\" based on the given time )\nUnknown format : 'Q'\nUnknown format : 'R'                       ( Same as \"%H:%M\" )\nUnknown format : 'T'                       ( Same as \"%H:%M:%S\" )\nUnknown format : 'V'                       ( ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week )\nUnknown format : 'e'                       ( Day of the month, with a space preceding single digits )\nUnknown format : 'f'\nUnknown format : 'g'                       ( Two digit representation of the year going by ISO-8601:1988 standards (see %V) )\nUnknown format : 'h'                       ( Abbreviated month name, based on the locale (an alias of %b) )\nUnknown format : 'i'\nUnknown format : 'k'                       ( Hour in 24-hour format, with a space preceding single digits )\nUnknown format : 'l'                       ( Hour in 12-hour format, with a space preceding single digits )\nUnknown format : 'n'                       ( A newline character (\"\\n\") )\nUnknown format : 'o'\nUnknown format : 'q'\nUnknown format : 'r'                       ( Same as \"%I:%M:%S %p\" )\nUnknown format : 's'                       ( Unix Epoch Time timestamp )\nUnknown format : 't'                       ( A Tab character (\"\\t\") )\nUnknown format : 'u'                       ( ISO-8601 numeric representation of the day of the week )\nUnknown format : 'v'"}],"strip_tags":[{"title":null,"source":"strip_tags($input, '<br>');","output":null},{"title":"strip_tags() example","source":"$text = '<p>Test paragraph.<\/p><!-- Comment --> <a href=\"#fragment\">Other text<\/a>';\necho strip_tags($text);\necho \"\\n\";\n\n\/\/ Allow <p> and <a>\necho strip_tags($text, '<p><a>');","output":"Test paragraph. Other text\n<p>Test paragraph.<\/p> <a href=\"#fragment\">Other text<\/a>"}],"stripos":[{"title":"stripos() examples","source":"$findme    = 'a';\n$mystring1 = 'xyz';\n$mystring2 = 'ABC';\n\n$pos1 = stripos($mystring1, $findme);\n$pos2 = stripos($mystring2, $findme);\n\n\/\/ Nope, 'a' is certainly not in 'xyz'\nif ($pos1 === false) {\n    echo \"The string '$findme' was not found in the string '$mystring1'\";\n}\n\n\/\/ Note our use of ===.  Simply == would not work as expected\n\/\/ because the position of 'a' is the 0th (first) character.\nif ($pos2 !== false) {\n    echo \"We found '$findme' in '$mystring2' at position $pos2\";\n}","output":null}],"stripslashes":[{"title":"A stripslashes() example","source":"$str = \"Is your name O\\'reilly?\";\n\n\/\/ Outputs: Is your name O'reilly?\necho stripslashes($str);","output":null},{"title":"Using stripslashes() on an array","source":"function stripslashes_deep($value)\n{\n    $value = is_array($value) ?\n                array_map('stripslashes_deep', $value) :\n                stripslashes($value);\n\n    return $value;\n}\n\n\/\/ Example\n$array = array(\"f\\\\'oo\", \"b\\\\'ar\", array(\"fo\\\\'o\", \"b\\\\'ar\"));\n$array = stripslashes_deep($array);\n\n\/\/ Output\nprint_r($array);","output":"Array\n(\n    [0] => f'oo\n    [1] => b'ar\n    [2] => Array\n        (\n            [0] => fo'o\n            [1] => b'ar\n        )\n\n)"}],"stristr":[{"title":"stristr() example","source":"$email = 'USER@EXAMPLE.com';\n  echo stristr($email, 'e'); \/\/ outputs ER@EXAMPLE.com\n  echo stristr($email, 'e', true); \/\/ As of PHP 5.3.0, outputs US","output":null},{"title":"Testing if a string is found or not","source":"$string = 'Hello World!';\n  if(stristr($string, 'earth') === FALSE) {\n    echo '\"earth\" not found in string';\n  }\n\/\/ outputs: \"earth\" not found in string","output":null},{"title":"Using a non \"string\" needle","source":"$string = 'APPLE';\n  echo stristr($string, 97); \/\/ 97 = lowercase a\n\/\/ outputs: APPLE","output":null}],"strlen":[{"title":"A strlen() example","source":"$str = 'abcdef';\necho strlen($str); \/\/ 6\n\n$str = ' ab cd ';\necho strlen($str); \/\/ 7","output":null}],"strnatcmp":[{"title":"The above example will output:","source":"$arr1 = $arr2 = array(\"img12.png\", \"img10.png\", \"img2.png\", \"img1.png\");\necho \"Standard string comparison\\n\";\nusort($arr1, \"strcmp\");\nprint_r($arr1);\necho \"\\nNatural order string comparison\\n\";\nusort($arr2, \"strnatcmp\");\nprint_r($arr2);","output":"Standard string comparison\nArray\n(\n    [0] => img1.png\n    [1] => img10.png\n    [2] => img12.png\n    [3] => img2.png\n)\n\nNatural order string comparison\nArray\n(\n    [0] => img1.png\n    [1] => img2.png\n    [2] => img10.png\n    [3] => img12.png\n)"}],"strpbrk":[{"title":"strpbrk() example","source":"$text = 'This is a Simple text.';\n\n\/\/ this echoes \"is is a Simple text.\" because 'i' is matched first\necho strpbrk($text, 'mi');\n\n\/\/ this echoes \"Simple text.\" because chars are case sensitive\necho strpbrk($text, 'S');","output":null}],"strpos":[{"title":"Using ===","source":"$mystring = 'abc';\n$findme   = 'a';\n$pos = strpos($mystring, $findme);\n\n\/\/ Note our use of ===.  Simply == would not work as expected\n\/\/ because the position of 'a' was the 0th (first) character.\nif ($pos === false) {\n    echo \"The string '$findme' was not found in the string '$mystring'\";\n} else {\n    echo \"The string '$findme' was found in the string '$mystring'\";\n    echo \" and exists at position $pos\";\n}","output":null},{"title":"Using !==","source":"$mystring = 'abc';\n$findme   = 'a';\n$pos = strpos($mystring, $findme);\n\n\/\/ The !== operator can also be used.  Using != would not work as expected\n\/\/ because the position of 'a' is 0. The statement (0 != false) evaluates \n\/\/ to false.\nif ($pos !== false) {\n     echo \"The string '$findme' was found in the string '$mystring'\";\n         echo \" and exists at position $pos\";\n} else {\n     echo \"The string '$findme' was not found in the string '$mystring'\";\n}","output":null},{"title":"Using an offset","source":"\/\/ We can search for the character, ignoring anything before the offset\n$newstring = 'abcdef abcdef';\n$pos = strpos($newstring, 'a', 1); \/\/ $pos = 7, not 0","output":null}],"strptime":[{"title":"strptime() example","source":"$format = '%d\/%m\/%Y %H:%M:%S';\n$strf = strftime($format);\n\necho \"$strf\\n\";\n\nprint_r(strptime($strf, $format));","output":"03\/10\/2004 15:54:19\n\nArray\n(\n    [tm_sec] => 19\n    [tm_min] => 54\n    [tm_hour] => 15\n    [tm_mday] => 3\n    [tm_mon] => 9\n    [tm_year] => 104\n    [tm_wday] => 0\n    [tm_yday] => 276\n    [unparsed] =>\n)"}],"strrchr":[{"title":"strrchr() example","source":"\/\/ get last directory in $PATH\n$dir = substr(strrchr($PATH, \":\"), 1);\n\n\/\/ get everything after last newline\n$text = \"Line 1\\nLine 2\\nLine 3\";\n$last = substr(strrchr($text, 10), 1 );","output":null}],"strrev":[{"title":"Reversing a string with strrev()","source":"echo strrev(\"Hello world!\"); \/\/ outputs \"!dlrow olleH\"","output":null}],"strripos":[{"title":"A simple strripos() example","source":"$haystack = 'ababcd';\n$needle   = 'aB';\n\n$pos      = strripos($haystack, $needle);\n\nif ($pos === false) {\n    echo \"Sorry, we did not find ($needle) in ($haystack)\";\n} else {\n    echo \"Congratulations!\\n\";\n    echo \"We found the last ($needle) in ($haystack) at position ($pos)\";\n}","output":"Congratulations!\n   We found the last (aB) in (ababcd) at position (2)"}],"strrpos":[{"title":"Checking if a needle is in the haystack","source":"$pos = strrpos($mystring, \"b\");\nif ($pos === false) { \/\/ note: three equal signs\n    \/\/ not found...\n}","output":null},{"title":"Searching with offsets","source":"$foo = \"0123456789a123456789b123456789c\";\n\nvar_dump(strrpos($foo, '7', -5));  \/\/ Starts looking backwards five positions\n                                   \/\/ from the end. Result: int(17)\n\nvar_dump(strrpos($foo, '7', 20));  \/\/ Starts searching 20 positions into the\n                                   \/\/ string. Result: int(27)\n\nvar_dump(strrpos($foo, '7', 28));  \/\/ Result: bool(false)","output":null}],"strspn":[{"title":null,"source":"$var = strspn(\"42 is the answer to the 128th question.\", \"1234567890\");","output":null},{"title":"strspn() example","source":"\/\/ subject does not start with any characters from mask\nvar_dump(strspn(\"foo\", \"o\"));\n\n\/\/ examine two characters from subject starting at offset 1\nvar_dump(strspn(\"foo\", \"o\", 1, 2));\n\n\/\/ examine one character from subject starting at offset 1\nvar_dump(strspn(\"foo\", \"o\", 1, 1));","output":"int(0)\nint(2)\nint(1)"}],"strstr":[{"title":"strstr() example","source":"$email  = 'name@example.com';\n$domain = strstr($email, '@');\necho $domain; \/\/ prints @example.com\n\n$user = strstr($email, '@', true); \/\/ As of PHP 5.3.0\necho $user; \/\/ prints name","output":null}],"strtolower":[{"title":"strtolower() example","source":"$str = \"Mary Had A Little Lamb and She LOVED It So\";\n$str = strtolower($str);\necho $str; \/\/ Prints mary had a little lamb and she loved it so","output":null}],"strtotime":[{"title":"A strtotime() example","source":"echo strtotime(\"now\"), \"\\n\";\necho strtotime(\"10 September 2000\"), \"\\n\";\necho strtotime(\"+1 day\"), \"\\n\";\necho strtotime(\"+1 week\"), \"\\n\";\necho strtotime(\"+1 week 2 days 4 hours 2 seconds\"), \"\\n\";\necho strtotime(\"next Thursday\"), \"\\n\";\necho strtotime(\"last Monday\"), \"\\n\";","output":null},{"title":"Checking for failure","source":"$str = 'Not Good';\n\n\/\/ previous to PHP 5.1.0 you would compare with -1, instead of false\nif (($timestamp = strtotime($str)) === false) {\n    echo \"The string ($str) is bogus\";\n} else {\n    echo \"$str == \" . date('l dS \\o\\f F Y h:i:s A', $timestamp);\n}","output":null}],"strtoupper":[{"title":"strtoupper() example","source":"$str = \"Mary Had A Little Lamb and She LOVED It So\";\n$str = strtoupper($str);\necho $str; \/\/ Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO","output":null}],"strval":[{"title":"strval() example using PHP 5's magic __toString() method.","source":"class StrValTest\n{\n    public function __toString()\n    {\n        return __CLASS__;\n    }\n}\n\n\/\/ Prints 'StrValTest'\necho strval(new StrValTest);","output":null}],"substr_compare":[{"title":"A substr_compare() example","source":"echo substr_compare(\"abcde\", \"bc\", 1, 2); \/\/ 0\necho substr_compare(\"abcde\", \"de\", -2, 2); \/\/ 0\necho substr_compare(\"abcde\", \"bcg\", 1, 2); \/\/ 0\necho substr_compare(\"abcde\", \"BC\", 1, 2, true); \/\/ 0\necho substr_compare(\"abcde\", \"bc\", 1, 3); \/\/ 1\necho substr_compare(\"abcde\", \"cd\", 1, 2); \/\/ -1\necho substr_compare(\"abcde\", \"abc\", 5, 1); \/\/ warning","output":null}],"substr_count":[{"title":"A substr_count() example","source":"$text = 'This is a test';\necho strlen($text); \/\/ 14\n\necho substr_count($text, 'is'); \/\/ 2\n\n\/\/ the string is reduced to 's is a test', so it prints 1\necho substr_count($text, 'is', 3);\n\n\/\/ the text is reduced to 's i', so it prints 0\necho substr_count($text, 'is', 3, 3);\n\n\/\/ generates a warning because 5+10 > 14\necho substr_count($text, 'is', 5, 10);\n\n\n\/\/ prints only 1, because it doesn't count overlapped substrings\n$text2 = 'gcdgcdgcd';\necho substr_count($text2, 'gcdgcd');","output":null}],"substr_replace":[{"title":"Simple substr_replace() examples","source":"$var = 'ABCDEFGH:\/MNRPQR\/';\necho \"Original: $var<hr \/>\\n\";\n\n\/* These two examples replace all of $var with 'bob'. *\/\necho substr_replace($var, 'bob', 0) . \"<br \/>\\n\";\necho substr_replace($var, 'bob', 0, strlen($var)) . \"<br \/>\\n\";\n\n\/* Insert 'bob' right at the beginning of $var. *\/\necho substr_replace($var, 'bob', 0, 0) . \"<br \/>\\n\";\n\n\/* These next two replace 'MNRPQR' in $var with 'bob'. *\/\necho substr_replace($var, 'bob', 10, -1) . \"<br \/>\\n\";\necho substr_replace($var, 'bob', -7, -1) . \"<br \/>\\n\";\n\n\/* Delete 'MNRPQR' from $var. *\/\necho substr_replace($var, '', 10, -1) . \"<br \/>\\n\";","output":null},{"title":"Using substr_replace() to replace multiple strings at once","source":"$input = array('A: XXX', 'B: XXX', 'C: XXX');\n\n\/\/ A simple case: replace XXX in each string with YYY.\necho implode('; ', substr_replace($input, 'YYY', 3, 3)).\"\\n\";\n\n\/\/ A more complicated case where each replacement is different.\n$replace = array('AAA', 'BBB', 'CCC');\necho implode('; ', substr_replace($input, $replace, 3, 3)).\"\\n\";\n\n\/\/ Replace a different number of characters each time.\n$length = array(1, 2, 3);\necho implode('; ', substr_replace($input, $replace, 3, $length)).\"\\n\";","output":"A: YYY; B: YYY; C: YYY\nA: AAA; B: BBB; C: CCC\nA: AAAXX; B: BBBX; C: CCC"}],"substr":[{"title":"Using a negative start","source":"$rest = substr(\"abcdef\", -1);    \/\/ returns \"f\"\n$rest = substr(\"abcdef\", -2);    \/\/ returns \"ef\"\n$rest = substr(\"abcdef\", -3, 1); \/\/ returns \"d\"","output":null},{"title":"Using a negative length","source":"$rest = substr(\"abcdef\", 0, -1);  \/\/ returns \"abcde\"\n$rest = substr(\"abcdef\", 2, -1);  \/\/ returns \"cde\"\n$rest = substr(\"abcdef\", 4, -4);  \/\/ returns false\n$rest = substr(\"abcdef\", -3, -1); \/\/ returns \"de\"","output":null},{"title":"Basic substr() usage","source":"echo substr('abcdef', 1);     \/\/ bcdef\necho substr('abcdef', 1, 3);  \/\/ bcd\necho substr('abcdef', 0, 4);  \/\/ abcd\necho substr('abcdef', 0, 8);  \/\/ abcdef\necho substr('abcdef', -1, 1); \/\/ f\n\n\/\/ Accessing single characters in a string\n\/\/ can also be achieved using \"square brackets\"\n$string = 'abcdef';\necho $string[0];                 \/\/ a\necho $string[3];                 \/\/ d\necho $string[strlen($string)-1]; \/\/ f","output":null},{"title":"substr() casting behaviour","source":"class apple {\n    public function __toString() {\n        return \"green\";\n    }\n}\n\necho \"1) \".var_export(substr(\"pear\", 0, 2), true).PHP_EOL;\necho \"2) \".var_export(substr(54321, 0, 2), true).PHP_EOL;\necho \"3) \".var_export(substr(new apple(), 0, 2), true).PHP_EOL;\necho \"4) \".var_export(substr(true, 0, 1), true).PHP_EOL;\necho \"5) \".var_export(substr(false, 0, 1), true).PHP_EOL;\necho \"6) \".var_export(substr(\"\", 0, 1), true).PHP_EOL;\necho \"7) \".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;","output":"1) 'pe'\n2) '54'\n3) 'gr'\n4) '1'\n5) ''\n6) ''\n7) '1200'"},{"title":null,"source":"var_dump(substr('a', 2)); \/\/ bool(false)","output":null}],"svn_add":[{"title":"svn_add() example","source":"svn_add('foobar.txt');","output":null}],"svn_auth_set_parameter":[{"title":"Default authentication example","source":"svn_auth_set_parameter(SVN_AUTH_PARAM_DEFAULT_USERNAME, 'Bob');\nsvn_auth_set_parameter(SVN_AUTH_PARAM_DEFAULT_PASSWORD, 'abc123');","output":null}],"svn_blame":[{"title":"svn_blame() example","source":"$svnurl = 'http:\/\/svn.example.org\/svnroot\/foo\/trunk\/index.php';\n\nprint_r( svn_blame($svnurl) );","output":"Array\n(\n    [0] = Array\n          (\n           [rev] = 1\n           [line_no] = 1\n           [line] = Hello World\n           [author] = joesmith\n           [date] = 2007-07-02T05:51:26.628396Z\n          )\n    [1] = Array\n          ..."}],"svn_cat":[{"title":"Basic example","source":"$contents = svn_cat('http:\/\/www.example.com\/svnroot\/calc\/gui.c', 28)","output":null}],"svn_checkout":[{"title":"Basic example","source":"svn_checkout('http:\/\/www.example.com\/svnroot\/calc\/trunk', dirname(__FILE__) . '\/calc');","output":null}],"svn_cleanup":[{"title":"Basic example","source":"svn_cleanup(realpath('help-me'));","output":null}],"svn_client_version":[{"title":"Basic example","source":"echo svn_client_version();","output":"1.3.1"}],"svn_commit":[{"title":"Basic example","source":"svn_auth_set_parameter(SVN_AUTH_PARAM_DEFAULT_USERNAME, 'Bob');\nsvn_auth_set_parameter(SVN_AUTH_PARAM_DEFAULT_PASSWORD, 'abc123');\nvar_dump(svn_commit('Log message of Bob\\'s commit', array(realpath('calculator'))));","output":"array(\n  0 => 1415,\n  1 => '2007-05-26T01:44:28.453125Z',\n  2 => 'Bob'\n)"}],"svn_diff":[{"title":"Basic example","source":"list($diff, $errors) = svn_diff(\n    'http:\/\/www.example.com\/svnroot\/trunk\/foo', SVN_REVISION_HEAD,\n    'http:\/\/www.example.com\/svnroot\/branches\/dev\/foo', SVN_REVISION_HEAD\n);\nif (!$diff) exit;\n$contents = '';\nwhile (!feof($diff)) {\n  $contents .= fread($diff, 8192);\n}\nfclose($diff);\nfclose($errors);\nvar_dump($contents);","output":"Index: http:\/\/www.example.com\/svnroot\/trunk\/foo\n===================================================================\n--- http:\/\/www.example.com\/svnroot\/trunk\/foo        (...\/foo) (revision 23)\n+++ http:\/\/www.example.com\/svnroot\/branches\/dev\/foo (...\/foo) (revision 27)\n \/\/ further diff output"},{"title":"Diffing two revisions of a repository path","source":"function svn_diff_same_item($path, $rev1, $rev2) {\n    return svn_diff($path, $rev1, $path, $rev2);\n}","output":null},{"title":"Portably diffing two local files","source":"function svn_diff_local($path1, $rev1, $path2, $rev2) {\n    $path1 = str_replace('\\\\', '\/', realpath($path1));\n    $path2 = str_replace('\\\\', '\/', realpath($path2));\n    return svn_diff($path1, $rev1, $path2, $rev2);\n}","output":null}],"svn_export":[{"title":"svn_export() example","source":"$working_dir     = '..\/';\n$new_working_dir = '\/home\/user\/devel\/foo\/trunk';\n\nsvn_export($working_dir, $new_working_dir);","output":null}],"svn_import":[{"title":"Basic example","source":"svn_import(realpath('new-files'), 'http:\/\/www.example.com\/svnroot\/incoming\/abc', false);","output":null}],"svn_log":[{"title":"svn_log() example","source":"print_r( svn_log('http:\/\/www.example.com\/', 23) );","output":"Array\n(\n    [0] => Array\n    (\n        [rev] => 23\n        [author] => 'joe'\n        [msg] => 'Add cheese and salami to our sandwich.'\n        [date] => '2007-04-06T16:00:27-04:00'\n        [paths] => Array\n            (\n                [0] => Array\n                    (\n                        [action] => 'M'\n                        [path] =>  '\/sandwich.txt'\n                    )\n            )\n    )\n)"}],"svn_ls":[{"title":"svn_ls() example","source":"print_r( svn_ls('http:\/\/www.example.com\/svnroot\/') );","output":"Array\n(\n    [0] => Array\n        (\n            [created_rev] => 20\n            [last_author] => Joe\n            [size] => 0\n            [time] => Apr 02 09:28\n            [time_t] => 1175520529\n            [name] => tags\n            [type] => dir\n        )\n    [1] => Array\n        (\n            [created_rev] => 23\n            [last_author] => Bob\n            [size] => 0\n            [time] => Apr 02 15:15\n            [time_t] => 1175541322\n            [name] => trunk\n            [type] => dir\n        )\n)"}],"svn_status":[{"title":"Basic example","source":"print_r(svn_status(realpath('wc')));","output":"Array (\n    [0] => Array (\n        [path] => \/home\/bob\/wc\/sandwich.txt\n        [text_status] => 8 \/\/ item was modified\n        [repos_text_status] => 1 \/\/ no information available, use update\n        [prop_status] => 3 \/\/ no changes\n        [repos_prop_status] => 1 \/\/ no information available, use update\n        [name] => sandwich.txt\n        [url] => http:\/\/www.example.com\/svnroot\/deli\/trunk\/sandwich.txt\n        [repos] => http:\/\/www.example.com\/svnroot\/\n        [revision] => 123\n        [kind] => 1 \/\/ file\n        [schedule] => 0 \/\/ no special actions scheduled\n        [cmt_date] => 1165543135\n        [cmt_rev] => 120\n        [cmt_author] => Alice\n        [prop_time] => 1180201728\n        [text_time] => 1180201729\n    )\n)"}],"svn_update":[{"title":"Basic example","source":"echo svn_update(realpath('working-copy'));","output":234}],"sybase_affected_rows":[{"title":"Delete-Query","source":"\/* connect to database *\/\nsybase_connect('SYBASE', '', '') or\ndie(\"Could not connect\");\nsybase_select_db(\"db\");\n\nsybase_query(\"DELETE FROM sometable WHERE id < 10\");\nprintf(\"Records deleted: %d\\n\", sybase_affected_rows());","output":"Records deleted: 10"}],"sybase_connect":[{"title":"sybase_connect() example","source":"$link = sybase_connect('SYBASE', '', '')\n        or die(\"Could not connect !\");\necho \"Connected successfully\";\nsybase_close($link);","output":null}],"sybase_fetch_array":[{"title":"Identical fieldnames","source":"$dbh = sybase_connect('SYBASE', '', '');\n$q = sybase_query('SELECT * FROM p, a WHERE p.person_id= a.person_id');\nvar_dump(sybase_fetch_array($q));\nsybase_close($dbh);","output":"array(4) {\n  [0]=>\n  int(1)\n  [\"person_id\"]=>\n  int(1)\n  [1]=>\n  int(1)\n  [\"person_id1\"]=>\n  int(1)\n}"}],"sybase_fetch_object":[{"title":"sybase_fetch_object() return as Foo","source":"class Foo {\n        var $foo, $bar, $baz;\n    }\n\n    \/\/ {...]\n    $qrh= sybase_query('SELECT foo, bar, baz FROM example');\n    $foo= sybase_fetch_object($qrh, 'Foo');\n    $bar= sybase_fetch_object($qrh, new Foo());\n    \/\/ {...]","output":null}],"sybase_set_message_handler":[{"title":"sybase_set_message_handler() callback function","source":"function msg_handler($msgnumber, $severity, $state, $line, $text)\n    {\n        var_dump($msgnumber, $severity, $state, $line, $text);\n    }\n\n    sybase_set_message_handler('msg_handler');","output":null},{"title":"sybase_set_message_handler() callback to a class","source":"class Sybase {\n        function handler($msgnumber, $severity, $state, $line, $text)\n        {\n            var_dump($msgnumber, $severity, $state, $line, $text);\n        }\n    }\n\n    $sybase= new Sybase();\n    sybase_set_message_handler(array($sybase, 'handler'));","output":null},{"title":"sybase_set_message_handler() unhandled messages","source":"\/\/ Return FALSE from this function to indicate you can't handle\n    \/\/ this. The error is printed out as a warning, the way you're used\n    \/\/ to it if there is no handler installed.\n    function msg_handler($msgnumber, $severity, $state, $line, $text)\n    {\n        if (257 == $msgnumber) {\n            return false;\n        }\n        var_dump($msgnumber, $severity, $state, $line, $text);\n    }\n\n    sybase_set_message_handler('msg_handler');","output":null}],"sybase_unbuffered_query":[{"title":"sybase_unbuffered_query() example","source":"$dbh = sybase_connect('SYBASE', '', '');\n$q = sybase_unbuffered_query('select firstname, lastname from huge_table', $dbh, false);\nsybase_data_seek($q, 10000);\n$i = 0;\n\nwhile ($row = sybase_fetch_row($q)) {\n    echo $row[0], ' ', $row[1], '<br \/>';\n    if ($i++ > 40000) {\n        break;\n    }\n}\n\nsybase_free_result($q);\nsybase_close($dbh);","output":null}],"symlink":[{"title":"Create a symbolic link","source":"$target = 'uploads.php';\n$link = 'uploads';\nsymlink($target, $link);\n\necho readlink($link);","output":null}],"sys_get_temp_dir":[{"title":"sys_get_temp_dir() example","source":"\/\/ Create a temporary file in the temporary \n\/\/ files directory using sys_get_temp_dir()\n$temp_file = tempnam(sys_get_temp_dir(), 'Tux');\n\necho $temp_file;","output":"C:\\Windows\\Temp\\TuxA318.tmp"}],"sys_getloadavg":[{"title":"A sys_getloadavg() example","source":"$load = sys_getloadavg();\nif ($load[0] > 0.80) {\n    header('HTTP\/1.1 503 Too busy, try again later');\n    die('Server too busy. Please try again later.');\n}","output":null}],"syslog":[{"title":"Using syslog()","source":"\/\/ open syslog, include the process ID and also send\n\/\/ the log to standard error, and use a user defined\n\/\/ logging mechanism\nopenlog(\"myScriptLog\", LOG_PID | LOG_PERROR, LOG_LOCAL0);\n\n\/\/ some code\n\nif (authorized_client()) {\n    \/\/ do something\n} else {\n    \/\/ unauthorized client!\n    \/\/ log the attempt\n    $access = date(\"Y\/m\/d H:i:s\");\n    syslog(LOG_WARNING, \"Unauthorized client: $access {$_SERVER['REMOTE_ADDR']} ({$_SERVER['HTTP_USER_AGENT']})\");\n}\n\ncloselog();","output":null}],"system":[{"title":"system() example","source":"echo '<pre>';\n\n\/\/ Outputs all the result of shellcommand \"ls\", and returns\n\/\/ the last output line into $last_line. Stores the return value\n\/\/ of the shell command in $retval.\n$last_line = system('ls', $retval);\n\n\/\/ Printing additional info\necho '\n<\/pre>\n<hr \/>Last line of the output: ' . $last_line . '\n<hr \/>Return value: ' . $retval;","output":null}],"tan":[{"title":"tan() example","source":"echo tan(M_PI_4); \/\/ 1","output":null}],"tcpwrap_check":[{"title":"Deny all connections from localhost","source":"if (!tcpwrap_check('php', $_SERVER['REMOTE_ADDR'])) {\n  die('You are not welcome here');\n}","output":null}],"tempnam":[{"title":"tempnam() example","source":"$tmpfname = tempnam(\"\/tmp\", \"FOO\");\n\n$handle = fopen($tmpfname, \"w\");\nfwrite($handle, \"writing to tempfile\");\nfclose($handle);\n\n\/\/ do here something\n\nunlink($tmpfname);","output":null}],"tidy_access_count":[{"title":"tidy_access_count() example","source":"$html ='<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2\/\/EN\">\n<html><head><title>Title<\/title><\/head>\n<body>\n\n<p><img src=\"img.png\"><\/p>\n\n<\/body><\/html>';\n\n\n\/\/ select the accessibility check level: 1, 2 or 3\n$config = array('accessibility-check' => 3);\n\n$tidy = new tidy();\n$tidy->parseString($html, $config);\n$tidy->cleanRepair();\n\n\/* Never forget to call this! *\/\n$tidy->diagnose();\n\necho tidy_access_count($tidy); \/\/5","output":null}],"tidy_config_count":[{"title":"tidy_config_count() example","source":"$html = '<p>test<\/I>';\n\n$config = array('doctype' => 'bogus');\n\n$tidy = tidy_parse_string($html, $config);\n\n\/* This outputs 1, because 'bogus' isn't a valid doctype *\/\necho tidy_config_count($tidy);","output":null}],"tidy_error_count":[{"title":"tidy_error_count() example","source":"$html = '<p>test<\/i>\n<bogustag>bogus<\/bogustag>';\n\n$tidy = tidy_parse_string($html);\n\necho tidy_error_count($tidy) . \"\\n\"; \/\/1\n\necho $tidy->errorBuffer;","output":"1\nline 1 column 1 - Warning: missing <!DOCTYPE> declaration\nline 1 column 8 - Warning: discarding unexpected <\/i>\nline 2 column 1 - Error: <bogustag> is not recognized!\nline 2 column 1 - Warning: discarding unexpected <bogustag>\nline 2 column 16 - Warning: discarding unexpected <\/bogustag>\nline 1 column 1 - Warning: inserting missing 'title' element"}],"tidy_get_output":[{"title":"tidy_get_output() example","source":"$html = '<p>paragraph<\/i>';\n$tidy = tidy_parse_string($html);\n\n$tidy->cleanRepair();\n\necho tidy_get_output($tidy);","output":"<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2\/\/EN\">\n<html>\n<head>\n<title><\/title>\n<\/head>\n<body>\n<p>paragraph<\/p>\n<\/body>\n<\/html>"}],"tidy_setopt":[{"title":"tidy_setopt() example","source":"$html = '<p>test<\/i>';\n\n$tidy = tidy_parse_string($html);\n\ntidy_setopt('indent', FALSE);","output":null}],"tidy_warning_count":[{"title":"tidy_warning_count() example","source":"$html = '<p>test<\/i>\n<bogustag>bogus<\/bogustag>';\n\n$tidy = tidy_parse_string($html);\n\necho tidy_error_count($tidy) . \"\\n\"; \/\/1\necho tidy_warning_count($tidy) . \"\\n\"; \/\/5","output":null}],"time_nanosleep":[{"title":"time_nanosleep() example","source":"\/\/ Careful! This won't work as expected if an array is returned\nif (time_nanosleep(0, 500000000)) {\n    echo \"Slept for half a second.\\n\";\n}\n\n\/\/ This is better:\nif (time_nanosleep(0, 500000000) === true) {\n    echo \"Slept for half a second.\\n\";\n}\n\n\/\/ And this is the best:\n$nano = time_nanosleep(2, 100000);\n\nif ($nano === true) {\n    echo \"Slept for 2 seconds, 100 microseconds.\\n\";\n} elseif ($nano === false) {\n    echo \"Sleeping failed.\\n\";\n} elseif (is_array($nano)) {\n    $seconds = $nano['seconds'];\n    $nanoseconds = $nano['nanoseconds'];\n    echo \"Interrupted by a signal.\\n\";\n    echo \"Time remaining: $seconds seconds, $nanoseconds nanoseconds.\";\n}","output":null}],"time_sleep_until":[{"title":"A time_sleep_until() example","source":"\/\/returns false and generates a warning\nvar_dump(time_sleep_until(time()-1));\n\n\/\/ may only work on faster computers, will sleep up to 0.2 seconds\nvar_dump(time_sleep_until(microtime(true)+0.2));","output":null}],"time":[{"title":"time() example","source":"$nextWeek = time() + (7 * 24 * 60 * 60);\n                   \/\/ 7 days; 24 hours; 60 mins; 60 secs\necho 'Now:       '. date('Y-m-d') .\"\\n\";\necho 'Next Week: '. date('Y-m-d', $nextWeek) .\"\\n\";\n\/\/ or using strtotime():\necho 'Next Week: '. date('Y-m-d', strtotime('+1 week')) .\"\\n\";","output":"Now:       2005-03-30\nNext Week: 2005-04-06\nNext Week: 2005-04-06"}],"timezone_name_from_abbr":[{"title":"A timezone_name_from_abbr() example","source":"echo timezone_name_from_abbr(\"CET\") . \"\\n\";\necho timezone_name_from_abbr(\"\", 3600, 0) . \"\\n\";","output":"Europe\/Berlin\nEurope\/Paris"}],"timezone_version_get":[{"title":"Getting the timezonedb version","source":"echo timezone_version_get();","output":2009.7}],"tmpfile":[{"title":"tmpfile() example","source":"$temp = tmpfile();\nfwrite($temp, \"writing to tempfile\");\nfseek($temp, 0);\necho fread($temp, 1024);\nfclose($temp); \/\/ this removes the file","output":"writing to tempfile"}],"token_get_all":[{"title":"token_get_all() example","source":"$tokens = token_get_all('<?php echo; ?>');\n\nforeach ($tokens as $token) {\n    if (is_array($token)) {\n        echo \"Line {$token[2]}: \", token_name($token[0]), \" ('{$token[1]}')\", PHP_EOL;\n    }\n}","output":"Line 1: T_OPEN_TAG ('<?php ')\nLine 1: T_ECHO ('echo')\nLine 1: T_WHITESPACE (' ')\nLine 1: T_CLOSE_TAG ('?>')"},{"title":"token_get_all() incorrect usage example","source":"$tokens = token_get_all('\/* comment *\/');\n\nforeach ($tokens as $token) {\n    if (is_array($token)) {\n        echo \"Line {$token[2]}: \", token_name($token[0]), \" ('{$token[1]}')\", PHP_EOL;\n    }\n}","output":"Line 1: T_INLINE_HTML ('\/* comment *\/')"},{"title":"token_get_all() on a class using a reserved word example","source":"$source = <<<'code'\n<?php\n\nclass A\n{\n    const PUBLIC = 1;\n}\ncode;\n\n$tokens = token_get_all($source, TOKEN_PARSE);\n\nforeach ($tokens as $token) {\n    if (is_array($token)) {\n        echo token_name($token[0]) , PHP_EOL;\n    }\n}","output":"T_OPEN_TAG\nT_WHITESPACE\nT_CLASS\nT_WHITESPACE\nT_STRING\nT_CONST\nT_WHITESPACE\nT_STRING\nT_LNUMBER"}],"token_name":[{"title":"token_name() example","source":"\/\/ 260 is the token value for the T_EVAL token\necho token_name(260);        \/\/ -> \"T_EVAL\"\n\n\/\/ a token constant maps to its own name\necho token_name(T_FUNCTION); \/\/ -> \"T_FUNCTION\"","output":null}],"touch":[{"title":"touch() example","source":"if (touch($filename)) {\n    echo $filename . ' modification time has been changed to present time';\n} else {\n    echo 'Sorry, could not change modification time of ' . $filename;\n}","output":null},{"title":"touch() using the time parameter","source":"\/\/ This is the touch time, we'll set it to one hour in the past.\n$time = time() - 3600;\n\n\/\/ Touch the file\nif (!touch('some_file.txt', $time)) {\n    echo 'Whoops, something went wrong...';\n} else {\n    echo 'Touched file with success';\n}","output":null}],"trigger_error":[{"title":"trigger_error() example","source":"if ($divisor == 0) {\n    trigger_error(\"Cannot divide by zero\", E_USER_ERROR);\n}","output":null}],"trim":[{"title":"Usage example of trim()","source":"$text   = \"\\t\\tThese are a few words :) ...  \";\n$binary = \"\\x09Example string\\x0A\";\n$hello  = \"Hello World\";\nvar_dump($text, $binary, $hello);\n\nprint \"\\n\";\n\n$trimmed = trim($text);\nvar_dump($trimmed);\n\n$trimmed = trim($text, \" \\t.\");\nvar_dump($trimmed);\n\n$trimmed = trim($hello, \"Hdle\");\nvar_dump($trimmed);\n\n$trimmed = trim($hello, 'HdWr');\nvar_dump($trimmed);\n\n\/\/ trim the ASCII control characters at the beginning and end of $binary\n\/\/ (from 0 to 31 inclusive)\n$clean = trim($binary, \"\\x00..\\x1F\");\nvar_dump($clean);","output":"string(32) \"        These are a few words :) ...  \"\nstring(16) \"    Example string\n\"\nstring(11) \"Hello World\"\n\nstring(28) \"These are a few words :) ...\"\nstring(24) \"These are a few words :)\"\nstring(5) \"o Wor\"\nstring(9) \"ello Worl\"\nstring(14) \"Example string\""},{"title":"Trimming array values with trim()","source":"function trim_value(&$value) \n{ \n    $value = trim($value); \n}\n\n$fruit = array('apple','banana ', ' cranberry ');\nvar_dump($fruit);\n\narray_walk($fruit, 'trim_value');\nvar_dump($fruit);","output":"array(3) {\n  [0]=>\n  string(5) \"apple\"\n  [1]=>\n  string(7) \"banana \"\n  [2]=>\n  string(11) \" cranberry \"\n}\narray(3) {\n  [0]=>\n  string(5) \"apple\"\n  [1]=>\n  string(6) \"banana\"\n  [2]=>\n  string(9) \"cranberry\"\n}"}],"uasort":[{"title":"Basic uasort() example","source":"\/\/ Comparison function\nfunction cmp($a, $b) {\n    if ($a == $b) {\n        return 0;\n    }\n    return ($a < $b) ? -1 : 1;\n}\n\n\/\/ Array to be sorted\n$array = array('a' => 4, 'b' => 8, 'c' => -1, 'd' => -9, 'e' => 2, 'f' => 5, 'g' => 3, 'h' => -4);\nprint_r($array);\n\n\/\/ Sort and print the resulting array\nuasort($array, 'cmp');\nprint_r($array);","output":"Array\n(\n    [a] => 4\n    [b] => 8\n    [c] => -1\n    [d] => -9\n    [e] => 2\n    [f] => 5\n    [g] => 3\n    [h] => -4\n)\nArray\n(\n    [d] => -9\n    [h] => -4\n    [c] => -1\n    [e] => 2\n    [g] => 3\n    [a] => 4\n    [f] => 5\n    [b] => 8\n)"}],"ucfirst":[{"title":"ucfirst() example","source":"$foo = 'hello world!';\n$foo = ucfirst($foo);             \/\/ Hello world!\n\n$bar = 'HELLO WORLD!';\n$bar = ucfirst($bar);             \/\/ HELLO WORLD!\n$bar = ucfirst(strtolower($bar)); \/\/ Hello world!","output":null}],"ucwords":[{"title":"ucwords() example","source":"$foo = 'hello world!';\n$foo = ucwords($foo);             \/\/ Hello World!\n\n$bar = 'HELLO WORLD!';\n$bar = ucwords($bar);             \/\/ HELLO WORLD!\n$bar = ucwords(strtolower($bar)); \/\/ Hello World!","output":null},{"title":"ucwords() example with custom delimiter","source":"$foo = 'hello|world!';\n$bar = ucwords($foo);             \/\/ Hello|world!\n\n$baz = ucwords($foo, \"|\");        \/\/ Hello|World!","output":null}],"udm_add_search_limit":[{"title":null,"source":"udm_add_search_limit($udm, UDM_LIMIT_DATE, \"&lt;908012006\");","output":null}],"udm_api_version":[{"title":"udm_api_version() example","source":"if (udm_api_version() >= 30111) {\n    echo  \"Total number of URLs in database: \" . udm_get_doc_count($udm) . \"<br \/>\\n\";\n}","output":null}],"udm_cat_list":[{"title":"udm_cat_list()example","source":"$cat_list_arr = udm_cat_list($udm_agent, $cat);\n $cat_list = '';\n for ($i=0; $i<count($cat_list_arr); $i+=2) {\n    $path = $cat_list_arr[$i];\n    $name = $cat_list_arr[$i+1];\n    $cat_list .= \"<a href=\\\"$_SERVER[PHP_SELF]?cat=$path\\\">$name<\/a><br \/>\";\n }","output":null}],"udm_cat_path":[{"title":"Specifying path to the current category in the following format: '> Root > Sport > Auto > Ferrari'","source":"$cat_path_arr = udm_cat_path($udm_agent, $cat);\n  $cat_path = '';\n  for ($i=0; $i<count($cat_path_arr); $i+=2) {\n    $path = $cat_path_arr[$i];\n    $name = $cat_path_arr[$i+1];\n    $cat_path .= \" > <a href=\\\"$_SERVER[PHP_SELF]?cat=$path\\\">$name<\/a> \";\n  }","output":null}],"udm_load_ispell_data":[{"title":"udm_load_ispell_data() example","source":"if ((! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'en', '\/opt\/ispell\/en.aff', 0)) ||\n    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'ru', '\/opt\/ispell\/ru.aff', 0)) ||\n    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'en', '\/opt\/ispell\/en.dict', 0)) ||\n    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'ru', '\/opt\/ispell\/ru.dict', 1))) {\n    exit;\n}","output":null},{"title":null,"source":"if ((! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'en', '\/opt\/ispell\/en.aff', 0)) ||\n   (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'ru', '\/opt\/ispell\/ru.aff', 0)) ||\n   (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'en', '\/opt\/ispell\/en.dict', 0)) ||\n   (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'ru', '\/opt\/ispell\/ru.dict', 1))) {\n exit;\n }","output":null},{"title":null,"source":"if (!udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SERVER, '', '', 1)) {\n    echo \"Error loading ispell data from server<br \/>\\n\";\n    exit;\n}","output":null},{"title":"udm_load_ispell_data() example","source":"if (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_DB, '', '', 1)) {\n  printf(\"Error #%d: '%s'\\n\", udm_errno($udm), udm_error($udm));\n  exit;\n}","output":null}],"uksort":[{"title":"uksort() example","source":"function cmp($a, $b)\n{\n    $a = preg_replace('@^(a|an|the) @', '', $a);\n    $b = preg_replace('@^(a|an|the) @', '', $b);\n    return strcasecmp($a, $b);\n}\n\n$a = array(\"John\" => 1, \"the Earth\" => 2, \"an apple\" => 3, \"a banana\" => 4);\n\nuksort($a, \"cmp\");\n\nforeach ($a as $key => $value) {\n    echo \"$key: $value\\n\";\n}","output":"an apple: 3\na banana: 4\nthe Earth: 2\nJohn: 1"}],"umask":[{"title":"umask() example","source":"$old = umask(0);\nchmod(\"\/path\/some_dir\/some_file.txt\", 0755);\numask($old);\n\n\/\/ Checking\nif ($old != umask()) {\n    die('An error occurred while changing back the umask');\n}","output":null}],"uniqid":[{"title":"uniqid() Example","source":"\/* A uniqid, like: 4b3403665fea6 *\/\nprintf(\"uniqid(): %s\\r\\n\", uniqid());\n\n\/* We can also prefix the uniqid, this the same as \n * doing:\n *\n * $uniqid = $prefix . uniqid();\n * $uniqid = uniqid($prefix);\n *\/\nprintf(\"uniqid('php_'): %s\\r\\n\", uniqid('php_'));\n\n\/* We can also activate the more_entropy parameter, which is \n * required on some systems, like Cygwin. This makes uniqid()\n * produce a value like: 4b340550242239.64159797\n *\/\nprintf(\"uniqid('', true): %s\\r\\n\", uniqid('', true));","output":null}],"unlink":[{"title":"Basic unlink() usage","source":"$fh = fopen('test.html', 'a');\nfwrite($fh, '<h1>Hello world!<\/h1>');\nfclose($fh);\n\nunlink('test.html');","output":null}],"unpack":[{"title":"unpack() example","source":"$binarydata = \"\\x04\\x00\\xa0\\x00\";\n$array = unpack(\"cchars\/nint\", $binarydata);\nprint_r($array);","output":"Array\n(\n    [chars] => 4\n    [int] => 160\n)"},{"title":"unpack() example with a repeater","source":"$binarydata = \"\\x04\\x00\\xa0\\x00\";\n$array = unpack(\"c2chars\/nint\", $binarydata);\nprint_r($array);","output":"Array\n(\n    [chars1] => 4\n    [chars2] => 0\n    [int] => 40960\n)"},{"title":"unpack() example with unnamed keys","source":"$binarydata = \"\\x32\\x42\\x00\\xa0\";\n$array = unpack(\"c2\/n\", $binarydata);\nvar_dump($array);","output":"array(2) {\n  [1]=>\n  int(160)\n  [2]=>\n  int(66)\n}"}],"unserialize":[{"title":"unserialize() example","source":"\/\/ Here, we use unserialize() to load session data to the\n\/\/ $session_data array from the string selected from a database.\n\/\/ This example complements the one described with serialize().\n\n$conn = odbc_connect(\"webdb\", \"php\", \"chicken\");\n$stmt = odbc_prepare($conn, \"SELECT data FROM sessions WHERE id = ?\");\n$sqldata = array($_SERVER['PHP_AUTH_USER']);\nif (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {\n    \/\/ if the execute or fetch fails, initialize to empty array\n    $session_data = array();\n} else {\n    \/\/ we should now have the serialized data in $tmp[0].\n    $session_data = unserialize($tmp[0]);\n    if (!is_array($session_data)) {\n        \/\/ something went wrong, initialize to empty array\n        $session_data = array();\n    }\n}","output":null},{"title":"unserialize_callback_func example","source":"$serialized_object='O:1:\"a\":1:{s:5:\"value\";s:3:\"100\";}';\n\nini_set('unserialize_callback_func', 'mycallback'); \/\/ set your callback_function\n\nfunction mycallback($classname) \n{\n    \/\/ just include a file containing your classdefinition\n    \/\/ you get $classname to figure out which classdefinition is required\n}","output":null}],"unset":[{"title":null,"source":"function destroy_foo() \n{\n    global $foo;\n    unset($foo);\n}\n\n$foo = 'bar';\ndestroy_foo();\necho $foo;","output":null},{"title":null,"source":"Unset a given variable\n unserialize\n var_dump\n Variable handling Functions\n PHP Manual\n\n \n  unset\n  (PHP 4, PHP 5, PHP 7)unset — Unset a given variable\n\n \n \n \n  Description\n  \n   void unset\n    ( mixed $var\n   [, mixed $...\n  ] )\n\n  \n   unset() destroys the specified variables. \n  \n  \n   The behavior of unset() inside of a function\n   can vary depending on what type of variable you are attempting to\n   destroy.\n  \n  \n   If a globalized variable is unset() inside of\n   a function, only the local variable is destroyed.  The variable\n   in the calling environment will retain the same value as before\n   unset() was called.\n   \n    \n\n<?php\nfunction destroy_foo() \n{\n    global $foo;\n    unset($foo);\n}\n\n$foo = 'bar';\ndestroy_foo();\necho $foo;\n?>\n\n\n    \n\n   \n  \n  The above example will output:\n  \n   \n    \n\nbar\n\n    \n   \n  \n  \n   To unset() a global variable\n   inside of a function, then use\n   the $GLOBALS array to do so:\n   \n    \n\n<?php\nfunction foo() \n{\n    unset($GLOBALS['bar']);\n}\n\n$bar = \"something\";\nfoo();\n?>\n\n\n    \n\n   \n  \n  \n   If a variable that is PASSED BY REFERENCE is\n   unset() inside of a function, only the local\n   variable is destroyed.  The variable in the calling environment\n   will retain the same value as before unset()\n   was called.\n   \n    \n\n<?php\nfunction foo(&$bar) \n{\n    unset($bar);\n    $bar = \"blah\";\n}\n\n$bar = 'something';\necho \"$bar\\n\";\n\nfoo($bar);\necho \"$bar\\n\";\n?>\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nsomething\nsomething\n\n    \n   \n  \n  \n   If a static variable is unset() inside of a\n   function, unset() destroys the variable only in the\n   context of the rest of a function. Following calls will restore the\n   previous value of a variable.\n   \n    \n\n<?php\nfunction foo()\n{\n    static $bar;\n    $bar++;\n    echo \"Before unset: $bar, \";\n    unset($bar);\n    $bar = 23;\n    echo \"after unset: $bar\\n\";\n}\n\nfoo();\nfoo();\nfoo();\n?>\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nBefore unset: 1, after unset: 23\nBefore unset: 2, after unset: 23\nBefore unset: 3, after unset: 23\n\n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \nvar\n\n     \n\n      \n       The variable to be unset.\n      \n     \n\n    \n    \n     \n...\n\n     \n\n      \n       Another variable ...\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 unset() example\n    \n\n<?php\n\/\/ destroy a single variable\nunset($foo);\n\n\/\/ destroy a single element of an array\nunset($bar['quux']);\n\n\/\/ destroy more than one variable\nunset($foo1, $foo2, $foo3);\n?>\n\n\n    \n\n   \n   \n    Example #2 Using (unset) casting\n    \n     (unset) casting is often confused with the\n     unset() function. (unset)\n     casting serves only as a NULL-type cast, for\n     completeness. It does not alter the variable it's casting.\n    \n    \n\n<?php\n$name = 'Felipe';\n\nvar_dump((unset) $name);\nvar_dump($name);\n?>\n\n\n    \n\n    The above example will output:\n    \n\nNULL\nstring(6) \"Felipe\"\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions.\n\n  Note: \n   \n    It is possible to unset even object properties visible in current context.\n   \n  \n  Note: \n   \n    It is not possible to unset $this inside an object\n    method since PHP 5.\n   \n  \n  Note: \n   \n    When using unset() on inaccessible object properties,\n    the __unset()\n    overloading method will be called, if declared.\n   \n  \n \n\n \n \n  See Also\n  \n   isset() - Determine if a variable is set and is not NULL\n    empty() - Determine whether a variable is empty\n    __unset()\n    array_splice() - Remove a portion of the array and replace it with something else\n   \n\n\n\n unserialize\n var_dump\n Variable handling Functions\n PHP Manual","output":"bar"},{"title":null,"source":"function foo() \n{\n    unset($GLOBALS['bar']);\n}\n\n$bar = \"something\";\nfoo();","output":null},{"title":null,"source":"function foo(&$bar) \n{\n    unset($bar);\n    $bar = \"blah\";\n}\n\n$bar = 'something';\necho \"$bar\\n\";\n\nfoo($bar);\necho \"$bar\\n\";","output":null},{"title":null,"source":"Unset a given variable\n unserialize\n var_dump\n Variable handling Functions\n PHP Manual\n\n \n  unset\n  (PHP 4, PHP 5, PHP 7)unset — Unset a given variable\n\n \n \n \n  Description\n  \n   void unset\n    ( mixed $var\n   [, mixed $...\n  ] )\n\n  \n   unset() destroys the specified variables. \n  \n  \n   The behavior of unset() inside of a function\n   can vary depending on what type of variable you are attempting to\n   destroy.\n  \n  \n   If a globalized variable is unset() inside of\n   a function, only the local variable is destroyed.  The variable\n   in the calling environment will retain the same value as before\n   unset() was called.\n   \n    \n\n<?php\nfunction destroy_foo() \n{\n    global $foo;\n    unset($foo);\n}\n\n$foo = 'bar';\ndestroy_foo();\necho $foo;\n?>\n\n\n    \n\n   \n  \n  The above example will output:\n  \n   \n    \n\nbar\n\n    \n   \n  \n  \n   To unset() a global variable\n   inside of a function, then use\n   the $GLOBALS array to do so:\n   \n    \n\n<?php\nfunction foo() \n{\n    unset($GLOBALS['bar']);\n}\n\n$bar = \"something\";\nfoo();\n?>\n\n\n    \n\n   \n  \n  \n   If a variable that is PASSED BY REFERENCE is\n   unset() inside of a function, only the local\n   variable is destroyed.  The variable in the calling environment\n   will retain the same value as before unset()\n   was called.\n   \n    \n\n<?php\nfunction foo(&$bar) \n{\n    unset($bar);\n    $bar = \"blah\";\n}\n\n$bar = 'something';\necho \"$bar\\n\";\n\nfoo($bar);\necho \"$bar\\n\";\n?>\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nsomething\nsomething\n\n    \n   \n  \n  \n   If a static variable is unset() inside of a\n   function, unset() destroys the variable only in the\n   context of the rest of a function. Following calls will restore the\n   previous value of a variable.\n   \n    \n\n<?php\nfunction foo()\n{\n    static $bar;\n    $bar++;\n    echo \"Before unset: $bar, \";\n    unset($bar);\n    $bar = 23;\n    echo \"after unset: $bar\\n\";\n}\n\nfoo();\nfoo();\nfoo();\n?>\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nBefore unset: 1, after unset: 23\nBefore unset: 2, after unset: 23\nBefore unset: 3, after unset: 23\n\n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \nvar\n\n     \n\n      \n       The variable to be unset.\n      \n     \n\n    \n    \n     \n...\n\n     \n\n      \n       Another variable ...\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 unset() example\n    \n\n<?php\n\/\/ destroy a single variable\nunset($foo);\n\n\/\/ destroy a single element of an array\nunset($bar['quux']);\n\n\/\/ destroy more than one variable\nunset($foo1, $foo2, $foo3);\n?>\n\n\n    \n\n   \n   \n    Example #2 Using (unset) casting\n    \n     (unset) casting is often confused with the\n     unset() function. (unset)\n     casting serves only as a NULL-type cast, for\n     completeness. It does not alter the variable it's casting.\n    \n    \n\n<?php\n$name = 'Felipe';\n\nvar_dump((unset) $name);\nvar_dump($name);\n?>\n\n\n    \n\n    The above example will output:\n    \n\nNULL\nstring(6) \"Felipe\"\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions.\n\n  Note: \n   \n    It is possible to unset even object properties visible in current context.\n   \n  \n  Note: \n   \n    It is not possible to unset $this inside an object\n    method since PHP 5.\n   \n  \n  Note: \n   \n    When using unset() on inaccessible object properties,\n    the __unset()\n    overloading method will be called, if declared.\n   \n  \n \n\n \n \n  See Also\n  \n   isset() - Determine if a variable is set and is not NULL\n    empty() - Determine whether a variable is empty\n    __unset()\n    array_splice() - Remove a portion of the array and replace it with something else\n   \n\n\n\n unserialize\n var_dump\n Variable handling Functions\n PHP Manual","output":"something\nsomething"},{"title":null,"source":"function foo()\n{\n    static $bar;\n    $bar++;\n    echo \"Before unset: $bar, \";\n    unset($bar);\n    $bar = 23;\n    echo \"after unset: $bar\\n\";\n}\n\nfoo();\nfoo();\nfoo();","output":null},{"title":null,"source":"Unset a given variable\n unserialize\n var_dump\n Variable handling Functions\n PHP Manual\n\n \n  unset\n  (PHP 4, PHP 5, PHP 7)unset — Unset a given variable\n\n \n \n \n  Description\n  \n   void unset\n    ( mixed $var\n   [, mixed $...\n  ] )\n\n  \n   unset() destroys the specified variables. \n  \n  \n   The behavior of unset() inside of a function\n   can vary depending on what type of variable you are attempting to\n   destroy.\n  \n  \n   If a globalized variable is unset() inside of\n   a function, only the local variable is destroyed.  The variable\n   in the calling environment will retain the same value as before\n   unset() was called.\n   \n    \n\n<?php\nfunction destroy_foo() \n{\n    global $foo;\n    unset($foo);\n}\n\n$foo = 'bar';\ndestroy_foo();\necho $foo;\n?>\n\n\n    \n\n   \n  \n  The above example will output:\n  \n   \n    \n\nbar\n\n    \n   \n  \n  \n   To unset() a global variable\n   inside of a function, then use\n   the $GLOBALS array to do so:\n   \n    \n\n<?php\nfunction foo() \n{\n    unset($GLOBALS['bar']);\n}\n\n$bar = \"something\";\nfoo();\n?>\n\n\n    \n\n   \n  \n  \n   If a variable that is PASSED BY REFERENCE is\n   unset() inside of a function, only the local\n   variable is destroyed.  The variable in the calling environment\n   will retain the same value as before unset()\n   was called.\n   \n    \n\n<?php\nfunction foo(&$bar) \n{\n    unset($bar);\n    $bar = \"blah\";\n}\n\n$bar = 'something';\necho \"$bar\\n\";\n\nfoo($bar);\necho \"$bar\\n\";\n?>\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nsomething\nsomething\n\n    \n   \n  \n  \n   If a static variable is unset() inside of a\n   function, unset() destroys the variable only in the\n   context of the rest of a function. Following calls will restore the\n   previous value of a variable.\n   \n    \n\n<?php\nfunction foo()\n{\n    static $bar;\n    $bar++;\n    echo \"Before unset: $bar, \";\n    unset($bar);\n    $bar = 23;\n    echo \"after unset: $bar\\n\";\n}\n\nfoo();\nfoo();\nfoo();\n?>\n\n\n    \n\n   \n  \n   The above example will output:\n  \n   \n    \n\nBefore unset: 1, after unset: 23\nBefore unset: 2, after unset: 23\nBefore unset: 3, after unset: 23\n\n    \n   \n  \n \n\n\n \n  Parameters\n  \n   \nvar\n\n     \n\n      \n       The variable to be unset.\n      \n     \n\n    \n    \n     \n...\n\n     \n\n      \n       Another variable ...\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #1 unset() example\n    \n\n<?php\n\/\/ destroy a single variable\nunset($foo);\n\n\/\/ destroy a single element of an array\nunset($bar['quux']);\n\n\/\/ destroy more than one variable\nunset($foo1, $foo2, $foo3);\n?>\n\n\n    \n\n   \n   \n    Example #2 Using (unset) casting\n    \n     (unset) casting is often confused with the\n     unset() function. (unset)\n     casting serves only as a NULL-type cast, for\n     completeness. It does not alter the variable it's casting.\n    \n    \n\n<?php\n$name = 'Felipe';\n\nvar_dump((unset) $name);\nvar_dump($name);\n?>\n\n\n    \n\n    The above example will output:\n    \n\nNULL\nstring(6) \"Felipe\"\n\n    \n   \n  \n \n\n\n \n  Notes\n  Note: Because this is a\nlanguage construct and not a function, it cannot be called using\nvariable functions.\n\n  Note: \n   \n    It is possible to unset even object properties visible in current context.\n   \n  \n  Note: \n   \n    It is not possible to unset $this inside an object\n    method since PHP 5.\n   \n  \n  Note: \n   \n    When using unset() on inaccessible object properties,\n    the __unset()\n    overloading method will be called, if declared.\n   \n  \n \n\n \n \n  See Also\n  \n   isset() - Determine if a variable is set and is not NULL\n    empty() - Determine whether a variable is empty\n    __unset()\n    array_splice() - Remove a portion of the array and replace it with something else\n   \n\n\n\n unserialize\n var_dump\n Variable handling Functions\n PHP Manual","output":"Before unset: 1, after unset: 23\nBefore unset: 2, after unset: 23\nBefore unset: 3, after unset: 23"},{"title":"unset() example","source":"\/\/ destroy a single variable\nunset($foo);\n\n\/\/ destroy a single element of an array\nunset($bar['quux']);\n\n\/\/ destroy more than one variable\nunset($foo1, $foo2, $foo3);","output":null},{"title":"Using (unset) casting","source":"$name = 'Felipe';\n\nvar_dump((unset) $name);\nvar_dump($name);","output":"NULL\nstring(6) \"Felipe\""}],"uopz_compose":[{"title":"uopz_compose() example","source":"class myClass {}\ntrait myTrait {}\ninterface myInterface {}\n\nuopz_compose(\n    Composed::class, [\n        myClass::class, \n        myTrait::class, \n        myInterface::class\n    ], [\n    \"__construct\" => function() {\n        \/* ... *\/\n    }\n]);\n\nvar_dump(\n class_uses(Composed::class),\n class_parents(Composed::class),\n class_implements(Composed::class));","output":"array(1) {\n  [\"myTrait\"]=>\n  string(7) \"myTrait\"\n}\narray(1) {\n  [\"myClass\"]=>\n  string(7) \"myClass\"\n}\narray(1) {\n  [\"myInterface\"]=>\n  string(11) \"myInterface\"\n}"}],"uopz_extend":[{"title":"uopz_extend() example","source":"class A {}\nclass B {}\n\nuopz_extend(A::class, B::class);\n\nvar_dump(class_parents(A::class));","output":"array(1) {\n  [\"B\"]=>\n  string(1) \"B\"\n}"}],"uopz_implement":[{"title":"uopz_implement() example","source":"interface myInterface {}\n\nclass myClass {}\n\nuopz_implement(myClass::class, myInterface::class);\n\nvar_dump(class_implements(myClass::class));","output":"array(1) {\n  [\"myInterface\"]=>\n  string(11) \"myInterface\"\n}"}],"uopz_overload":[{"title":"uopz_overload() example","source":"uopz_overload(ZEND_EXIT, function(){});\n\nexit();\necho \"Hello World\";","output":"Hello World"}],"urldecode":[{"title":"urldecode() example","source":"$query = \"my=apples&are=green+and+red\";\n\nforeach (explode('&', $query) as $chunk) {\n    $param = explode(\"=\", $chunk);\n\n    if ($param) {\n        printf(\"Value for parameter \\\"%s\\\" is \\\"%s\\\"<br\/>\\n\", urldecode($param[0]), urldecode($param[1]));\n    }\n}","output":null}],"urlencode":[{"title":"urlencode() example","source":"echo '<a href=\"mycgi?foo=', urlencode($userinput), '\">';","output":null},{"title":"urlencode() and htmlentities() example","source":"$query_string = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);\necho '<a href=\"mycgi?' . htmlentities($query_string) . '\">';","output":null}],"usleep":[{"title":"usleep() example","source":"\/\/ Current time\necho date('h:i:s') . \"\\n\";\n\n\/\/ wait for 2 seconds\nusleep(2000000);\n\n\/\/ back!\necho date('h:i:s') . \"\\n\";","output":"11:13:28\n11:13:30"}],"usort":[{"title":"usort() example","source":"function cmp($a, $b)\n{\n    if ($a == $b) {\n        return 0;\n    }\n    return ($a < $b) ? -1 : 1;\n}\n\n$a = array(3, 2, 5, 6, 1);\n\nusort($a, \"cmp\");\n\nforeach ($a as $key => $value) {\n    echo \"$key: $value\\n\";\n}","output":"0: 1\n1: 2\n2: 3\n3: 5\n4: 6"},{"title":"usort() example using multi-dimensional array","source":"function cmp($a, $b)\n{\n    return strcmp($a[\"fruit\"], $b[\"fruit\"]);\n}\n\n$fruits[0][\"fruit\"] = \"lemons\";\n$fruits[1][\"fruit\"] = \"apples\";\n$fruits[2][\"fruit\"] = \"grapes\";\n\nusort($fruits, \"cmp\");\n\nwhile (list($key, $value) = each($fruits)) {\n    echo \"\\$fruits[$key]: \" . $value[\"fruit\"] . \"\\n\";\n}","output":"$fruits[0]: apples\n$fruits[1]: grapes\n$fruits[2]: lemons"},{"title":"usort() example using a member function of an object","source":"class TestObj {\n    var $name;\n\n    function TestObj($name)\n    {\n        $this->name = $name;\n    }\n\n    \/* This is the static comparing function: *\/\n    static function cmp_obj($a, $b)\n    {\n        $al = strtolower($a->name);\n        $bl = strtolower($b->name);\n        if ($al == $bl) {\n            return 0;\n        }\n        return ($al > $bl) ? +1 : -1;\n    }\n}\n\n$a[] = new TestObj(\"c\");\n$a[] = new TestObj(\"b\");\n$a[] = new TestObj(\"d\");\n\nusort($a, array(\"TestObj\", \"cmp_obj\"));\n\nforeach ($a as $item) {\n    echo $item->name . \"\\n\";\n}","output":"b\nc\nd"},{"title":"usort() example using a closure to sort a multi-dimensional array","source":"$array[0] = array('key_a' => 'z', 'key_b' => 'c');\n$array[1] = array('key_a' => 'x', 'key_b' => 'b');\n$array[2] = array('key_a' => 'y', 'key_b' => 'a');\n\nfunction build_sorter($key) {\n    return function ($a, $b) use ($key) {\n        return strnatcmp($a[$key], $b[$key]);\n    };\n}\n\nusort($array, build_sorter('key_b'));\n\nforeach ($array as $item) {\n    echo $item['key_a'] . ', ' . $item['key_b'] . \"\\n\";\n}","output":"y, a\nx, b\nz, c"}],"var_dump":[{"title":"var_dump() example","source":"$a = array(1, 2, array(\"a\", \"b\", \"c\"));\nvar_dump($a);","output":"array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  array(3) {\n    [0]=>\n    string(1) \"a\"\n    [1]=>\n    string(1) \"b\"\n    [2]=>\n    string(1) \"c\"\n  }\n}"}],"var_export":[{"title":"var_export() Examples","source":"$a = array (1, 2, array (\"a\", \"b\", \"c\"));\nvar_export($a);","output":"array (\n  0 => 1,\n  1 => 2,\n  2 => \n  array (\n    0 => 'a',\n    1 => 'b',\n    2 => 'c',\n  ),\n)"},{"title":"Exporting classes since PHP 5.1.0","source":"class A { public $var; }\n$a = new A;\n$a->var = 5;\nvar_export($a);","output":"A::__set_state(array(\n   'var' => 5,\n))"},{"title":"Using __set_state() (since PHP 5.1.0)","source":"class A\n{\n    public $var1;\n    public $var2;\n\n    public static function __set_state($an_array)\n    {\n        $obj = new A;\n        $obj->var1 = $an_array['var1'];\n        $obj->var2 = $an_array['var2'];\n        return $obj;\n    }\n}\n\n$a = new A;\n$a->var1 = 5;\n$a->var2 = 'foo';\n\neval('$b = ' . var_export($a, true) . ';'); \/\/ $b = A::__set_state(array(\n                                            \/\/    'var1' => 5,\n                                            \/\/    'var2' => 'foo',\n                                            \/\/ ));\nvar_dump($b);","output":"object(A)#2 (2) {\n  [\"var1\"]=>\n  int(5)\n  [\"var2\"]=>\n  string(3) \"foo\"\n}"}],"version_compare":[{"title":"version_compare() examples","source":"if (version_compare(PHP_VERSION, '7.0.0') >= 0) {\n    echo 'I am at least PHP version 7.0.0, my version: ' . PHP_VERSION . \"\\n\";\n}\n\nif (version_compare(PHP_VERSION, '5.3.0') >= 0) {\n    echo 'I am at least PHP version 5.3.0, my version: ' . PHP_VERSION . \"\\n\";\n}\n\nif (version_compare(PHP_VERSION, '5.0.0', '>=')) {\n    echo 'I am at least PHP version 5.0.0, my version: ' . PHP_VERSION . \"\\n\";\n}\n\nif (version_compare(PHP_VERSION, '5.0.0', '<')) {\n    echo 'I am still PHP 4, my version: ' . PHP_VERSION . \"\\n\";\n}","output":null}],"vfprintf":[{"title":"vfprintf(): zero-padded integers","source":"if (!($fp = fopen('date.txt', 'w')))\n    return;\n\nvfprintf($fp, \"%04d-%02d-%02d\", array($year, $month, $day));\n\/\/ will write the formatted ISO date to date.txt","output":null}],"vprintf":[{"title":"vprintf(): zero-padded integers","source":"vprintf(\"%04d-%02d-%02d\", explode('-', '1988-8-1')); \/\/ 1988-08-01","output":null}],"vsprintf":[{"title":"vsprintf(): zero-padded integers","source":"print vsprintf(\"%04d-%02d-%02d\", explode('-', '1988-8-1')); \/\/ 1988-08-01","output":null}],"wddx_serialize_vars":[{"title":"wddx_serialize_vars() example","source":"$a = 1;\n$b = 5.5;\n$c = array(\"blue\", \"orange\", \"violet\");\n$d = \"colors\";\n\n$clvars = array(\"c\", \"d\");\necho wddx_serialize_vars(\"a\", \"b\", $clvars);","output":"<wddxPacket version='1.0'><header\/><data><struct><var name='a'><number>1<\/number><\/var>\n<var name='b'><number>5.5<\/number><\/var><var name='c'><array length='3'>\n<string>blue<\/string><string>orange<\/string><string>violet<\/string><\/array><\/var>\n<var name='d'><string>colors<\/string><\/var><\/struct><\/data><\/wddxPacket>"}],"win32_create_service":[{"title":"A win32_create_service() example","source":"$x = win32_create_service(array(\n    'service'     => 'dummyphp',                                           # the name of your service\n    'display'     => 'sample dummy PHP service',                           # short description\n    'description' => 'This is a dummy Windows service created using PHP.', # long description\n    'params'      => '\"' . __FILE__ . '\"  run',                            # path to the script and parameters\n));\ndebug_zval_dump($x);","output":null}],"win32_delete_service":[{"title":"A win32_delete_service() example","source":"win32_delete_service('dummyphp');","output":null}],"win32_start_service_ctrl_dispatcher":[{"title":"A win32_start_service_ctrl_dispatcher() example","source":"if (!win32_start_service_ctrl_dispatcher('dummyphp')) {\n  die(\"I'm probably not running under the service control manager\");\n}\n\nwin32_set_service_status(WIN32_SERVICE_START_PENDING);\n\n\/\/ Some lengthy process to get this service up and running.\n\nwin32_set_service_status(WIN32_SERVICE_RUNNING);\n\nwhile (WIN32_SERVICE_CONTROL_STOP != win32_get_last_control_message()) {\n  # do some work here, trying not to take more than around 30 seconds\n  # before coming back into the loop again\n}","output":null}],"wincache_fcache_fileinfo":[{"title":"A wincache_fcache_fileinfo() example","source":"<pre>\n<?php\nprint_r(wincache_fcache_fileinfo());\n?>\n<\/pre>","output":"Array\n(   [total_cache_uptime] => 3234\n    [total_file_count] => 5\n    [total_hit_count] => 0\n    [total_miss_count] => 1\n    [file_entries] => Array\n        (\n            [1] => Array\n                (\n                    [file_name] => c:\\inetpub\\wwwroot\\checkcache.php\n                    [add_time] => 1\n                    [use_time] => 0\n                    [last_check] => 1\n                    [hit_count] => 1\n                    [file_size] => 2435\n                )\n            [2] => Array (...iterates for each cached file)\n        )\n)"}],"wincache_fcache_meminfo":[{"title":"A wincache_fcache_meminfo() example","source":"<pre>\n<?php\nprint_r(wincache_fcache_meminfo());\n?>\n<\/pre>","output":"Array\n(\n    [memory_total] => 134217728\n    [memory_free] => 131339120\n    [num_used_blks] => 361\n    [num_free_blks] => 3\n    [memory_overhead] => 5856\n)"}],"wincache_lock":[{"title":"Using wincache_lock()","source":"$fp = fopen(\"\/tmp\/lock.txt\", \"r+\");\nif (wincache_lock(“lock_txt_lock”)) { \/\/ do an exclusive lock\n    ftruncate($fp, 0); \/\/ truncate file\n    fwrite($fp, \"Write something here\\n\");\n    wincache_unlock(“lock_txt_lock”); \/\/ release the lock\n} else {\n    echo \"Couldn't get the lock!\";\n}\nfclose($fp);","output":null}],"wincache_ocache_fileinfo":[{"title":"A wincache_ocache_fileinfo() example","source":"<pre>\n<?php\nprint_r(wincache_ocache_fileinfo());\n?>\n<\/pre>","output":"Array\n(\n    [total_cache_uptime] => 17357\n    [total_file_count] => 121\n    [total_hit_count] => 36562\n    [total_miss_count] => 201\n    [file_entries] => Array\n        (\n            [1] => Array\n                (\n                    [file_name] => c:\\inetpub\\wwwroot\\checkcache.php\n                    [add_time] => 17356\n                    [use_time] => 7\n                    [last_check] => 10\n                    [hit_count] => 454\n                    [function_count] => 0\n                    [class_count] => 1\n                )\n            [2] => Array (...iterates for each cached file)\n        )\n)"}],"wincache_ocache_meminfo":[{"title":"A wincache_ocache_meminfo() example","source":"<pre>\n<?php\nprint_r(wincache_ocache_meminfo());\n?>\n<\/pre>","output":"Array\n(\n    [memory_total] => 134217728\n    [memory_free] => 112106972\n    [num_used_blks] => 15469\n    [num_free_blks] => 4\n    [memory_overhead] => 247600\n)"}],"wincache_rplist_fileinfo":[{"title":"A wincache_rplist_fileinfo() example","source":"<pre>\n<?php\nprint_r(wincache_rplist_fileinfo());\n?>\n<\/pre>","output":"Array\n(\n    [total_file_count] => 5\n    [rplist_entries] => Array\n        (\n            [1] => Array\n                (\n                    [resolve_path] => checkcache.php\n                    [subkey_data] => c:\\inetpub\\wwwroot|c:\\inetpub\\wwwroot\\checkcache.php\n                )\n\n            [2] => Array (...iterates for each cached file)\n        )\n)"}],"wincache_rplist_meminfo":[{"title":"A wincache_rplist_meminfo() example","source":"<pre>\n<?php\nprint_r(wincache_rplist_meminfo());\n?>\n<\/pre>","output":"Array\n(\n    [memory_total] => 9437184\n    [memory_free] => 9416744\n    [num_used_blks] => 23\n    [num_free_blks] => 1\n    [memory_overhead] => 416\n)"}],"wincache_scache_info":[{"title":"A wincache_scache_info() example","source":"<pre>\n<?php\nprint_r(wincache_scache_info());\n?>\n<\/pre>","output":"Array\n(\n    [total_cache_uptime] => 17357\n    [total_file_count] => 121\n    [total_hit_count] => 36562\n    [total_miss_count] => 201\n    [scache_entries] => Array\n        (\n            [1] => Array\n                (\n                    [file_name] => c:\\inetpub\\wwwroot\\checkcache.php\n                    [add_time] => 17356\n                    [use_time] => 7\n                    [last_check] => 10\n                    [hit_count] => 454\n                    [function_count] => 0\n                    [class_count] => 1\n                )\n            [2] => Array (...iterates for each cached file)\n        )\n)"}],"wincache_scache_meminfo":[{"title":"A wincache_scache_meminfo() example","source":"<pre>\n<?php\nprint_r(wincache_scache_meminfo());\n?>\n<\/pre>","output":"Array \n( \n    [memory_total] => 5242880 \n    [memory_free] => 5215056 \n    [num_used_blks] => 6 \n    [num_free_blks] => 3 \n    [memory_overhead] => 176\n)"}],"wincache_ucache_cas":[{"title":"Using wincache_ucache_cas()","source":"wincache_ucache_set('counter', 2922);\nvar_dump(wincache_ucache_cas('counter', 2922, 1));\nvar_dump(wincache_ucache_get('counter'));","output":"bool(true) \nint(1)"}],"wincache_ucache_clear":[{"title":"using wincache_ucache_clear()","source":"wincache_ucache_set('green', 1);\nwincache_ucache_set('red', 2);\nwincache_ucache_set('orange', 4);\nwincache_ucache_set('blue', 8);\nwincache_ucache_set('cyan', 16);\n$array1 = array('green', 'red', 'orange', 'blue', 'cyan');\nvar_dump(wincache_ucache_get($array1));\nvar_dump(wincache_ucache_clear());\nvar_dump(wincache_ucache_get($array1));","output":"array(5) { [\"green\"]=> int(1) \n           [\"red\"]=> int(2) \n           [\"orange\"]=> int(4) \n           [\"blue\"]=> int(8) \n           [\"cyan\"]=> int(16) } \nbool(true) \nbool(false)"}],"wincache_ucache_dec":[{"title":"Using wincache_ucache_dec()","source":"wincache_ucache_set('counter', 1);\nvar_dump(wincache_ucache_dec('counter', 2923, $success));\nvar_dump($success);","output":"int(2922) \nbool(true)"}],"wincache_ucache_delete":[{"title":"Using wincache_ucache_delete() with key as a string","source":"wincache_ucache_set('foo', 'bar');\nvar_dump(wincache_ucache_delete('foo'));\nvar_dump(wincache_ucache_exists('foo'));","output":"bool(true)\nbool(false)"},{"title":"Usingwincache_ucache_delete() with key as an array","source":"$array1 = array('green' => '5', 'blue' => '6', 'yellow' => '7', 'cyan' => '8');\nwincache_ucache_set($array1);\n$array2 = array('green', 'blue', 'yellow', 'cyan');\nvar_dump(wincache_ucache_delete($array2));","output":"array(4) { [0]=> string(5) \"green\" \n           [1]=> string(4) \"Blue\" \n           [2]=> string(6) \"yellow\" \n           [3]=> string(4) \"cyan\" }"},{"title":"Using wincache_ucache_delete() with key as an array where some elements cannot be deleted","source":"$array1 = array('green' => '5', 'blue' => '6', 'yellow' => '7', 'cyan' => '8');\nwincache_ucache_set($array1);\n$array2 = array('orange', 'red', 'yellow', 'cyan');\nvar_dump(wincache_ucache_delete($array2));","output":"array(2) { [0]=> string(6) \"yellow\" \n           [1]=> string(4) \"cyan\" }"}],"wincache_ucache_exists":[{"title":"Using wincache_ucache_exists()","source":"if (!wincache_ucache_exists('green'))\n    wincache_ucache_set('green', 1);\nvar_dump(wincache_ucache_exists('green'));","output":"bool(true)"}],"wincache_ucache_get":[{"title":"wincache_ucache_get() with key as a string","source":"wincache_ucache_add('color', 'blue');\nvar_dump(wincache_ucache_get('color', $success));\nvar_dump($success);","output":"string(4) \"blue\"\nbool(true)"},{"title":"wincache_ucache_get() with key as an array","source":"$array1 = array('green' => '5', 'Blue' => '6', 'yellow' => '7', 'cyan' => '8');\nwincache_ucache_set($array1);\n$array2 = array('green', 'Blue', 'yellow', 'cyan');\nvar_dump(wincache_ucache_get($array2, $success));\nvar_dump($success);","output":"array(4) { [\"green\"]=> string(1) \"5\" \n           [\"Blue\"]=> string(1) \"6\" \n           [\"yellow\"]=> string(1) \"7\" \n           [\"cyan\"]=> string(1) \"8\" } \nbool(true)"}],"wincache_ucache_inc":[{"title":"Using wincache_ucache_inc()","source":"wincache_ucache_set('counter', 1);\nvar_dump(wincache_ucache_inc('counter', 2921, $success));\nvar_dump($success);","output":"int(2922) \nbool(true)"}],"wincache_ucache_info":[{"title":"Using wincache_ucache_info()","source":"wincache_ucache_get('green');\nwincache_ucache_set('green', 2922);\nwincache_ucache_get('green');\nwincache_ucache_get('green');\nwincache_ucache_get('green');\nprint_r(wincache_ucache_info());","output":"Array \n( [\"total_cache_uptime\"] => int(0)\n  [\"is_local_cache\"] => bool(false)\n  [\"total_item_count\"] => int(1) \n  [\"total_hit_count\"] => int(3) \n  [\"total_miss_count\"] => int(1) \n  [\"ucache_entries\"] => Array(1) \n    ( [1] => Array(6)\n      ( \n        [\"key_name\"] => string(5) \"green\"\n        [\"value_type\"] => string(4) \"long\" \n        [\"is_session\"] => int(0) \n        [\"ttl_seconds\"] => int(0)\n        [\"age_seconds\"] => int(0)\n        [\"hitcount\"] => int(3) \n       ) \n    ) \n)"}],"wincache_ucache_meminfo":[{"title":"A wincache_ucache_meminfo() example","source":"<pre>\n<?php\nprint_r(wincache_ucache_meminfo());\n?>\n<\/pre>","output":"Array \n( \n    [memory_total] => 5242880 \n    [memory_free] => 5215056 \n    [num_used_blks] => 6 \n    [num_free_blks] => 3 \n    [memory_overhead] => 176\n)"}],"wincache_unlock":[{"title":"Using wincache_unlock()","source":"$fp = fopen(\"\/tmp\/lock.txt\", \"r+\");\nif (wincache_lock(“lock_txt_lock”)) { \/\/ do an exclusive lock\n    ftruncate($fp, 0); \/\/ truncate file\n    fwrite($fp, \"Write something here\\n\");\n    wincache_unlock(“lock_txt_lock”); \/\/ release the lock\n} else {\n    echo \"Couldn't get the lock!\";\n}\nfclose($fp);","output":null}],"wordwrap":[{"title":"wordwrap() example","source":"$text = \"The quick brown fox jumped over the lazy dog.\";\n$newtext = wordwrap($text, 20, \"<br \/>\\n\");\n\necho $newtext;","output":"The quick brown fox<br \/>\njumped over the lazy<br \/>\ndog."},{"title":"wordwrap() example","source":"$text = \"A very long woooooooooooord.\";\n$newtext = wordwrap($text, 8, \"\\n\", true);\n\necho \"$newtext\\n\";","output":"A very\nlong\nwooooooo\nooooord."},{"title":"wordwrap() example","source":"$text = \"A very long woooooooooooooooooord. and something\";\n$newtext = wordwrap($text, 8, \"\\n\", false);\n\necho \"$newtext\\n\";","output":"A very\nlong\nwoooooooooooooooooord.\nand\nsomething"}],"xattr_get":[{"title":"Checks if system administrator has signed the file","source":"$file = '\/usr\/local\/sbin\/some_binary';\n$signature = xattr_get($file, 'Root signature', XATTR_ROOT);\n\n\/* ... check if $signature is valid ... *\/","output":null}],"xattr_list":[{"title":"Prints names of all extended attributes of file","source":"$file = 'some_file';\n$root_attributes = xattr_list($file, XATTR_ROOT);\n$user_attributes = xattr_list($file);\n\necho \"Root attributes: \\n\";\nforeach ($root_attributes as $attr_name) {\n    printf(\"%s\\n\", $attr_name);\n}\n\necho \"\\n User attributes: \\n\";\nforeach ($attributes as $attr_name) {\n    printf(\"%s\\n\", $attr_name);\n}","output":null}],"xattr_remove":[{"title":"Removes all extended attributes of a file","source":"$file = 'some_file';\n$attributes = xattr_list($file);\n\nforeach ($attributes as $attr_name) {\n    xattr_remove($file, $attr_name);\n}","output":null}],"xattr_set":[{"title":"Sets extended attributes on .wav file","source":"$file = 'my_favourite_song.wav';\nxattr_set($file, 'Artist', 'Someone');\nxattr_set($file, 'My ranking', 'Good');\nxattr_set($file, 'Listen count', '34');\n\n\/* ... other code ... *\/\n\nprintf(\"You've played this song %d times\", xattr_get($file, 'Listen count'));","output":null}],"xattr_supported":[{"title":"xattr_supported() example","source":"$file = 'some_file';\n\nif (xattr_supported($file)) {\n    \/* ... make use of some xattr_* functions ... *\/\n}","output":null}],"xdiff_file_bdiff_size":[{"title":"xdiff_file_bdiff_size() example","source":"$length = xdiff_string_bdiff_size('file.bdiff');\necho \"Resulting file will be $length bytes long\";","output":null}],"xdiff_file_bdiff":[{"title":"xdiff_file_bdiff() example","source":"$old_version = 'my_script_1.0.tgz';\n$new_version = 'my_script_1.1.tgz';\n\nxdiff_file_bdiff($old_version, $new_version, 'my_script.bdiff');","output":null}],"xdiff_file_bpatch":[{"title":"xdiff_file_bpatch() example","source":"$old_version = 'archive-1.0.tgz';\n$patch = 'archive.bpatch';\n\n$result = xdiff_file_bpatch($old_version, $patch, 'archive-1.1.tgz');\nif ($result) {\n   echo \"File patched\";\n} else {\n   echo \"File couldn't be patched\";\n}","output":null}],"xdiff_file_diff_binary":[{"title":"xdiff_file_diff_binary() example","source":"$old_version = 'my_script_1.0.tgz';\n$new_version = 'my_script_1.1.tgz';\n\nxdiff_file_diff_binary($old_version, $new_version, 'my_script.bdiff');","output":null}],"xdiff_file_diff":[{"title":"xdiff_file_diff() example","source":"$old_version = 'my_script.php';\n$new_version = 'my_new_script.php';\n\nxdiff_file_diff($old_version, $new_version, 'my_script.diff', 2);","output":null}],"xdiff_file_merge3":[{"title":"xdiff_file_merge3() example","source":"$old_version = 'original_script.php';\n$fix1 = 'script_with_fix1.php';\n$fix2 = 'script_with_fix2.php';\n\n$errors = xdiff_file_merge3($old_version, $fix1, $fix2, 'fixed_script.php');\nif (is_string($errors)) {\n    echo \"Rejects:\\n\";\n    echo $errors;\n}","output":null}],"xdiff_file_patch_binary":[{"title":"xdiff_file_patch_binary() example","source":"$old_version = 'archive-1.0.tgz';\n$patch = 'archive.bpatch';\n\n$result = xdiff_file_patch_binary($old_version, $patch, 'archive-1.1.tgz');\nif ($result) {\n   echo \"File patched\";\n} else {\n   echo \"File couldn't be patched\";\n}","output":null}],"xdiff_file_patch":[{"title":"xdiff_file_patch() example","source":"$old_version = 'my_script-1.0.php';\n$patch = 'my_script.patch';\n\n$errors = xdiff_file_patch($old_version, $patch, 'my_script-1.1.php');\nif (is_string($errors)) {\n   echo \"Rejects:\\n\";\n   echo $errors;\n}","output":null},{"title":"Patch reversing example","source":"$new_version = 'my_script-1.1.php';\n$patch = 'my_script.patch';\n\n$errors = xdiff_file_patch($new_version, $patch, 'my_script-1.0.php', XDIFF_PATCH_REVERSE);\nif (is_string($errors)) {\n   echo \"Rejects:\\n\";\n   echo $errors;\n}","output":null}],"xdiff_file_rabdiff":[{"title":"xdiff_file_rabdiff() example","source":"$old_version = 'my_script_1.0.tgz';\n$new_version = 'my_script_1.1.tgz';\n\nxdiff_file_rabdiff($old_version, $new_version, 'my_script.bdiff');","output":null}],"xdiff_string_bdiff_size":[{"title":"xdiff_string_bdiff_size() example","source":"$binary_patch = file_get_contents('file.bdiff');\n$length = xdiff_string_bdiff_size($binary_patch);\necho \"Resulting file will be $length bytes long\";","output":null}],"xdiff_string_diff":[{"title":"xdiff_string_diff() example","source":"$old_article = file_get_contents('.\/old_article.txt');\n$new_article = $_REQUEST['article']; \/* Let's say that someone pasted a new article to html form *\/\n\n$diff = xdiff_string_diff($old_article, $new_article, 1);\nif (is_string($diff)) {\n    echo \"Differences between two articles:\\n\";\n    echo $diff;\n}","output":null}],"xdiff_string_patch":[{"title":"xdiff_string_patch() example","source":"$old_article = file_get_contents('.\/old_article.txt');\n$diff = $_SERVER['patch']; \/* Let's say that someone pasted a patch to html form *\/\n\n$errors = '';\n\n$new_article = xdiff_string_patch($old_article, $diff, XDIFF_PATCH_NORMAL, $errors);\nif (is_string($new_article)) {\n    echo \"New article:\\n\";\n    echo $new_article;\n}\n\nif (strlen($errors)) {\n    echo \"Rejects: \\n\";\n    echo $errors;\n}","output":null}],"xhprof_disable":[{"title":"xhprof_disable() example","source":"xhprof_enable();\n\n$foo = strlen(\"foo bar\");\n\n$xhprof_data = xhprof_disable();\n\nprint_r($xhprof_data);","output":"Array\n(\n    [main()==>strlen] => Array\n        (\n            [ct] => 1\n            [wt] => 279\n        )\n\n    [main()==>xhprof_disable] => Array\n        (\n            [ct] => 1\n            [wt] => 9\n        )\n\n    [main()] => Array\n        (\n            [ct] => 1\n            [wt] => 610\n        )\n\n)"}],"xhprof_enable":[{"title":"xhprof_enable() examples","source":"\/\/ 1. elapsed time + memory + CPU profiling; and ignore built-in (internal) functions\nxhprof_enable(XHPROF_FLAGS_NO_BUILTINS | XHPROF_FLAGS_CPU | XHPROF_FLAGS_MEMORY);\n\n\/\/ 2. elapsed time profiling; ignore call_user_func* during profiling\nxhprof_enable(\n    0,\n    array('ignored_functions' =>  array('call_user_func',\n                                        'call_user_func_array')));\n                                       \n\/\/ 3. elapsed time + memory profiling; ignore call_user_func* during profiling\nxhprof_enable(\n    XHPROF_FLAGS_MEMORY,\n    array('ignored_functions' =>  array('call_user_func',\n                                        'call_user_func_array')));","output":null}],"xhprof_sample_disable":[{"title":"xhprof_sample_disable() example","source":"xhprof_sample_enable();\n\nfor ($i = 0; $i <= 10000; $i++) {\n    $a = strlen($i);\n    $b = $i * $a;\n    $c = rand();\n}\n\n$xhprof_data = xhprof_sample_disable();\n\nprint_r($xhprof_data);","output":"Array\n(\n    [1272935300.800000] => main()\n    [1272935300.900000] => main()\n)"}],"xml_parse_into_struct":[{"title":"xml_parse_into_struct() example","source":"$simple = \"<para><note>simple note<\/note><\/para>\";\n$p = xml_parser_create();\nxml_parse_into_struct($p, $simple, $vals, $index);\nxml_parser_free($p);\necho \"Index array\\n\";\nprint_r($index);\necho \"\\nVals array\\n\";\nprint_r($vals);","output":"Index array\nArray\n(\n    [PARA] => Array\n        (\n            [0] => 0\n            [1] => 2\n        )\n\n    [NOTE] => Array\n        (\n            [0] => 1\n        )\n\n)\n\nVals array\nArray\n(\n    [0] => Array\n        (\n            [tag] => PARA\n            [type] => open\n            [level] => 1\n        )\n\n    [1] => Array\n        (\n            [tag] => NOTE\n            [type] => complete\n            [level] => 2\n            [value] => simple note\n        )\n\n    [2] => Array\n        (\n            [tag] => PARA\n            [type] => close\n            [level] => 1\n        )\n\n)"},{"title":"moldb.xml - small database of molecular information","source":"Parse XML data into an array structure\n xml_get_error_code\n xml_parse\n XML Parser Functions\n PHP Manual\n\n \n  xml_parse_into_struct\n  (PHP 4, PHP 5, PHP 7)xml_parse_into_struct — Parse XML data into an array structure\n\n \n \n \n  Description\n  \n   int xml_parse_into_struct\n    ( resource $parser\n   , string $data\n   , array &$values\n   [, array &$index\n  ] )\n\n  \n   This function parses an XML string into 2 parallel array structures, one\n   (index) containing pointers to the location of the\n   appropriate values in the values array. These last\n   two parameters must be passed by reference.\n  \n \n\n\n \n  Parameters\n  \n   \nparser\n\n     \n\n      \n       A reference to the XML parser.\n      \n     \n\n    \n    \n     \ndata\n\n     \n\n      \n       A string containing the XML data.\n      \n     \n\n    \n    \n     \nvalues\n\n     \n\n      \n       An array containing the values of the XML data\n      \n     \n\n    \n    \n     \nindex\n\n     \n\n      \n       An array containing pointers to the location of the appropriate values in the $values.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   xml_parse_into_struct() returns 0 for failure and 1 for\n   success. This is not the same as FALSE and TRUE, be careful with\n   operators such as ===.\n  \n \n\n\n \n  Examples\n  \n   Below is an example that illustrates the internal structure of\n   the arrays being generated by the function. We use a simple\n   note tag embedded inside a\n   para tag, and then we parse this and print out\n   the structures generated:\n   \n    Example #1 xml_parse_into_struct() example\n    \n\n<?php\n$simple = \"<para><note>simple note<\/note><\/para>\";\n$p = xml_parser_create();\nxml_parse_into_struct($p, $simple, $vals, $index);\nxml_parser_free($p);\necho \"Index array\\n\";\nprint_r($index);\necho \"\\nVals array\\n\";\nprint_r($vals);\n?>\n\n\n    \n\n    \n     When we run that code, the output will be:\n    \n    \n\nIndex array\nArray\n(\n    [PARA] => Array\n        (\n            [0] => 0\n            [1] => 2\n        )\n\n    [NOTE] => Array\n        (\n            [0] => 1\n        )\n\n)\n\nVals array\nArray\n(\n    [0] => Array\n        (\n            [tag] => PARA\n            [type] => open\n            [level] => 1\n        )\n\n    [1] => Array\n        (\n            [tag] => NOTE\n            [type] => complete\n            [level] => 2\n            [value] => simple note\n        )\n\n    [2] => Array\n        (\n            [tag] => PARA\n            [type] => close\n            [level] => 1\n        )\n\n)\n\n    \n   \n  \n  \n   Event-driven parsing (based on the expat library) can get\n   complicated when you have an XML document that is complex.\n   This function does not produce a DOM style object, but it\n   generates structures amenable of being transversed in a tree\n   fashion. Thus, we can create objects representing the data\n   in the XML file easily. Let's consider the following XML file\n   representing a small database of aminoacids information:\n   \n    Example #2 moldb.xml - small database of molecular information\n    \n<?xml version=\"1.0\"?>\n<moldb>\n\n  <molecule>\n      <name>Alanine<\/name>\n      <symbol>ala<\/symbol>\n      <code>A<\/code>\n      <type>hydrophobic<\/type>\n  <\/molecule>\n\n  <molecule>\n      <name>Lysine<\/name>\n      <symbol>lys<\/symbol>\n      <code>K<\/code>\n      <type>charged<\/type>\n  <\/molecule>\n\n<\/moldb>\n\n    \n\n   \n   And some code to parse the document and generate the appropriate\n   objects:\n   \n    Example #3 \n     parsemoldb.php - parses moldb.xml into an array of\n     molecular objects\n    \n    \n\n<?php\n\nclass AminoAcid {\n    var $name;  \/\/ aa name\n    var $symbol;    \/\/ three letter symbol\n    var $code;  \/\/ one letter code\n    var $type;  \/\/ hydrophobic, charged or neutral\n    \n    function AminoAcid ($aa) \n    {\n        foreach ($aa as $k=>$v)\n            $this->$k = $aa[$k];\n    }\n}\n\nfunction readDatabase($filename) \n{\n    \/\/ read the XML database of aminoacids\n    $data = implode(\"\", file($filename));\n    $parser = xml_parser_create();\n    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);\n    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);\n    xml_parse_into_struct($parser, $data, $values, $tags);\n    xml_parser_free($parser);\n\n    \/\/ loop through the structures\n    foreach ($tags as $key=>$val) {\n        if ($key == \"molecule\") {\n            $molranges = $val;\n            \/\/ each contiguous pair of array entries are the \n            \/\/ lower and upper range for each molecule definition\n            for ($i=0; $i < count($molranges); $i+=2) {\n                $offset = $molranges[$i] + 1;\n                $len = $molranges[$i + 1] - $offset;\n                $tdb[] = parseMol(array_slice($values, $offset, $len));\n            }\n        } else {\n            continue;\n        }\n    }\n    return $tdb;\n}\n\nfunction parseMol($mvalues) \n{\n    for ($i=0; $i < count($mvalues); $i++) {\n        $mol[$mvalues[$i][\"tag\"]] = $mvalues[$i][\"value\"];\n    }\n    return new AminoAcid($mol);\n}\n\n$db = readDatabase(\"moldb.xml\");\necho \"** Database of AminoAcid objects:\\n\";\nprint_r($db);\n\n?>\n\n\n    \n\n   \n   After executing parsemoldb.php, the variable\n   $db contains an array of\n   AminoAcid objects, and the output of the\n   script confirms that:\n   \n    \n\n** Database of AminoAcid objects:\nArray\n(\n    [0] => aminoacid Object\n        (\n            [name] => Alanine\n            [symbol] => ala\n            [code] => A\n            [type] => hydrophobic\n        )\n\n    [1] => aminoacid Object\n        (\n            [name] => Lysine\n            [symbol] => lys\n            [code] => K\n            [type] => charged\n        )\n\n)\n\n    \n   \n  \n \n\n\n\n xml_get_error_code\n xml_parse\n XML Parser Functions\n PHP Manual","output":null},{"title":"parsemoldb.php - parses moldb.xml into an array of molecular objects","source":"class AminoAcid {\n    var $name;  \/\/ aa name\n    var $symbol;    \/\/ three letter symbol\n    var $code;  \/\/ one letter code\n    var $type;  \/\/ hydrophobic, charged or neutral\n    \n    function AminoAcid ($aa) \n    {\n        foreach ($aa as $k=>$v)\n            $this->$k = $aa[$k];\n    }\n}\n\nfunction readDatabase($filename) \n{\n    \/\/ read the XML database of aminoacids\n    $data = implode(\"\", file($filename));\n    $parser = xml_parser_create();\n    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);\n    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);\n    xml_parse_into_struct($parser, $data, $values, $tags);\n    xml_parser_free($parser);\n\n    \/\/ loop through the structures\n    foreach ($tags as $key=>$val) {\n        if ($key == \"molecule\") {\n            $molranges = $val;\n            \/\/ each contiguous pair of array entries are the \n            \/\/ lower and upper range for each molecule definition\n            for ($i=0; $i < count($molranges); $i+=2) {\n                $offset = $molranges[$i] + 1;\n                $len = $molranges[$i + 1] - $offset;\n                $tdb[] = parseMol(array_slice($values, $offset, $len));\n            }\n        } else {\n            continue;\n        }\n    }\n    return $tdb;\n}\n\nfunction parseMol($mvalues) \n{\n    for ($i=0; $i < count($mvalues); $i++) {\n        $mol[$mvalues[$i][\"tag\"]] = $mvalues[$i][\"value\"];\n    }\n    return new AminoAcid($mol);\n}\n\n$db = readDatabase(\"moldb.xml\");\necho \"** Database of AminoAcid objects:\\n\";\nprint_r($db);","output":null},{"title":null,"source":"Parse XML data into an array structure\n xml_get_error_code\n xml_parse\n XML Parser Functions\n PHP Manual\n\n \n  xml_parse_into_struct\n  (PHP 4, PHP 5, PHP 7)xml_parse_into_struct — Parse XML data into an array structure\n\n \n \n \n  Description\n  \n   int xml_parse_into_struct\n    ( resource $parser\n   , string $data\n   , array &$values\n   [, array &$index\n  ] )\n\n  \n   This function parses an XML string into 2 parallel array structures, one\n   (index) containing pointers to the location of the\n   appropriate values in the values array. These last\n   two parameters must be passed by reference.\n  \n \n\n\n \n  Parameters\n  \n   \nparser\n\n     \n\n      \n       A reference to the XML parser.\n      \n     \n\n    \n    \n     \ndata\n\n     \n\n      \n       A string containing the XML data.\n      \n     \n\n    \n    \n     \nvalues\n\n     \n\n      \n       An array containing the values of the XML data\n      \n     \n\n    \n    \n     \nindex\n\n     \n\n      \n       An array containing pointers to the location of the appropriate values in the $values.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   xml_parse_into_struct() returns 0 for failure and 1 for\n   success. This is not the same as FALSE and TRUE, be careful with\n   operators such as ===.\n  \n \n\n\n \n  Examples\n  \n   Below is an example that illustrates the internal structure of\n   the arrays being generated by the function. We use a simple\n   note tag embedded inside a\n   para tag, and then we parse this and print out\n   the structures generated:\n   \n    Example #1 xml_parse_into_struct() example\n    \n\n<?php\n$simple = \"<para><note>simple note<\/note><\/para>\";\n$p = xml_parser_create();\nxml_parse_into_struct($p, $simple, $vals, $index);\nxml_parser_free($p);\necho \"Index array\\n\";\nprint_r($index);\necho \"\\nVals array\\n\";\nprint_r($vals);\n?>\n\n\n    \n\n    \n     When we run that code, the output will be:\n    \n    \n\nIndex array\nArray\n(\n    [PARA] => Array\n        (\n            [0] => 0\n            [1] => 2\n        )\n\n    [NOTE] => Array\n        (\n            [0] => 1\n        )\n\n)\n\nVals array\nArray\n(\n    [0] => Array\n        (\n            [tag] => PARA\n            [type] => open\n            [level] => 1\n        )\n\n    [1] => Array\n        (\n            [tag] => NOTE\n            [type] => complete\n            [level] => 2\n            [value] => simple note\n        )\n\n    [2] => Array\n        (\n            [tag] => PARA\n            [type] => close\n            [level] => 1\n        )\n\n)\n\n    \n   \n  \n  \n   Event-driven parsing (based on the expat library) can get\n   complicated when you have an XML document that is complex.\n   This function does not produce a DOM style object, but it\n   generates structures amenable of being transversed in a tree\n   fashion. Thus, we can create objects representing the data\n   in the XML file easily. Let's consider the following XML file\n   representing a small database of aminoacids information:\n   \n    Example #2 moldb.xml - small database of molecular information\n    \n<?xml version=\"1.0\"?>\n<moldb>\n\n  <molecule>\n      <name>Alanine<\/name>\n      <symbol>ala<\/symbol>\n      <code>A<\/code>\n      <type>hydrophobic<\/type>\n  <\/molecule>\n\n  <molecule>\n      <name>Lysine<\/name>\n      <symbol>lys<\/symbol>\n      <code>K<\/code>\n      <type>charged<\/type>\n  <\/molecule>\n\n<\/moldb>\n\n    \n\n   \n   And some code to parse the document and generate the appropriate\n   objects:\n   \n    Example #3 \n     parsemoldb.php - parses moldb.xml into an array of\n     molecular objects\n    \n    \n\n<?php\n\nclass AminoAcid {\n    var $name;  \/\/ aa name\n    var $symbol;    \/\/ three letter symbol\n    var $code;  \/\/ one letter code\n    var $type;  \/\/ hydrophobic, charged or neutral\n    \n    function AminoAcid ($aa) \n    {\n        foreach ($aa as $k=>$v)\n            $this->$k = $aa[$k];\n    }\n}\n\nfunction readDatabase($filename) \n{\n    \/\/ read the XML database of aminoacids\n    $data = implode(\"\", file($filename));\n    $parser = xml_parser_create();\n    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);\n    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);\n    xml_parse_into_struct($parser, $data, $values, $tags);\n    xml_parser_free($parser);\n\n    \/\/ loop through the structures\n    foreach ($tags as $key=>$val) {\n        if ($key == \"molecule\") {\n            $molranges = $val;\n            \/\/ each contiguous pair of array entries are the \n            \/\/ lower and upper range for each molecule definition\n            for ($i=0; $i < count($molranges); $i+=2) {\n                $offset = $molranges[$i] + 1;\n                $len = $molranges[$i + 1] - $offset;\n                $tdb[] = parseMol(array_slice($values, $offset, $len));\n            }\n        } else {\n            continue;\n        }\n    }\n    return $tdb;\n}\n\nfunction parseMol($mvalues) \n{\n    for ($i=0; $i < count($mvalues); $i++) {\n        $mol[$mvalues[$i][\"tag\"]] = $mvalues[$i][\"value\"];\n    }\n    return new AminoAcid($mol);\n}\n\n$db = readDatabase(\"moldb.xml\");\necho \"** Database of AminoAcid objects:\\n\";\nprint_r($db);\n\n?>\n\n\n    \n\n   \n   After executing parsemoldb.php, the variable\n   $db contains an array of\n   AminoAcid objects, and the output of the\n   script confirms that:\n   \n    \n\n** Database of AminoAcid objects:\nArray\n(\n    [0] => aminoacid Object\n        (\n            [name] => Alanine\n            [symbol] => ala\n            [code] => A\n            [type] => hydrophobic\n        )\n\n    [1] => aminoacid Object\n        (\n            [name] => Lysine\n            [symbol] => lys\n            [code] => K\n            [type] => charged\n        )\n\n)\n\n    \n   \n  \n \n\n\n\n xml_get_error_code\n xml_parse\n XML Parser Functions\n PHP Manual","output":"** Database of AminoAcid objects:\nArray\n(\n    [0] => aminoacid Object\n        (\n            [name] => Alanine\n            [symbol] => ala\n            [code] => A\n            [type] => hydrophobic\n        )\n\n    [1] => aminoacid Object\n        (\n            [name] => Lysine\n            [symbol] => lys\n            [code] => K\n            [type] => charged\n        )\n\n)"}],"xml_set_object":[{"title":"xml_set_object() example","source":"class XMLParser\n{\n    private $parser;\n\n    function __construct() \n    {\n        $this->parser = xml_parser_create();\n\n        xml_set_object($this->parser, $this);\n        xml_set_element_handler($this->parser, \"tag_open\", \"tag_close\");\n        xml_set_character_data_handler($this->parser, \"cdata\");\n    }\n\n    function __destruct()\n    {\n        xml_parser_free($this->parser);\n        unset($this->parser);\n    }\n\n    function parse($data) \n    {\n        xml_parse($this->parser, $data);\n    }\n\n    function tag_open($parser, $tag, $attributes) \n    {\n        var_dump($tag, $attributes); \n    }\n\n    function cdata($parser, $cdata) \n    {\n        var_dump($cdata);\n    }\n\n    function tag_close($parser, $tag) \n    {\n        var_dump($tag);\n    }\n}\n\n$xml_parser = new XMLParser();\n$xml_parser->parse(\"<A ID='hallo'>PHP<\/A>\");","output":"string(1) \"A\"\narray(1) {\n  [\"ID\"]=>\n  string(5) \"hallo\"\n}\nstring(3) \"PHP\"\nstring(1) \"A\""}],"xml_set_processing_instruction_handler":[{"title":null,"source":"Set up processing instruction (PI) handler\n xml_set_object\n xml_set_start_namespace_decl_handler\n XML Parser Functions\n PHP Manual\n\n \n  xml_set_processing_instruction_handler\n  (PHP 4, PHP 5, PHP 7)xml_set_processing_instruction_handler — \n   Set up processing instruction (PI) handler\n  \n\n \n \n \n  Description\n  \n   bool xml_set_processing_instruction_handler\n    ( resource $parser\n   , callable $handler\n   )\n\n  \n   Sets the processing instruction (PI) handler function for the XML parser\n   parser.\n  \n  \n   A processing instruction has the following format:\n   \n    <?target \n     data?>\n    \n\n   \n   You can put PHP code into such a tag, but be aware of one limitation: in\n   an XML PI, the PI end tag (?>) can not be quoted,\n   so this character sequence should not appear in the PHP code you embed\n   with PIs in XML documents.If it does, the rest of the PHP code, as well\n   as the \"real\" PI end tag, will be treated as character data.\n  \n \n\n\n \n  Parameters\n  \n   \nparser\n\n     \n\n      \n       A reference to the XML parser to set up processing instruction (PI) handler function.\n      \n     \n\n    \n    \n     \nhandler\n\n     \n\n      \n       handler is a string containing the name of a\n       function that must exist when xml_parse() is called\n       for parser.\n      \n      \n       The function named by handler must accept\n       three parameters:\n       \n        handler\n         ( resource $parser\n        , string $target\n        , string $data\n        )\n\n       \nparser\n\n         \n\n          \n           The first parameter, parser, is a\n           reference to the XML parser calling the handler.\n          \n         \n\n        \n        \n         \ntarget\n\n         \n\n          \n           The second parameter, target, contains the PI\n           target.\n          \n         \n\n        \n        \n         \ndata\n\n         \n\n          \n           The third parameter, data, contains the PI\n           data.\n          \n         \n\n        \n       \n       If a handler function is set to an empty string, or FALSE, the handler\n       in question is disabled.\n      \n      Note: Instead of a function name, an\narray containing an object reference and a method name can also be\nsupplied.\n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n\n\n xml_set_object\n xml_set_start_namespace_decl_handler\n XML Parser Functions\n PHP Manual","output":"<?"}],"xmlrpc_encode_request":[{"title":"XMLRPC client functions example","source":"$request = xmlrpc_encode_request(\"method\", array(1, 2, 3));\n$context = stream_context_create(array('http' => array(\n    'method' => \"POST\",\n    'header' => \"Content-Type: text\/xml\",\n    'content' => $request\n)));\n$file = file_get_contents(\"http:\/\/www.example.com\/xmlrpc\", false, $context);\n$response = xmlrpc_decode($file);\nif ($response && xmlrpc_is_fault($response)) {\n    trigger_error(\"xmlrpc: $response[faultString] ($response[faultCode])\");\n} else {\n    print_r($response);\n}","output":null}],"xmlrpc_get_type":[{"title":"XML-RPC type example","source":"echo xmlrpc_get_type(null) . \"\\n\"; \/\/ base64\necho xmlrpc_get_type(false) . \"\\n\"; \/\/ boolean\necho xmlrpc_get_type(1) . \"\\n\"; \/\/ int\necho xmlrpc_get_type(1.0) . \"\\n\"; \/\/ double\necho xmlrpc_get_type(\"\") . \"\\n\"; \/\/ string\necho xmlrpc_get_type(array()) . \"\\n\"; \/\/ array\necho xmlrpc_get_type(new stdClass) . \"\\n\"; \/\/ array\necho xmlrpc_get_type(STDIN) . \"\\n\"; \/\/ int","output":null}],"xmlrpc_set_type":[{"title":"A xmlrpc_set_type() example","source":"$params = date(\"Ymd\\TH:i:s\", time());\nxmlrpc_set_type($params, 'datetime');\necho xmlrpc_encode($params);","output":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<params>\n<param>\n <value>\n  <dateTime.iso8601>20090322T23:43:03<\/dateTime.iso8601>\n <\/value>\n<\/param>\n<\/params>"}],"yaml_emit":[{"title":"yaml_emit() example","source":"$addr = array(\n    \"given\" => \"Chris\",\n    \"family\"=> \"Dumars\",\n    \"address\"=> array(\n        \"lines\"=> \"458 Walkman Dr.\n        Suite #292\",\n        \"city\"=> \"Royal Oak\",\n        \"state\"=> \"MI\",\n        \"postal\"=> 48046,\n      ),\n  );\n$invoice = array (\n    \"invoice\"=> 34843,\n    \"date\"=> 980208000,\n    \"bill-to\"=> $addr,\n    \"ship-to\"=> $addr,\n    \"product\"=> array(\n        array(\n            \"sku\"=> \"BL394D\",\n            \"quantity\"=> 4,\n            \"description\"=> \"Basketball\",\n            \"price\"=> 450,\n          ),\n        array(\n            \"sku\"=> \"BL4438H\",\n            \"quantity\"=> 1,\n            \"description\"=> \"Super Hoop\",\n            \"price\"=> 2392,\n          ),\n      ),\n    \"tax\"=> 251.42,\n    \"total\"=> 4443.52,\n    \"comments\"=> \"Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\",\n  );\nvar_dump(yaml_emit($invoice));","output":"string(628) \"---\ninvoice: 34843\ndate: 980208000\nbill-to:\n  given: Chris\n  family: Dumars\n  address:\n    lines: |-\n      458 Walkman Dr.\n              Suite #292\n    city: Royal Oak\n    state: MI\n    postal: 48046\nship-to:\n  given: Chris\n  family: Dumars\n  address:\n    lines: |-\n      458 Walkman Dr.\n              Suite #292\n    city: Royal Oak\n    state: MI\n    postal: 48046\nproduct:\n- sku: BL394D\n  quantity: 4\n  description: Basketball\n  price: 450\n- sku: BL4438H\n  quantity: 1\n  description: Super Hoop\n  price: 2392\ntax: 251.420000\ntotal: 4443.520000\ncomments: Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\n...\n\""}],"yaml_parse":[{"title":"yaml_parse() example","source":"$yaml = <<<EOD\n---\ninvoice: 34843\ndate: \"2001-01-23\"\nbill-to: &id001\n  given: Chris\n  family: Dumars\n  address:\n    lines: |-\n      458 Walkman Dr.\n              Suite #292\n    city: Royal Oak\n    state: MI\n    postal: 48046\nship-to: *id001\nproduct:\n- sku: BL394D\n  quantity: 4\n  description: Basketball\n  price: 450\n- sku: BL4438H\n  quantity: 1\n  description: Super Hoop\n  price: 2392\ntax: 251.420000\ntotal: 4443.520000\ncomments: Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\n...\nEOD;\n\n$parsed = yaml_parse($yaml);\nvar_dump($parsed);","output":"array(8) {\n  [\"invoice\"]=>\n  int(34843)\n  [\"date\"]=>\n  string(10) \"2001-01-23\"\n  [\"bill-to\"]=>\n  &array(3) {\n    [\"given\"]=>\n    string(5) \"Chris\"\n    [\"family\"]=>\n    string(6) \"Dumars\"\n    [\"address\"]=>\n    array(4) {\n      [\"lines\"]=>\n      string(34) \"458 Walkman Dr.\n        Suite #292\"\n      [\"city\"]=>\n      string(9) \"Royal Oak\"\n      [\"state\"]=>\n      string(2) \"MI\"\n      [\"postal\"]=>\n      int(48046)\n    }\n  }\n  [\"ship-to\"]=>\n  &array(3) {\n    [\"given\"]=>\n    string(5) \"Chris\"\n    [\"family\"]=>\n    string(6) \"Dumars\"\n    [\"address\"]=>\n    array(4) {\n      [\"lines\"]=>\n      string(34) \"458 Walkman Dr.\n        Suite #292\"\n      [\"city\"]=>\n      string(9) \"Royal Oak\"\n      [\"state\"]=>\n      string(2) \"MI\"\n      [\"postal\"]=>\n      int(48046)\n    }\n  }\n  [\"product\"]=>\n  array(2) {\n    [0]=>\n    array(4) {\n      [\"sku\"]=>\n      string(6) \"BL394D\"\n      [\"quantity\"]=>\n      int(4)\n      [\"description\"]=>\n      string(10) \"Basketball\"\n      [\"price\"]=>\n      int(450)\n    }\n    [1]=>\n    array(4) {\n      [\"sku\"]=>\n      string(7) \"BL4438H\"\n      [\"quantity\"]=>\n      int(1)\n      [\"description\"]=>\n      string(10) \"Super Hoop\"\n      [\"price\"]=>\n      int(2392)\n    }\n  }\n  [\"tax\"]=>\n  float(251.42)\n  [\"total\"]=>\n  float(4443.52)\n  [\"comments\"]=>\n  string(68) \"Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.\"\n}"}],"yaz_ccl_conf":[{"title":"CCL configuration","source":"$fields = array(\n  \"ti\" => \"1=4\",\n  \"au\"   => \"1=1\",\n  \"isbn\" => \"1=7\"\n);\nyaz_ccl_conf($id, $fields);","output":null}],"yaz_ccl_parse":[{"title":"CCL Parsing","source":"yaz_ccl_conf($id, $fields);  \/\/ see example for yaz_ccl_conf\nif (!yaz_ccl_parse($id, $ccl, &$cclresult)) {\n    echo 'Error: ' . $cclresult[\"errorstring\"];\n} else {\n    $rpn = $cclresult[\"rpn\"];\n    yaz_search($id, \"rpn\", $rpn);\n}","output":null}],"yaz_es":[{"title":"Record Update","source":"$con = yaz_connect(\"myhost\/database\");\n$args = array (\n    \"record\" => \"<gils><title>some title<\/title><\/gils>\",\n    \"syntax\" => \"xml\",\n    \"action\" => \"specialUpdate\"\n);\nyaz_es($con, \"update\", $args);\nyaz_wait();\n$result = yaz_es_result($id);","output":null}],"yaz_record":[{"title":"Array for GRS-1 record","source":"$ar = yaz_record($id, $p, \"array\");\nprint_r($ar);","output":"Array\n(\n    [0] => Array\n        (\n            [0] => (4,52)\n            [1] => Robert M. Pirsig\n        )\n    [1] => Array\n        (\n            [0] => (4,70)\n        )\n    [2] => Array\n        (\n            [0] => (4,70)(4,90)\n        )\n    [3] => Array\n        (\n            [0] => (4,70)(4,90)(2,7)\n            [1] => Transworld Publishers, ltd.\n        )\n)"},{"title":"Working with MARCXML","source":"$rec = yaz_record($id, $p, \"xml; charset=marc-8,utf-8\");","output":null}],"yaz_scan":[{"title":"PHP function that scans titles","source":"function scan_titles($id, $startterm) \n{\n  yaz_scan($id, \"rpn\", \"@attr 1=4 \" . $startterm);\n  yaz_wait();\n  $errno = yaz_errno($id);\n  if ($errno == 0) {\n    $ar = yaz_scan_result($id, $options);\n    echo 'Scan ok; ';\n    foreach ($options as $key => $val) {\n      echo \"$key = $val &nbsp;\";\n    }\n    echo '<br \/><table>';\n    while (list($key, list($k, $term, $tcount)) = each($ar)) {\n      if (empty($k)) continue;\n      echo \"<tr><td>$term<\/td><td>$tcount<\/td><\/tr>\";\n    }\n    echo '<\/table>';\n  } else {\n    echo \"Scan failed. Error: \" . yaz_error($id) . \"<br \/>\";\n  }\n}","output":null}],"yaz_search":[{"title":"Query Examples","source":"Prepares for a search\n yaz_schema\n yaz_set_option\n YAZ Functions\n PHP Manual\n\n \n  yaz_search\n  (PHP 4 >= 4.0.1, PECL yaz >= 0.9.0)yaz_search — Prepares for a search\n\n \n \n  Description\n  \n   bool yaz_search\n    ( resource $id\n   , string $type\n   , string $query\n   )\n\n  \n   yaz_search() prepares for a search on the given \n   connection.\n  \n  \n   Like yaz_connect() this function is non-blocking and\n   only prepares for a search to be executed later when \n   yaz_wait() is called.\n  \n \n\n \n  Parameters\n  \n   \nid\n\n     \n\n      \n       The connection resource returned by yaz_connect().\n      \n     \n\n    \n    \n     \ntype\n\n     \n\n      \n       This parameter represents the query type - only \"rpn\"\n       is supported now in which case the third argument specifies a Type-1 \n       query in prefix query notation. \n      \n     \n\n    \n    \n     \nquery\n\n     \n\n      \n       The RPN query is a textual representation of the Type-1 query as\n       defined by the Z39.50 standard. However, in the text representation\n       as used by YAZ a prefix notation is used, that is the operator\n       precedes the operands. The query string is a sequence of tokens where\n       white space is ignored unless surrounded by double quotes. Tokens beginning\n       with an at-character (@) are considered operators,\n       otherwise they are treated as search terms.\n      \n      RPN Operators\n       \n        Construct\n          Description\n         @and query1 query2\n          intersection of query1 and query2\n         @or query1 query2\n          union of query1 and query2\n         @not query1 query2\n          query1 and not query2\n         @set name\n          result set reference\n         @attrset set query\n          \n           specifies attribute-set for query. This construction is only allowed\n           once - in the beginning of the whole query\n          \n         @attr [set] type=value query\n          \n           applies attribute to query. The type and value are integers \n           specifying the attribute-type and attribute-value respectively. \n           The set, if given, specifies the attribute-set.\n          \n         \n       You can find information about attributes at the \n       » Z39.50 Maintenance Agency\n       site.\n      \n      Note: \n       \n        If you would like to use a more friendly notation,\n        use the CCL parser - functions yaz_ccl_conf() and \n        yaz_ccl_parse().\n       \n      \n     \n\n    \n   \n\n \n  Return Values\n  \n   Returns TRUE on success or FALSE on failure.\n  \n \n\n \n  Examples\n  \n   Example #1 Query Examples\n   \n    You can search for simple terms, like this:\n    \ncomputer\n\n    \n    which matches documents where \"computer\" occur. No attributes are \n    specified.\n   \n   \n    The query \n    \n\"knuth donald\"\n\n    \n    matches documents where \"knuth donald\" occur (provided that the\n    server supports phrase search).\n   \n   \n    This query applies two attributes for the same phrase.\n    @attr 1=1003 @attr 4=1 \"knuth donald\"\n    First attribute is type 1 (Bib-1 use), attribute value is 1003\n    (Author).\n    Second attribute has is type 4 (structure), value 1 (phrase),\n    so this should match documents where Donald Knuth is author.\n   \n   \n    The query\n    \n@and @or a b @not @or c d e\n\n    \n    would in infix notation look like (a or b) and ((c or d) not \n    e).\n   \n   \n    Another, more complex, one:\n    \n\n@attrset gils @and @attr 1=4 art @attr 1=2000 company\n\n    \n    The query as a whole uses the GILS attributeset. The query matches\n    documents where art occur in the title (GILS,BIB-1)\n    and in which company occur as Distributor (GILS).\n   \n  \n \n\n\n yaz_schema\n yaz_set_option\n YAZ Functions\n PHP Manual","output":"@attrset gils @and @attr 1=4 art @attr 1=2000 company"}],"yaz_sort":[{"title":"Sort Criterias","source":"Sets sorting criteria\n yaz_set_option\n yaz_syntax\n YAZ Functions\n PHP Manual\n\n \n  yaz_sort\n  (PHP 4 >= 4.0.7, PECL yaz >= 0.9.0)yaz_sort — Sets sorting criteria\n\n \n \n  Description\n  \n   void yaz_sort\n    ( resource $id\n   , string $criteria\n   )\n\n  \n   This function sets sorting criteria and enables Z39.50 Sort.\n  \n  \n   Call this function before yaz_search().\n   Using this function alone does not have any effect. When used in conjunction\n   with yaz_search(), a Z39.50 Sort will be sent after a\n   search response has been received and before any records are retrieved with\n   Z39.50 Present (yaz_present(). \n  \n \n\n \n  Parameters\n  \n   \nid\n\n     \n\n      \n       The connection resource returned by yaz_connect().\n      \n     \n\n    \n    \n     \ncriteria\n\n     \n\n      \n       A string that takes the form field1 flags1 field2 \n       flags2 where field1 specifies the primary attributes for\n       sort, field2 seconds, etc.. \n      \n      \n       The field specifies either a numerical attribute combinations consisting\n       of type=value pairs separated by comma (e.g. 1=4,2=1)\n       ; or the field may specify a plain string criteria (e.g. \n       title. The flags is a sequence of the following \n       characters which may not be separated by any white space.\n      \n      \n       Sort Flags\n        \n         \na\n\n         \n\n          \n           Sort ascending\n          \n         \n\n        \n        \n         \nd\n\n         \n\n          \n           Sort descending\n          \n         \n\n        \n        \n         \ni\n\n         \n\n          \n           Case insensitive sorting\n          \n         \n\n        \n        \n         \ns\n\n         \n\n          \n           Case sensitive sorting\n          \n         \n\n        \n       \n\n    \n   \n\n \n  Return Values\n  \n   No value is returned.\n  \n \n\n \n  Examples\n  \n   Example #1 Sort Criterias\n   \n    To sort on Bib1 attribute title, case insensitive, and ascending you\n    would use the following sort criteria:\n    \n1=4 ia\n\n    \n   \n   \n    If the secondary sorting criteria should be author, case sensitive and \n    ascending you would use:\n    \n1=4 ia 1=1003 sa\n\n    \n   \n  \n \n\n\n yaz_set_option\n yaz_syntax\n YAZ Functions\n PHP Manual","output":null}],"yp_err_string":[{"title":"Example for NIS errors","source":"echo \"Error: \" . yp_err_string(yp_errno());","output":null}],"yp_first":[{"title":"Example for the NIS first","source":"$entry = yp_first($domain, \"passwd.byname\");\n\n$key = key($entry);\n$value = $entry[$key];\n\necho \"First entry in this map has key \" . $key . \" and value \" . $value;","output":null}],"yp_get_default_domain":[{"title":"Example for the default domain","source":"$domain = yp_get_default_domain();\necho \"Default NIS domain is: \" . $domain;","output":null}],"yp_master":[{"title":"Example for the NIS master","source":"$number = yp_master($domain, $mapname);\necho \"Master for this map is: \" . $master;","output":null}],"yp_match":[{"title":"Example for NIS match","source":"$entry = yp_match($domain, \"passwd.byname\", \"joe\");\necho \"Matched entry is: \" . $entry;","output":"joe:##joe:11111:100:Joe User:\/home\/j\/joe:\/usr\/local\/bin\/bash"}],"yp_next":[{"title":"Example for NIS next","source":"$entry = yp_next($domain, \"passwd.byname\", \"joe\");\n\nif (!$entry) {\n    echo \"No more entries found\\n\";\n    echo \"<!--\" . yp_errno() . \": \" . yp_err_string() . \"-->\";\n}\n\n$key = key($entry);\n\necho \"The next entry after joe has key \" . $key\n      . \" and value \" . $entry[$key];","output":null}],"yp_order":[{"title":"Example for the NIS order","source":"$number = yp_order($domain, $mapname);\n    echo \"Order number for this map is: \" . $number;","output":null}],"zend_logo_guid":[{"title":"zend_logo_guid() example","source":"echo '<img src=\"' . $_SERVER['PHP_SELF'] .\n     '?=' . zend_logo_guid() . '\" alt=\"Zend Logo !\" \/>';","output":null}],"zend_thread_id":[{"title":"zend_thread_id() example","source":"$thread_id = zend_thread_id();\n\necho 'Current thread id is: ' . $thread_id;","output":"Current thread id is: 7864"}],"zend_version":[{"title":"zend_version() example","source":"echo \"Zend engine version: \" . zend_version();","output":"Zend engine version: 2.2.0"}],"zlib_encode":[{"title":"zlib_encode() example","source":"$str = 'hello world';\n$enc = zlib_encode($str, ZLIB_ENCODING_DEFLATE);\necho bin2hex($enc);","output":"789ccb48cdc9c95728cf2fca4901001a0b045d"}],"gearmanclient::addserver":[{"title":"Adding two job servers","source":"# Create our client object.\n$gmclient= new GearmanClient();\n\n# Add two job servers, the first on the default 4730 port\n$gmclient->addServer(\"10.0.0.1\"); \n$gmclient->addServer(\"10.0.0.2\", 7003);","output":null}],"gearmanclient::addservers":[{"title":"Add two job servers","source":"# Create our client object.\n$gmclient= new GearmanClient();\n\n# Add multiple job servers, the first on the default 4730 port\n$gmclient->addServers(\"10.0.0.1,10.0.0.2:7003\");","output":null}],"gearmanclient::addtask":[{"title":"Basic submission of two tasks","source":"# Create our gearman client\n$gmclient= new GearmanClient(); \n\n# add the default job server\n$gmclient->addServer(); \n\n# set a function to be called when the work is complete\n$gmclient->setCompleteCallback(\"complete\"); \n\n# add a task to perform the \"reverse\" function on the string \"Hello World!\"\n$gmclient->addTask(\"reverse\", \"Hello World!\", null, \"1\"); \n\n# add another task to perform the \"reverse\" function on the string \"!dlroW olleH\"\n$gmclient->addTask(\"reverse\", \"!dlroW olleH\", null, \"2\"); \n\n# run the tasks\n$gmclient->runTasks(); \n\nfunction complete($task) \n{ \n  print \"COMPLETE: \" . $task->unique() . \", \" . $task->data() . \"\\n\"; \n}","output":"COMPLETE: 2, Hello World!\nCOMPLETE: 1, !dlroW olleH"},{"title":"Basic submission of two tasks with passing application context","source":"$client = new GearmanClient();\n$client->addServer();\n\n# set a function to be called when the work is complete\n$client->setCompleteCallback(\"reverse_complete\");\n\n# Add some tasks for a placeholder of where to put the results\n$results = array();\n$client->addTask(\"reverse\", \"Hello World!\", &$results, \"t1\");\n$client->addTask(\"reverse\", \"!dlroW olleH\", &$results, \"t2\");\n\n$client->runTasks();\n\n# The results should now be filled in from the callbacks\nforeach ($results as $id => $result)\n   echo $id . \": \" . $result['handle'] . \", \" . $result['data'] . \"\\n\";\n\n\nfunction reverse_complete($task, $results)\n{\n   $results[$task->unique()] = array(\"handle\"=>$task->jobHandle(), \"data\"=>$task->data());\n}","output":"t2: H.foo:21, Hello World!\nt1: H:foo:22, !dlroW olleH"}],"gearmanclient::addtaskbackground":[{"title":"Two tasks, one background and one not","source":"# The client script\n\n# create our gearman client\n$gmc= new GearmanClient();\n\n# add the default job server\n$gmc->addServer();\n\n# set a couple of callbacks so we can track progress\n$gmc->setCompleteCallback(\"reverse_complete\");\n$gmc->setStatusCallback(\"reverse_status\");\n\n# add a task for the \"reverse\" function\n$task= $gmc->addTask(\"reverse\", \"Hello World!\", null, \"1\");\n\n# add another task, but this one to run in the background\n$task= $gmc->addTaskBackground(\"reverse\", \"!dlroW olleH\", null, \"2\");\n\nif (! $gmc->runTasks())\n{\n    echo \"ERROR \" . $gmc->error() . \"\\n\";\n    exit;\n}\n\necho \"DONE\\n\";\n\nfunction reverse_status($task)\n{\n    echo \"STATUS: \" . $task->unique() . \", \" . $task->jobHandle() . \" - \" . $task->taskNumerator() . \n         \"\/\" . $task->taskDenominator() . \"\\n\";\n}\n\nfunction reverse_complete($task)\n{\n    echo \"COMPLETE: \" . $task->unique() . \", \" . $task->data() . \"\\n\";\n}","output":"Received job: H:foo.local:65\nWorkload: !dlroW olleH (12)\n1\/12 complete\nReceived job: H:foo.local:66\nWorkload: Hello World! (12)\nSending status: 1\/12 complete\nSending status: 2\/12 complete\nSending status: 2\/12 complete\nSending status: 3\/12 complete\nSending status: 3\/12 complete\nSending status: 4\/12 complete\nSending status: 4\/12 complete\nSending status: 5\/12 complete\nSending status: 5\/12 complete\nSending status: 6\/12 complete\nSending status: 6\/12 complete\nSending status: 7\/12 complete\nSending status: 7\/12 complete\nSending status: 8\/12 complete\nSending status: 8\/12 complete\nSending status: 9\/12 complete\nSending status: 9\/12 complete\nSending status: 10\/12 complete\nSending status: 10\/12 complete\nSending status: 11\/12 complete\nSending status: 11\/12 complete\nSending status: 12\/12 complete\nSending status: 12\/12 complete\nResult: !dlroW olleH\nResult: Hello World!"}],"gearmanclient::addtaskhigh":[{"title":"A high priority task along with two normal tasks","source":"# create the gearman client\n$gmc= new GearmanClient();\n\n# add the default job server\n$gmc->addServer();\n\n# set the callback for when the job is complete\n$gmc->setCompleteCallback(\"reverse_complete\");\n\n# add tasks, one of which is high priority\n$task= $gmc->addTask(\"reverse\", \"Hello World!\", null, \"1\");\n$task= $gmc->addTaskHigh(\"reverse\", \"!dlroW olleH\", null, \"2\");\n$task= $gmc->addTask(\"reverse\", \"Hello World!\", null, \"3\");\n\nif (! $gmc->runTasks())\n{\n    echo \"ERROR \" . $gmc->error() . \"\\n\";\n    exit;\n}\necho \"DONE\\n\";\n\nfunction reverse_complete($task)\n{\n    echo \"COMPLETE: \" . $task->unique() . \", \" . $task->data() . \"\\n\";\n}","output":"COMPLETE: 2, Hello World!\nCOMPLETE: 3, !dlroW olleH\nCOMPLETE: 1, !dlroW olleH\nDONE"}],"gearmanclient::addtasklow":[{"title":"A low priority task along with two normal tasks","source":"# create the gearman client\n$gmc= new GearmanClient();\n\n# add the default job server\n$gmc->addServer();\n\n# set the callback for when the job is complete\n$gmc->setCompleteCallback(\"reverse_complete\");\n\n# add tasks, one of which is low priority\n$task= $gmc->addTask(\"reverse\", \"Hello World!\", null, \"1\");\n$task= $gmc->addTaskLow(\"reverse\", \"!dlroW olleH\", null, \"2\");\n$task= $gmc->addTask(\"reverse\", \"Hello World!\", null, \"3\");\n\nif (! $gmc->runTasks())\n{\n    echo \"ERROR \" . $gmc->error() . \"\\n\";\n    exit;\n}\necho \"DONE\\n\";\n\nfunction reverse_complete($task)\n{\n    echo \"COMPLETE: \" . $task->unique() . \", \" . $task->data() . \"\\n\";\n}","output":"COMPLETE: 3, !dlroW olleH\nCOMPLETE: 1, !dlroW olleH\nCOMPLETE: 2, Hello World!\nDONE"}],"gearmanclient::addtaskstatus":[{"title":"Monitor completion of multiple background tasks","source":"\/* create our object *\/\n$gmclient= new GearmanClient();\n\n\/* add the default server *\/\n$gmclient->addServer();\n\n\/* start some background jobs and save the handles *\/\n$handles = array();\n$handles[0] = $gmclient->doBackground(\"reverse\", \"Hello World!\");\n$handles[1] = $gmclient->doBackground(\"reverse\", \"!dlroW olleH\");\n\n$gmclient->setStatusCallback(\"reverse_status\");\n\n\/* Poll the server to see when those background jobs finish; *\/\n\/* a better method would be to use event callbacks *\/\ndo\n{\n   \/* Use the context variable to track how many tasks have completed *\/\n   $done = 0;\n   $gmclient->addTaskStatus($handles[0], &$done);\n   $gmclient->addTaskStatus($handles[1], &$done);\n   $gmclient->runTasks();\n   echo \"Done: $done\\n\";\n   sleep(1);\n}\nwhile ($done != 2);\n\nfunction reverse_status($task, $done)\n{\n   if (!$task->isKnown())\n      $done++;\n}","output":"Done: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 0\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 1\nDone: 2"}],"gearmanclient::do":[{"title":"Simple job submission with immediate return","source":"# Client code\n\necho \"Starting\\n\";\n\n# Create our client object.\n$gmclient= new GearmanClient();\n\n# Add default server (localhost).\n$gmclient->addServer();\n\necho \"Sending job\\n\";\n\n$result = $gmclient->doNormal(\"reverse\", \"Hello!\");\n\necho \"Success: $result\\n\";","output":"Starting\nSending job\nSuccess: !olleH"},{"title":"Submitting a job and retrieving incremental status","source":"# Client code\n\n# Create our client object.\n$gmclient= new GearmanClient();\n\n# Add default server (localhost).\n$gmclient->addServer();\n\necho \"Sending job\\n\";\n\n# Send reverse job\ndo\n{\n  $result = $gmclient->doNormal(\"reverse\", \"Hello!\");\n  # Check for various return packets and errors.\n\n  switch($gmclient->returnCode())\n  {\n    case GEARMAN_WORK_DATA:\n      echo \"Data: $result\\n\";\n      break;\n    case GEARMAN_WORK_STATUS:\n      list($numerator, $denominator)= $gmclient->doStatus();\n      echo \"Status: $numerator\/$denominator complete\\n\";\n      break;\n    case GEARMAN_WORK_FAIL:\n      echo \"Failed\\n\";\n      exit;\n    case GEARMAN_SUCCESS:\n      break;\n    default:\n      echo \"RET: \" . $gmclient->returnCode() . \"\\n\";\n      echo \"Error: \" . $gmclient->error() . \"\\n\";\n      echo \"Errno: \" . $gmclient->getErrno() . \"\\n\";\n      exit;\n  }\n}\nwhile($gmclient->returnCode() != GEARMAN_SUCCESS);\n\necho \"Success: $result\\n\";","output":"Starting\nWaiting for job...\nReceived job: H:foo.local:106\nWorkload: Hello! (6)\n1\/6 complete\n2\/6 complete\n3\/6 complete\n4\/6 complete\n5\/6 complete\n6\/6 complete\nResult: !olleH"}],"gearmanclient::dobackground":[{"title":"Submit and monitor a background job","source":"\/* create our object *\/\n$gmclient= new GearmanClient();\n\n\/* add the default server *\/\n$gmclient->addServer();\n\n\/* run reverse client *\/\n$job_handle = $gmclient->doBackground(\"reverse\", \"this is a test\");\n\nif ($gmclient->returnCode() != GEARMAN_SUCCESS)\n{\n  echo \"bad return code\\n\";\n  exit;\n}\n\n$done = false;\ndo\n{\n   sleep(3);\n   $stat = $gmclient->jobStatus($job_handle);\n   if (!$stat[0]) \/\/ the job is known so it is not done\n      $done = true;\n   echo \"Running: \" . ($stat[1] ? \"true\" : \"false\") . \", numerator: \" . $stat[2] . \", denomintor: \" . $stat[3] . \"\\n\";\n}\nwhile(!$done);\n\necho \"done!\\n\";","output":"Running: true, numerator: 3, denomintor: 14\nRunning: true, numerator: 6, denomintor: 14\nRunning: true, numerator: 9, denomintor: 14\nRunning: true, numerator: 12, denomintor: 14\nRunning: false, numerator: 0, denomintor: 0\ndone!"}],"gearmanclient::donormal":[{"title":"Simple job submission with immediate return","source":"","output":"Starting\nSending job\nSuccess: !olleH"},{"title":"Submitting a job and retrieving incremental status","source":"# Client code\n\n# Create our client object.\n$gmclient= new GearmanClient();\n\n# Add default server (localhost).\n$gmclient->addServer();\n\necho \"Sending job\\n\";\n\n# Send reverse job\ndo\n{\n  $result = $gmclient->doNormal(\"reverse\", \"Hello!\");\n  # Check for various return packets and errors.\n\n  switch($gmclient->returnCode())\n  {\n    case GEARMAN_WORK_DATA:\n      echo \"Data: $result\\n\";\n      break;\n    case GEARMAN_WORK_STATUS:\n      list($numerator, $denominator)= $gmclient->doStatus();\n      echo \"Status: $numerator\/$denominator complete\\n\";\n      break;\n    case GEARMAN_WORK_FAIL:\n      echo \"Failed\\n\";\n      exit;\n    case GEARMAN_SUCCESS:\n      break;\n    default:\n      echo \"RET: \" . $gmclient->returnCode() . \"\\n\";\n      echo \"Error: \" . $gmclient->error() . \"\\n\";\n      echo \"Errno: \" . $gmclient->getErrno() . \"\\n\";\n      exit;\n  }\n}\nwhile($gmclient->returnCode() != GEARMAN_SUCCESS);\n\necho \"Success: $result\\n\";","output":"Starting\nWaiting for job...\nReceived job: H:foo.local:106\nWorkload: Hello! (6)\n1\/6 complete\n2\/6 complete\n3\/6 complete\n4\/6 complete\n5\/6 complete\n6\/6 complete\nResult: !olleH"}],"gearmanclient::dostatus":[{"title":"Get the status of a long running job","source":"echo \"Starting\\n\";\n\n# Create our client object.\n$gmclient= new GearmanClient();\n\n# Add default server (localhost).\n$gmclient->addServer();\n\necho \"Sending job\\n\";\n\n# Send reverse job\ndo\n{\n  $result = $gmclient->doNormal(\"reverse\", \"Hello!\");\n\n  # Check for various return packets and errors.\n  switch($gmclient->returnCode())\n  {\n    case GEARMAN_WORK_DATA:\n      break;\n    case GEARMAN_WORK_STATUS:\n      # get the current job status\n      list($numerator, $denominator)= $gmclient->doStatus();\n      echo \"Status: $numerator\/$denominator complete\\n\";\n      break;\n    case GEARMAN_WORK_FAIL:\n      echo \"Failed\\n\";\n      exit;\n    case GEARMAN_SUCCESS:\n      break;\n    default:\n      echo \"RET: \" . $gmclient->returnCode() . \"\\n\";\n      exit;\n  }\n}\nwhile($gmclient->returnCode() != GEARMAN_SUCCESS);\n\necho \"Success: $result\\n\";","output":"Starting\nSending job\nStatus: 1\/6 complete\nStatus: 2\/6 complete\nStatus: 3\/6 complete\nStatus: 4\/6 complete\nStatus: 5\/6 complete\nStatus: 6\/6 complete\nSuccess: !olleH"}],"gearmanclient::jobstatus":[{"title":"Monitor the status of a long running background job","source":"\/* create our object *\/\n$gmclient= new GearmanClient();\n\n\/* add the default server *\/\n$gmclient->addServer();\n\n\/* run reverse client *\/\n$job_handle = $gmclient->doBackground(\"reverse\", \"this is a test\");\n\nif ($gmclient->returnCode() != GEARMAN_SUCCESS)\n{\n  echo \"bad return code\\n\";\n  exit;\n}\n\n$done = false;\ndo\n{\n   sleep(3);\n   $stat = $gmclient->jobStatus($job_handle);\n   if (!$stat[0]) \/\/ the job is known so it is not done\n      $done = true;\n   echo \"Running: \" . ($stat[1] ? \"true\" : \"false\") . \", numerator: \" . $stat[2] . \", denomintor: \" . $stat[3] . \"\\n\";\n}\nwhile(!$done);\n\necho \"done!\\n\";","output":"Running: true, numerator: 3, denomintor: 14\nRunning: true, numerator: 6, denomintor: 14\nRunning: true, numerator: 9, denomintor: 14\nRunning: true, numerator: 12, denomintor: 14\nRunning: false, numerator: 0, denomintor: 0\ndone!"}],"gearmanworker::addfunction":[{"title":"Simple worker making use of extra application context data","source":"# get a gearman worker\n$worker= new GearmanWorker(); \n\n# add the default server (localhost)\n$worker->addServer(); \n\n# define a variable to hold application data\n$count= 0; \n\n# add the \"reverse\" function\n$worker->addFunction(\"reverse\", \"reverse_cb\", $count);\n\n# start the worker\nwhile ($worker->work());\n\nfunction reverse_cb($job, &$count) \n{ \n  $count++; \n  return \"$count: \" . strrev($job->workload()); \n}","output":"1: olleh\n2: dlrow"}],"gearmanworker::addserver":[{"title":"Add alternate Gearman servers","source":"$worker= new GearmanWorker(); \n$worker->addServer(\"10.0.0.1\"); \n$worker->addServer(\"10.0.0.2\", 7003);","output":null}],"gearmanworker::addservers":[{"title":"Add two job servers","source":"$worker= new GearmanWorker(); \n$worker->addServers(\"10.0.0.1,10.0.0.2:7003\");","output":null}],"gearmanworker::setid":[{"title":"GearmanWorker::setId() example","source":"$worker= new GearmanWorker();\n$worker->setId('test');","output":"Run the following command:\ngearadmin --workers\n\nOutput:\n30 ::3a3a:3361:3361:3a33%976303667 - : test"}],"gearmanworker::settimeout":[{"title":"A simple worker with a 5 second timeout","source":"echo \"Starting\\n\";\n\n# Create our worker object.\n$gmworker= new GearmanWorker();\n\n# Add default server (localhost).\n$gmworker->addServer();\n\n# Register function \"reverse\" with the server.\n$gmworker->addFunction(\"reverse\", \"reverse_fn\");\n\n# Set the timeout to 5 seconds\n$gmworker->setTimeout(5000);\n\necho \"Waiting for job...\\n\";\nwhile(@$gmworker->work() || $gmworker->returnCode() == GEARMAN_TIMEOUT)\n{\n  if ($gmworker->returnCode() == GEARMAN_TIMEOUT)\n  {\n    # Normally one would want to do something useful here ...\n    echo \"Timeout. Waiting for next job...\\n\";\n    continue;\n  }\n\n  if ($gmworker->returnCode() != GEARMAN_SUCCESS)\n  {\n    echo \"return_code: \" . $gmworker->returnCode() . \"\\n\";\n    break;\n  }\n}\n\necho \"Done\\n\";\n\nfunction reverse_fn($job)\n{\n  return strrev($job->workload());\n}","output":"Starting\nWaiting for job...\nTimeout. Waiting for next job...\nTimeout. Waiting for next job...\nTimeout. Waiting for next job..."}],"gearmanworker::wait":[{"title":"Running worker in non-blocking mode","source":"echo \"Starting\\n\";\n\n# Create our worker object\n$worker= new GearmanWorker();\n\n# Make the worker non-blocking\n$worker->addOptions(GEARMAN_WORKER_NON_BLOCKING); \n\n# Add the default server (localhost, port 4730)\n$worker->addServer(); \n\n# Add our reverse function\n$worker->addFunction('reverse', 'reverse_fn');\n\n# Try to grab a job\nwhile (@$worker->work() ||\n       $worker->returnCode() == GEARMAN_IO_WAIT ||\n       $worker->returnCode() == GEARMAN_NO_JOBS)\n{\n  if ($worker->returnCode() == GEARMAN_SUCCESS)\n    continue;\n\n  echo \"Waiting for next job...\\n\";\n  if (!@$worker->wait()) \n  { \n    if ($worker->returnCode() == GEARMAN_NO_ACTIVE_FDS) \n    { \n      # We are not connected to any servers, so wait a bit before \n      # trying to reconnect. \n      sleep(5); \n      continue; \n    } \n    break; \n  } \n} \n\necho \"Worker Error: \" . $worker->error() . \"\\n\";\n\nfunction reverse_fn($job)\n{\n  return strrev($job->workload());\n}","output":null}],"gearmanworker::work":[{"title":"GearmanWorker::work() example","source":"# create the worker\n$worker = new GearmanWorker(); \n\n# add the default job server (localhost)\n$worker->addServer(); \n\n# add the reverse function\n$worker->addFunction(\"reverse\", \"my_reverse_function\"); \n\n# start te worker listening for job submissions\nwhile ($worker->work()); \n \nfunction my_reverse_function($job) \n{ \n  return strrev($job->workload()); \n}","output":null}],"gender\\gender::country":[{"title":"Using Gender\\Gender::country()","source":"$gender = new Gender\\Gender;\nvar_dump($gender->country(Gender\\Gender::BRITAIN));","output":"array(2) {\n  'country_short' =>\n  string(2) \"UK\"\n  'country' =>\n  string(13) \"Great Britain\"\n}"}],"generator::getreturn":[{"title":"Generator::getReturn() example","source":"$gen = (function() {\n    yield 1;\n    yield 2;\n\n    return 3;\n})();\n\nforeach ($gen as $val) {\n    echo $val, PHP_EOL;\n}\n\necho $gen->getReturn(), PHP_EOL;","output":"1\n2\n3"}],"generator::key":[{"title":"Generator::key() example","source":"function Gen()\n{\n    yield 'key' => 'value';\n}\n\n$gen = Gen();\n\necho \"{$gen->key()} => {$gen->current()}\";","output":"key => value"}],"generator::send":[{"title":"Using Generator::send() to inject values","source":"function printer() {\n    echo \"I'm printer!\".PHP_EOL;\n    while (true) {\n        $string = yield;\n        echo $string.PHP_EOL;\n    }\n}\n\n$printer = printer();\n$printer->send('Hello world!');\n$printer->send('Bye world!');","output":"I'm printer!\nHello world!\nBye world!"}],"generator::throw":[{"title":"Throwing an exception into a generator","source":"function gen() {\n    echo \"Foo\\n\";\n    try {\n        yield;\n    } catch (Exception $e) {\n        echo \"Exception: {$e->getMessage()}\\n\";\n    }\n    echo \"Bar\\n\";\n}\n \n$gen = gen();\n$gen->rewind();\n$gen->throw(new Exception('Test'));","output":"Foo\nException: Test\nBar"}],"globiterator::__construct":[{"title":"GlobIterator example","source":"$iterator = new GlobIterator('*.dll', FilesystemIterator::KEY_AS_FILENAME);\n\nif (!$iterator->count()) {\n    echo 'No matches';\n} else {\n    $n = 0;\n\n    printf(\"Matched %d item(s)\\r\\n\", $iterator->count());\n\n    foreach ($iterator as $item) {\n        printf(\"[%d] %s\\r\\n\", ++$n, $iterator->key());\n    }\n}","output":"Matched 2 item(s)\n[1] php5ts.dll\n[2] php_gd2.dll"}],"globiterator::count":[{"title":"GlobIterator::count() example","source":"$iterator = new GlobIterator('*.xml');\n\nprintf(\"Matched %d item(s)\\r\\n\", $iterator->count());","output":"Matched 8 item(s)"}],"gmagick::despeckleimage":[{"title":"Gmagick::despeckleimage() example","source":"\/* ... *\/","output":"..."}],"gmagick::setcompressionquality":[{"title":"Gmagick::setCompressionQuality()","source":"$gm = new Gmagick();\n$gm->read(\"magick:rose\");\n$gm->setCompressionQuality(2);","output":null}],"hw_api::object":[{"title":"Retrieve an object","source":"function handle_error($error)\n{\n  $reason = $error->reason(0);\n  echo \"Type: <b>\";\n  switch ($reason->type()) {\n    case 0:\n      echo \"Error\";\n      break;\n    case 1:\n      echo \"Warning\";\n      break;\n    case 2:\n      echo \"Message\";\n      break;\n  }\n  echo \"<\/b><br \/>\\n\";\n  echo \"Description: \" . $reason->description(\"en\") . \"<br \/>\\n\";\n}\n\nfunction list_attr($obj)\n{\n  echo \"<table>\\n\";\n  $count = $obj->count();\n  for ($i=0; $i<$count; $i++) {\n    $attr = $obj->attribute($i);\n    printf(\"<tr><td align=\\\"right\\\" bgcolor=\\\"#c0c0c0\\\"><b>%s<\/b><\/td><td bgcolor=\\\"#F0F0F0\\\">%s<\/td><\/tr>\\n\",\n             $attr->key(), $attr->value());\n  }\n  echo \"<\/table>\\n\";\n}\n\n$hwapi = hwapi_hgcsp($g_config[HOSTNAME]);\n$parms = array(\"objectIdentifier\"=>\"rootcollection\", \"attributeSelector\"=>array(\"Title\", \"Name\", \"DocumentType\"));\n$root = $hwapi->object($parms);\nif (get_class($root) == \"HW_API_Error\") {\n  handle_error($root);\n  exit;\n}\nlist_attr($root);","output":null}],"imagick::adaptiveblurimage":[{"title":"Using Imagick::adaptiveBlurImage():","source":"header('Content-type: image\/jpeg');\n\n$image = new Imagick('test.jpg');\n\n$image->adaptiveBlurImage(5,3);\necho $image;","output":null}],"imagick::adaptiveresizeimage":[{"title":"Using Imagick::adaptiveResizeImage()","source":"header('Content-type: image\/jpeg');\n\n$image = new Imagick('image.jpg');\n$image->adaptiveResizeImage(1024,768);\n\necho $image;","output":null}],"imagick::adaptivesharpenimage":[{"title":"A Imagick::adaptiveSharpenImage() example","source":"try {\n    $image = new Imagick('image.png');\n    $image->adaptiveSharpenImage(2,1);\n} catch(ImagickException $e) {\n    echo 'Error: ' , $e->getMessage();\n    die();\n}\nheader('Content-type: image\/png');\necho $image;","output":null}],"imagick::adaptivethresholdimage":[{"title":"Imagick::adaptiveThresholdImage()","source":"function adaptiveThresholdImage($imagePath, $width, $height, $adaptiveOffset) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $adaptiveOffsetQuantum = intval($adaptiveOffset * \\Imagick::getQuantum());\n    $imagick->adaptiveThresholdImage($width, $height, $adaptiveOffsetQuantum);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::addnoiseimage":[{"title":"Imagick::addNoiseImage()","source":"function addNoiseImage($noiseType, $imagePath, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->addNoiseImage($noiseType, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::affinetransformimage":[{"title":"Imagick::affineTransformImage()","source":"function affineTransformImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $draw = new \\ImagickDraw();\n\n    $angle = 40 ;\n\n    $affineRotate = array(\n        \"sx\" => cos($angle), \"sy\" => cos($angle), \n        \"rx\" => sin($angle), \"ry\" => -sin($angle), \n        \"tx\" => 0, \"ty\" => 0,\n    );\n\n    $draw->affine($affineRotate);\n\n    $imagick->affineTransformImage($draw);\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::annotateimage":[{"title":"Using Imagick::annotateImage():","source":"\/* Create some objects *\/\n$image = new Imagick();\n$draw = new ImagickDraw();\n$pixel = new ImagickPixel( 'gray' );\n\n\/* New image *\/\n$image->newImage(800, 75, $pixel);\n\n\/* Black text *\/\n$draw->setFillColor('black');\n\n\/* Font properties *\/\n$draw->setFont('Bookman-DemiItalic');\n$draw->setFontSize( 30 );\n\n\/* Create text *\/\n$image->annotateImage($draw, 10, 45, 0, 'The quick brown fox jumps over the lazy dog');\n\n\/* Give image a format *\/\n$image->setImageFormat('png');\n\n\/* Output the image with headers *\/\nheader('Content-type: image\/png');\necho $image;","output":null}],"imagick::appendimages":[{"title":"Imagick::appendImages() example","source":"\/* Create new imagick object *\/\n$im = new Imagick();\n\n\/* create red, green and blue images *\/\n$im->newImage(100, 50, \"red\");\n$im->newImage(100, 50, \"green\");\n$im->newImage(100, 50, \"blue\");\n\n\/* Append the images into one *\/\n$im->resetIterator();\n$combined = $im->appendImages(true);\n\n\/* Output the image *\/\n$combined->setImageFormat(\"png\");\nheader(\"Content-Type: image\/png\");\necho $combined;","output":null}],"imagick::autolevelimage":[{"title":"Imagick::autoLevelImage()","source":"function autoLevelImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->autoLevelImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::blackthresholdimage":[{"title":"Imagick::blackThresholdImage()","source":"function blackThresholdImage($imagePath, $thresholdColor) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->blackthresholdimage($thresholdColor);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::blueshiftimage":[{"title":"Imagick::blueShiftImage()","source":"function blueShiftImage($imagePath, $blueShift) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->blueShiftImage($blueShift);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::blurimage":[{"title":"Using Imagick::blurImage():","source":"header('Content-type: image\/jpeg');\n\n$image = new Imagick('test.jpg');\n\n$image->blurImage(5,3);\necho $image;","output":null}],"imagick::borderimage":[{"title":"Imagick::borderImage()","source":"function borderImage($imagePath, $color, $width, $height) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->borderImage($color, $width, $height);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::brightnesscontrastimage":[{"title":"Imagick::brightnessContrastImage()","source":"function brightnessContrastImage($imagePath, $brightness, $contrast, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->brightnessContrastImage($brightness, $contrast, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::charcoalimage":[{"title":"Imagick::charcoalImage()","source":"function charcoalImage($imagePath, $radius, $sigma) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->charcoalImage($radius, $sigma);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::chopimage":[{"title":"Using Imagick::chopImage():","source":"\/* Create some objects *\/\n$image = new Imagick();\n$pixel = new ImagickPixel( 'gray' );\n\n\/* New image *\/\n$image->newImage(400, 200, $pixel);\n\n\/* Chop image *\/\n$image->chopImage(200, 200, 0, 0);\n\n\/* Give image a format *\/\n$image->setImageFormat('png');\n\n\/* Output the image with headers *\/\nheader('Content-type: image\/png');\necho $image;","output":null}],"imagick::clone":[{"title":"Imagick object cloning in different versions of imagick","source":"\/\/ Cloning an Imagick object in imagick 2.x and 3.0:\n$newImage = $image->clone();\n\n\/\/ Cloning an Imagick object from 3.1.0 on:\n$newImage = clone $image;","output":null}],"imagick::clutimage":[{"title":"Using Imagick::clutImage():","source":"$image = new Imagick('test.jpg');\n$clut = new Imagick();\n$clut->newImage(1, 1, new ImagickPixel('black'));\n$image->clutImage($clut);\n$image->writeImage('test_out.jpg');","output":null}],"imagick::colorizeimage":[{"title":"Imagick::colorizeImage()","source":"function colorizeImage($imagePath, $color, $opacity) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $opacity = $opacity \/ 255.0;\n    $opacityColor = new \\ImagickPixel(\"rgba(0, 0, 0, $opacity)\");\n    $imagick->colorizeImage($color, $opacityColor);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::colormatriximage":[{"title":"Imagick::colorMatrixImage()","source":"function colorMatrixImage($imagePath, $colorMatrix) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->setImageOpacity(1);\n\n    \/\/A color matrix should look like:\n    \/\/    $colorMatrix = [\n    \/\/        1.5, 0.0, 0.0, 0.0, 0.0, -0.157,\n    \/\/        0.0, 1.0, 0.5, 0.0, 0.0, -0.157,\n    \/\/        0.0, 0.0, 1.5, 0.0, 0.0, -0.157,\n    \/\/        0.0, 0.0, 0.0, 1.0, 0.0,  0.0,\n    \/\/        0.0, 0.0, 0.0, 0.0, 1.0,  0.0,\n    \/\/        0.0, 0.0, 0.0, 0.0, 0.0,  1.0\n    \/\/    ];\n\n    $background = new \\Imagick();\n    $background->newPseudoImage($imagick->getImageWidth(), $imagick->getImageHeight(),  \"pattern:checkerboard\");\n\n    $background->setImageFormat('png');\n\n    $imagick->setImageFormat('png');\n    $imagick->colorMatrixImage($colorMatrix);\n    \n    $background->compositeImage($imagick, \\Imagick::COMPOSITE_ATOP, 0, 0);\n\n    header(\"Content-Type: image\/png\");\n    echo $background->getImageBlob();\n}","output":null}],"imagick::commentimage":[{"title":"Using Imagick::commentImage():","source":"\/* Create new Imagick object *\/\n$im = new imagick();\n\n\/* Create an empty image *\/\n$im->newImage(100, 100, new ImagickPixel(\"red\"));\n\n\/* Add comment to the image *\/\n$im->commentImage(\"Hello World!\");\n\n\/* Display the comment *\/\necho $im->getImageProperty(\"comment\");","output":null}],"imagick::compareimagelayers":[{"title":"Using Imagick::compareImageLayers()","source":"\/* create new imagick object *\/\n$im = new Imagick(\"test.gif\");\n\n\/* optimize the image layers *\/\n$result = $im->compareImageLayers(imagick::LAYERMETHOD_COALESCE);\n\n\/* work on the $result *\/","output":null}],"imagick::compareimages":[{"title":"Using Imagick::compareImages():","source":"$image1 = new imagick(\"image1.png\");\n$image2 = new imagick(\"image2.png\");\n\n$result = $image1->compareImages($image2, Imagick::METRIC_MEANSQUAREERROR);\n$result[0]->setImageFormat(\"png\");\n\nheader(\"Content-Type: image\/png\");\necho $result[0];","output":null}],"imagick::compositeimage":[{"title":"Using Imagick::compositeImage():","source":"\/\/ Equivalent to running the command\n\/\/ convert src1.png src2.png -compose mathematics -define compose:args=\"1,0,-0.5,0.5\" -composite output.png\n\n$src1 = new \\Imagick(\".\/src1.png\");\n$src2 = new \\Imagick(\".\/src2.png\");\n\n$src1->setImageVirtualPixelMethod(Imagick::VIRTUALPIXELMETHOD_TRANSPARENT);\n$src1->setImageArtifact('compose:args', \"1,0,-0.5,0.5\");\n$src1->compositeImage($src2, Imagick::COMPOSITE_MATHEMATICS, 0, 0);\n$src1->writeImage(\".\/output.png\");","output":null}],"imagick::contrastimage":[{"title":"Imagick::contrastImage()","source":"function contrastImage($imagePath, $contrastType) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    if ($contrastType != 2) {\n        $imagick->contrastImage($contrastType);\n    }\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::convolveimage":[{"title":"Imagick::convolveImage()","source":"function convolveImage($imagePath, $bias, $kernelMatrix) {\n    $imagick = new \\Imagick(realpath($imagePath));    \n    \/\/$edgeFindingKernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1,];\n    $imagick->setImageBias($bias * \\Imagick::getQuantum());\n    $imagick->convolveImage($kernelMatrix);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::cropimage":[{"title":"Imagick::cropImage()","source":"function cropImage($imagePath, $startX, $startY, $width, $height) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->cropImage($width, $height, $startX, $startY);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::deskewimage":[{"title":"Imagick::deskewImage()","source":"function deskewImage($threshold) {\n    $imagick = new \\Imagick(realpath(\"images\/NYTimes-Page1-11-11-1918.jpg\"));\n    $deskewImagick = clone $imagick;\n    \n    \/\/This is the only thing required for deskewing.\n    $deskewImagick->deskewImage($threshold);\n\n    \/\/The rest of this example is to make the result obvious - because\n    \/\/otherwise the result is not obvious.\n    $trim = 9;\n\n    $deskewImagick->cropImage($deskewImagick->getImageWidth() - $trim, $deskewImagick->getImageHeight(), $trim, 0);\n    $imagick->cropImage($imagick->getImageWidth() - $trim, $imagick->getImageHeight(), $trim, 0);\n    $deskewImagick->resizeimage($deskewImagick->getImageWidth() \/ 2, $deskewImagick->getImageHeight() \/ 2, \\Imagick::FILTER_LANCZOS, 1);\n    $imagick->resizeimage($imagick->getImageWidth() \/ 2, $imagick->getImageHeight() \/ 2, \\Imagick::FILTER_LANCZOS, 1);\n    $newCanvas = new \\Imagick();\n    $newCanvas->newimage($imagick->getImageWidth() + $deskewImagick->getImageWidth() + 20, $imagick->getImageHeight(), 'red', 'jpg');\n    $newCanvas->compositeimage($imagick, \\Imagick::COMPOSITE_COPY, 5, 0);\n    $newCanvas->compositeimage($deskewImagick, \\Imagick::COMPOSITE_COPY, $imagick->getImageWidth() + 10, 0);\n\n    header(\"Content-Type: image\/jpg\");\n    echo $newCanvas->getImageBlob();\n}","output":null}],"imagick::despeckleimage":[{"title":"Imagick::despeckleImage()","source":"function despeckleImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->despeckleImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::distortimage":[{"title":"Using Imagick::distortImage():","source":"\/* Create new object *\/\n$im = new Imagick();\n\n\/* Create new checkerboard pattern *\/\n$im->newPseudoImage(100, 100, \"pattern:checkerboard\");\n\n\/* Set the image format to png *\/\n$im->setImageFormat('png');\n\n\/* Fill new visible areas with transparent *\/\n$im->setImageVirtualPixelMethod(Imagick::VIRTUALPIXELMETHOD_TRANSPARENT);\n\n\/* Activate matte *\/\n$im->setImageMatte(true);\n\n\/* Control points for the distortion *\/\n$controlPoints = array( 10, 10, \n                        10, 5,\n\n                        10, $im->getImageHeight() - 20,\n                        10, $im->getImageHeight() - 5,\n\n                        $im->getImageWidth() - 10, 10,\n                        $im->getImageWidth() - 10, 20,\n\n                        $im->getImageWidth() - 10, $im->getImageHeight() - 10,\n                        $im->getImageWidth() - 10, $im->getImageHeight() - 30);\n\n\/* Perform the distortion *\/                       \n$im->distortImage(Imagick::DISTORTION_PERSPECTIVE, $controlPoints, true);\n\n\/* Ouput the image *\/\nheader(\"Content-Type: image\/png\");\necho $im;","output":null}],"imagick::edgeimage":[{"title":"Imagick::edgeImage()","source":"function edgeImage($imagePath, $radius) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->edgeImage($radius);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::embossimage":[{"title":"Imagick::embossImage()","source":"function embossImage($imagePath, $radius, $sigma) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->embossImage($radius, $sigma);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::enhanceimage":[{"title":"Imagick::enhanceImage()","source":"function enhanceImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->enhanceImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::equalizeimage":[{"title":"Imagick::equalizeImage()","source":"function equalizeImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->equalizeImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::evaluateimage":[{"title":"Using Imagick::evaluateImage()","source":"\/\/ Create new object with the image\n$im = new Imagick('example-alpha.png');\n\n\/\/ Reduce the alpha by 50%\n$im->evaluateImage(Imagick::EVALUATE_DIVIDE, 2, Imagick::CHANNEL_ALPHA);\n\n\/\/ Output the image\nheader(\"Content-Type: image\/png\");\necho $im;","output":null}],"imagick::exportimagepixels":[{"title":"Using Imagick::exportImagePixels()","source":"\/* Create new object *\/\n$im = new Imagick();\n\n\/* Create new image *\/\n$im->newPseudoImage(0, 0, \"magick:rose\");\n\n\/* Export the image pixels *\/\n$pixels = $im->exportImagePixels(10, 10, 2, 2, \"RGB\", Imagick::PIXEL_CHAR);\n\n\/* Output *\/\nvar_dump($pixels);","output":"array(12) {\n  [0]=>\n  int(72)\n  [1]=>\n  int(64)\n  [2]=>\n  int(57)\n  [3]=>\n  int(69)\n  [4]=>\n  int(59)\n  [5]=>\n  int(43)\n  [6]=>\n  int(124)\n  [7]=>\n  int(120)\n  [8]=>\n  int(-96)\n  [9]=>\n  int(91)\n  [10]=>\n  int(84)\n  [11]=>\n  int(111)\n}"}],"imagick::filter":[{"title":"Imagick::filter()","source":"function filter($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $matrix = [\n        [-1, 0, -1],\n        [0,  5,  0],\n        [-1, 0, -1],\n    ];\n    \n    $kernel = \\ImagickKernel::fromMatrix($matrix);\n    $strength = 0.5;    \n    $kernel->scale($strength, \\Imagick::NORMALIZE_KERNEL_VALUE);    \n    $kernel->addUnityKernel(1 - $strength);\n\n    $imagick->filter($kernel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::flipimage":[{"title":"Imagick::flipImage()","source":"function flipImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->flipImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::floodfillpaintimage":[{"title":"Imagick::floodfillPaintImage() example","source":"\/* Create new imagick object *\/\n$im = new Imagick();\n\n\/* create red, green and blue images *\/\n$im->newImage(100, 50, \"red\");\n$im->newImage(100, 50, \"green\");\n$im->newImage(100, 50, \"blue\");\n\n\/* Append the images into one *\/\n$im->resetIterator();\n$combined = $im->appendImages(true);\n\n\/* Save the intermediate image for comparison *\/\n$combined->writeImage(\"floodfillpaint_intermediate.png\");\n\n\/* The target pixel to paint *\/\n$x = 1;\n$y = 1;\n\n\/* Get the color we are painting *\/\n$target = $combined->getImagePixelColor($x, $y);\n\n\/* Paints pixel in position 1,1 black and all neighboring \n   pixels that match the target color *\/\n$combined->floodfillPaintImage(\"black\", 1, $target, $x, $y, false);\n\n\/* Save the result *\/\n$combined->writeImage(\"floodfillpaint_result.png\");","output":null}],"imagick::flopimage":[{"title":"Imagick::flopImage()","source":"function flopImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->flopImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::forwardfouriertransformimage":[{"title":"Imagick::forwardFourierTransformImage()","source":"\/\/Utility function for forwardTransformImage\nfunction createMask() {\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(0);\n    $draw->setStrokeColor('rgb(255, 255, 255)');\n    $draw->setFillColor('rgb(255, 255, 255)');\n\n    \/\/Draw a circle on the y-axis, with it's centre\n    \/\/at x, y that touches the origin\n    $draw->circle(250, 250, 220, 250);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(512, 512, \"black\");\n    $imagick->drawImage($draw);\n    $imagick->gaussianBlurImage(20, 20);\n    $imagick->autoLevelImage();\n\n    return $imagick;\n}\n\n\nfunction forwardFourierTransformImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->resizeimage(512, 512, \\Imagick::FILTER_LANCZOS, 1);\n\n    $mask = createMask();\n    $imagick->forwardFourierTransformImage(true);\n\n    @$imagick->setimageindex(0);\n    $magnitude = $imagick->getimage();\n\n    @$imagick->setimageindex(1);\n    $imagickPhase = $imagick->getimage();\n\n    if (true) {\n        $imagickPhase->compositeImage($mask, \\Imagick::COMPOSITE_MULTIPLY, 0, 0);\n    }\n\n    if (false) {\n        $output = clone $imagickPhase;\n        $output->setimageformat('png');\n        header(\"Content-Type: image\/png\");\n        echo $output->getImageBlob();\n    }\n\n    $magnitude->inverseFourierTransformImage($imagickPhase, true);\n\n    $magnitude->setimageformat('png');\n    header(\"Content-Type: image\/png\");\n    echo $magnitude->getImageBlob();\n}","output":null}],"imagick::frameimage":[{"title":"Imagick::frameImage()","source":"function frameImage($imagePath, $color, $width, $height, $innerBevel, $outerBevel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $width = $width + $innerBevel + $outerBevel;\n    $height = $height + $innerBevel + $outerBevel;\n\n    $imagick->frameimage(\n        $color,\n        $width,\n        $height,\n        $innerBevel,\n        $outerBevel\n    );\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::functionimage":[{"title":"Create a sinusoidal gradient","source":"$imagick = new Imagick();\n$imagick->newPseudoImage(200, 200, 'gradient:black-white');\n$arguments = array(3, -90);\n$imagick->functionImage(Imagick::FUNCTION_SINUSOID, $arguments);\n\nheader(\"Content-Type: image\/png\");\n$imagick->setImageFormat(\"png\");\necho $imagick->getImageBlob();","output":null},{"title":"Create a gradient from the polynomial (4x^2 - 4x + 1)","source":"$imagick = new Imagick();\n$imagick->newPseudoImage(200, 200, 'gradient:black-white');\n$arguments = array(4, -4, 1);\n$imagick->functionImage(Imagick::FUNCTION_POLYNOMIAL, $arguments);\n\nheader(\"Content-Type: image\/png\");\n$imagick->setimageformat(\"png\");\necho $imagick->getImageBlob();","output":null},{"title":"Create a complex gradient from the polynomial (4x^2 - 4x^2 + 1) modulated by a sinusoidal gradient","source":"$imagick1 = new Imagick();\n$imagick1->newPseudoImage(200, 200, 'gradient:black-white');\n$arguments = array(9, -90);\n$imagick1->functionImage(Imagick::FUNCTION_SINUSOID, $arguments);\n\n$imagick2 = new Imagick();\n$imagick2->newPseudoImage(200, 200, 'gradient:black-white');\n$arguments = array(0.5, 0);\n$imagick2->functionImage(Imagick::FUNCTION_SINUSOID, $arguments);\n$imagick1->compositeimage($imagick2, Imagick::COMPOSITE_MULTIPLY, 0, 0);\n\nheader(\"Content-Type: image\/png\");\n$imagick1->setImageFormat(\"png\");\necho $imagick1->getImageBlob();","output":null}],"imagick::fximage":[{"title":"Imagick::fxImage()","source":"function fxImage() {\n    $imagick = new \\Imagick();\n    $imagick->newPseudoImage(200, 200, \"xc:white\");\n\n    $fx = 'xx=i-w\/2; yy=j-h\/2; rr=hypot(xx,yy); (.5-rr\/140)*1.2+.5';\n    $fxImage = $imagick->fxImage($fx);\n\n    header(\"Content-Type: image\/png\");\n    $fxImage->setimageformat('png');\n    echo $fxImage->getImageBlob();\n}","output":null}],"imagick::gammaimage":[{"title":"Imagick::gammaImage()","source":"function gammaImage($imagePath, $gamma, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->gammaImage($gamma, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::gaussianblurimage":[{"title":"Imagick::gaussianBlurImage()","source":"function gaussianBlurImage($imagePath, $radius, $sigma, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->gaussianBlurImage($radius, $sigma, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::getimagegeometry":[{"title":"Imagick::getImageGeometry()","source":"function getImageGeometry($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::getimagehistogram":[{"title":"Generates Imagick::getImageHistogram()","source":"function getColorStatistics($histogramElements, $colorChannel) {\n    $colorStatistics = [];\n\n    foreach ($histogramElements as $histogramElement) {\n        $color = $histogramElement->getColorValue($colorChannel);\n        $color = intval($color * 255);\n        $count = $histogramElement->getColorCount();\n\n        if (array_key_exists($color, $colorStatistics)) {\n            $colorStatistics[$color] += $count;\n        }\n        else {\n            $colorStatistics[$color] = $count;\n        }\n    }\n\n    ksort($colorStatistics);\n    \n    return $colorStatistics;\n}\n    \n\n\nfunction getImageHistogram($imagePath) {\n\n    $backgroundColor = 'black';\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeWidth(0); \/\/make the lines be as thin as possible\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    $histogramWidth = 256;\n    $histogramHeight = 100; \/\/ the height for each RGB segment\n\n    $imagick = new \\Imagick(realpath($imagePath));\n    \/\/Resize the image to be small, otherwise PHP tends to run out of memory\n    \/\/This might lead to bad results for images that are pathologically 'pixelly'\n    $imagick->adaptiveResizeImage(200, 200, true);\n    $histogramElements = $imagick->getImageHistogram();\n\n    $histogram = new \\Imagick();\n    $histogram->newpseudoimage($histogramWidth, $histogramHeight * 3, 'xc:black');\n    $histogram->setImageFormat('png');\n\n    $getMax = function ($carry, $item)  {\n        if ($item > $carry) {\n            return $item;\n        }\n        return $carry;\n    };\n\n    $colorValues = [\n        'red' => getColorStatistics($histogramElements, \\Imagick::COLOR_RED),\n        'lime' => getColorStatistics($histogramElements, \\Imagick::COLOR_GREEN),\n        'blue' => getColorStatistics($histogramElements, \\Imagick::COLOR_BLUE),\n    ];\n\n    $max = array_reduce($colorValues['red'] , $getMax, 0);\n    $max = array_reduce($colorValues['lime'] , $getMax, $max);\n    $max = array_reduce($colorValues['blue'] , $getMax, $max);\n\n    $scale =  $histogramHeight \/ $max;\n\n    $count = 0;\n    foreach ($colorValues as $color => $values) {\n        $draw->setstrokecolor($color);\n\n        $offset = ($count + 1) * $histogramHeight;\n\n        foreach ($values as $index => $value) {\n            $draw->line($index, $offset, $index, $offset - ($value * $scale));\n        }\n        $count++;\n    }\n\n    $histogram->drawImage($draw);\n    \n    header( \"Content-Type: image\/png\" );\n    echo $histogram;\n}","output":null}],"imagick::getimagelength":[{"title":"Using Imagick::getImageLength():","source":"$image = new Imagick('test.jpg');\necho $image->getImageLength() . ' bytes';","output":null}],"imagick::getimageproperties":[{"title":"Using Imagick::getImageProperties():","source":"\/* Create the object *\/\n$im = new imagick(\"\/path\/to\/example.jpg\");\n\n\/* Get the EXIF information *\/\n$exifArray = $im->getImageProperties(\"exif:*\");\n\n\/* Loop trough the EXIF properties *\/\nforeach ($exifArray as $name => $property)\n{\n    echo \"{$name} => {$property}<br \/>\\n\"; \n}","output":null}],"imagick::getimageproperty":[{"title":"Using Imagick::getImageProperty():","source":"$image = new Imagick();\n$image->newImage(300, 200, \"black\");\n\n$image->setImageProperty('Exif:Make', 'Imagick');\necho $image->getImageProperty('Exif:Make');","output":null}],"imagick::getiteratorindex":[{"title":"Using Imagick::getIteratorIndex():","source":"$im = new Imagick();\n$im->newImage(100, 100, new ImagickPixel(\"red\"));\n$im->newImage(100, 100, new ImagickPixel(\"green\"));\n$im->newImage(100, 100, new ImagickPixel(\"blue\"));\n\n$im->setIteratorIndex(1);\necho $im->getIteratorIndex();","output":null}],"imagick::getpixeliterator":[{"title":"Imagick::getPixelIterator()","source":"function getPixelIterator($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imageIterator = $imagick->getPixelIterator();\n\n    foreach ($imageIterator as $row => $pixels) { \/* Loop through pixel rows *\/\n        foreach ($pixels as $column => $pixel) { \/* Loop through the pixels in the row (columns) *\/\n            \/** @var $pixel \\ImagickPixel *\/\n            if ($column % 2) {\n                $pixel->setColor(\"rgba(0, 0, 0, 0)\"); \/* Paint every second pixel black*\/\n            }\n        }\n        $imageIterator->syncIterator(); \/* Sync the iterator, this is important to do on each iteration *\/\n    }\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick;\n}","output":null}],"imagick::getpixelregioniterator":[{"title":"Imagick::getPixelRegionIterator() example","source":"$im = new Imagick(realpath(\".\/testImage.png\"));\n$areaIterator = $im->getPixelRegionIterator(0, 0, 10, 10);\n\nforeach ($areaIterator as $rowIterator) {\n    foreach ($rowIterator as $pixel) {\n        \/\/ Paint every pixel black\n        $pixel->setColor(\"rgba(0, 0, 0, 0)\");\n    }\n    $areaIterator->syncIterator();\n}\n$im->writeImage(\".\/output.png\");","output":null}],"imagick::getsize":[{"title":"Getting the size of a raw RGB image set at 200x400, after scaling to 400x800 (compared to width \/ height)","source":"\/\/Set size first and then load the raw image\n$img = new Imagick();\n$img->setSize(200, 400);\n$img->readImage(\"image.rgb\");\n\n$img->scaleImage(400, 800);\n\n$size = $img->getSize();\nprint_r($size);\n\necho \"$img->getImageWidth().\"x\".$img->getImageHeight();","output":"Array\n(\n    [columns] => 200\n    [rows] => 400\n)\n400x800"}],"imagick::haldclutimage":[{"title":"Imagick::haldClutImage()","source":"function haldClutImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagickPalette = new \\Imagick(realpath(\"images\/hald\/hald_8.png\"));\n    $imagickPalette->sepiatoneImage(55);\n    $imagick->haldClutImage($imagickPalette);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::identifyformat":[{"title":"Imagick::identifyFormat()","source":"$output = \"Output of 'Trim box: %@ number of unique colors: %k' is: <br\/>\";\n        $imagick = new \\Imagick(realpath(\".\/images\/artifact\/mask.png\"));\n        $output .= $imagick->identifyFormat(\"Trim box: %@ number of unique colors: %k\");","output":null}],"imagick::identifyimage":[{"title":"Example Result Format","source":"Identifies an image and fetches attributes\n Imagick::identifyFormat\n Imagick::implodeImage\n Imagick\n PHP Manual\n\n \n  Imagick::identifyImage\n  (PECL imagick 2.0.0)Imagick::identifyImage — Identifies an image and fetches attributes\n\n \n\n \n  Description\n  \n   array Imagick::identifyImage\n    ([ bool $appendRawOutput = false\n  ] )\n\n  \n   Identifies an image and returns the attributes.  Attributes include\n   the image width, height, size, and others.\n  \n \n\n\n \n  Parameters\n  \n   \nappendRawOutput\n\n     \n\n      \n         If TRUE then the raw output is appended to the array.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Identifies an image and returns the attributes.  Attributes include\n   the image width, height, size, and others.\n  \n \n\n \n \n  \n   \n   Example #1 Example Result Format\n   \nArray\n(\n    [imageName] => \/some\/path\/image.jpg\n    [format] => JPEG (Joint Photographic Experts Group JFIF format)\n    [geometry] => Array\n        (\n            [width] => 90\n            [height] => 90\n        )\n\n    [type] => TrueColor\n    [colorSpace] => RGB\n    [resolution] => Array\n        (\n            [x] => 300\n            [y] => 300\n        )\n\n    [units] => PixelsPerInch\n    [fileSize] => 1.88672kb\n    [compression] => JPEG\n    [signature] => 9a6dc8f604f97d0d691c0286176ddf992e188f0bebba98494b2146ee2d7118da\n)\n\n   \n   \n   \n \n\n\n \n  Errors\/Exceptions\n  \n   Throws ImagickException on error.\n  \n \n\n\n\n Imagick::identifyFormat\n Imagick::implodeImage\n Imagick\n PHP Manual","output":null}],"imagick::implodeimage":[{"title":"Imagick::implodeImage()","source":"function implodeImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->implodeImage(0.0001);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n\n}","output":null}],"imagick::importimagepixels":[{"title":"Imagick::importImagePixels() example","source":"\/* Generate array of pixels. 2000 pixels per color stripe *\/\n$count = 2000 * 3;\n\n$pixels = \n   array_merge(array_pad(array(), $count, 0),\n               array_pad(array(), $count, 255), \n               array_pad(array(), $count, 0),\n               array_pad(array(), $count, 255),\n               array_pad(array(), $count, 0));\n\n\/* Width and height. The area is amount of pixels divided\n   by three. Three comes from 'RGB', three values per pixel *\/\n$width = $height = pow((count($pixels) \/ 3), 0.5);\n\n\/* Create empty image *\/\n$im = new Imagick();\n$im->newImage($width, $height, 'gray');\n\n\/* Import the pixels into image.\n   width * height * strlen(\"RGB\") must match count($pixels) *\/\n$im->importImagePixels(0, 0, $width, $height, \"RGB\", Imagick::PIXEL_CHAR, $pixels);\n\n\/* output as jpeg image *\/\n$im->setImageFormat('jpg');\nheader(\"Content-Type: image\/jpg\");\necho $im;","output":null}],"imagick::levelimage":[{"title":"Imagick::levelImage()","source":"function levelImage($blackPoint, $gamma, $whitePoint) {\n    $imagick = new \\Imagick();\n    $imagick->newPseudoimage(500, 500, 'gradient:black-white');\n\n    $imagick->setFormat('png');\n    $quantum = $imagick->getQuantum();\n    $imagick->levelImage($blackPoint \/ 100 , $gamma, $quantum * $whitePoint \/ 100);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::linearstretchimage":[{"title":"Imagick::linearStretchImage()","source":"function linearStretchImage($imagePath, $blackThreshold, $whiteThreshold) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $pixels = $imagick->getImageWidth() * $imagick->getImageHeight();\n    $imagick->linearStretchImage($blackThreshold * $pixels, $whiteThreshold * $pixels);\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::magnifyimage":[{"title":"Imagick::magnifyImage()","source":"function magnifyImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->magnifyImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::medianfilterimage":[{"title":"Imagick::medianFilterImage()","source":"function medianFilterImage($radius, $imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    @$imagick->medianFilterImage($radius);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::mergeimagelayers":[{"title":"Imagick::mergeImageLayers()","source":"function mergeImageLayers($layerMethodType, $imagePath1, $imagePath2) {\n\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imagick2 = new \\Imagick(realpath($imagePath2));\n    $imagick->addImage($imagick2);\n    $imagick->setImageFormat('png');\n\n    $result = $imagick->mergeImageLayers($layerMethodType);\n    header(\"Content-Type: image\/png\");\n    echo $result->getImageBlob();\n}","output":null}],"imagick::modulateimage":[{"title":"Imagick::modulateImage()","source":"function modulateImage($imagePath, $hue, $brightness, $saturation) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->modulateImage($brightness, $saturation, $hue);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::morphology":[{"title":"Convolve Imagick::morphology()","source":"$imagick = $this->getCharacter();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_GAUSSIAN, \"5,1\");\n        $imagick->morphology(\\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();","output":null},{"title":"Correlate Imagick::morphology()","source":"\/\/ Top-left pixel must be black\n        \/\/ Bottom right pixel must be white\n        \/\/ We don't care about the rest.\n        \n\n        $imagick = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);\n        $imagick->morphology(\\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();","output":null},{"title":"Erode Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_ERODE, 2, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Erode Intensity Imagick::morphology()","source":"$canvas = $this->getCharacter();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"1\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Dilate Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_DILATE, 4, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Dilate intensity Imagick::morphology()","source":"$canvas = $this->getCharacter();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"1\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Distance with Chebyshev kernel Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_CHEBYSHEV, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n        $canvas->autoLevelImage();\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Distance with Manhattan kernel Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_MANHATTAN, \"5\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n        $canvas->autoLevelImage();\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Distance with ocatagonal kernel Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGONAL, \"5\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n        $canvas->autoLevelImage();\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Distance with Euclidean kernel Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_EUCLIDEAN, \"4\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);\n        $canvas->autoLevelImage();\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Edge Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_EDGE, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Open Imagick::morphology()","source":"\/\/ As a result you will see that 'Open' smoothed the outline, by rounding off any sharp points, and remove any parts that is smaller than the shape used. It will also disconnect or 'open' any thin bridges.\n        $canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_OPEN, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Open intensity Imagick::morphology()","source":"\/\/ As a result you will see that 'Open' smoothed the outline, by rounding off any sharp points, and remove any parts that is smaller than the shape used. It will also disconnect or 'open' any thin bridges.\n\n        $canvas = $this->getCharacter();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Close Imagick::morphology()","source":"\/\/The basic use of the 'Close' method is to reduce or remove any 'holes' or 'gaps' about the size of the kernel 'Structure Element'. That is 'close' parts of the background that are about that size.\n        $canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Close Intensity Imagick::morphology()","source":"\/\/The basic use of the 'Close' method is to reduce or remove any 'holes' or 'gaps' about the size of the kernel 'Structure Element'. That is 'close' parts of the background that are about that size.\n        $canvas = $this->getCharacter();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"6\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Smooth Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Edge in Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Edge out Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_OCTAGON, \"3\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"The 'TopHat' method, or more specifically 'White Top Hat', returns the pixels that were removed by a Opening of the shape, that is the pixels that were removed to round off the points, and the connecting bridged between shapes. Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"5\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"The 'BottomHat' method, also known as 'Black TopHat' is the pixels that a Closing of the shape adds to the image. That is the the pixels that were used to fill in the 'holes', 'gaps', and 'bridges'. Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"5\");\n        $canvas->morphology(\\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Hit and Miss Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        \/\/This finds all the pixels with 3 pixels of the right edge\n        $matrix = [[1, false, false, 0]];\n        $kernel = \\ImagickKernel::fromMatrix(\n            $matrix,\n            [0, 0]\n        );\n        $canvas->morphology(\\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Thinning Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $leftEdgeKernel = \\ImagickKernel::fromMatrix([[0, 1]], [1, 0]);\n        $rightEdgeKernel = \\ImagickKernel::fromMatrix([[1, 0]], [0, 0]);\n        $leftEdgeKernel->addKernel($rightEdgeKernel);\n        \n        $canvas->morphology(\\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Thicken Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $leftEdgeKernel = \\ImagickKernel::fromMatrix([[0, 1]], [1, 0]);\n        $rightEdgeKernel = \\ImagickKernel::fromMatrix([[1, 0]], [0, 0]);\n        $leftEdgeKernel->addKernel($rightEdgeKernel);\n\n        $canvas->morphology(\\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Thick to generate a convex hull Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $diamondKernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DIAMOND, \"1\");\n        $convexKernel =  \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_CONVEX_HULL, \"\");\n\n        \/\/ The thicken morphology doesn't handle small gaps. We close them\n        \/\/ with the close morphology.\n        $canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);\n        $canvas->morphology(\\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);\n        $canvas->morphology(\\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);\n\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Iterative morphology Imagick::morphology()","source":"$canvas = $this->getCharacterOutline();\n        $kernel = \\ImagickKernel::fromBuiltIn(\\Imagick::KERNEL_DISK, \"2\");        \n        $canvas->morphology(\\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);\n        $canvas->autoLevelImage();\n        header(\"Content-Type: image\/png\");\n        echo $canvas->getImageBlob();","output":null},{"title":"Helper functon to get an image silhouette Imagick::morphology()","source":"private function getCharacterOutline() {\n\n        $imagick = new \\Imagick(realpath(\".\/images\/character.png\"));\n        $character = new \\Imagick();\n        $character->newPseudoImage(\n            $imagick->getImageWidth(),\n            $imagick->getImageHeight(),\n            \"canvas:white\"\n        );\n        $canvas = new \\Imagick();\n        $canvas->newPseudoImage(\n            $imagick->getImageWidth(),\n            $imagick->getImageHeight(),\n            \"canvas:black\"\n        );\n\n        $character->compositeimage(\n            $imagick,\n            \\Imagick::COMPOSITE_COPYOPACITY,\n            0, 0\n        );\n        $canvas->compositeimage(\n            $character,\n            \\Imagick::COMPOSITE_ATOP,\n            0, 0\n        );\n        $canvas->setFormat('png');\n\n        return $canvas;\n    }","output":null}],"imagick::motionblurimage":[{"title":"Imagick::motionBlurImage()","source":"function motionBlurImage($imagePath, $radius, $sigma, $angle, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->motionBlurImage($radius, $sigma, $angle, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::negateimage":[{"title":"Imagick::negateImage()","source":"function negateImage($imagePath, $grayOnly, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->negateImage($grayOnly, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::newimage":[{"title":"Using Imagick::newImage():","source":"$image = new Imagick();\n$image->newImage(100, 100, new ImagickPixel('red'));\n$image->setImageFormat('png');\n\nheader('Content-type: image\/png');\necho $image;","output":null}],"imagick::newpseudoimage":[{"title":"Imagick::newPseudoImage()","source":"function newPseudoImage($canvasType) {\n    $imagick = new \\Imagick();\n    $imagick->newPseudoImage(300, 300, $canvasType);\n    $imagick->setImageFormat(\"png\");\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}\n\n\/\/newPseudoImage('gradient:red-rgba(64, 255, 255, 0.5)');\n\/\/newPseudoImage(\"radial-gradient:red-blue\");\nnewPseudoImage(\"plasma:fractal\");","output":null}],"imagick::normalizeimage":[{"title":"Imagick::normalizeImage()","source":"function normalizeImage($imagePath, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $original = clone $imagick;\n    $original->cropimage($original->getImageWidth() \/ 2, $original->getImageHeight(), 0, 0);\n    $imagick->normalizeImage($channel);\n    $imagick->compositeimage($original, \\Imagick::COMPOSITE_ATOP, 0, 0);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::oilpaintimage":[{"title":"Imagick::oilPaintImage()","source":"function oilPaintImage($imagePath, $radius) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->oilPaintImage($radius);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::optimizeimagelayers":[{"title":"Using Imagick::optimizeImageLayers()","source":"\/* create new imagick object *\/\n$im = new Imagick(\"test.gif\");\n\n\/* optimize the image layers *\/\n$im->optimizeImageLayers();\n\n\/* write the image back *\/\n$im->writeImages(\"test_optimized.gif\", true);","output":null}],"imagick::orderedposterizeimage":[{"title":"Imagick::orderedPosterizeImage()","source":"function orderedPosterizeImage($imagePath, $orderedPosterizeType) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    \n  \n    $imagick->orderedPosterizeImage($orderedPosterizeType);\n    $imagick->setImageFormat('png');\n    \n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}\n\n\/\/orderedPosterizeImage($imagePath, 'o4x4,3,3');\n\/\/orderedPosterizeImage($imagePath, 'o8x8,6,6');\norderedPosterizeImage($imagePath, 'h8x8a');","output":null}],"imagick::pingimageblob":[{"title":"Using Imagick::pingImageBlob()","source":"\/* read image contents *\/\n$image = file_get_contents(\"test.jpg\");\n\n\/* create new imagick object *\/\n$im = new Imagick();\n\n\/* pass the string to the imagick object *\/\n$im->pingImageBlob($image);\n\n\/* output image width and height *\/\necho $im->getImageWidth() . 'x' . $im->getImageHeight();","output":null}],"imagick::pingimagefile":[{"title":"Using Imagick::pingImageFile()","source":"\/* fopen a remote location *\/\n$fp = fopen(\"http:\/\/example.com\/test.jpg\");\n\n\/* create new imagick object *\/\n$im = new Imagick();\n\n\/* pass the handle to imagick *\/\n$im->pingImageFile($fp);","output":null}],"imagick::polaroidimage":[{"title":"A Imagick::polaroidImage() example","source":"\/* Create the object *\/\n$image = new Imagick('source.png');\n\n\/* Set the opacity *\/\n$image->polaroidImage(new ImagickDraw(), 25);\n\n\/* output the image *\/\nheader('Content-type: image\/png');\necho $image;","output":null}],"imagick::posterizeimage":[{"title":"Imagick::posterizeImage()","source":"function posterizeImage($imagePath, $posterizeType, $numberLevels) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->posterizeImage($numberLevels, $posterizeType);\n    $imagick->setImageFormat('png');\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}\n\nposterizeImage($imagePath, \\Imagick::DITHERMETHOD_RIEMERSMA, 8);","output":null}],"imagick::quantizeimage":[{"title":"Imagick::quantizeImage()","source":"function quantizeImage($imagePath, $numberColors, $colorSpace, $treeDepth, $dither) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->quantizeImage($numberColors, $colorSpace, $treeDepth, $dither, false);\n    $imagick->setImageFormat('png');\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::queryfontmetrics":[{"title":"Using Imagick::queryFontMetrics():","source":"\/* Create a new Imagick object *\/\n$im = new Imagick();\n\n\/* Create an ImagickDraw object *\/\n$draw = new ImagickDraw();\n\n\/* Set the font *\/\n$draw->setFont('\/path\/to\/font.ttf');\n\n\/* Dump the font metrics, autodetect multiline *\/\nvar_dump($im->queryFontMetrics($draw, \"Hello World!\"));","output":null}],"imagick::queryfonts":[{"title":"Imagick::queryFonts()","source":"$output = '';\n        $output .= \"Fonts that match 'Helvetica*' are:<br\/>\";\n\n        $fontList = \\Imagick::queryFonts(\"Helvetica*\");\n \n        foreach ($fontList as $fontName) {\n            $output .= '<li>'. $fontName.\"<\/li>\";\n        }\n\n        return $output;","output":null}],"imagick::queryformats":[{"title":"Imagick::queryFormats()","source":"function render() {\n        $output = \"\";\n        $input = \\Imagick::queryformats();\n        $columns = 6;\n\n        $output .= \"<table border='2'>\";\n\n        for ($i=0; $i < count($input); $i += $columns) {\n            $output .= \"<tr>\";\n            for ($c=0; $c<$columns; $c++) {\n                $output .= \"<td>\";\n                if (($i + $c) <  count($input)) {\n                    $output .= $input[$i + $c];\n                }\n                $output .= \"<\/td>\";\n            }\n            $output .= \"<\/tr>\";\n        }\n\n        $output .= \"<\/table>\";\n\n        return $output;\n    }","output":null}],"imagick::radialblurimage":[{"title":"Imagick::radialBlurImage()","source":"function radialBlurImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    \/\/Blur 3 times with different radii\n    $imagick->radialBlurImage(3);\n    $imagick->radialBlurImage(5);\n    $imagick->radialBlurImage(7);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::raiseimage":[{"title":"Imagick::raiseImage()","source":"function raiseImage($imagePath, $width, $height, $x, $y, $raise) {\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    \/\/x and y do nothing?\n    $imagick->raiseImage($width, $height, $x, $y, $raise);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::randomthresholdimage":[{"title":"Imagick::randomThresholdImage()","source":"function randomThresholdimage($imagePath, $lowThreshold, $highThreshold, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imagick->randomThresholdimage(\n        $lowThreshold * \\Imagick::getQuantum(),\n        $highThreshold * \\Imagick::getQuantum(),\n        $channel\n    );\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::readimageblob":[{"title":"Imagick::readImageBlob()","source":"function readImageBlob() {\n    $base64 = \"iVBORw0KGgoAAAANSUhEUgAAAM0AAAD\n NCAMAAAAsYgRbAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5c\n cllPAAAABJQTFRF3NSmzMewPxIG\/\/ncJEJsldTou1jHgAAAARBJREFUeNrs2EEK\n gCAQBVDLuv+V20dENbMY831wKz4Y\/VHb\/5RGQ0NDQ0NDQ0NDQ0NDQ0NDQ\n 0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0PzMWtyaGhoaGhoaGhoaGhoaGhoxtb0QGho\n aGhoaGhoaGhoaGhoaMbRLEvv50VTQ9OTQ5OpyZ01GpM2g0bfmDQaL7S+ofFC6x\n v3ZpxJiywakzbvd9r3RWPS9I2+MWk0+kbf0Hih9Y17U0nTHibrDDQ0NDQ0NDQ0\n NDQ0NDQ0NTXbRSL\/AK72o6GhoaGhoRlL8951vwsNDQ0NDQ1NDc0WyHtDTEhD\n Q0NDQ0NTS5MdGhoaGhoaGhoaGhoaGhoaGhoaGhoaGposzSHAAErMwwQ2HwRQ\n AAAAAElFTkSuQmCC\";\n\n    $imageBlob = base64_decode($base64);\n\n    $imagick = new Imagick();\n    $imagick->readImageBlob($imageBlob);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick;\n}","output":null}],"imagick::recolorimage":[{"title":"Imagick::recolorImage()","source":"function recolorImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $remapColor = [ 1, 0, 0,\n        0, 0, 1,\n        0, 1, 0,];\n\n\/\/$remapColor = [\n\/\/    1.438, -0.122, -0.016,  0, 0, -0.03,\n\/\/    -0.062,  1.378, -0.016,  0, 0,  0.05,\n\/\/    -0.062, -0.122, 1.483,   0, 0, -0.02,\n\/\/];\n\n    @$imagick->recolorImage($remapColor);\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::reducenoiseimage":[{"title":"Imagick::reduceNoiseImage()","source":"function reduceNoiseImage($imagePath, $reduceNoise) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    @$imagick->reduceNoiseImage($reduceNoise);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::resampleimage":[{"title":"Imagick::resampleImage()","source":"function resampleImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imagick->resampleImage(200, 200, \\Imagick::FILTER_LANCZOS, 1);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::resizeimage":[{"title":"Imagick::resizeImage()","source":"function resizeImage($imagePath, $width, $height, $filterType, $blur, $bestFit, $cropZoom) {\n    \/\/The blur factor where &gt; 1 is blurry, &lt; 1 is sharp.\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imagick->resizeImage($width, $height, $filterType, $blur, $bestFit);\n\n    $cropWidth = $imagick->getImageWidth();\n    $cropHeight = $imagick->getImageHeight();\n\n    if ($cropZoom) {\n        $newWidth = $cropWidth \/ 2;\n        $newHeight = $cropHeight \/ 2;\n\n        $imagick->cropimage(\n            $newWidth,\n            $newHeight,\n            ($cropWidth - $newWidth) \/ 2,\n            ($cropHeight - $newHeight) \/ 2\n        );\n\n        $imagick->scaleimage(\n            $imagick->getImageWidth() * 4,\n            $imagick->getImageHeight() * 4\n        );\n    }\n\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::rollimage":[{"title":"Imagick::rollImage()","source":"function rollImage($imagePath, $rollX, $rollY) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->rollimage($rollX, $rollY);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::rotateimage":[{"title":"Imagick::rotateImage()","source":"function rotateImage($imagePath, $angle, $color) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->rotateimage($color, $angle);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::rotationalblurimage":[{"title":"Imagick::rotationalBlurImage()","source":"function rotationalBlurImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->rotationalBlurImage(3);\n    $imagick->rotationalBlurImage(5);\n    $imagick->rotationalBlurImage(7);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::roundcorners":[{"title":"Using Imagick::roundCorners():","source":"$image = new Imagick();\n$image->newPseudoImage(100, 100, \"magick:rose\");\n$image->setImageFormat(\"png\");\n\n$image->roundCorners(5,3);\n$image->writeImage(\"rounded.png\");","output":null}],"imagick::scaleimage":[{"title":"Imagick::scaleImage()","source":"function scaleImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->scaleImage(150, 150, true);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::segmentimage":[{"title":"Imagick::segmentImage()","source":"function segmentImage($imagePath, $colorSpace, $clusterThreshold, $smoothThreshold) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->segmentImage($colorSpace, $clusterThreshold, $smoothThreshold);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}\n\nsegmentImage($imagePath, \\Imagick::COLORSPACE_RGB, 5, 5);","output":null}],"imagick::selectiveblurimage":[{"title":"Imagick::selectiveBlurImage()","source":"function selectiveBlurImage($imagePath, $radius, $sigma, $threshold, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->selectiveBlurImage($radius, $sigma, $threshold, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::separateimagechannel":[{"title":"Imagick::separateImageChannel()","source":"function separateImageChannel($imagePath, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->separateimagechannel($channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}\n\nseparateImageChannel($imagePath, \\Imagick::CHANNEL_GREEN);","output":null}],"imagick::sepiatoneimage":[{"title":"Imagick::sepiaToneImage()","source":"function sepiaToneImage($imagePath, $sepia) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->sepiaToneImage($sepia);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::setcompressionquality":[{"title":"Imagick::setCompressionQuality()","source":"function setCompressionQuality($imagePath, $quality) {\n\n    $backgroundImagick = new \\Imagick(realpath($imagePath));\n    $imagick = new \\Imagick();\n    $imagick->setCompressionQuality($quality);\n    $imagick->newPseudoImage(\n        $backgroundImagick->getImageWidth(),\n        $backgroundImagick->getImageHeight(),\n        'canvas:white'\n    );\n\n    $imagick->compositeImage(\n        $backgroundImagick,\n        \\Imagick::COMPOSITE_ATOP,\n        0,\n        0\n    );\n    \n    $imagick->setFormat(\"jpg\");    \n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::setfont":[{"title":"A Imagick::setFont() example","source":"\/* Create new imagick object *\/\n$im = new Imagick();\n\n\/* Set the font for the object *\/\n$im->setFont(\"example.ttf\");\n\n\/* Create new caption *\/\n$im->newPseudoImage(100, 100, \"caption:Hello\");\n\n\/* Do something with the image *\/","output":null}],"imagick::setimage":[{"title":"A Imagick::setImage() example","source":"\/* Create the objects *\/\n$image = new Imagick('source.jpg');\n$replace = new Imagick('replace.jpg');\n\n\/* source.jpg is replaced with replace.jpg *\/\n$image->setImage($replace);\n\n\/* output the image *\/\nheader('Content-type: image\/jpeg');\necho $image;","output":null}],"imagick::setimageartifact":[{"title":"Imagick::setImageArtifact()","source":"function setImageArtifact() {\n\n    $src1 = new \\Imagick(realpath(\".\/images\/artifact\/source1.png\"));\n    $src2 = new \\Imagick(realpath(\".\/images\/artifact\/source2.png\"));\n\n    $src2->setImageVirtualPixelMethod(\\Imagick::VIRTUALPIXELMETHOD_TRANSPARENT);\n    $src2->setImageArtifact('compose:args', \"1,0,-0.5,0.5\");\n    $src1->compositeImage($src2, Imagick::COMPOSITE_MATHEMATICS, 0, 0);\n    \n    $src1->setImageFormat('png');\n    header(\"Content-Type: image\/png\");\n    echo $src1->getImagesBlob();\n}","output":null}],"imagick::setimagebias":[{"title":"Imagick::setImageBias()","source":"\/\/requires ImageMagick version 6.9.0-1 to have an effect on convolveImage\nfunction setImageBias($bias) {\n    $imagick = new \\Imagick(realpath(\"images\/stack.jpg\"));\n\n    $xKernel = array(\n        -0.70, 0, 0.70,\n        -0.70, 0, 0.70,\n        -0.70, 0, 0.70\n    );\n\n    $imagick->setImageBias($bias * \\Imagick::getQuantum());\n    $imagick->convolveImage($xKernel, \\Imagick::CHANNEL_ALL);\n\n    $imagick->setImageFormat('png');\n    \n    header('Content-type: image\/png');\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::setimageclipmask":[{"title":"Imagick::setImageClipMask()","source":"function setImageClipMask($imagePath) {\n    $imagick = new \\Imagick();\n    $imagick->readImage(realpath($imagePath));\n\n    $width = $imagick->getImageWidth();\n    $height = $imagick->getImageHeight();\n\n    $clipMask = new \\Imagick();\n    $clipMask->newPseudoImage(\n        $width,\n        $height,\n        \"canvas:transparent\"\n    );\n\n    $draw = new \\ImagickDraw();\n    $draw->setFillColor('white');\n    $draw->circle(\n        $width \/ 2,\n        $height \/ 2,\n        ($width \/ 2) + ($width \/ 4),\n        $height \/ 2\n    );\n    $clipMask->drawImage($draw);\n    $imagick->setImageClipMask($clipMask);\n\n    $imagick->negateImage(false);\n    $imagick->setFormat(\"png\");\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImagesBlob();\n    \n}","output":null}],"imagick::setimagecompressionquality":[{"title":"Imagick::setImageCompressionQuality()","source":"function setImageCompressionQuality($imagePath, $quality) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->setImageCompressionQuality($quality);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::setimagedelay":[{"title":"Modify animated Gif with Imagick::setImageDelay()","source":"\/\/ Modify an animated Gif so that it's frames are played at a variable speed,\n\/\/ varying between being shown for 50ms down to 0ms, which will cause the frame\n\/\/ to be skipped in most browsers.\n$imagick = new Imagick(realpath(\"Test.gif\"));\n$imagick = $imagick->coalesceImages();\n\n$frameCount = 0;\n\nforeach ($imagick as $frame) {\n    $imagick->setImageDelay((($frameCount % 11) * 5));\n    $frameCount++;\n}\n\n$imagick = $imagick->deconstructImages();\n\n$imagick->writeImages(\"\/path\/to\/save\/output.gif\", true);","output":null}],"imagick::setimageiterations":[{"title":"Basic Imagick::setImageIterations() usage","source":"$imagick = new Imagick(realpath(\"Test.gif\"));\n\n$imagick = $imagick->coalesceImages();\n$imagick->setImageIterations(1);\n$imagick = $imagick->deconstructImages();\n\n$imagick->writeImages('\/path\/to\/save\/OnceOnly.gif', true);","output":null}],"imagick::setimageopacity":[{"title":"A Imagick::setImageOpacity() example","source":"\/* Create the object *\/\n$image = new Imagick('source.png');\n\n\/* Set the opacity *\/\n$image->setImageOpacity(0.7);\n\n\/* output the image *\/\nheader('Content-type: image\/png');\necho $image;","output":null}],"imagick::setimageorientation":[{"title":"Imagick::setImageOrientation()","source":"\/\/Doesn't appear to do anything\nfunction setImageOrientation($imagePath, $orientationType) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->setImageOrientation($orientationType);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::setimageproperty":[{"title":"Using Imagick::setImageProperty():","source":"$image = new Imagick();\n$image->newImage(300, 200, \"black\");\n\n$image->setImageProperty('Exif:Make', 'Imagick');\necho $image->getImageProperty('Exif:Make');","output":null}],"imagick::setimageresolution":[{"title":"Imagick::setImageResolution()","source":"function setImageResolution($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->setImageResolution(50, 50);\n    \n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::setimagetickspersecond":[{"title":"Modify animated Gif with Imagick::setImageTicksPerSecond()","source":"\/\/ Modify an animated gif so the first half of the gif is played at half the\n\/\/ speed it currently is, and the second half to be played at double the speed\n\/\/ it currently is\n\n$imagick = new Imagick(realpath(\"Test.gif\"));\n$imagick = $imagick->coalesceImages();\n\n$totalFrames = $imagick->getNumberImages();\n\n$frameCount = 0;\n\nforeach ($imagick as $frame) {\n    $imagick->setImageTicksPerSecond(50);\n    \n    if ($frameCount < ($totalFrames \/ 2)) {\n        \/\/ Modify the frame to be displayed for twice as long as it currently is\n        $imagick->setImageTicksPerSecond(50);\n    } else {\n        \/\/ Modify the frame to be displayed for half as long as it currently is\n        $imagick->setImageTicksPerSecond(200);\n    }\n\n    $frameCount++;\n}\n\n$imagick = $imagick->deconstructImages();\n\n$imagick->writeImages(\"\/path\/to\/save\/output.gif\", true);","output":null}],"imagick::setiteratorindex":[{"title":"Using Imagick::setIteratorIndex():","source":"$im = new Imagick();\n$im->newImage(100, 100, new ImagickPixel(\"red\"));\n$im->newImage(100, 100, new ImagickPixel(\"green\"));\n$im->newImage(100, 100, new ImagickPixel(\"blue\"));\n\n$im->setIteratorIndex(1);\necho $im->getIteratorIndex();","output":null}],"imagick::setoption":[{"title":"Attempt to reach '$extent' sizeImagick::setOption()","source":"function renderJPG($extent) {\n        $imagePath = $this->control->getImagePath();\n        $imagick = new \\Imagick(realpath($imagePath));\n        $imagick->setImageFormat('jpg');\n        $imagick->setOption('jpeg:extent', $extent);\n        header(\"Content-Type: image\/jpg\");\n        echo $imagick->getImageBlob();\n    }","output":null},{"title":"Imagick::setOption()","source":"function renderPNG($imagePath, $format) {\n\n        $imagick = new \\Imagick(realpath($imagePath));\n        $imagick->setImageFormat('png');\n        $imagick->setOption('png:format', $format);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();\n    }\n    \n    \/\/Save as 64bit PNG.\n    renderPNG($imagePath, 'png64');","output":null},{"title":"Imagick::setOption()","source":"function renderCustomBitDepthPNG() {\n        $imagePath = $this->control->getImagePath();\n        $imagick = new \\Imagick(realpath($imagePath));\n        $imagick->setImageFormat('png');\n        \n        $imagick->setOption('png:bit-depth', '16');\n        $imagick->setOption('png:color-type', 6);\n        header(\"Content-Type: image\/png\");\n        $crash = true;\n        if ($crash) {\n            echo $imagick->getImageBlob();\n        }\n        else {\n            $tempFilename = tempnam('.\/', 'imagick');\n            $imagick->writeimage(realpath($tempFilename));\n            echo file_get_contents($tempFilename);\n        }\n    }","output":null}],"imagick::setpointsize":[{"title":"A Imagick::setPointSize() example","source":"\/* Create new imagick object *\/\n$im = new Imagick();\n\n\/* Set the font for the object *\/\n$im->setFont(\"example.ttf\");\n\n\/* Set the point size *\/\n$im->setPointSize(12);\n\n\/* Create new caption *\/\n$im->newPseudoImage(100, 100, \"caption:Hello\");\n\n\/* Do something with the image *\/","output":null}],"imagick::setprogressmonitor":[{"title":"Imagick::setProgressMonitor()","source":"$abortReason = null;\n        \n        try {\n            $imagick = new \\Imagick(realpath($this->control->getImagePath()));\n            $startTime = time();\n\n            $callback = function ($offset, $span)  use ($startTime, &$abortReason) {\n                if (((100 * $offset) \/ $span)  > 20) {\n                    $abortReason = \"Processing reached 20%\";\n                    return false;\n                }\n\n                $nowTime = time();\n\n                if ($nowTime - $startTime > 5) {\n                    $abortReason = \"Image processing took more than 5 seconds\";\n                    return false;\n                }\n                if (($offset % 5) == 0) {\n                    echo \"Progress: $offset \/ $span <br\/>\";\n                }\n                return true;\n            };\n\n            $imagick->setProgressMonitor($callback);\n\n            $imagick->waveImage(2, 15);\n\n            echo \"Data len is: \".strlen($imagick->getImageBlob());\n        }\n        catch(\\ImagickException $e) {\n            if ($abortReason != null) {\n                echo \"Image processing was aborted: \".$abortReason.\"<br\/>\";\n            }\n            else {\n                echo \"ImagickException caught: \".$e->getMessage().\" Exception type is \".get_class($e);\n            }\n        }","output":null}],"imagick::setsamplingfactors":[{"title":"Imagick::setSamplingFactors()","source":"function setSamplingFactors($imagePath) {\n\n    $imagePath = \"..\/imagick\/images\/FineDetail.png\";\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->setImageFormat('jpg');\n    $imagick->setSamplingFactors(array('2x2', '1x1', '1x1'));\n\n    $compressed = $imagick->getImageBlob();\n\n    \n    $reopen = new \\Imagick();\n    $reopen->readImageBlob($compressed);\n\n    $reopen->resizeImage(\n        $reopen->getImageWidth() * 4,\n        $reopen->getImageHeight() * 4,\n        \\Imagick::FILTER_POINT,\n        1\n    );\n    \n    header(\"Content-Type: image\/jpg\");\n    echo $reopen->getImageBlob();\n}","output":null}],"imagick::shadeimage":[{"title":"Imagick::shadeImage()","source":"function shadeImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->shadeImage(true, 45, 20);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::shadowimage":[{"title":"Imagick::shadowImage()","source":"function shadowImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->shadowImage(0.4, 10, 50, 5);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::sharpenimage":[{"title":"Imagick::sharpenImage()","source":"function sharpenImage($imagePath, $radius, $sigma, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->sharpenimage($radius, $sigma, $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::shaveimage":[{"title":"Imagick::shaveImage()","source":"function shaveImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->shaveImage(100, 50);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::shearimage":[{"title":"Imagick::shearImage()","source":"function shearImage($imagePath, $color, $shearX, $shearY) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->shearimage($color, $shearX, $shearY);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::sigmoidalcontrastimage":[{"title":"Create a gradient image using Imagick::sigmoidalContrastImage() suitable for blending two images together smoothly, with the blending defined by $contrast and $the midpoint","source":"function generateBlendImage($width, $height, $contrast = 10, $midpoint = 0.5) {\n    $imagick = new Imagick();\n    $imagick->newPseudoImage($width, $height, 'gradient:black-white');\n    $quanta = $imagick->getQuantumRange();\n    $imagick->sigmoidalContrastImage(true, $contrast, $midpoint * $quanta[\"quantumRangeLong\"]);\n\n    return $imagick; \n}","output":null}],"imagick::sketchimage":[{"title":"Imagick::sketchImage()","source":"function sketchImage($imagePath, $radius, $sigma, $angle) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->sketchimage($radius, $sigma, $angle);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::smushimages":[{"title":"Imagick::smushImages()","source":"function smushImages($imagePath, $imagePath2) {\n\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick2 = new \\Imagick(realpath($imagePath2));\n\n    $imagick->addimage($imagick2);\n    $smushed = $imagick->smushImages(false, 50);\n    $smushed->setImageFormat('jpg');\n    header(\"Content-Type: image\/jpg\");\n    echo $smushed->getImageBlob();\n}","output":null}],"imagick::solarizeimage":[{"title":"Imagick::solarizeImage()","source":"function solarizeImage($imagePath, $solarizeThreshold) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->solarizeImage($solarizeThreshold * \\Imagick::getQuantum());\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::sparsecolorimage":[{"title":"SPARSECOLORMETHOD_BARYCENTRIC Imagick::sparseColorImage()","source":"function renderImageBarycentric2() {\n        $points = [\n            [0.30, 0.10, 'red'],\n            [0.10, 0.80, 'blue'],\n            [0.70, 0.60, 'lime'],\n            [0.80, 0.20, 'yellow'],\n        ];\n        $imagick = createGradientImage(\n            400, 400,\n            $points,\n            \\Imagick::SPARSECOLORMETHOD_BARYCENTRIC\n        );\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();\n    }","output":null},{"title":"SPARSECOLORMETHOD_BILINEAR Imagick::sparseColorImage()","source":"function renderImageBilinear() {\n        $points = [[0.30, 0.10, 'red'], [0.10, 0.80, 'blue'], [0.70, 0.60, 'lime'], [0.80, 0.20, 'yellow'],];\n        $imagick = createGradientImage(500, 500, $points, \\Imagick::SPARSECOLORMETHOD_BILINEAR);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();\n    }","output":null},{"title":"SPARSECOLORMETHOD_SPEPARDS Imagick::sparseColorImage()","source":"function renderImageShepards() {\n        $points = [\n            [0.30, 0.10, 'red'],\n            [0.10, 0.80, 'blue'],\n            [0.70, 0.60, 'lime'],\n            [0.80, 0.20, 'yellow'],\n        ];\n        $imagick = createGradientImage(600, 600, $points, \\Imagick::SPARSECOLORMETHOD_SPEPARDS);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();\n    }","output":null},{"title":"SPARSECOLORMETHOD_VORONOI Imagick::sparseColorImage()","source":"function renderImageVoronoi() {\n        $points = [\n            [0.30, 0.10, 'red'],\n            [0.10, 0.80, 'blue'],\n            [0.70, 0.60, 'lime'],\n            [0.80, 0.20, 'yellow'],\n        ];\n        $imagick = createGradientImage(500, 500, $points, \\Imagick::SPARSECOLORMETHOD_VORONOI);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();\n    }","output":null},{"title":"SPARSECOLORMETHOD_BARYCENTRIC Imagick::sparseColorImage()","source":"function renderImageBarycentric() {\n        $points = [\n            [0, 0, 'skyblue'],\n            [-1, 1, 'skyblue'],\n            [1, 1, 'black'],\n        ];\n        $imagick = createGradientImage(600, 200, $points, \\Imagick::SPARSECOLORMETHOD_BARYCENTRIC);\n        header(\"Content-Type: image\/png\");\n        echo $imagick->getImageBlob();\n    }","output":null},{"title":"createGradientImage is used by other examples. Imagick::sparseColorImage()","source":"function createGradientImage($width, $height, $colorPoints, $sparseMethod, $absolute = false) {\n\n    $imagick = new \\Imagick();\n    $imagick->newImage($width, $height, \"white\");\n    $imagick->setImageFormat(\"png\");\n\n    $barycentricPoints = array();\n\n    foreach ($colorPoints as $colorPoint) {\n\n        if ($absolute == true) {\n            $barycentricPoints[] = $colorPoint[0];\n            $barycentricPoints[] = $colorPoint[1];\n        }\n        else {\n            $barycentricPoints[] = $colorPoint[0] * $width;\n            $barycentricPoints[] = $colorPoint[1] * $height;\n        }\n\n        if (is_string($colorPoint[2])) {\n            $imagickPixel = new \\ImagickPixel($colorPoint[2]);\n        }\n        else if ($colorPoint[2] instanceof \\ImagickPixel) {\n            $imagickPixel = $colorPoint[2];\n        }\n        else{\n            $errorMessage = sprintf(\n                \"Value %s is neither a string nor an ImagickPixel class. Cannot use as a color.\",\n                $colorPoint[2]\n            );\n\n            throw new \\InvalidArgumentException(\n                $errorMessage\n            );\n        }\n\n        $red = $imagickPixel->getColorValue(\\Imagick::COLOR_RED);\n        $green = $imagickPixel->getColorValue(\\Imagick::COLOR_GREEN);\n        $blue = $imagickPixel->getColorValue(\\Imagick::COLOR_BLUE);\n        $alpha = $imagickPixel->getColorValue(\\Imagick::COLOR_ALPHA);\n\n        $barycentricPoints[] = $red;\n        $barycentricPoints[] = $green;\n        $barycentricPoints[] = $blue;\n        $barycentricPoints[] = $alpha;\n    }\n\n    $imagick->sparseColorImage($sparseMethod, $barycentricPoints);\n\n    return $imagick;\n}","output":null}],"imagick::spliceimage":[{"title":"Imagick::spliceImage()","source":"function spliceImage($imagePath, $startX, $startY, $width, $height) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->spliceImage($width, $height, $startX, $startY);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::spreadimage":[{"title":"Imagick::spreadImage()","source":"function spreadImage($imagePath, $radius) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->spreadImage($radius);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::statisticimage":[{"title":"Imagick::statisticImage()","source":"function statisticImage($imagePath, $statisticType, $width, $height, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imagick->statisticImage(\n        $statisticType,\n        $width,\n        $height,\n        $channel\n    );\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}\n\nstatisticImage($imagePath, \\Imagick::STATISTIC_MEDIAN, 5, 5, \\Imagick::CHANNEL_DEFAULT);","output":null}],"imagick::subimagematch":[{"title":"Imagick::subImageMatch()","source":"function subImageMatch($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick2 = clone $imagick;\n    $imagick2->cropimage(40, 40, 250, 110);\n    $imagick2->vignetteimage(0, 1, 3, 3);\n\n    $similarity = null;\n    $bestMatch = null;\n    $comparison = $imagick->subImageMatch($imagick2, $bestMatch, $similarity);\n\n    $comparison->setImageFormat('png');\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::swirlimage":[{"title":"Imagick::swirlImage()","source":"function swirlImage($imagePath, $swirl) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->swirlImage($swirl);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::textureimage":[{"title":"Imagick::textureImage()","source":"function textureImage($imagePath) {\n    $image = new \\Imagick();\n    $image->newImage(640, 480, new \\ImagickPixel('pink'));\n    $image->setImageFormat(\"jpg\");\n    $texture = new \\Imagick(realpath($imagePath));\n    $texture->scaleimage($image->getimagewidth() \/ 4, $image->getimageheight() \/ 4);\n    $image = $image->textureImage($texture);\n    header(\"Content-Type: image\/jpg\");\n    echo $image;\n}","output":null}],"imagick::thresholdimage":[{"title":"Imagick::thresholdImage()","source":"function thresholdimage($imagePath, $threshold, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->thresholdimage($threshold * \\Imagick::getQuantum(), $channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::thumbnailimage":[{"title":"Imagick::thumbnailImage()","source":"function thumbnailImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->setbackgroundcolor('rgb(64, 64, 64)');\n    $imagick->thumbnailImage(100, 100, true, true);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::tintimage":[{"title":"Imagick::tintImage()","source":"function tintImage($r, $g, $b, $a) {\n    $a = $a \/ 100;\n\n    $imagick = new \\Imagick();\n    $imagick->newPseudoImage(400, 400, 'gradient:black-white');\n\n    $tint = new \\ImagickPixel(\"rgb($r, $g, $b)\");\n    $opacity = new \\ImagickPixel(\"rgb(128, 128, 128, $a)\");\n    $imagick->tintImage($tint, $opacity);\n    $imagick->setImageFormat('png');\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::transformimage":[{"title":"Using Imagick::transformImage():","source":"$image = new Imagick();\n$image->newImage(300, 200, \"black\");\n$new_image = $image->transformImage(\"100x100\", \"100x100\");\n$new_image->writeImage('test_out.jpg');","output":null}],"imagick::transformimagecolorspace":[{"title":"Imagick::transformImageColorspace() example","source":"function transformImageColorspace($imagePath, $colorSpace, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->transformimagecolorspace($colorSpace);\n    \/\/channel should be one of the channel constants e.g. \\Imagick::CHANNEL_BLUE \n    $imagick->separateImageChannel($channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null},{"title":"Imagick::transformImageColorspace()","source":"function transformImageColorspace($imagePath, $colorSpace, $channel) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->transformimagecolorspace($colorSpace);\n    $imagick->separateImageChannel($channel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::transparentpaintimage":[{"title":"Imagick::transparentPaintImage()","source":"function transparentPaintImage($color, $alpha, $fuzz) {\n    $imagick = new \\Imagick(realpath(\"images\/BlueScreen.jpg\"));\n\n    \/\/Need to be in a format that supports transparency\n    $imagick->setimageformat('png');\n\n    $imagick->transparentPaintImage(\n        $color, $alpha, $fuzz * \\Imagick::getQuantum(), false\n    );\n\n    \/\/Not required, but helps tidy up left over pixels\n    $imagick->despeckleimage();\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::transposeimage":[{"title":"Imagick::transposeImage()","source":"function transposeImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->transposeImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::transverseimage":[{"title":"Imagick::transverseImage()","source":"function transverseImage($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->transverseImage();\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::trimimage":[{"title":"Using Imagick::trimImage():","source":"\/* Create the object and read the image in *\/\n$im = new Imagick(\"image.jpg\");\n\n\/* Trim the image. *\/\n$im->trimImage(0);\n\n\/* Ouput the image *\/\nheader(\"Content-Type: image\/\" . $im->getImageFormat());\necho $im;","output":null}],"imagick::uniqueimagecolors":[{"title":"Imagick::uniqueImageColors()","source":"function uniqueImageColors($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    \/\/Reduce the image to 256 colours nicely.\n    $imagick->quantizeImage(256, \\Imagick::COLORSPACE_YIQ, 0, false, false);\n    $imagick->uniqueImageColors();\n    $imagick->scaleimage($imagick->getImageWidth(), $imagick->getImageHeight() * 20);\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::unsharpmaskimage":[{"title":"Imagick::unsharpMaskImage()","source":"function unsharpMaskImage($imagePath, $radius, $sigma, $amount, $unsharpThreshold) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->unsharpMaskImage($radius, $sigma, $amount, $unsharpThreshold);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::vignetteimage":[{"title":"Imagick::vignetteImage()","source":"function vignetteImage($imagePath, $blackPoint, $whitePoint, $x, $y) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->vignetteImage($blackPoint, $whitePoint, $x, $y);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::waveimage":[{"title":"WaveImage can be quite slow Imagick::waveImage()","source":"function waveImage($imagePath, $amplitude, $length) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->waveImage($amplitude, $length);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagick::whitethresholdimage":[{"title":"Imagick::whiteThresholdImage()","source":"function whiteThresholdImage($imagePath, $color) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->whiteThresholdImage($color);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::affine":[{"title":"ImagickDraw::affine()","source":"function affine($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n\n    $PI = 3.141592653589794;\n    $angle = 60 * $PI \/ 360;\n\n    \/\/Scale the drawing co-ordinates.\n    $affineScale = array(\"sx\" => 1.75, \"sy\" => 1.75, \"rx\" => 0, \"ry\" => 0, \"tx\" => 0, \"ty\" => 0);\n\n    \/\/Shear the drawing co-ordinates.\n    $affineShear = array(\"sx\" => 1, \"sy\" => 1, \"rx\" => sin($angle), \"ry\" => -sin($angle), \"tx\" => 0, \"ty\" => 0);\n\n    \/\/Rotate the drawing co-ordinates. The shear affine matrix\n    \/\/produces incorrectly scaled drawings.\n    $affineRotate = array(\"sx\" => cos($angle), \"sy\" => cos($angle), \"rx\" => sin($angle), \"ry\" => -sin($angle), \"tx\" => 0, \"ty\" => 0,);\n\n    \/\/Translate (offset) the drawing\n    $affineTranslate = array(\"sx\" => 1, \"sy\" => 1, \"rx\" => 0, \"ry\" => 0, \"tx\" => 30, \"ty\" => 30);\n\n    \/\/The identiy affine matrix\n    $affineIdentity = array(\"sx\" => 1, \"sy\" => 1, \"rx\" => 0, \"ry\" => 0, \"tx\" => 0, \"ty\" => 0);\n\n    $examples = [$affineScale, $affineShear, $affineRotate, $affineTranslate, $affineIdentity,];\n\n    $count = 0;\n\n    foreach ($examples as $example) {\n        $draw->push();\n        $draw->translate(($count % 2) * 250, intval($count \/ 2) * 250);\n        $draw->translate(100, 100);\n        $draw->affine($example);\n        $draw->rectangle(-50, -50, 50, 50);\n        $draw->pop();\n        $count++;\n    }\n\n    \/\/Create an image object which the draw commands can be rendered into\n    $image = new \\Imagick();\n    $image->newImage(500, 750, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    \/\/Render the draw commands in the ImagickDraw object \n    \/\/into the image.\n    $image->drawImage($draw);\n\n    \/\/Send the image to the browser\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::arc":[{"title":"ImagickDraw::arc()","source":"function arc($strokeColor, $fillColor, $backgroundColor, $startX, $startY, $endX, $endY, $startAngle, $endAngle) {\n\n    \/\/Create a ImagickDraw object to draw into.\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(2);\n\n    $draw->arc($startX, $startY, $endX, $endY, $startAngle, $endAngle);\n\n    \/\/Create an image object which the draw commands can be rendered into\n    $image = new \\Imagick();\n    $image->newImage(IMAGE_WIDTH, IMAGE_HEIGHT, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    \/\/Render the draw commands in the ImagickDraw object \n    \/\/into the image.\n    $image->drawImage($draw);\n\n    \/\/Send the image to the browser\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::bezier":[{"title":"ImagickDraw::bezier()","source":"function bezier($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $strokeColor = new \\ImagickPixel($strokeColor);\n    $fillColor = new \\ImagickPixel($fillColor);\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n\n    $smoothPointsSet = [\n        [\n            ['x' => 10.0 * 5, 'y' => 10.0 * 5],\n            ['x' => 30.0 * 5, 'y' => 90.0 * 5],\n            ['x' => 25.0 * 5, 'y' => 10.0 * 5],\n            ['x' => 50.0 * 5, 'y' => 50.0 * 5],\n        ], \n        [\n            ['x' => 50.0 * 5, 'y' => 50.0 * 5],\n            ['x' => 75.0 * 5, 'y' => 90.0 * 5],\n            ['x' => 70.0 * 5, 'y' => 10.0 * 5],\n            ['x' => 90.0 * 5, 'y' => 40.0 * 5],\n        ],\n    ];\n\n    foreach ($smoothPointsSet as $points) {\n        $draw->bezier($points);\n    }\n\n    $disjointPoints = [\n        [\n            ['x' => 10 * 5, 'y' => 10 * 5], \n            ['x' => 30 * 5, 'y' => 90 * 5], \n            ['x' => 25 * 5, 'y' => 10 * 5],\n            ['x' => 50 * 5, 'y' => 50 * 5],\n        ],\n        [\n            ['x' => 50 * 5, 'y' => 50 * 5], \n            ['x' => 80 * 5, 'y' => 50 * 5],\n            ['x' => 70 * 5, 'y' => 10 * 5],\n            ['x' => 90 * 5, 'y' => 40 * 5],\n         ]\n    ];\n    $draw->translate(0, 200);\n\n    foreach ($disjointPoints as $points) {\n        $draw->bezier($points);\n    }\n\n    \/\/Create an image object which the draw commands can be rendered into\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    \/\/Render the draw commands in the ImagickDraw object \n    \/\/into the image.\n    $imagick->drawImage($draw);\n\n    \/\/Send the image to the browser\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::circle":[{"title":"ImagickDraw::circle()","source":"function circle($strokeColor, $fillColor, $backgroundColor, $originX, $originY, $endX, $endY) {\n\n    \/\/Create a ImagickDraw object to draw into.\n    $draw = new \\ImagickDraw();\n\n    $strokeColor = new \\ImagickPixel($strokeColor);\n    $fillColor = new \\ImagickPixel($fillColor);\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    $draw->circle($originX, $originY, $endX, $endY);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::composite":[{"title":"ImagickDraw::composite()","source":"function composite($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setFillOpacity(1);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFont(\"..\/fonts\/CANDY.TTF\");\n    $draw->setFontSize(140);\n    $draw->rectangle(0, 0, 1000, 300);\n    $draw->setFillColor('white');\n    $draw->setfillopacity(1);\n    $draw->annotation(50, 180, \"Lorem Ipsum!\");\n\n    \/\/Create an image object which the draw commands can be rendered into\n    $imagick = new \\Imagick();\n    $imagick->newImage(1000, 302, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    \/\/Render the draw commands in the ImagickDraw object \n    \/\/into the image.\n    $imagick->drawImage($draw);\n\n    \/\/Send the image to the browser\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::ellipse":[{"title":"ImagickDraw::ellipse()","source":"function ellipse($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    $draw->ellipse(125, 70, 100, 50, 0, 360);\n    $draw->ellipse(350, 70, 100, 50, 0, 315);\n\n    $draw->push();\n    $draw->translate(125, 250);\n    $draw->rotate(30);\n    $draw->ellipse(0, 0, 100, 50, 0, 360);\n    $draw->pop();\n\n    $draw->push();\n    $draw->translate(350, 250);\n    $draw->rotate(30);\n    $draw->ellipse(0, 0, 100, 50, 0, 315);\n    $draw->pop();\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::line":[{"title":"ImagickDraw::line()","source":"function line($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    $draw->line(125, 70, 100, 50);\n    $draw->line(350, 170, 100, 150);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::matte":[{"title":"ImagickDraw::matte()","source":"function matte($strokeColor, $fillColor, $backgroundColor, $paintType) {\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    $draw->matte(120, 120, $paintType);    \n    $draw->rectangle(100, 100, 300, 200);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::pathcurvetoquadraticbezierabsolute":[{"title":"ImagickDraw::pathCurveToQuadraticBezierAbsolute()","source":"function pathCurveToQuadraticBezierAbsolute($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    $draw->pathStart();\n    $draw->pathMoveToAbsolute(50,250);\n\n    \/\/ This specifies a quadratic bezier curve with the current position as the start\n    \/\/ point, the control point is the first two params, and the end point is the last two params.\n    $draw->pathCurveToQuadraticBezierAbsolute(\n        150,50, \n        250,250\n    );\n\n    \/\/ This specifies a quadratic bezier curve with the current position as the start\n    \/\/ point, the control point is mirrored from the previous curves control point\n    \/\/ and the end point is defined by the x, y values.\n    $draw->pathCurveToQuadraticBezierSmoothAbsolute(\n        450,250\n    );\n\n    \/\/ This specifies a quadratic bezier curve with the current position as the start\n    \/\/ point, the control point is mirrored from the previous curves control point\n    \/\/ and the end point is defined relative from the current position by the x, y values.\n    $draw->pathCurveToQuadraticBezierSmoothRelative(\n        200,-100\n    );\n\n    $draw->pathFinish();\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(700, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n\n}","output":null}],"imagickdraw::pathcurvetoquadraticbeziersmoothabsolute":[{"title":"ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute()","source":"$draw = new \\ImagickDraw();\n\n$draw->setStrokeOpacity(1);\n$draw->setStrokeColor(\"black\");\n$draw->setFillColor(\"blue\");\n\n$draw->setStrokeWidth(2);\n$draw->setFontSize(72);\n\n$draw->pathStart();\n$draw->pathMoveToAbsolute(50,250);\n\n\/\/ This specifies a quadratic bezier curve with the current position as the start\n\/\/ point, the control point is the first two params, and the end point is the last two params.\n$draw->pathCurveToQuadraticBezierAbsolute(\n    150,50, \n    250,250\n);\n\n\/\/ This specifies a quadratic bezier curve with the current position as the start\n\/\/ point, the control point is mirrored from the previous curves control point\n\/\/ and the end point is defined by the x, y values.\n$draw->pathCurveToQuadraticBezierSmoothAbsolute(\n    450,250\n);\n\n\/\/ This specifies a quadratic bezier curve with the current position as the start\n\/\/ point, the control point is mirrored from the previous curves control point\n\/\/ and the end point is defined relative from the current position by the x, y values.\n$draw->pathCurveToQuadraticBezierSmoothRelative(\n    200,-100\n);\n\n$draw->pathFinish();\n\n$imagick = new \\Imagick();\n$imagick->newImage(700, 500, $backgroundColor);\n$imagick->setImageFormat(\"png\");\n\n$imagick->drawImage($draw);\n\nheader(\"Content-Type: image\/png\");\necho $imagick->getImageBlob();","output":null}],"imagickdraw::pathcurvetoquadraticbeziersmoothrelative":[{"title":"ImagickDraw::pathCurveToQuadraticBezierSmoothRelative()","source":"$draw = new \\ImagickDraw();\n\n$draw->setStrokeOpacity(1);\n$draw->setStrokeColor(\"black\");\n$draw->setFillColor(\"blue\");\n\n$draw->setStrokeWidth(2);\n$draw->setFontSize(72);\n\n$draw->pathStart();\n$draw->pathMoveToAbsolute(50,250);\n\n\/\/ This specifies a quadratic bezier curve with the current position as the start\n\/\/ point, the control point is the first two params, and the end point is the last two params.\n$draw->pathCurveToQuadraticBezierAbsolute(\n    150,50, \n    250,250\n);\n\n\/\/ This specifies a quadratic bezier curve with the current position as the start\n\/\/ point, the control point is mirrored from the previous curves control point\n\/\/ and the end point is defined by the x, y values.\n$draw->pathCurveToQuadraticBezierSmoothAbsolute(\n    450,250\n);\n\n\/\/ This specifies a quadratic bezier curve with the current position as the start\n\/\/ point, the control point is mirrored from the previous curves control point\n\/\/ and the end point is defined relative from the current position by the x, y values.\n$draw->pathCurveToQuadraticBezierSmoothRelative(\n    200,-100\n);\n\n$draw->pathFinish();\n\n$imagick = new \\Imagick();\n$imagick->newImage(700, 500, $backgroundColor);\n$imagick->setImageFormat(\"png\");\n\n$imagick->drawImage($draw);\n\nheader(\"Content-Type: image\/png\");\necho $imagick->getImageBlob();","output":null}],"imagickdraw::pathstart":[{"title":"ImagickDraw::pathStart()","source":"function pathStart($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    $draw->pathStart();\n    $draw->pathMoveToAbsolute(50, 50);\n    $draw->pathLineToAbsolute(100, 50);\n    $draw->pathLineToRelative(0, 50);\n    $draw->pathLineToHorizontalRelative(-50);\n    $draw->pathFinish();\n\n    $draw->pathStart();\n    $draw->pathMoveToAbsolute(50, 50);\n    $draw->pathMoveToRelative(300, 0);\n    $draw->pathLineToRelative(50, 0);\n    $draw->pathLineToVerticalRelative(50);\n    $draw->pathLineToHorizontalAbsolute(350);\n    $draw->pathclose();\n    $draw->pathFinish();\n\n    $draw->pathStart();\n    $draw->pathMoveToAbsolute(50, 300);\n    $draw->pathCurveToAbsolute(50, 300, 100, 200, 300, 300);\n    $draw->pathLineToVerticalAbsolute(350);\n    $draw->pathFinish();\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::point":[{"title":"ImagickDraw::point()","source":"function point($fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setFillColor($fillColor);\n\n    for ($x = 0; $x < 10000; $x++) {\n        $draw->point(rand(0, 500), rand(0, 500));\n    }\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::polygon":[{"title":"ImagickDraw::polygon()","source":"function polygon($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeWidth(4);\n\n    $draw->setFillColor($fillColor);\n\n    $points = [\n        ['x' => 40 * 5, 'y' => 10 * 5],\n        ['x' => 20 * 5, 'y' => 20 * 5], \n        ['x' => 70 * 5, 'y' => 50 * 5], \n        ['x' => 60 * 5, 'y' => 15 * 5],\n    ];\n\n    $draw->polygon($points);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 300, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::polyline":[{"title":"ImagickDraw::polyline()","source":"function polyline($strokeColor, $fillColor, $backgroundColor) {\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(5);\n\n    $points = [\n        ['x' => 40 * 5, 'y' => 10 * 5],\n        ['x' => 20 * 5, 'y' => 20 * 5],\n        ['x' => 70 * 5, 'y' => 50 * 5],\n        ['x' => 60 * 5, 'y' => 15 * 5]\n    ];\n\n    $draw->polyline($points);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 300, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::popdefs":[{"title":"ImagickDraw::popDefs()","source":"function popDefs($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setstrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n    $draw->pushDefs();\n    $draw->setStrokeColor('white');\n    $draw->rectangle(50, 50, 200, 200);\n    $draw->popDefs();\n\n    $draw->rectangle(300, 50, 450, 200);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::push":[{"title":"ImagickDraw::push()","source":"function push($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillModifiedColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n    $draw->push();\n    $draw->translate(50, 50);\n    $draw->rectangle(200, 200, 300, 300);\n    $draw->pop();\n    $draw->setFillColor($fillColor);\n    $draw->rectangle(200, 200, 300, 300);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::pushpattern":[{"title":"ImagickDraw::pushPattern()","source":"function pushPattern($strokeColor, $fillColor, $backgroundColor) {\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(1);\n\n    $draw->pushPattern(\"MyFirstPattern\", 0, 0, 50, 50);\n    for ($x = 0; $x < 50; $x += 10) {\n        for ($y = 0; $y < 50; $y += 5) {\n            $positionX = $x + (($y \/ 5) % 5);\n            $draw->rectangle($positionX, $y, $positionX + 5, $y + 5);\n        }\n    }\n    $draw->popPattern();\n\n    $draw->setFillOpacity(0);\n    $draw->rectangle(100, 100, 400, 400);\n    $draw->setFillOpacity(1);\n\n    $draw->setFillOpacity(1);\n\n    $draw->push();\n    $draw->setFillPatternURL('#MyFirstPattern');\n    $draw->setFillColor('yellow');\n    $draw->rectangle(100, 100, 400, 400);\n    $draw->pop();\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::rectangle":[{"title":"ImagickDraw::rectangle()","source":"function rectangle($strokeColor, $fillColor, $backgroundColor) {\n    $draw = new \\ImagickDraw();\n    $strokeColor = new \\ImagickPixel($strokeColor);\n    $fillColor = new \\ImagickPixel($fillColor);\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n\n    $draw->rectangle(200, 200, 300, 300);\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::rotate":[{"title":"ImagickDraw::rotate()","source":"function rotate($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor) {\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle(200, 200, 300, 300);\n    $draw->setFillColor($fillModifiedColor);\n    $draw->rotate(15);\n    $draw->rectangle(200, 200, 300, 300);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::roundrectangle":[{"title":"ImagickDraw::roundRectangle()","source":"function roundRectangle($strokeColor, $fillColor, $backgroundColor, $startX, $startY, $endX, $endY, $roundX, $roundY) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n\n    $draw->roundRectangle($startX, $startY, $endX, $endY, $roundX, $roundY);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::scale":[{"title":"ImagickDraw::scale()","source":"function scale($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeWidth(4);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle(200, 200, 300, 300);\n    $draw->setFillColor($fillModifiedColor);\n    $draw->scale(1.4, 1.4);\n    $draw->rectangle(200, 200, 300, 300);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setclippath":[{"title":"ImagickDraw::setClipPath()","source":"function setClipPath($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n\n    $clipPathName = 'testClipPath';\n\n    $draw->pushClipPath($clipPathName);\n    $draw->rectangle(0, 0, 250, 250);\n    $draw->popClipPath();\n    $draw->setClipPath($clipPathName);\n    $draw->rectangle(100, 100, 400, 400);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setcliprule":[{"title":"ImagickDraw::setClipRule()","source":"function setClipRule($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n    \/\/\\Imagick::FILLRULE_EVENODD\n    \/\/\\Imagick::FILLRULE_NONZERO\n\n    $clipPathName = 'testClipPath';\n    $draw->pushClipPath($clipPathName);\n    $draw->setClipRule(\\Imagick::FILLRULE_EVENODD);\n    $draw->rectangle(0, 0, 300, 500);\n    $draw->rectangle(200, 0, 500, 500);\n    $draw->popClipPath();\n    $draw->setClipPath($clipPathName);\n    $draw->rectangle(200, 200, 300, 300);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setclipunits":[{"title":"ImagickDraw::setClipUnits()","source":"function setClipUnits($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n    $clipPathName = 'testClipPath';\n    $draw->setClipUnits(\\Imagick::RESOLUTION_PIXELSPERINCH);\n    $draw->pushClipPath($clipPathName);\n    $draw->rectangle(0, 0, 250, 250);\n    $draw->popClipPath();\n    $draw->setClipPath($clipPathName);\n\n    \/\/RESOLUTION_PIXELSPERINCH\n    \/\/RESOLUTION_PIXELSPERCENTIMETER\n\n    $draw->rectangle(200, 200, 300, 300);\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfillalpha":[{"title":"ImagickDraw::setFillAlpha()","source":"function setFillAlpha($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n    $draw->rectangle(100, 200, 200, 300);\n    @$draw->setFillAlpha(0.4);\n    $draw->rectangle(300, 200, 400, 300);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfillcolor":[{"title":"ImagickDraw::setFillColor()","source":"function setFillColor($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(1.5);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle(50, 50, 150, 150);\n\n    $draw->setFillColor(\"rgb(200, 32, 32)\");\n    $draw->rectangle(200, 50, 300, 150);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setfillopacity":[{"title":"ImagickDraw::setFillOpacity()","source":"function setFillOpacity($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeWidth(2);\n\n    $draw->rectangle(100, 200, 200, 300);\n\n    $draw->setFillOpacity(0.4);\n    $draw->rectangle(300, 200, 400, 300);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfillrule":[{"title":"ImagickDraw::setFillRule()","source":"function setFillRule($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $fillRules = [\\Imagick::FILLRULE_NONZERO, \\Imagick::FILLRULE_EVENODD];\n\n    $points = 11;\n    $size = 150;\n\n    $draw->translate(175, 160);\n\n    for ($x = 0; $x < 2; $x++) {\n        $draw->setFillRule($fillRules[$x]);\n        $draw->pathStart();\n        for ($n = 0; $n < $points * 2; $n++) {\n\n            if ($n >= $points) {\n                $angle = fmod($n * 360 * 4 \/ $points, 360) * pi() \/ 180;\n            }\n            else {\n                $angle = fmod($n * 360 * 3 \/ $points, 360) * pi() \/ 180;\n            }\n\n            $positionX = $size * sin($angle);\n            $positionY = $size * cos($angle);\n\n            if ($n == 0) {\n                $draw->pathMoveToAbsolute($positionX, $positionY);\n            }\n            else {\n                $draw->pathLineToAbsolute($positionX, $positionY);\n            }\n        }\n\n        $draw->pathClose();\n        $draw->pathFinish();\n\n        $draw->translate(325, 0);\n    }\n\n    $image = new \\Imagick();\n    $image->newImage(700, 320, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setfont":[{"title":"ImagickDraw::setFont()","source":"function setFont($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(36);\n\n    $draw->setFont(\"..\/fonts\/Arial.ttf\");\n    $draw->annotation(50, 50, \"Lorem Ipsum!\");\n\n    $draw->setFont(\"..\/fonts\/Consolas.ttf\");\n    $draw->annotation(50, 100, \"Lorem Ipsum!\");\n\n    $draw->setFont(\"..\/fonts\/CANDY.TTF\");\n    $draw->annotation(50, 150, \"Lorem Ipsum!\");\n\n    $draw->setFont(\"..\/fonts\/Inconsolata-dz.otf\");\n    $draw->annotation(50, 200, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 300, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfontfamily":[{"title":"ImagickDraw::setFontFamily()","source":"function setFontFamily($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $strokeColor = new \\ImagickPixel($strokeColor);\n    $fillColor = new \\ImagickPixel($fillColor);\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(2);\n\n    $draw->setFontSize(48);\n\n    $draw->setFontFamily(\"Times\");\n    $draw->annotation(50, 50, \"Lorem Ipsum!\");\n\n    $draw->setFontFamily(\"AvantGarde\");\n    $draw->annotation(50, 100, \"Lorem Ipsum!\");\n\n    $draw->setFontFamily(\"NewCenturySchlbk\");    \n    $draw->annotation(50, 150, \"Lorem Ipsum!\");\n\n    $draw->setFontFamily(\"Palatino\");\n    $draw->annotation(50, 200, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(450, 250, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfontsize":[{"title":"ImagickDraw::setFontSize()","source":"function setFontSize($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeOpacity(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFont(\"..\/fonts\/Arial.ttf\");\n\n    $sizes = [24, 36, 48, 60, 72];\n\n    foreach ($sizes as $size) {\n        $draw->setFontSize($size);\n        $draw->annotation(50, ($size * $size \/ 16), \"Lorem Ipsum!\");\n    }\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfontstretch":[{"title":"ImagickDraw::setFontStretch()","source":"function setFontStretch($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(36);\n\n    $fontStretchTypes = [\n        \\Imagick::STRETCH_ULTRACONDENSED, \n        \\Imagick::STRETCH_CONDENSED, \n        \\Imagick::STRETCH_SEMICONDENSED, \n        \\Imagick::STRETCH_SEMIEXPANDED, \n        \\Imagick::STRETCH_EXPANDED, \n        \\Imagick::STRETCH_EXTRAEXPANDED, \n        \\Imagick::STRETCH_ULTRAEXPANDED, \n        \\Imagick::STRETCH_ANY\n    ];\n\n    $offset = 0;\n    foreach ($fontStretchTypes as $fontStretch) {\n        $draw->setFontStretch($fontStretch);\n        $draw->annotation(50, 75 + $offset, \"Lorem Ipsum!\");\n        $offset += 50;\n    }\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfontstyle":[{"title":"ImagickDraw::setFontStyle()","source":"function setFontStyle($fillColor, $strokeColor, $backgroundColor) {\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(1);\n    $draw->setFontSize(36);\n    $draw->setFontStyle(\\Imagick::STYLE_NORMAL);\n    $draw->annotation(50, 50, \"Lorem Ipsum!\");\n\n    $draw->setFontStyle(\\Imagick::STYLE_ITALIC);\n    $draw->annotation(50, 100, \"Lorem Ipsum!\");\n\n    $draw->setFontStyle(\\Imagick::STYLE_OBLIQUE);\n    $draw->annotation(50, 150, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(350, 300, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setfontweight":[{"title":"ImagickDraw::setFontWeight()","source":"function setFontWeight($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(1);\n\n    $draw->setFontSize(36);\n\n    $draw->setFontWeight(100);\n    $draw->annotation(50, 50, \"Lorem Ipsum!\");\n\n    $draw->setFontWeight(200);\n    $draw->annotation(50, 100, \"Lorem Ipsum!\");\n\n    $draw->setFontWeight(400);\n    $draw->annotation(50, 150, \"Lorem Ipsum!\");\n\n    $draw->setFontWeight(800);\n    $draw->annotation(50, 200, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setgravity":[{"title":"ImagickDraw::setGravity()","source":"function setGravity($fillColor, $strokeColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(1);\n    $draw->setFontSize(24);\n\n    $gravitySettings = array(\n        \\Imagick::GRAVITY_NORTHWEST => 'NorthWest',\n        \\Imagick::GRAVITY_NORTH => 'North',\n        \\Imagick::GRAVITY_NORTHEAST => 'NorthEast',\n        \\Imagick::GRAVITY_WEST => 'West',\n        \\Imagick::GRAVITY_CENTER => 'Centre',\n        \\Imagick::GRAVITY_SOUTHWEST => 'SouthWest',\n        \\Imagick::GRAVITY_SOUTH => 'South',\n        \\Imagick::GRAVITY_SOUTHEAST => 'SouthEast',\n        \\Imagick::GRAVITY_EAST => 'East'\n    );\n\n    $draw->setFont(\"..\/fonts\/Arial.ttf\");\n\n    foreach ($gravitySettings as $type => $description) {\n        $draw->setGravity($type);\n        $draw->annotation(50, 50, '\"' . $description . '\"');\n    }\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setstrokealpha":[{"title":"ImagickDraw::setStrokeAlpha()","source":"function setStrokeAlpha($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(4);\n    $draw->line(100, 100, 400, 145);\n    $draw->rectangle(100, 200, 225, 350);\n    $draw->setStrokeOpacity(0.1);\n    $draw->line(100, 120, 400, 165);\n    $draw->rectangle(275, 200, 400, 350);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 400, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokeantialias":[{"title":"ImagickDraw::setStrokeAntialias()","source":"function setStrokeAntialias($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeAntialias(false);\n    $draw->line(100, 100, 400, 105);\n\n    $draw->line(100, 140, 400, 185);\n\n    $draw->setStrokeAntialias(true);\n    $draw->line(100, 110, 400, 115);\n    $draw->line(100, 150, 400, 195);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 250, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokecolor":[{"title":"ImagickDraw::setStrokeColor()","source":"function setStrokeColor($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(5);\n\n    $draw->line(100, 100, 400, 145);\n    $draw->rectangle(100, 200, 225, 350);\n\n    $draw->setStrokeOpacity(0.1);\n    $draw->line(100, 120, 400, 165);\n    $draw->rectangle(275, 200, 400, 350);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 400, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokedasharray":[{"title":"ImagickDraw::setStrokeDashArray()","source":"function setStrokeDashArray($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(4);\n\n    $draw->setStrokeDashArray([10, 10]);\n    $draw->rectangle(100, 50, 225, 175);\n\n    $draw->setStrokeDashArray([20, 5, 20, 5, 5, 5,]);\n    $draw->rectangle(275, 50, 400, 175);\n\n    $draw->setStrokeDashArray([20, 5, 20, 5, 5]);\n    $draw->rectangle(100, 200, 225, 350);\n\n    $draw->setStrokeDashArray([1, 1, 1, 1, 2, 2, 3, 3, 5, 5, 8, 8, 13, 13, 21, 21, 34, 34, 55, 55, 89, 89, 144, 144, 233, 233, 377, 377, 610, 610, 987, 987, 1597, 1597, 2584, 2584, 4181, 4181,]);\n\n    $draw->rectangle(275, 200, 400, 350);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 400, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokedashoffset":[{"title":"ImagickDraw::setStrokeDashOffset()","source":"function setStrokeDashOffset($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(4);\n    $draw->setStrokeDashArray([20, 20]);\n    $draw->setStrokeDashOffset(0);\n    $draw->rectangle(100, 50, 225, 175);\n\n    \/\/Start the dash effect halfway through the solid portion\n    $draw->setStrokeDashOffset(10);\n    $draw->rectangle(275, 50, 400, 175);\n\n    \/\/Start the dash effect on the space portion\n    $draw->setStrokeDashOffset(20);\n    $draw->rectangle(100, 200, 225, 350);\n    $draw->setStrokeDashOffset(5);\n    $draw->rectangle(275, 200, 400, 350);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 400, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokelinecap":[{"title":"ImagickDraw::setStrokeLineCap()","source":"function setStrokeLineCap($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(25);\n\n    $lineTypes = [\\Imagick::LINECAP_BUTT, \\Imagick::LINECAP_ROUND, \\Imagick::LINECAP_SQUARE,];\n\n    $offset = 0;\n\n    foreach ($lineTypes as $lineType) {\n        $draw->setStrokeLineCap($lineType);\n        $draw->line(50 + $offset, 50, 50 + $offset, 250);\n        $offset += 50;\n    }\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(300, 300, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setstrokelinejoin":[{"title":"ImagickDraw::setStrokeLineJoin()","source":"function setStrokeLineJoin($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n\n    $draw->setStrokeWidth(20);\n\n    $offset = 220;\n\n    $lineJoinStyle = [\n        \\Imagick::LINEJOIN_MITER,\n        \\Imagick::LINEJOIN_ROUND,\n        \\Imagick::LINEJOIN_BEVEL,\n        ];\n\n    for ($x = 0; $x < count($lineJoinStyle); $x++) {\n        $draw->setStrokeLineJoin($lineJoinStyle[$x]);\n        $points = [\n            ['x' => 40 * 5, 'y' => 10 * 5 + $x * $offset],\n            ['x' => 20 * 5, 'y' => 20 * 5 + $x * $offset],\n            ['x' => 70 * 5, 'y' => 50 * 5 + $x * $offset],\n            ['x' => 40 * 5, 'y' => 10 * 5 + $x * $offset],\n        ];\n\n        $draw->polyline($points);\n    }\n\n    $image = new \\Imagick();\n    $image->newImage(500, 700, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokemiterlimit":[{"title":"ImagickDraw::setStrokeMiterLimit()","source":"function setStrokeMiterLimit($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeOpacity(0.6);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(10);\n\n    $yOffset = 100;\n\n    $draw->setStrokeLineJoin(\\Imagick::LINEJOIN_MITER);\n\n    for ($y = 0; $y < 3; $y++) {\n\n        $draw->setStrokeMiterLimit(40 * $y);\n\n        $points = [\n            ['x' => 22 * 3, 'y' => 15 * 4 + $y * $yOffset],\n            ['x' => 20 * 3, 'y' => 20 * 4 + $y * $yOffset],\n            ['x' => 70 * 5, 'y' => 45 * 4 + $y * $yOffset],\n        ];\n\n        $draw->polygon($points);\n    }\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    $image->setImageType(\\Imagick::IMGTYPE_PALETTE);\n    $image->setImageCompressionQuality(100);\n    $image->stripImage();\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokeopacity":[{"title":"ImagickDraw::setStrokeOpacity()","source":"function setStrokeOpacity($strokeColor, $fillColor, $backgroundColor) {\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(10);\n    $draw->setStrokeOpacity(1);\n    $draw->line(100, 80, 400, 125);\n    $draw->rectangle(25, 200, 150, 350);\n    $draw->setStrokeOpacity(0.5);\n    $draw->line(100, 100, 400, 145);\n    $draw->rectangle(200, 200, 325, 350);\n    $draw->setStrokeOpacity(0.2);\n    $draw->line(100, 120, 400, 165);\n    $draw->rectangle(375, 200, 500, 350);\n\n    $image = new \\Imagick();\n    $image->newImage(550, 400, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::setstrokewidth":[{"title":"ImagickDraw::setStrokeWidth()","source":"function setStrokeWidth($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeWidth(1);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->line(100, 100, 400, 145);\n    $draw->rectangle(100, 200, 225, 350);\n    $draw->setStrokeWidth(5);\n    $draw->line(100, 120, 400, 165);\n    $draw->rectangle(275, 200, 400, 350);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 400, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::settextalignment":[{"title":"ImagickDraw::setTextAlignment()","source":"function setTextAlignment($strokeColor, $fillColor, $backgroundColor) {\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(1);\n    $draw->setFontSize(36);\n\n    $draw->setTextAlignment(\\Imagick::ALIGN_LEFT);\n    $draw->annotation(250, 75, \"Lorem Ipsum!\");\n    $draw->setTextAlignment(\\Imagick::ALIGN_CENTER);\n    $draw->annotation(250, 150, \"Lorem Ipsum!\");\n    $draw->setTextAlignment(\\Imagick::ALIGN_RIGHT);\n    $draw->annotation(250, 225, \"Lorem Ipsum!\");\n    $draw->line(250, 0, 250, 500);\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::settextantialias":[{"title":"ImagickDraw::setTextAntialias()","source":"function setTextAntialias($fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n    $draw->setStrokeColor('none');\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(1);\n    $draw->setFontSize(32);\n    $draw->setTextAntialias(false);\n    $draw->annotation(5, 30, \"Lorem Ipsum!\");\n    $draw->setTextAntialias(true);\n    $draw->annotation(5, 65, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(220, 80, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    \/\/Scale the image so that people can see the aliasing.\n    $imagick->scaleImage(220 * 6, 80 * 6);\n    $imagick->cropImage(640, 480, 0, 0);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::settextdecoration":[{"title":"ImagickDraw::setTextDecoration()","source":"function setTextDecoration($strokeColor, $fillColor, $backgroundColor, $textDecoration) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n    $draw->setTextDecoration($textDecoration);\n    $draw->annotation(50, 75, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 200, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::settextundercolor":[{"title":"ImagickDraw::setTextUnderColor()","source":"function setTextUnderColor($strokeColor, $fillColor, $backgroundColor, $textUnderColor) {\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n    $draw->annotation(50, 75, \"Lorem Ipsum!\");\n    $draw->setTextUnderColor($textUnderColor);\n    $draw->annotation(50, 175, \"Lorem Ipsum!\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setvectorgraphics":[{"title":"ImagickDraw::setVectorGraphics()","source":"function setVectorGraphics() {\n    \/\/Setup a draw object with some drawing in it.\n    $draw = new \\ImagickDraw();\n    $draw->setFillColor(\"red\");\n    $draw->circle(20, 20, 50, 50);\n    $draw->setFillColor(\"blue\");\n    $draw->circle(50, 70, 50, 50);\n    $draw->rectangle(50, 120, 80, 150);\n\n    \/\/Get the drawing as a string\n    $SVG = $draw->getVectorGraphics();\n    \n    \/\/$svg is a string, and could be saved anywhere a string can be saved\n\n    \/\/Use the saved drawing to generate a new draw object\n    $draw2 = new \\ImagickDraw();\n    \/\/Apparently the SVG text is missing the root element. \n    $draw2->setVectorGraphics(\"<root>\".$SVG.\"<\/root>\");\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(200, 200, 'white');\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw2);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::setviewbox":[{"title":"ImagickDraw::setViewBox()","source":"function setViewBox($strokeColor, $fillColor, $backgroundColor) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFontSize(72);\n\n    \/*\n     \n    Sets the overall canvas size to be recorded with the drawing vector data. Usually this will be specified using the same size as the canvas image. When the vector data is saved to SVG or MVG formats, the viewbox is use to specify the size of the canvas image that a viewer will render the vector data on.\n    \n     *\/\n\n    $draw->circle(250, 250, 250, 0);\n    $draw->setviewbox(0, 0, 200, 200);\n    $draw->circle(125, 250, 250, 250);\n    $draw->translate(250, 125);\n    $draw->circle(0, 0, 125, 0);\n\n\n    $imagick = new \\Imagick();\n    $imagick->newImage(500, 500, $backgroundColor);\n    $imagick->setImageFormat(\"png\");\n\n    $imagick->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickdraw::skewx":[{"title":"ImagickDraw::skewX()","source":"function skewX($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor, \n               $startX, $startY, $endX, $endY, $skew) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle($startX, $startY, $endX, $endY);\n    $draw->setFillColor($fillModifiedColor);\n    $draw->skewX($skew);\n    $draw->rectangle($startX, $startY, $endX, $endY);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::skewy":[{"title":"ImagickDraw::skewY()","source":"function skewY($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor, \n               $startX, $startY, $endX, $endY, $skew) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setStrokeWidth(2);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle($startX, $startY, $endX, $endY);\n    $draw->setFillColor($fillModifiedColor);\n    $draw->skewY($skew);\n    $draw->rectangle($startX, $startY, $endX, $endY);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickdraw::translate":[{"title":"ImagickDraw::translate()","source":"function translate($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor, \n                   $startX, $startY, $endX, $endY, $translateX, $translateY) {\n\n    $draw = new \\ImagickDraw();\n\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle($startX, $startY, $endX, $endY);\n\n    $draw->setFillColor($fillModifiedColor);\n    $draw->translate($translateX, $translateY);\n    $draw->rectangle($startX, $startY, $endX, $endY);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, $backgroundColor);\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickkernel::addkernel":[{"title":"ImagickKernel::addKernel()","source":"function addKernel($imagePath) {\n    $matrix1 = [\n        [-1, -1, -1],\n        [ 0,  0,  0],\n        [ 1,  1,  1],\n    ];\n\n    $matrix2 = [\n        [-1,  0,  1],\n        [-1,  0,  1],\n        [-1,  0,  1],\n    ];\n\n    $kernel1 = ImagickKernel::fromMatrix($matrix1);\n    $kernel2 = ImagickKernel::fromMatrix($matrix2);\n    $kernel1->addKernel($kernel2);\n\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->filter($kernel1);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n\n}","output":null}],"imagickkernel::addunitykernel":[{"title":"ImagickKernel::addUnityKernel()","source":"function renderKernelTable($matrix) {\n        $output = \"<table class='infoTable'>\";\n    \n        foreach ($matrix as $row) {\n            $output .= \"<tr>\";\n            foreach ($row as $cell) {\n                $output .= \"<td style='text-align:left'>\";\n                if ($cell === false) {\n                    $output .= \"false\";\n                }\n                else {\n                    $output .= round($cell, 3);\n                }\n                $output .= \"<\/td>\";\n            }\n            $output .= \"<\/tr>\";\n        }\n    \n        $output .= \"<\/table>\";\n    \n        return $output;\n    }\n\n    $matrix = [\n        [-1, 0, -1],\n        [ 0, 4,  0],\n        [-1, 0, -1],\n    ];\n\n    $kernel = \\ImagickKernel::fromMatrix($matrix);\n    $kernel->scale(1, \\Imagick::NORMALIZE_KERNEL_VALUE);\n    $output = \"Before adding unity kernel: <br\/>\";\n    $output .= renderKernelTable($kernel->getMatrix());\n    $kernel->addUnityKernel(0.5);\n    $output .= \"After adding unity kernel: <br\/>\";\n    $output .= renderKernelTable($kernel->getMatrix());\n    \n    \n    $kernel->scale(1, \\Imagick::NORMALIZE_KERNEL_VALUE);\n    $output .= \"After renormalizing kernel: <br\/>\";\n    $output .= renderKernelTable($kernel->getMatrix());\n\n    echo $output;","output":null},{"title":"ImagickKernel::addUnityKernel()","source":"function addUnityKernel($imagePath) {\n\n    $matrix = [\n        [-1, 0, -1],\n        [ 0, 4,  0],\n        [-1, 0, -1],\n    ];\n\n    $kernel = ImagickKernel::fromMatrix($matrix);\n\n    $kernel->scale(4, \\Imagick::NORMALIZE_KERNEL_VALUE);\n    $kernel->addUnityKernel(0.5);\n\n\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imagick->filter($kernel);\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick->getImageBlob();\n\n}","output":null}],"imagickkernel::frombuiltin":[{"title":"ImagickKernel::fromBuiltin()","source":"function renderKernel(ImagickKernel $imagickKernel) {\n    $matrix = $imagickKernel->getMatrix();\n    \n    $imageMargin = 20;\n    \n    $tileSize = 20;\n    $tileSpace = 4;\n    $shadowSigma = 4;\n    $shadowDropX = 20;\n    $shadowDropY = 0;\n\n    $radius = ($tileSize \/ 2) * 0.9;\n    \n    $rows = count($matrix);\n    $columns = count($matrix[0]);\n \n    $imagickDraw = new \\ImagickDraw();\n\n    $imagickDraw->setFillColor('#afafaf');\n    $imagickDraw->setStrokeColor('none');\n    \n    $imagickDraw->translate($imageMargin, $imageMargin);\n    $imagickDraw->push();\n\n    ksort($matrix);\n    \n    foreach ($matrix as $row) {\n        ksort($row);\n        $imagickDraw->push();\n        foreach ($row as $cell) {\n            if ($cell !== false) {\n                $color = intval(255 * $cell);\n                $colorString = sprintf(\"rgb(%f, %f, %f)\", $color, $color, $color);\n                $imagickDraw->setFillColor($colorString);\n                $imagickDraw->rectangle(0, 0, $tileSize, $tileSize);\n            }\n            $imagickDraw->translate(($tileSize + $tileSpace), 0);\n        }\n        $imagickDraw->pop();\n        $imagickDraw->translate(0, ($tileSize + $tileSpace));\n    }\n\n    $imagickDraw->pop();\n\n    $width = ($columns * $tileSize) + (($columns - 1) * $tileSpace);\n    $height = ($rows * $tileSize) + (($rows - 1) * $tileSpace);\n\n    $imagickDraw->push();\n    $imagickDraw->translate($width\/2 , $height\/2);\n    $imagickDraw->setFillColor('rgba(0, 0, 0, 0)');\n    $imagickDraw->setStrokeColor('white');\n    $imagickDraw->circle(0, 0, $radius - 1, 0);\n    $imagickDraw->setStrokeColor('black');\n    $imagickDraw->circle(0, 0, $radius, 0);\n    $imagickDraw->pop();\n\n    $canvasWidth = $width + (2 * $imageMargin); \n    $canvasHeight = $height + (2 * $imageMargin);\n\n    $kernel = new \\Imagick();\n    $kernel->newPseudoImage(\n        $canvasWidth,\n        $canvasHeight,\n        'canvas:none'\n    );\n\n    $kernel->setImageFormat('png');\n    $kernel->drawImage($imagickDraw);\n \n    \/* create drop shadow on it's own layer *\/\n    $canvas = $kernel->clone();\n    $canvas->setImageBackgroundColor(new \\ImagickPixel('rgb(0, 0, 0)'));\n    $canvas->shadowImage(100, $shadowSigma, $shadowDropX, $shadowDropY);\n\n    $canvas->setImagePage($canvasWidth, $canvasHeight, -5, -5);\n    $canvas->cropImage($canvasWidth, $canvasHeight, 0, 0);\n    \n    \/* composite original text_layer onto shadow_layer *\/\n    $canvas->compositeImage($kernel, \\Imagick::COMPOSITE_OVER, 0, 0);\n    $canvas->setImageFormat('png');\n\n    return $canvas;\n}\n\n\nfunction createFromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm) {\n    $string = '';\n\n    if ($kernelFirstTerm != false && strlen(trim($kernelFirstTerm)) != 0) {\n        $string .= $kernelFirstTerm;\n\n        if ($kernelSecondTerm != false && strlen(trim($kernelSecondTerm)) != 0) {\n            $string .= ','.$kernelSecondTerm;\n            if ($kernelThirdTerm != false && strlen(trim($kernelThirdTerm)) != 0) {\n                $string .= ','.$kernelThirdTerm;\n            }\n        }\n    }\n\n    $kernel = ImagickKernel::fromBuiltIn(\n        $kernelType,\n        $string\n    );\n\n    return $kernel;\n}\n    \nfunction fromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm) {\n    $diamondKernel = createFromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm);\n    $imagick = renderKernel($diamondKernel);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}\n\nfromBuiltin(\\Imagick::KERNEL_DIAMOND, 2, false, false);","output":null}],"imagickkernel::frommatrix":[{"title":"ImagickKernel::fromMatrix()","source":"function renderKernel(ImagickKernel $imagickKernel) {\n    $matrix = $imagickKernel->getMatrix();\n    \n    $imageMargin = 20;\n    \n    $tileSize = 20;\n    $tileSpace = 4;\n    $shadowSigma = 4;\n    $shadowDropX = 20;\n    $shadowDropY = 0;\n\n    $radius = ($tileSize \/ 2) * 0.9;\n    \n    $rows = count($matrix);\n    $columns = count($matrix[0]);\n \n    $imagickDraw = new \\ImagickDraw();\n\n    $imagickDraw->setFillColor('#afafaf');\n    $imagickDraw->setStrokeColor('none');\n    \n    $imagickDraw->translate($imageMargin, $imageMargin);\n    $imagickDraw->push();\n\n    ksort($matrix);\n    \n    foreach ($matrix as $row) {\n        ksort($row);\n        $imagickDraw->push();\n        foreach ($row as $cell) {\n            if ($cell !== false) {\n                $color = intval(255 * $cell);\n                $colorString = sprintf(\"rgb(%f, %f, %f)\", $color, $color, $color);\n                $imagickDraw->setFillColor($colorString);\n                $imagickDraw->rectangle(0, 0, $tileSize, $tileSize);\n            }\n            $imagickDraw->translate(($tileSize + $tileSpace), 0);\n        }\n        $imagickDraw->pop();\n        $imagickDraw->translate(0, ($tileSize + $tileSpace));\n    }\n\n    $imagickDraw->pop();\n\n    $width = ($columns * $tileSize) + (($columns - 1) * $tileSpace);\n    $height = ($rows * $tileSize) + (($rows - 1) * $tileSpace);\n\n    $imagickDraw->push();\n    $imagickDraw->translate($width\/2 , $height\/2);\n    $imagickDraw->setFillColor('rgba(0, 0, 0, 0)');\n    $imagickDraw->setStrokeColor('white');\n    $imagickDraw->circle(0, 0, $radius - 1, 0);\n    $imagickDraw->setStrokeColor('black');\n    $imagickDraw->circle(0, 0, $radius, 0);\n    $imagickDraw->pop();\n\n    $canvasWidth = $width + (2 * $imageMargin); \n    $canvasHeight = $height + (2 * $imageMargin);\n\n    $kernel = new \\Imagick();\n    $kernel->newPseudoImage(\n        $canvasWidth,\n        $canvasHeight,\n        'canvas:none'\n    );\n\n    $kernel->setImageFormat('png');\n    $kernel->drawImage($imagickDraw);\n \n    \/* create drop shadow on it's own layer *\/\n    $canvas = $kernel->clone();\n    $canvas->setImageBackgroundColor(new \\ImagickPixel('rgb(0, 0, 0)'));\n    $canvas->shadowImage(100, $shadowSigma, $shadowDropX, $shadowDropY);\n\n    $canvas->setImagePage($canvasWidth, $canvasHeight, -5, -5);\n    $canvas->cropImage($canvasWidth, $canvasHeight, 0, 0);\n    \n    \/* composite original text_layer onto shadow_layer *\/\n    $canvas->compositeImage($kernel, \\Imagick::COMPOSITE_OVER, 0, 0);\n    $canvas->setImageFormat('png');\n\n    return $canvas;\n}\n\nfunction createFromMatrix() {\n    $matrix = [\n        [0.5, 0, 0.2],\n        [0, 1, 0],\n        [0.9, 0, false],\n    ];\n\n    $kernel = \\ImagickKernel::fromMatrix($matrix);\n\n    return $kernel;\n}\n    \nfunction fromMatrix() {\n    $kernel = createFromMatrix();\n    $imagick = renderKernel($kernel);\n\n    header(\"Content-Type: image\/png\");\n    echo $imagick->getImageBlob();\n}","output":null}],"imagickkernel::getmatrix":[{"title":"ImagickKernel::getMatrix()","source":"function renderKernelTable($matrix) {\n    $output = \"<table class='infoTable'>\";\n\n    foreach ($matrix as $row) {\n        $output .= \"<tr>\";\n        foreach ($row as $cell) {\n            $output .= \"<td style='text-align:left'>\";\n            if ($cell === false) {\n                $output .= \"false\";\n            }\n            else {\n                $output .= round($cell, 3);\n            }\n            $output .= \"<\/td>\";\n        }\n        $output .= \"<\/tr>\";\n    }\n\n    $output .= \"<\/table>\";\n\n    return $output;\n}\n\n    $output = \"The built-in kernel name 'ring' with parameters of '2,3.5':<br\/>\";\n    $kernel = \\ImagickKernel::fromBuiltIn(\n        \\Imagick::KERNEL_RING,\n        \"2,3.5\"\n    );\n    $matrix = $kernel->getMatrix();\n    $output .= renderKernelTable($matrix);\n\n    echo $output;","output":null}],"imagickkernel::scale":[{"title":"ImagickKernel::scale()","source":"function renderKernelTable($matrix) {\n        $output = \"<table class='infoTable'>\";\n    \n        foreach ($matrix as $row) {\n            $output .= \"<tr>\";\n            foreach ($row as $cell) {\n                $output .= \"<td style='text-align:left'>\";\n                if ($cell === false) {\n                    $output .= \"false\";\n                }\n                else {\n                    $output .= round($cell, 3);\n                }\n                $output .= \"<\/td>\";\n            }\n            $output .= \"<\/tr>\";\n        }\n    \n        $output .= \"<\/table>\";\n    \n        return $output;\n    }\n\n\n    $output = \"\";\n    \n    $matrix = [\n        [-1, 0, -1],\n        [ 0, 4,  0],\n        [-1, 0, -1],\n    ];\n\n    $kernel = \\ImagickKernel::fromMatrix($matrix);\n    $kernelClone = clone $kernel;\n\n    $output .= \"Start kernel<br\/>\";\n    $output .= renderKernelTable($kernel->getMatrix());\n    \n    \n    $output .= \"Scaling with NORMALIZE_KERNEL_VALUE. The  <br\/>\";\n    $kernel->scale(2, \\Imagick::NORMALIZE_KERNEL_VALUE);\n    $output .= renderKernelTable($kernel->getMatrix());\n\n\n    $kernel = clone $kernelClone;\n    $output .= \"Scaling by percent<br\/>\";\n    $kernel->scale(2, \\Imagick::NORMALIZE_KERNEL_PERCENT);\n    $output .= renderKernelTable($kernel->getMatrix());\n    \n    $matrix2 = [\n        [-1, -1, 1],\n        [ -1, false,  1],\n        [1, 1, 1],\n    ];\n    \n    $kernel = \\ImagickKernel::fromMatrix($matrix2);\n    $output .= \"Scaling by correlate<br\/>\";\n    $kernel->scale(1, \\Imagick::NORMALIZE_KERNEL_CORRELATE);\n    $output .= renderKernelTable($kernel->getMatrix());\n\n    return $output;","output":null}],"imagickkernel::separate":[{"title":"ImagickKernel::separate()","source":"function renderKernelTable($matrix) {\n\n        $output = \"<table class='infoTable'>\";\n        foreach ($matrix as $row) {\n            $output .= \"<tr>\";\n            foreach ($row as $cell) {\n                $output .= \"<td style='text-align:left'>\";\n                if ($cell === false) {\n                    $output .= \"false\";\n                }\n                else {\n                    $output .= round($cell, 3);\n                }\n                $output .= \"<\/td>\";\n            }\n            $output .= \"<\/tr>\";\n        }\n    \n        $output .= \"<\/table>\";\n    \n        return $output;\n    }\n\n\n    $matrix = [\n        [-1, 0, -1],\n        [ 0, 4,  0],\n        [-1, 0, -1],\n    ];\n\n    $kernel = \\ImagickKernel::fromMatrix($matrix);\n    $kernel->scale(4, \\Imagick::NORMALIZE_KERNEL_VALUE);\n    $diamondKernel = \\ImagickKernel::fromBuiltIn(\n        \\Imagick::KERNEL_DIAMOND,\n        \"2\"\n    );\n\n    $kernel->addKernel($diamondKernel);\n    \n    $kernelList = $kernel->separate();\n    \n    $output = '';\n    $count = 0;\n    foreach ($kernelList as $kernel) {\n        $output .= \"<br\/>Kernel $count<br\/>\";\n        $output .= renderKernelTable($kernel->getMatrix());\n        $count++;\n    }\n\n    return $output;","output":null}],"imagickpixel::__construct":[{"title":"ImagickPixel::construct()","source":"function construct() {\n\n    $columns = 4;\n    \n    $exampleColors = array(\n        \"rgba(100%, 0%, 0%, 0.5)\",\n        \"hsb(33.3333%, 100%,  75%)\", \/\/ medium green\n        \"hsl(120, 255,   191.25)\", \/\/medium green\n        \"graya(50%, 0.5)\", \/\/  semi-transparent mid gray\n        \"LightCoral\", \"none\", \/\/\"cmyk(0.9, 0.48, 0.83, 0.50)\",\n        \"#f00\", \/\/  #rgb\n        \"#ff0000\", \/\/  #rrggbb\n        \"#ff0000ff\", \/\/  #rrggbbaa\n        \"#ffff00000000\", \/\/  #rrrrggggbbbb\n        \"#ffff00000000ffff\", \/\/  #rrrrggggbbbbaaaa\n        \"rgb(255, 0, 0)\", \/\/  an integer in the range 0—255 for each component\n        \"rgb(100.0%, 0.0%, 0.0%)\", \/\/  a float in the range 0—100% for each component\n        \"rgb(255, 0, 0)\", \/\/  range 0 - 255\n        \"rgba(255, 0, 0, 1.0)\", \/\/  the same, with an explicit alpha value\n        \"rgb(100%, 0%, 0%)\", \/\/  range 0.0% - 100.0%\n        \"rgba(100%, 0%, 0%, 1.0)\", \/\/  the same, with an explicit alpha value\n    );\n\n    $draw = new \\ImagickDraw();\n    $count = 0;\n    $black = new \\ImagickPixel('rgb(0, 0, 0)');\n\n    foreach ($exampleColors as $exampleColor) {\n        $color = new \\ImagickPixel($exampleColor);\n\n        $draw->setstrokewidth(1.0);\n        $draw->setStrokeColor($black);\n        $draw->setFillColor($color);\n        $offsetX = ($count % $columns) * 50 + 5;\n        $offsetY = intval($count \/ $columns) * 50 + 5;\n        $draw->rectangle(0 + $offsetX, 0 + $offsetY, 40 + $offsetX, 40 + $offsetY);\n        $count++;\n    }\n\n    $image = new \\Imagick();\n    $image->newImage(350, 350, \"blue\");\n    $image->setImageFormat(\"png\");\n    $image->drawImage($draw);\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickpixel::getcolor":[{"title":"Basic Imagick::getColor() usage","source":"\/\/Create an ImagickPixel with the predefined color 'brown'\n$color = new ImagickPixel('brown');\n\n\/\/Set the color to have an alpha of 25%\n$color->setColorValue(Imagick::COLOR_ALPHA, 64 \/ 256.0);\n\n$colorInfo = $color->getColor();\n\necho \"Standard values\".PHP_EOL;\nprint_r($colorInfo);\n\n$colorInfo = $color->getColor(true);\n\necho \"Normalized values:\".PHP_EOL;\nprint_r($colorInfo);","output":"Standard values\nArray\n(\n    [r] => 165\n    [g] => 42\n    [b] => 42\n    [a] => 0\n)\nNormalized values:\nArray\n(\n    [r] => 0.64705882352941\n    [g] => 0.16470588235294\n    [b] => 0.16470588235294\n    [a] => 0.25000381475547\n)"}],"imagickpixel::getcolorasstring":[{"title":"Basic Imagick::getColorAsString() usage","source":"\/\/Create an ImagickPixel with the predefined color 'brown'\n$color = new ImagickPixel('brown');\n\n$color->setColorValue(Imagick::COLOR_ALPHA, 64 \/ 256.0);\n\n$colorInfo = $color->getColorAsString();\n\nprint_r($colorInfo);","output":"rgb(165,42,42)"}],"imagickpixel::getcolorcount":[{"title":"ImagickPixel getColorCount()","source":"$imagick = new \\Imagick();\n    $imagick->newPseudoImage(640, 480, \"magick:logo\");\n    $histogramElements = $imagick->getImageHistogram();\n    $lastColor = array_pop($histogramElements);\n    echo \"Last pixel color count is: \".$lastColor->getColorCount();","output":"Last pixel color count is: 256244"}],"imagickpixel::getcolorvalue":[{"title":"Basic Imagick::getColorValue() usage","source":"$color = new ImagickPixel('rgba(90%, 20%, 20%, 0.75)');\n\necho \"Alpha value is \".$color->getColorValue(Imagick::COLOR_ALPHA).PHP_EOL;\necho \"\".PHP_EOL;\necho \"Red value is \".$color->getColorValue(Imagick::COLOR_RED).PHP_EOL;\necho \"Green value is \".$color->getColorValue(Imagick::COLOR_GREEN).PHP_EOL;\necho \"Blue value is \".$color->getColorValue(Imagick::COLOR_BLUE).PHP_EOL;\necho \"\".PHP_EOL;\necho \"Cyan value is \".$color->getColorValue(Imagick::COLOR_CYAN).PHP_EOL;\necho \"Magenta value is \".$color->getColorValue(Imagick::COLOR_MAGENTA).PHP_EOL;\necho \"Yellow value is \".$color->getColorValue(Imagick::COLOR_YELLOW).PHP_EOL;\necho \"Black value is \".$color->getColorValue(Imagick::COLOR_BLACK).PHP_EOL;","output":"Alpha value is 0.74999618524453\n\nRed value is 0.90000762951095\nGreen value is 0.2\nBlue value is 0.2\n\nCyan value is 0.90000762951095\nMagenta value is 0.2\nYellow value is 0.2\nBlack value is 0"}],"imagickpixel::getcolorvaluequantum":[{"title":"ImagickPixel::getColorValueQuantum()","source":"$color = new \\ImagickPixel('rgb(128, 5, 255)');\n        $colorRed = $color->getColorValueQuantum(\\Imagick::COLOR_RED);\n        $colorGreen = $color->getColorValueQuantum(\\Imagick::COLOR_GREEN);\n        $colorBlue = $color->getColorValueQuantum(\\Imagick::COLOR_BLUE);\n        $colorAlpha = $color->getColorValueQuantum(\\Imagick::COLOR_ALPHA);\n\n        printf(\n            \"Red: %s Green: %s  Blue %s Alpha: %s\",\n            $colorRed,\n            $colorGreen,\n            $colorBlue,\n            $colorAlpha\n        );","output":null}],"imagickpixel::gethsl":[{"title":"Basic Imagick::getHSL() example","source":"$color = new ImagickPixel('rgb(90%, 10%, 10%)');\n\n$colorInfo = $color->getHSL();\n\nprint_r($colorInfo);","output":"Array\n(\n    [hue] => 0\n    [saturation] => 0.80001220740379\n    [luminosity] => 0.50000762951095\n)"}],"imagickpixel::issimilar":[{"title":"ImagickPixel::isSimilar()","source":"\/\/ The tests below are written with the maximum distance expressed as 255\n        \/\/ so we need to scale them by the square root of 3 - the diagonal length\n        \/\/ of a unit cube.\n        $root3 = 1.732050807568877;\n\n        $tests = array(\n            ['rgb(245, 0, 0)',      'rgb(255, 0, 0)',   9 \/ $root3,         false,],\n            ['rgb(245, 0, 0)',      'rgb(255, 0, 0)',  10 \/ $root3,         true,],\n            ['rgb(0, 0, 0)',        'rgb(7, 7, 0)',     9 \/ $root3,         false,],\n            ['rgb(0, 0, 0)',        'rgb(7, 7, 0)',    10 \/ $root3,         true,],\n            ['rgba(0, 0, 0, 1)',    'rgba(7, 7, 0, 1)', 9 \/ $root3,         false,],\n            ['rgba(0, 0, 0, 1)',    'rgba(7, 7, 0, 1)',    10 \/ $root3,     true,],\n            ['rgb(128, 128, 128)',  'rgb(128, 128, 120)',   7 \/ $root3,     false,],\n            ['rgb(128, 128, 128)',  'rgb(128, 128, 120)',   8 \/ $root3,     true,],\n            ['rgb(0, 0, 0)',        'rgb(255, 255, 255)',   254.9,          false,],\n            ['rgb(0, 0, 0)',        'rgb(255, 255, 255)',   255,            true,],\n            ['rgb(255, 0, 0)',      'rgb(0, 255, 255)',     254.9,          false,],\n            ['rgb(255, 0, 0)',      'rgb(0, 255, 255)',     255,            true,],\n            ['black',               'rgba(0, 0, 0)',        0.0,            true],\n            ['black',               'rgba(10, 0, 0, 1.0)',  10.0 \/ $root3,  true],);\n\n        $output = \"<table width='100%' class='infoTable'><thead>\n                <tr>\n                <th>\n                Color 1\n                <\/th>\n                <th>\n                Color 2\n                <\/th>\n                <th>\n                    Test distance * 255\n                <\/th>\n                <th>\n                    Is within distance\n                <\/th>\n                <\/tr>\n        <\/thead>\";\n\n        $output .= \"<tbody>\";\n\n        foreach ($tests as $testInfo) {\n            $color1 = $testInfo[0];\n            $color2 = $testInfo[1];\n            $distance = $testInfo[2];\n            $expectation = $testInfo[3];\n            $testDistance = ($distance \/ 255.0);\n\n            $color1Pixel = new \\ImagickPixel($color1);\n            $color2Pixel = new \\ImagickPixel($color2);\n\n            $isSimilar = $color1Pixel->isPixelSimilar($color2Pixel, $testDistance);\n\n\n            if ($isSimilar !== $expectation) {\n                echo \"Test distance failed. Color [$color1] compared to color [$color2] is not within distance $testDistance FAILED.\".NL;\n            }\n\n            $layout = \"<tr>\n                <td>%s<\/td>\n                <td>%s<\/td>\n                <td>%s<\/td>\n                <td style='text-align: center;'>%s<\/td>\n            <\/tr>\";\n            \n            $output .= sprintf(\n                $layout,\n                $color1,\n                $color2,\n                $distance,\n                $isSimilar ? 'yes' : 'no'\n            );\n        }\n\n        $output .= \"<\/tbody><\/table>\";\n        \n        return $output;","output":null}],"imagickpixel::setcolor":[{"title":"ImagickPixel::setColor()","source":"function setColor() {\n    $draw = new \\ImagickDraw();\n\n    $strokeColor = new \\ImagickPixel('green');\n    $fillColor = new \\ImagickPixel();\n    $fillColor->setColor('rgba(100%, 75%, 0%, 1.0)');\n\n    $draw->setstrokewidth(3.0);\n    $draw->setStrokeColor($strokeColor);\n    $draw->setFillColor($fillColor);\n    $draw->rectangle(200, 200, 300, 300);\n\n    $image = new \\Imagick();\n    $image->newImage(500, 500, \"SteelBlue2\");\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickpixel::setcolorvalue":[{"title":"Basic Imagick::setColorValue() usage","source":"$color  = new \\ImagickPixel('firebrick');\n\n$color->setColorValue(Imagick::COLOR_ALPHA, 0.5);\n\nprint_r($color->getcolor(true));","output":"Array\n(\n    [r] => 0.69803921568627\n    [g] => 0.13333333333333\n    [b] => 0.13333333333333\n    [a] => 0.50000762951095\n)"}],"imagickpixel::setcolorvaluequantum":[{"title":"ImagickPixel::setColorValueQuantum()","source":"function setColorValueQuantum() {\n    $image = new \\Imagick();\n\n    $quantumRange = $image->getQuantumRange();\n\n    $draw = new \\ImagickDraw();\n    $color = new \\ImagickPixel('blue');\n    $color->setcolorValueQuantum(\\Imagick::COLOR_RED, 128 * $quantumRange['quantumRangeLong'] \/ 256);\n\n    $draw->setstrokewidth(1.0);\n    $draw->setStrokeColor($color);\n    $draw->setFillColor($color);\n    $draw->rectangle(200, 200, 300, 300);\n\n    $image->newImage(500, 500, \"SteelBlue2\");\n    $image->setImageFormat(\"png\");\n\n    $image->drawImage($draw);\n\n    header(\"Content-Type: image\/png\");\n    echo $image->getImageBlob();\n}","output":null}],"imagickpixel::sethsl":[{"title":"Use ImagickPixel::setHSL() to modify a color","source":"\/\/Create an almost pure red color\n$color = new ImagickPixel('rgb(90%, 10%, 10%)');\n\n\/\/Get it's HSL values\n$colorInfo = $color->getHSL();\n\n\/\/Rotate the hue by 180 degrees\n$newHue = $colorInfo['hue'] + 0.5;\nif ($newHue > 1) {\n    $newHue = $newHue - 1;\n}\n\n\/\/Set the ImagickPixel to the new color\n$colorInfo = $color->setHSL($newHue, $colorInfo['saturation'], $colorInfo['luminosity']);\n\n\/\/Check that the new color is blue\/green\n$colorInfo = $color->getcolor();\nprint_r($colorInfo);","output":"Array\n(\n    [r] => 26\n    [g] => 230\n    [b] => 230\n    [a] => 255\n)"}],"imagickpixeliterator::clear":[{"title":"ImagickPixelIterator::clear()","source":"function clear($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imageIterator = $imagick->getPixelRegionIterator(100, 100, 250, 200);\n\n    \/* Loop through pixel rows *\/\n    foreach ($imageIterator as $pixels) { \n        \/** @var $pixel \\ImagickPixel *\/\n        \/* Loop through the pixels in the row (columns) *\/\n        foreach ($pixels as $column => $pixel) { \n            if ($column % 2) {\n                \/* Paint every second pixel black*\/\n                $pixel->setColor(\"rgba(0, 0, 0, 0)\"); \n            }\n        }\n        \/* Sync the iterator, this is important to do on each iteration *\/\n        $imageIterator->syncIterator();\n    }\n\n    $imageIterator->clear();\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick;\n}","output":null}],"imagickpixeliterator::__construct":[{"title":"ImagickPixelIterator::construct()","source":"function construct($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imageIterator = new \\ImagickPixelIterator($imagick);\n\n    \/* Loop through pixel rows *\/\n    foreach ($imageIterator as $pixels) { \n        \/* Loop through the pixels in the row (columns) *\/\n        foreach ($pixels as $column => $pixel) { \n            \/** @var $pixel \\ImagickPixel *\/\n            if ($column % 2) {\n                \/* Paint every second pixel black*\/\n                $pixel->setColor(\"rgba(0, 0, 0, 0)\");\n            }\n        }\n        \/* Sync the iterator, this is important to do on each iteration *\/\n        $imageIterator->syncIterator();\n    }\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick;\n}","output":null}],"imagickpixeliterator::getnextiteratorrow":[{"title":"ImagickPixelIterator::getNextIteratorRow()","source":"function getNextIteratorRow($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imageIterator = $imagick->getPixelIterator();\n\n    $count = 0;\n    while ($pixels = $imageIterator->getNextIteratorRow()) {\n        if (($count % 3) == 0) {\n            \/* Loop through the pixels in the row (columns) *\/\n            foreach ($pixels as $column => $pixel) { \n                \/** @var $pixel \\ImagickPixel *\/\n                if ($column % 2) {\n                    \/* Paint every second pixel black*\/\n                    $pixel->setColor(\"rgba(0, 0, 0, 0)\");\n                }\n            }\n            \/* Sync the iterator, this is important to do on each iteration *\/\n            $imageIterator->syncIterator(); \n        }\n\n        $count += 1;\n    }\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick;\n}","output":null}],"imagickpixeliterator::resetiterator":[{"title":"ImagickPixelIterator::resetIterator()","source":"function resetIterator($imagePath) {\n\n    $imagick = new \\Imagick(realpath($imagePath));\n\n    $imageIterator = $imagick->getPixelIterator();\n\n    \/* Loop trough pixel rows *\/\n    foreach ($imageIterator as $pixels) {\n        \/* Loop through the pixels in the row (columns) *\/\n        foreach ($pixels as $column => $pixel) {\n            \/** @var $pixel \\ImagickPixel *\/\n            if ($column % 2) {\n\n                \/* Make every second pixel 25% red*\/\n                $pixel->setColorValue(\\Imagick::COLOR_RED, 64); \n            }\n        }\n        \/* Sync the iterator, this is important to do on each iteration *\/\n        $imageIterator->syncIterator();\n    }\n\n    $imageIterator->resetiterator();\n\n    \/* Loop trough pixel rows *\/\n    foreach ($imageIterator as $pixels) {\n        \/* Loop through the pixels in the row (columns) *\/\n        foreach ($pixels as $column => $pixel) {\n            \/** @var $pixel \\ImagickPixel *\/\n            if ($column % 3) {\n                $pixel->setColorValue(\\Imagick::COLOR_BLUE, 64); \/* Make every second pixel a little blue*\/\n                \/\/$pixel->setColor(\"rgba(0, 0, 128, 0)\"); \/* Paint every second pixel black*\/\n            }\n        }\n        $imageIterator->syncIterator(); \/* Sync the iterator, this is important to do on each iteration *\/\n    }\n\n    $imageIterator->clear();\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick;\n}","output":null}],"imagickpixeliterator::setiteratorrow":[{"title":"ImagickPixelIterator::setIteratorRow()","source":"function setIteratorRow($imagePath) {\n    $imagick = new \\Imagick(realpath($imagePath));\n    $imageIterator = $imagick->getPixelRegionIterator(200, 100, 200, 200);\n\n    for ($x = 0; $x < 20; $x++) {        \n        $imageIterator->setIteratorRow($x * 5);\n        $pixels = $imageIterator->getCurrentIteratorRow();\n        \/* Loop through the pixels in the row (columns) *\/\n        foreach ($pixels as $pixel) {\n            \/** @var $pixel \\ImagickPixel *\/\n            \/* Paint every second pixel black*\/\n            $pixel->setColor(\"rgba(0, 0, 0, 0)\"); \n        }\n\n        \/* Sync the iterator, this is important to do on each iteration *\/\n        $imageIterator->syncIterator();\n    }\n\n    header(\"Content-Type: image\/jpg\");\n    echo $imagick;\n}","output":null}],"infiniteiterator::__construct":[{"title":"InfiniteIterator::__construct() example","source":"$arrayit  = new ArrayIterator(array('cat','dog'));\n$infinite = new InfiniteIterator($arrayit);\n$limit    = new LimitIterator($infinite, 0, 7);\nforeach($limit as $value)\n{\n    echo \"$value\\n\";\n}","output":"cat\ndog\ncat\ndog\ncat\ndog\ncat"}],"intlcalendar::add":[{"title":"IntlCalendar::add()","source":"ini_set('intl.default_locale', 'fr_FR');\nini_set('date.timezone', 'UTC');\n\n$cal = new IntlGregorianCalendar(2012, 0 \/* January *\/, 31);\necho IntlDateFormatter::formatObject($cal), \"\\n\";\n\n$cal->add(IntlCalendar::FIELD_MONTH, 1);\necho IntlDateFormatter::formatObject($cal), \"\\n\";\n\n$cal->add(IntlCalendar::FIELD_DAY_OF_MONTH, 1);\necho IntlDateFormatter::formatObject($cal), \"\\n\";","output":"31 janv. 2012 00:00:00\n29 févr. 2012 00:00:00\n1 mars 2012 00:00:00"}],"intlcalendar::after":[{"title":"IntlCalendar::after()","source":"$cal1 = IntlCalendar::createInstance();\n$cal2 = clone $cal1;\n\nvar_dump($cal1->after($cal2), \/\/false\n        $cal2->after($cal1)); \/\/false\n\n$cal1->roll(IntlCalendar::FIELD_MILLISECOND, true);\n\nvar_dump($cal1->after($cal2), \/\/true\n        $cal2->after($cal1)); \/\/false","output":null}],"intlcalendar::clear":[{"title":"IntlCalendar::clear() examples","source":"ini_set('intl.default_locale', 'es_ES');\nini_set('date.timezone', 'UTC');\n\n$fields = array(\n    'FIELD_ERA'                  => 0,\n    'FIELD_YEAR'                 => 1,\n    'FIELD_MONTH'                => 2,\n    'FIELD_WEEK_OF_YEAR'         => 3,\n    'FIELD_WEEK_OF_MONTH'        => 4,\n    'FIELD_DATE'                 => 5,\n    'FIELD_DAY_OF_YEAR'          => 6,\n    'FIELD_DAY_OF_WEEK'          => 7,\n    'FIELD_DAY_OF_WEEK_IN_MONTH' => 8,\n    'FIELD_AM_PM'                => 9,\n    'FIELD_HOUR'                 => 10,\n    'FIELD_HOUR_OF_DAY'          => 11,\n    'FIELD_MINUTE'               => 12,\n    'FIELD_SECOND'               => 13,\n    'FIELD_MILLISECOND'          => 14,\n    'FIELD_ZONE_OFFSET'          => 15,\n    'FIELD_DST_OFFSET'           => 16,\n    'FIELD_YEAR_WOY'             => 17,\n    'FIELD_DOW_LOCAL'            => 18,\n    'FIELD_EXTENDED_YEAR'        => 19,\n    'FIELD_JULIAN_DAY'           => 20,\n    'FIELD_MILLISECONDS_IN_DAY'  => 21,\n    'FIELD_IS_LEAP_MONTH'        => 22,\n    'FIELD_FIELD_COUNT'          => 23,\n);\nfunction getSetFields(IntlCalendar $cal) {\n    global $fields;\n    $ret = array();\n    foreach ($fields as $name => $value) {\n        if ($cal->isSet($value)) {\n            $ret[] = $name;\n        }\n    }\n    return $ret;\n}\n\n$cal = new IntlGregorianCalendar(2013, 2 \/* March *\/, 15);\necho \"After GregorianCalendar creation\\n\";\nprint_r(getSetFields($cal));\necho \"\\n\";\n\necho IntlDateFormatter::formatObject($cal), \"\\n\";\necho \"After the formatter requested the extended year\\n\";\nprint_r(getSetFields($cal));\necho \"\\n\";\n\n$cal->clear(IntlCalendar::FIELD_YEAR);\necho \"After the year has been cleared, the date stays the same\\n\";\necho IntlDateFormatter::formatObject($cal), \"\\n\";\necho \"because FIELD_EXTENDED_YEAR is still set\\n\";\nprint_r(getSetFields($cal));\necho \"\\n\";\n\nvar_dump($cal->clear(IntlCalendar::FIELD_EXTENDED_YEAR));\necho \"After the extended year has been cleared\\n\";\nprint_r(getSetFields($cal));\necho IntlDateFormatter::formatObject($cal), \"\\n\";\necho \"\\n\";\n\necho \"After the fields are recalculated,\\n\"\n        . \" extended year is set again (to 1970)\\n\";\nprint_r(getSetFields($cal));\necho \"\\n\";\n\n$cal->clear();\necho \"After calling variant with no arguments\\n\";\nprint_r(getSetFields($cal));\necho IntlDateFormatter::formatObject($cal), \"\\n\";","output":"After GregorianCalendar creation\nArray\n(\n    [0] => FIELD_ERA\n    [1] => FIELD_YEAR\n    [2] => FIELD_MONTH\n    [3] => FIELD_DATE\n)\n\n15\/03\/2013 00:00:00\nAfter the formatter requested the extended year\nArray\n(\n    [0] => FIELD_ERA\n    [1] => FIELD_YEAR\n    [2] => FIELD_MONTH\n    [3] => FIELD_DATE\n    [4] => FIELD_EXTENDED_YEAR\n)\n\nAfter the year has been cleared, the date stays the same\n15\/03\/2013 00:00:00\nbecause FIELD_EXTENDED_YEAR is still set\nArray\n(\n    [0] => FIELD_ERA\n    [1] => FIELD_MONTH\n    [2] => FIELD_DATE\n    [3] => FIELD_EXTENDED_YEAR\n)\n\nbool(true)\nAfter the extended year has been cleared\nArray\n(\n    [0] => FIELD_ERA\n    [1] => FIELD_MONTH\n    [2] => FIELD_DATE\n)\n15\/03\/1970 00:00:00\n\nAfter the fields are recalculated,\n extended year is set again (to 1970)\nArray\n(\n    [0] => FIELD_ERA\n    [1] => FIELD_MONTH\n    [2] => FIELD_DATE\n    [3] => FIELD_EXTENDED_YEAR\n)\n\nAfter calling variant with no arguments\nArray\n(\n)\n01\/01\/1970 00:00:00"}],"intlcalendar::createinstance":[{"title":"IntlCalendar::createInstance()","source":"ini_set('intl.default_locale', 'es_ES');\nini_set('date.timezone', 'Europe\/Madrid');\n\n$cal = IntlCalendar::createInstance();\necho \"No arguments\\n\";\nvar_dump(get_class($cal),\n        IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL));\necho \"\\n\";\n\necho \"Explicit timezone\\n\";\n$cal = IntlCalendar::createInstance(IntlTimeZone::getGMT());\nvar_dump(get_class($cal),\n        IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL));\necho \"\\n\";\n\necho \"Explicit locale (with calendar)\\n\";\n$cal = IntlCalendar::createInstance(NULL, 'es_ES@calendar=persian');\nvar_dump(get_class($cal),\n        IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL));","output":"No arguments\nstring(21) \"IntlGregorianCalendar\"\nstring(68) \"martes 18 de junio de 2013 14:11:02 Hora de verano de Europa Central\"\n\nExplicit timezone\nstring(21) \"IntlGregorianCalendar\"\nstring(45) \"martes 18 de junio de 2013 12:11:02 GMT+00:00\"\n\nExplicit locale (with calendar)\nstring(12) \"IntlCalendar\"\nstring(70) \"martes 28 de Khordad de 1392 14:11:02 Hora de verano de Europa Central\""}],"intlcalendar::equals":[{"title":"IntlCalendar::equals()","source":"ini_set('date.timezone', 'UTC');\n\n$cal1 = IntlCalendar::createInstance(NULL, 'es_ES');\n$cal2 = clone $cal1;\n\nvar_dump($cal1->equals($cal2)); \/\/TRUE\n\n\/\/The locale is not included in the comparison\n$cal2 = IntlCalendar::createInstance(NULL, 'pt_PT');\n$cal2->setTime($cal1->getTime());\nvar_dump($cal1->equals($cal2)); \/\/TRUE\n\n\/\/And set fields state is not included as well\n$cal2->clear(IntlCalendar::FIELD_YEAR);\nvar_dump($cal1->isSet(IntlCalendar::FIELD_YEAR) ==\n        $cal2->isSet(IntlCalendar::FIELD_YEAR)); \/\/FALSE\nvar_dump($cal1->equals($cal2)); \/\/TRUE\n\n\/\/Neither is the calendar type\n$cal2 = IntlCalendar::createInstance(NULL, 'es_ES@calendar=islamic');\n$cal2->setTime($cal1->getTime());\nvar_dump($cal1->equals($cal2)); \/\/TRUE\n\n\/\/Only the time is\n$cal2 = clone $cal1;\n$cal2->setTime($cal1->getTime() + 1.);\nvar_dump($cal1->equals($cal2)); \/\/FALSE","output":null}],"intlcalendar::fielddifference":[{"title":"IntlCalendar::fieldDifference()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'fr_FR');\n\n$cal1 = IntlCalendar::fromDateTime('2012-02-29 09:00:11');\n$cal2 = IntlCalendar::fromDateTime('2013-03-01 09:19:29');\n$time = $cal2->getTime();\n\necho \"Time before: \", IntlDateFormatter::formatObject($cal1), \"\\n\";\n\nprintf(\n    \"The difference in time is %d year(s), %d month(s), \"\n  . \"%d day(s), %d hour(s) and %d minute(s)\\n\",\n    $cal1->fieldDifference($time, IntlCalendar::FIELD_YEAR),\n    $cal1->fieldDifference($time, IntlCalendar::FIELD_MONTH),\n    $cal1->fieldDifference($time, IntlCalendar::FIELD_DAY_OF_MONTH),\n    $cal1->fieldDifference($time, IntlCalendar::FIELD_HOUR_OF_DAY),\n    $cal1->fieldDifference($time, IntlCalendar::FIELD_MINUTE)\n);\n\n\/\/now it was advanced to the target time, exception for the seconds,\n\/\/for which we did not measure the difference\necho \"Time after: \", IntlDateFormatter::formatObject($cal1), \"\\n\";","output":"Time before: 29 févr. 2012 09:00:11\nThe difference in time is 1 year(s), 0 month(s), 1 day(s), 0 hour(s) and 19 minute(s)\nTime after: 1 mars 2013 09:19:11"}],"intlcalendar::fromdatetime":[{"title":"IntlCalendar::fromDateTime()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\n\n\/\/same as IntlCalendar::fromDateTime(new DateTime(...))\n$cal1 = IntlCalendar::fromDateTime('2013-02-28 00:01:02 Europe\/Berlin');\n\n\/\/Note the timezone is Europe\/Berlin, not the default Europe\/Lisbon\necho IntlDateFormatter::formatObject($cal1, 'yyyy MMMM d HH:mm:ss VVVV', 'de_DE'), \"\\n\";","output":"2013 Februar 28 00:01:02 Deutschland Zeit"}],"intlcalendar::get":[{"title":"IntlCalendar::get()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'en_US');\n\n$class = new ReflectionClass('IntlCalendar');\n$fields = array();\nforeach ($class->getConstants() as $name => $val) {\n    if (strpos($name, 'FIELD_') !== 0 || $val > 22)\n        continue;\n    $fields[$val] = $name;\n}\n\n$cal = IntlCalendar::createInstance(); \/\/ current time\nvar_dump(IntlDateFormatter::formatObject($cal));\nforeach ($fields as $val => $name) {\n    echo \"$val ($name)\", \"\\n    \", $cal->get($val), \"\\n\";\n}","output":"string(23) \"Jul 1, 2013, 4:44:44 AM\"\n0 (FIELD_ERA)\n    1\n1 (FIELD_YEAR)\n    2013\n2 (FIELD_MONTH)\n    6\n3 (FIELD_WEEK_OF_YEAR)\n    27\n4 (FIELD_WEEK_OF_MONTH)\n    1\n5 (FIELD_DAY_OF_MONTH)\n    1\n6 (FIELD_DAY_OF_YEAR)\n    182\n7 (FIELD_DAY_OF_WEEK)\n    2\n8 (FIELD_DAY_OF_WEEK_IN_MONTH)\n    1\n9 (FIELD_AM_PM)\n    0\n10 (FIELD_HOUR)\n    4\n11 (FIELD_HOUR_OF_DAY)\n    4\n12 (FIELD_MINUTE)\n    44\n13 (FIELD_SECOND)\n    44\n14 (FIELD_MILLISECOND)\n    551\n15 (FIELD_ZONE_OFFSET)\n    0\n16 (FIELD_DST_OFFSET)\n    3600000\n17 (FIELD_YEAR_WOY)\n    2013\n18 (FIELD_DOW_LOCAL)\n    2\n19 (FIELD_EXTENDED_YEAR)\n    2013\n20 (FIELD_JULIAN_DAY)\n    2456475\n21 (FIELD_MILLISECONDS_IN_DAY)\n    17084551\n22 (FIELD_IS_LEAP_MONTH)\n    0"}],"intlcalendar::getactualmaximum":[{"title":"IntlCalendar::getActualMaximum()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\n\n$cal = IntlCalendar::fromDateTime('2013-02-15');\nvar_dump($cal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH)); \/\/28\n\n$cal->add(IntlCalendar::FIELD_EXTENDED_YEAR, -1);\nvar_dump($cal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH)); \/\/29","output":"int(28)\nint(29)"}],"intlcalendar::getavailablelocales":[{"title":"IntlCalendar::getAvailableLocales()()","source":"print_r(IntlCalendar::getAvailableLocales());","output":"Array\n(\n    [0] => af\n    [1] => af_NA\n    [2] => af_ZA\n    [3] => agq\n    [4] => agq_CM\n    [5] => ak\n    [6] => ak_GH\n    [7] => am\n    [8] => am_ET\n    [9] => ar\n    [10] => ar_001\n    [11] => ar_AE\n    [12] => ar_BH\n    [13] => ar_DJ\n    … output abbreviated …\n    [595] => zh_Hant_HK\n    [596] => zh_Hant_MO\n    [597] => zh_Hant_TW\n    [598] => zu\n    [599] => zu_ZA\n)"}],"intlcalendar::getdayofweektype":[{"title":"IntlCalendar::getDayOfWeekType()","source":"foreach (array('en_US', 'ar_SA') as $locale) {\n    echo \"Locale: \", Locale::getDisplayName($locale, \"en_US\"), \"\\n\";\n\n    $cal = IntlCalendar::createInstance('UTC', $locale);\n\n    for ($i = IntlCalendar::DOW_SUNDAY; $i <= IntlCalendar::DOW_SATURDAY; $i++) {\n        echo $i, \" \", $cal->getDayOfWeekType($i), \" \",\n                $cal->getDayOfWeekType($i) >= IntlCalendar::DOW_TYPE_WEEKEND_OFFSET\n                        ? $cal->getWeekendTransition($i)\n                        : '',\n                \"\\n\";\n    }\n    echo \"\\n\";\n}","output":"Locale: English (United States)\n1 3 86400000\n2 0 \n3 0 \n4 0 \n5 0 \n6 0 \n7 1 \n\nLocale: Arabic (Saudi Arabia)\n1 0 \n2 0 \n3 0 \n4 0 \n5 1 \n6 3 86400000\n7 0"}],"intlcalendar::geterrorcode":[{"title":"IntlCalendar::getErrorCode() and IntlCalendar::getErrorMessage()","source":"ini_set(\"intl.error_level\", E_WARNING);\nini_set(\"intl.default_locale\", \"nl\");\n\n$intlcal = new IntlGregorianCalendar(2012, 1, 29);\nvar_dump(\n    $intlcal->getErrorCode(),\n    $intlcal->getErrorMessage()\n);\n$intlcal->fieldDifference(-1e100, IntlCalendar::FIELD_SECOND);\n\nvar_dump(\n    $intlcal->getErrorCode(),\n    $intlcal->getErrorMessage()\n);","output":"int(0)\nstring(12) \"U_ZERO_ERROR\"\n\nWarning: IntlCalendar::fieldDifference(): intlcal_field_difference: Call to ICU method has failed in \/home\/glopes\/php\/ws\/example.php on line 10\nint(1)\nstring(81) \"intlcal_field_difference: Call to ICU method has failed: U_ILLEGAL_ARGUMENT_ERROR\""}],"intlcalendar::geterrormessage":[{"title":"IntlCalendar::getErrorMessage()","source":"$cal = IntlCalendar::createInstance('UTC', 'en_US');\nvar_dump($cal->getErrorMessage());\n\n$cal->getWeekendTransition(IntlCalendar::DOW_WEDNESDAY);\nvar_dump($cal->getErrorMessage());","output":"string(12) \"U_ZERO_ERROR\"\nstring(82) \"intlcal_get_weekend_transition: Error calling ICU method: U_ILLEGAL_ARGUMENT_ERROR\""}],"intlcalendar::getfirstdayofweek":[{"title":"IntlCalendar::getFirstDayOfWeek()","source":"ini_set('date.timezone', 'UTC');\n\n$cal1 = IntlCalendar::createInstance(NULL, 'es_ES');\nvar_dump($cal1->getFirstDayOfWeek()); \/\/ Monday\n$cal1->set(2013, 1 \/* February *\/, 3); \/\/ a Sunday\nvar_dump($cal1->get(IntlCalendar::FIELD_WEEK_OF_YEAR)); \/\/ 5\n\n$cal2 = IntlCalendar::createInstance(NULL, 'en_US');\nvar_dump($cal2->getFirstDayOfWeek()); \/\/ Sunday\n$cal2->set(2013, 1 \/* February *\/, 3); \/\/ a Sunday\nvar_dump($cal2->get(IntlCalendar::FIELD_WEEK_OF_YEAR)); \/\/ 6","output":"int(2)\nint(5)\nint(1)\nint(6)"}],"intlcalendar::getkeywordvaluesforlocale":[{"title":"IntlCalendar::getKeyworkValuesForLocale()","source":"print_r(\n        iterator_to_array(\n                IntlCalendar::getKeywordValuesForLocale(\n                        'calendar', 'fa_IR', true)));\nprint_r(\n        iterator_to_array(\n                IntlCalendar::getKeywordValuesForLocale(\n                        'calendar', 'fa_IR', false)));","output":"Array\n(\n    [0] => persian\n    [1] => gregorian\n    [2] => islamic\n    [3] => islamic-civil\n)\nArray\n(\n    [0] => persian\n    [1] => gregorian\n    [2] => islamic\n    [3] => islamic-civil\n    [4] => japanese\n    [5] => buddhist\n    [6] => roc\n    [7] => hebrew\n    [8] => chinese\n    [9] => indian\n    [10] => coptic\n    [11] => ethiopic\n    [12] => ethiopic-amete-alem\n)"}],"intlcalendar::getleastmaximum":[{"title":"Maxima examples","source":"ini_set('date.timezone', 'UTC');\nini_set('intl.default_locale', 'it_IT');\n\n$cal = new IntlGregorianCalendar(2013, 3 \/* April *\/, 6);\nvar_dump(\n    $cal->getLeastMaximum(IntlCalendar::FIELD_DAY_OF_MONTH),  \/\/ 28\n    $cal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH), \/\/ 30\n    $cal->getMaximum(IntlCalendar::FIELD_DAY_OF_MONTH)        \/\/ 31\n);","output":"int(28)\nint(30)\nint(31)"}],"intlcalendar::getlocale":[{"title":"IntlCalendar::getLocale()","source":"$cal = IntlCalendar::createInstance(IntlTimeZone::getGMT(), 'en_US_CALIFORNIA');\nvar_dump(\n    $cal->getLocale(Locale::ACTUAL_LOCALE),\n    $cal->getLocale(Locale::VALID_LOCALE)\n);","output":"string(2) \"en\"\nstring(5) \"en_US\""}],"intlcalendar::getminimaldaysinfirstweek":[{"title":"IntlCalendar::getMinimalDaysInFirstWeek()","source":"ini_set('date.timezone', 'UTC');\nini_set('intl.default_locale', 'en_US');\n\n$cal = new IntlGregorianCalendar(2013, 0 \/* January *\/, 2);\nvar_dump(IntlDateFormatter::formatObject($cal, 'cccc')); \/\/ Wednesday\n\nvar_dump($cal->getMinimalDaysInFirstWeek(), \/\/ 1\n$cal->getFirstDayofWeek()); \/\/ 1 (Sunday)\n\n\/\/ Week 1 of 2013\nvar_dump(IntlDateFormatter::formatObject($cal, \"'Week 'w' of 'Y\"));\n\n$cal->setMinimalDaysInFirstWeek(4);\n\/\/ Still Week 1 of 2013 (1st week has 5 days in the new year)\nvar_dump(IntlDateFormatter::formatObject($cal, \"'Week 'w' of 'Y\"));\n\n$cal->setMinimalDaysInFirstWeek(6);\n\/\/ Week 53 of 2012\nvar_dump(IntlDateFormatter::formatObject($cal, \"'Week 'w' of 'Y\"));","output":"string(9) \"Wednesday\"\nint(1)\nint(1)\nstring(14) \"Week 1 of 2013\"\nstring(14) \"Week 1 of 2013\"\nstring(15) \"Week 53 of 2012\""}],"intlcalendar::getnow":[{"title":"IntlCalendar::getNow()","source":"$formatter = IntlDateFormatter::create('es_ES',\n        IntlDateFormatter::FULL,\n        IntlDateFormatter::FULL,\n        'Europe\/Madrid');\n\n$val = IntlCalendar::getNow();\n\nvar_dump($val);\necho $formatter->format(IntlCalendar::getNow() \/ 1000.), \"\\n\";","output":"float(1371425814666)\nlunes, 17 de junio de 2013 01:36:54 Hora de verano de Europa central"}],"intlcalendar::getrepeatedwalltimeoption":[{"title":"IntlCalendar::getRepeatedWallTimeOption()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'en_US');\nini_set('intl.error_level', E_WARNING);\n\n\/\/On October 27th at 0200, the clock goes back 1 hour and from GMT+01 to GMT+00\n$cal = new IntlGregorianCalendar(2013, 9 \/* October *\/, 27, 1, 30);\n\nvar_dump($cal->getRepeatedWalltimeOption()); \/\/ 0 WALLTIME_LAST\n\n$formatter = IntlDateFormatter::create(\n    NULL,\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'UTC'\n);\nvar_dump($formatter->format($cal->getTime() \/ 1000.));\n\n$cal->setRepeatedWalltimeOption(IntlCalendar::WALLTIME_FIRST);\nvar_dump($cal->getRepeatedWalltimeOption()); \/\/ 1 WALLTIME_FIRST\n$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1);\n\nvar_dump($formatter->format($cal->getTime() \/ 1000.));","output":"int(0)\nstring(42) \"Sunday, October 27, 2013 at 1:30:00 AM GMT\"\nint(1)\nstring(43) \"Sunday, October 27, 2013 at 12:30:00 AM GMT\""}],"intlcalendar::getskippedwalltimeoption":[{"title":"IntlCalendar::getSkippedWallTimeOption()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'en_US');\nini_set('intl.error_level', E_WARNING);\n\n\/\/On March 31st at 0100, the clock goes forward 1 hour and from GMT+00 to GMT+01\n$cal = new IntlGregorianCalendar(2013, 2 \/* March *\/, 31, 1, 30);\n\nvar_dump(\n    $cal->isLenient(),               \/\/ true\n    $cal->getSkippedWalltimeOption() \/\/ 0 WALLTIME_LAST\n);\n\n$formatter = IntlDateFormatter::create(\n    NULL,\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'UTC'\n);\nvar_dump($formatter->format($cal->getTime() \/ 1000));\n\n$cal->setSkippedWallTimeOption(IntlCalendar::WALLTIME_FIRST);\nvar_dump($cal->getSkippedWalltimeOption()); \/\/ 1 WALLTIME_FIRST\n$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1);\n\nvar_dump($formatter->format($cal->getTime() \/ 1000));\n\n$cal->setSkippedWallTimeOption(IntlCalendar::WALLTIME_NEXT_VALID);\nvar_dump($cal->getSkippedWalltimeOption()); \/\/ 2 WALLTIME_NEXT_VALID\n$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1);\n\nvar_dump($formatter->format($cal->getTime() \/ 1000));","output":"bool(true)\nint(0)\nstring(40) \"Sunday, March 31, 2013 at 1:30:00 AM GMT\"\nint(1)\nstring(41) \"Sunday, March 31, 2013 at 12:30:00 AM GMT\"\nint(2)\nstring(40) \"Sunday, March 31, 2013 at 1:00:00 AM GMT\""}],"intlcalendar::gettime":[{"title":"IntlCalendar::getTime()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'en_US');\n\n$cal = new IntlGregorianCalendar(2013, 4 \/* May *\/, 1, 0, 0, 0);\n$time = $cal->getTime();\nvar_dump($time, $time \/ 1000 == strtotime('2013-05-01 00:00:00')); \/\/true","output":"float(1367362800000)\nbool(true)"}],"intlcalendar::gettimezone":[{"title":"IntlCalendar::getTimeZone()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'en_US');\n\n$cal = IntlCalendar::createInstance();\nprint_r($cal->getTimeZone());\n\n$cal->setTimeZone('UTC');\nprint_r($cal->getTimeZone());\n\n$cal = IntlCalendar::fromDateTime('2012-01-01 00:00:00 GMT+03:33');\nprint_r($cal->getTimeZone());","output":"IntlTimeZone Object\n(\n    [valid] => 1\n    [id] => Europe\/Lisbon\n    [rawOffset] => 0\n    [currentOffset] => 3600000\n)\nIntlTimeZone Object\n(\n    [valid] => 1\n    [id] => UTC\n    [rawOffset] => 0\n    [currentOffset] => 0\n)\nIntlTimeZone Object\n(\n    [valid] => 1\n    [id] => GMT+03:33\n    [rawOffset] => 12780000\n    [currentOffset] => 12780000\n)"}],"intlcalendar::gettype":[{"title":"IntlCalendar::getType()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'en_US');\n\n$cal = IntlCalendar::createInstance(NULL, '@calendar=ethiopic-amete-alem');\nvar_dump($cal->getType());\n\n$cal = new IntlGregorianCalendar();\nvar_dump($cal->getType());","output":"string(19) \"ethiopic-amete-alem\"\nstring(9) \"gregorian\""}],"intlcalendar::indaylighttime":[{"title":"IntlCalendar::inDaylightTime()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'pt_PT');\n\n$cal = new IntlGregorianCalendar(2013, 6 \/* July *\/, 1, 4, 56, 31);\nvar_dump($cal->inDaylightTime()); \/\/ true\n$cal->set(IntlCalendar::FIELD_MONTH, 11 \/* December *\/);\nvar_dump($cal->inDaylightTime()); \/\/ false\n\n\/\/DST end transition on 2013-10-27 at 0200 (wall time back 1 hour)\n$cal = new IntlGregorianCalendar(2013, 9 \/* October *\/, 27, 1, 30, 0);\n\nvar_dump($cal->inDaylightTime()); \/\/ false (default WALLTIME_LAST)\n\n$cal->setRepeatedWallTimeOption(IntlCalendar::WALLTIME_FIRST);\n$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1); \/\/ force time recalculation\nvar_dump($cal->inDaylightTime()); \/\/ true","output":null}],"intlcalendar::isequivalentto":[{"title":"IntlCalendar::isEquivalentTo()","source":"$cal1 = IntlCalendar::createInstance('Europe\/Lisbon', 'pt_PT');\n$cal2 = IntlCalendar::createInstance('Europe\/Lisbon', 'es_ES');\n$cal2->clear();\n\nvar_dump($cal1->isEquivalentTo($cal2)); \/\/ true\n\n$cal3 = IntlCalendar::createInstance('Europe\/Lisbon', 'en_US');\nvar_dump($cal1->isEquivalentTo($cal3)); \/\/ false\nvar_dump($cal1->getFirstDayOfWeek(),    \/\/ 2 (Monday)\n$cal3->getFirstDayOfWeek());            \/\/ 1 (Sunday)","output":"bool(true)\nbool(false)\nint(2)\nint(1)"}],"intlcalendar::islenient":[{"title":"IntlCalendar::isLenient()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'pt_PT');\nini_set('intl.use_exceptions', '1');\n\n$cal = new IntlGregorianCalendar(2013, 6 \/* July *\/, 1);\nvar_dump(IntlDateFormatter::formatObject($cal), \/\/ 01\/07\/2013, 00:00:00\n$cal->isLenient()); \/\/ true\n\n$cal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 33);\nvar_dump(IntlDateFormatter::formatObject($cal)); \/\/ 02\/08\/2013, 00:00:00\n\n$cal->setLenient(false);\nvar_dump($cal->isLenient()); \/\/ false\n$cal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 33);\nvar_dump(IntlDateFormatter::formatObject($cal)); \/\/ error","output":"string(20) \"01\/07\/2013, 00:00:00\"\nbool(true)\nstring(20) \"02\/08\/2013, 00:00:00\"\nbool(false)\n\nFatal error: Uncaught exception 'IntlException' with message 'datefmt_format_object: error obtaining instant from IntlCalendar' in \/home\/foobar\/example.php:16\nStack trace:\n#0 \/home\/foobar\/example.php(16): IntlDateFormatter::formatObject(Object(IntlGregorianCalendar))\n#1 {main}\n  thrown in \/home\/foobar\/example.php on line 16"}],"intlcalendar::isweekend":[{"title":"IntlCalendar::isWeekend()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\n\n$cal = new IntlGregorianCalendar(NULL, 'en_US');\n$cal->set(2013, 6 \/* July *\/, 7); \/\/ a Sunday \n\nvar_dump($cal->isWeekend()); \/\/ true\nvar_dump($cal->isWeekend(strtotime('2013-07-01 00:00:00'))); \/\/ false, Monday\n\n$cal = new IntlGregorianCalendar(NULL, 'ar_SA');\n$cal->set(2013, 6 \/* July *\/, 7); \/\/ a Sunday \nvar_dump($cal->isWeekend()); \/\/ false, Sunday not in weekend in this calendar","output":null}],"intlcalendar::roll":[{"title":"IntlCalendar::roll()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'pt_PT');\n\n$cal = new IntlGregorianCalendar(2013, 5 \/* June *\/, 30);\n\n$cal->add(IntlCalendar::FIELD_DAY_OF_MONTH, 1);\nvar_dump(IntlDateFormatter::formatObject($cal)); \/\/ \"01\/07\/2013, 00:00:00\"\n\n$cal->set(2013, 5 \/* June *\/, 30);\n$cal->roll(IntlCalendar::FIELD_DAY_OF_MONTH, true); \/\/ roll up, same as rolling +1\nvar_dump(IntlDateFormatter::formatObject($cal)); \/\/ \"01\/06\/2013, 00:00:00\"","output":"string(20) \"01\/07\/2013, 00:00:00\"\nstring(20) \"01\/06\/2013, 00:00:00\""}],"intlcalendar::setfirstdayofweek":[{"title":"IntlCalendar::setFirstDayOfWeek()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'es_ES');\n\n$cal = IntlCalendar::createInstance();\n$cal->set(2013, 5 \/* June *\/, 30); \/\/ A Sunday\n\nvar_dump($cal->getFirstDayOfWeek()); \/\/ 2 (Monday)\n\necho IntlDateFormatter::formatObject($cal, <<<EOD\n'local day of week: 'cc'\nweek of month    : 'W'\nweek of year     : 'ww\nEOD\n), \"\\n\";\n\n$cal->setFirstDayOfWeek(IntlCalendar::DOW_SUNDAY);\n\necho IntlDateFormatter::formatObject($cal, <<<EOD\n'local day of week: 'cc'\nweek of month    : 'W'\nweek of year     : 'ww\nEOD\n), \"\\n\";","output":"int(2)\nlocal day of week: 7\nweek of month    : 4\nweek of year     : 26\nlocal day of week: 1\nweek of month    : 5\nweek of year     : 27"}],"intlcalendar::settime":[{"title":"IntlCalendar::setTime()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'fr_FR');\n\n$cal = new IntlGregorianCalendar(2013, 5 \/* May *\/, 1, 12, 0, 0);\n\necho IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), \"\\n\";\n\n\/* In Europe\/Lisbon, on 2013-10-27 at 0200, the clock goes back one hour and\n   the timezone from UTC+01 to UTC+00 *\/\n\n$cal->setTime(strtotime('2013-10-27 00:30:00 UTC') * 1000.);\n\necho IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), \"\\n\";\n\n$cal->setTime(strtotime('2013-10-27 01:30:00 UTC') * 1000.);\n\necho IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), \"\\n\";","output":"samedi 1 juin 2013 12:00:00 heure avancée d’Europe de l’Ouest\ndimanche 27 octobre 2013 01:30:00 heure avancée d’Europe de l’Ouest\ndimanche 27 octobre 2013 01:30:00 heure normale d’Europe de l’Ouest"}],"intlcalendar::settimezone":[{"title":"IntlCalendar::setTimeZone()","source":"ini_set('date.timezone', 'Europe\/Lisbon');\nini_set('intl.default_locale', 'es_ES');\n\n$cal = new IntlGregorianCalendar(2013, 5 \/* May *\/, 1, 12, 0, 0);\n\necho IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), \"\\n\";\necho \"(instant {$cal->getTime()})\\n\";\n\n$cal->setTimeZone(IntlTimeZone::getGMT());\necho IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), \"\\n\";\necho \"(instant {$cal->getTime()})\\n\";\n\n$cal->setTimeZone('GMT+03:33');\necho IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), \"\\n\";\necho \"(instant {$cal->getTime()})\\n\";","output":"sábado, 1 de junio de 2013 12:00:00 Hora de verano de Europa occidental\n(instant 1370084400000)\nsábado, 1 de junio de 2013 11:00:00 GMT\n(instant 1370084400000)\nsábado, 1 de junio de 2013 14:33:00 GMT+03:33\n(instant 1370084400000)"}],"intlcalendar::todatetime":[{"title":"IntlCalendar::toDateTime()","source":"ini_set('date.timezone', 'UTC');\nini_set('intl.default_locale', 'pt_PT');\n\n$cal = IntlCalendar::createInstance('Europe\/Lisbon'); \/\/current time\n\n$dt = $cal->toDateTime();\nprint_r($dt);","output":"DateTime Object\n(\n    [date] => 2013-07-02 00:29:13\n    [timezone_type] => 3\n    [timezone] => Europe\/Lisbon\n)"}],"intlchar::charage":[{"title":"Testing different code points","source":"var_dump(IntlChar::charage(\"\\u{2603}\"));\nvar_dump(IntlChar::charage(\"\\u{1F576}\"));","output":"array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(1)\n  [2]=>\n  int(0)\n  [3]=>\n  int(0)\n}\narray(4) {\n  [0]=>\n  int(7)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n  [3]=>\n  int(0)\n}"}],"intlchar::chardigitvalue":[{"title":"Testing different code points","source":"var_dump(IntlChar::charDigitValue(\"1\"));\nvar_dump(IntlChar::charDigitValue(\"\\u{0662}\"));\nvar_dump(IntlChar::charDigitValue(\"\\u{0E53}\"));","output":"int(1)\nint(2)\nint(3)"}],"intlchar::chardirection":[{"title":"Testing different code points","source":"var_dump(IntlChar::charDirection(\"A\") === IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT);\nvar_dump(IntlChar::charDirection(\"\\u{05E9}\") === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);\nvar_dump(IntlChar::charDirection(\"+\") === IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR);\nvar_dump(IntlChar::charDirection(\".\") === IntlChar::CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR);","output":"bool(true)\nbool(true)\nbool(true)\nbool(true)"}],"intlchar::charfromname":[{"title":"Testing different code points","source":"var_dump(IntlChar::charFromName(\"LATIN CAPITAL LETTER A\"));\nvar_dump(IntlChar::charFromName(\"SNOWMAN\"));\nvar_dump(IntlChar::charFromName(\"RECYCLING SYMBOL FOR TYPE-1 PLASTICS\"));\nvar_dump(IntlChar::charFromName(\"A RANDOM STRING WHICH DOESN'T CORRESPOND TO ANY UNICODE CHARACTER\"));","output":"int(65)\nint(9731)\nint(9843)\nbool(false)"}],"intlchar::charmirror":[{"title":"Testing different code points","source":"var_dump(IntlChar::charMirror(\"A\"));\nvar_dump(IntlChar::charMirror(\"<\"));\nvar_dump(IntlChar::charMirror(\"(\"));","output":"string(1) \"A\"\nstring(1) \">\"\nstring(2) \")\""}],"intlchar::charname":[{"title":"Testing different code points","source":"var_dump(IntlChar::charName(\".\"));\nvar_dump(IntlChar::charName(\".\", IntlChar::UNICODE_CHAR_NAME));\nvar_dump(IntlChar::charName(\"\\u{2603}\"));\nvar_dump(IntlChar::charName(\"\\u{0000}\"));","output":"string(9) \"FULL STOP\"\nstring(9) \"FULL STOP\"\nstring(7) \"SNOWMAN\"\nstring(0) \"\""}],"intlchar::chartype":[{"title":"Testing different code points","source":"var_dump(IntlChar::charType(\"A\") === IntlChar::CHAR_CATEGORY_UPPERCASE_LETTER);\nvar_dump(IntlChar::charType(\".\") === IntlChar::CHAR_CATEGORY_OTHER_PUNCTUATION);\nvar_dump(IntlChar::charType(\"\\t\") === IntlChar::CHAR_CATEGORY_CONTROL_CHAR);\nvar_dump(IntlChar::charType(\"\\u{2603}\") === IntlChar::CHAR_CATEGORY_OTHER_SYMBOL);","output":"bool(true)\nbool(true)\nbool(true)\nbool(true)"}],"intlchar::chr":[{"title":"Testing different code points","source":"$values = [\"A\", 63, 123, 9731];\nforeach ($values as $value) {\n    var_dump(IntlChar::chr($value));\n}","output":"string(1) \"A\"\nstring(1) \"A\"\nstring(1) \"{\"\nstring(3) \"☃\""}],"intlchar::digit":[{"title":"Testing different code points","source":"var_dump(IntlChar::digit(\"0\"));\nvar_dump(IntlChar::digit(\"3\"));\nvar_dump(IntlChar::digit(\"A\"));\nvar_dump(IntlChar::digit(\"A\", 16));","output":"int(0)\nint(3)\nbool(false)\nint(10)"}],"intlchar::enumcharnames":[{"title":"Enumerating over a sample range of code points","source":"IntlChar::enumCharNames(0x2600, 0x2610, function($codepoint, $nameChoice, $name) {\n    printf(\"U+%04x %s\\n\", $codepoint, $name);\n});","output":"U+2600 BLACK SUN WITH RAYS\nU+2601 CLOUD\nU+2602 UMBRELLA\nU+2603 SNOWMAN\nU+2604 COMET\nU+2605 BLACK STAR\nU+2606 WHITE STAR\nU+2607 LIGHTNING\nU+2608 THUNDERSTORM\nU+2609 SUN\nU+260a ASCENDING NODE\nU+260b DESCENDING NODE\nU+260c CONJUNCTION\nU+260d OPPOSITION\nU+260e BLACK TELEPHONE\nU+260f WHITE TELEPHONE"}],"intlchar::enumchartypes":[{"title":"Enumerating over a sample range of code points","source":"IntlChar::enumCharTypes(function($start, $end, $type) {\n    printf(\"U+%04x through U+%04x are in category %d\\n\", $start, $end, $type);\n});","output":"U+0000 through U+0020 are in category 15\nU+0020 through U+0021 are in category 12\nU+0021 through U+0024 are in category 23\nU+0024 through U+0025 are in category 25\nU+0025 through U+0028 are in category 23\nU+0028 through U+0029 are in category 20\nU+0029 through U+002a are in category 21\nU+002a through U+002b are in category 23\nU+002b through U+002c are in category 24\nU+002c through U+002d are in category 23\nU+002d through U+002e are in category 19\nU+002e through U+0030 are in category 23\nU+0030 through U+003a are in category 9\n..."}],"intlchar::fordigit":[{"title":"Testing different code points","source":"var_dump(IntlChar::forDigit(0));\nvar_dump(IntlChar::forDigit(3));\nvar_dump(IntlChar::forDigit(3, 10));\nvar_dump(IntlChar::forDigit(10));\nvar_dump(IntlChar::forDigit(10, 16));","output":"int(48)\nint(51)\nint(51)\nint(0)\nint(97)"}],"intlchar::getbidipairedbracket":[{"title":"Testing different code points","source":"var_dump(IntlChar::getBidiPairedBracket(91));\nvar_dump(IntlChar::getBidiPairedBracket('['));","output":"int(93)\nstring(1) \"]\""}],"intlchar::getblockcode":[{"title":"Testing different code points","source":"var_dump(IntlChar::getBlockCode(\"A\") === IntlChar::BLOCK_CODE_BASIC_LATIN);\nvar_dump(IntlChar::getBlockCode(\"Φ\") === IntlChar::BLOCK_CODE_GREEK);\nvar_dump(IntlChar::getBlockCode(\"\\u{2603}\") === IntlChar::BLOCK_CODE_MISCELLANEOUS_SYMBOLS);","output":"bool(true)\nbool(true)\nbool(true)"}],"intlchar::getcombiningclass":[{"title":"Testing different code points","source":"var_dump(IntlChar::getCombiningClass(\"A\"));\nvar_dump(IntlChar::getCombiningClass(\"\\u{0334}\"));\nvar_dump(IntlChar::getCombiningClass(\"\\u{0358}\"));","output":"int(0)\nint(1)\nint(232)"}],"intlchar::getfc_nfkc_closure":[{"title":"Testing different code points","source":"var_dump(IntlChar::getFC_NFKC_Closure(\"\\u{2121}\"));\nvar_dump(IntlChar::getFC_NFKC_Closure(\"\\u{1D2D}\"));","output":"string(3) \"tel\"\nstring(2) \"æ\""}],"intlchar::getintpropertymaxvalue":[{"title":"Testing different properties","source":"var_dump(IntlChar::getIntPropertyMaxValue(IntlChar::PROPERTY_BIDI_CLASS));\nvar_dump(IntlChar::getIntPropertyMaxValue(IntlChar::PROPERTY_SCRIPT));\nvar_dump(IntlChar::getIntPropertyMaxValue(IntlChar::PROPERTY_IDEOGRAPHIC));\nvar_dump(IntlChar::getIntPropertyMaxValue(999999999)); \/\/ Some made-up value","output":"int(22)\nint(166)\nint(1)\nint(-1)"}],"intlchar::getintpropertyminvalue":[{"title":"Testing different properties","source":"var_dump(IntlChar::getIntPropertyMinValue(IntlChar::PROPERTY_BIDI_CLASS));\nvar_dump(IntlChar::getIntPropertyMinValue(IntlChar::PROPERTY_SCRIPT));\nvar_dump(IntlChar::getIntPropertyMinValue(IntlChar::PROPERTY_IDEOGRAPHIC));\nvar_dump(IntlChar::getIntPropertyMinValue(999999999)); \/\/ Some made-up value","output":"int(0)\nint(0)\nint(0)\nint(0)"}],"intlchar::getintpropertyvalue":[{"title":"Testing different properties","source":"var_dump(IntlChar::getIntPropertyValue(\"A\", IntlChar::PROPERTY_ALPHABETIC) === 1);\nvar_dump(IntlChar::getIntPropertyValue(\"[\", IntlChar::PROPERTY_BIDI_MIRRORED) === 1);\nvar_dump(IntlChar::getIntPropertyValue(\"Φ\", IntlChar::PROPERTY_BLOCK) === IntlChar::BLOCK_CODE_GREEK);","output":"bool(true)\nbool(true)\nbool(true)"}],"intlchar::getnumericvalue":[{"title":"Testing different code points","source":"var_dump(IntlChar::getNumericValue(\"4\"));\nvar_dump(IntlChar::getNumericValue(\"x\"));\nvar_dump(IntlChar::getNumericValue(\"\\u{216C}\"));","output":"float(4)\nfloat(-123456789)\nfloat(50)"}],"intlchar::getpropertyenum":[{"title":"Testing different properties","source":"var_dump(IntlChar::getPropertyEnum('Bidi_Class') === IntlChar::PROPERTY_BIDI_CLASS);\nvar_dump(IntlChar::getPropertyEnum('script') === IntlChar::PROPERTY_SCRIPT);\nvar_dump(IntlChar::getPropertyEnum('IDEOGRAPHIC') === IntlChar::PROPERTY_IDEOGRAPHIC);\nvar_dump(IntlChar::getPropertyEnum('Some made-up string') === IntlChar::PROPERTY_INVALID_CODE);","output":"bool(true)\nbool(true)\nbool(true)\nbool(true)"}],"intlchar::getpropertyname":[{"title":"Testing different properties","source":"var_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS));\nvar_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS, IntlChar::SHORT_PROPERTY_NAME));\nvar_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS, IntlChar::LONG_PROPERTY_NAME));\nvar_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS, IntlChar::LONG_PROPERTY_NAME + 1));","output":"string(10) \"Bidi_Class\"\nstring(2) \"bc\"\nstring(10) \"Bidi_Class\"\nbool(false)"}],"intlchar::getpropertyvalueenum":[{"title":"Testing different properties","source":"var_dump(IntlChar::getPropertyValueEnum(IntlChar::PROPERTY_BLOCK, 'greek') === IntlChar::BLOCK_CODE_GREEK);\nvar_dump(IntlChar::getPropertyValueEnum(IntlChar::PROPERTY_BIDI_CLASS, 'RIGHT_TO_LEFT') === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);\nvar_dump(IntlChar::getPropertyValueEnum(IntlChar::PROPERTY_BIDI_CLASS, 'some made-up string') === IntlChar::PROPERTY_INVALID_CODE);\nvar_dump(IntlChar::getPropertyValueEnum(123456789, 'RIGHT_TO_LEFT') === IntlChar::PROPERTY_INVALID_CODE);","output":"bool(true)\nbool(true)\nbool(true)\nbool(true)"}],"intlchar::getpropertyvaluename":[{"title":"Testing different properties","source":"var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK));\nvar_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::SHORT_PROPERTY_NAME));\nvar_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::LONG_PROPERTY_NAME));\nvar_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::LONG_PROPERTY_NAME + 1));","output":"string(16) \"Greek_And_Coptic\"\nstring(5) \"Greek\"\nstring(16) \"Greek_And_Coptic\"\nbool(false)"}],"intlchar::getunicodeversion":[{"title":"Testing different properties","source":"var_dump(IntlChar::getUnicodeVersion());","output":"array(4) {\n  [0]=>\n  int(7)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n  [3]=>\n  int(0)\n}"}],"intlchar::hasbinaryproperty":[{"title":"Testing different properties","source":"var_dump(IntlChar::hasBinaryProperty(\"A\", IntlChar::PROPERTY_ALPHABETIC));\nvar_dump(IntlChar::hasBinaryProperty(\"A\", IntlChar::PROPERTY_CASE_SENSITIVE));\nvar_dump(IntlChar::hasBinaryProperty(\"A\", IntlChar::PROPERTY_BIDI_MIRRORED));\nvar_dump(IntlChar::hasBinaryProperty(\"[\", IntlChar::PROPERTY_ALPHABETIC));\nvar_dump(IntlChar::hasBinaryProperty(\"[\", IntlChar::PROPERTY_CASE_SENSITIVE));\nvar_dump(IntlChar::hasBinaryProperty(\"[\", IntlChar::PROPERTY_BIDI_MIRRORED));","output":"bool(true)\nbool(true)\nbool(false)\nbool(false)\nbool(false)\nbool(true)"}],"intlchar::isalnum":[{"title":"Testing different code points","source":"var_dump(IntlChar::isalnum(\"A\"));\nvar_dump(IntlChar::isalnum(\"1\"));\nvar_dump(IntlChar::isalnum(\"\\u{2603}\"));","output":"bool(true)\nbool(true)\nbool(false)"}],"intlchar::isalpha":[{"title":"Testing different code points","source":"var_dump(IntlChar::isalpha(\"A\"));\nvar_dump(IntlChar::isalpha(\"1\"));\nvar_dump(IntlChar::isalpha(\"\\u{2603}\"));","output":"bool(true)\nbool(false)\nbool(false)"}],"intlchar::isbase":[{"title":"Testing different code points","source":"var_dump(IntlChar::isbase(\"A\"));\nvar_dump(IntlChar::isbase(\"1\"));\nvar_dump(IntlChar::isbase(\"\\u{2603}\"));","output":"bool(true)\nbool(true)\nbool(false)"}],"intlchar::isblank":[{"title":"Testing different code points","source":"var_dump(IntlChar::isblank(\"A\"));\nvar_dump(IntlChar::isblank(\" \"));\nvar_dump(IntlChar::isblank(\"\\t\"));","output":"bool(false)\nbool(true)\nbool(true)"}],"intlchar::iscntrl":[{"title":"Testing different code points","source":"var_dump(IntlChar::iscntrl(\"A\"));\nvar_dump(IntlChar::iscntrl(\" \"));\nvar_dump(IntlChar::iscntrl(\"\\n\"));\nvar_dump(IntlChar::iscntrl(\"\\u{200e}\"));","output":"bool(false)\nbool(false)\nbool(true)\nbool(true)"}],"intlchar::isdefined":[{"title":"Testing different code points","source":"var_dump(IntlChar::isdefined(\"A\"));\nvar_dump(IntlChar::isdefined(\" \"));\nvar_dump(IntlChar::isdefined(\"\\u{FDD0}\"));","output":"bool(true)\nbool(true)\nbool(false)"}],"intlchar::isdigit":[{"title":"Testing different code points","source":"var_dump(IntlChar::isdigit(\"A\"));\nvar_dump(IntlChar::isdigit(\"1\"));\nvar_dump(IntlChar::isdigit(\"\\t\"));","output":"bool(false)\nbool(true)\nbool(false)"}],"intlchar::isgraph":[{"title":"Testing different code points","source":"var_dump(IntlChar::isgraph(\"A\"));\nvar_dump(IntlChar::isgraph(\"1\"));\nvar_dump(IntlChar::isgraph(\"\\u{2603}\"));\nvar_dump(IntlChar::isgraph(\"\\n\"));","output":"bool(true)\nbool(true)\nbool(true)\nbool(false)"}],"intlchar::isidignorable":[{"title":"Testing different code points","source":"var_dump(IntlChar::isIDIgnorable(\"A\"));\nvar_dump(IntlChar::isIDIgnorable(\" \"));\nvar_dump(IntlChar::isIDIgnorable(\"\\u{007F}\"));","output":"bool(false)\nbool(false)\nbool(true)"}],"intlchar::isidpart":[{"title":"Testing different code points","source":"var_dump(IntlChar::isIDPart(\"A\"));\nvar_dump(IntlChar::isIDPart(\"$\"));\nvar_dump(IntlChar::isIDPart(\"\\n\"));\nvar_dump(IntlChar::isIDPart(\"\\u{2603}\"));","output":"bool(true)\nbool(false)\nbool(false)\nbool(false)"}],"intlchar::isidstart":[{"title":"Testing different code points","source":"var_dump(IntlChar::isIDStart(\"A\"));\nvar_dump(IntlChar::isIDStart(\"$\"));\nvar_dump(IntlChar::isIDStart(\"\\n\"));\nvar_dump(IntlChar::isIDStart(\"\\u{2603}\"));","output":"bool(true)\nbool(false)\nbool(false)\nbool(false)"}],"intlchar::isisocontrol":[{"title":"Testing different code points","source":"var_dump(IntlChar::isISOControl(\" \"));\nvar_dump(IntlChar::isISOControl(\"\\n\"));\nvar_dump(IntlChar::isISOControl(\"\\u{200e}\"));","output":"bool(false)\nbool(true)\nbool(false)"}],"intlchar::isjavaidpart":[{"title":"Testing different code points","source":"var_dump(IntlChar::isJavaIDPart(\"A\"));\nvar_dump(IntlChar::isJavaIDPart(\"$\"));\nvar_dump(IntlChar::isJavaIDPart(\"\\n\"));\nvar_dump(IntlChar::isJavaIDPart(\"\\u{2603}\"));","output":"bool(true)\nbool(true)\nbool(false)\nbool(false)"}],"intlchar::isjavaidstart":[{"title":"Testing different code points","source":"var_dump(IntlChar::isJavaIDStart(\"A\"));\nvar_dump(IntlChar::isJavaIDStart(\"$\"));\nvar_dump(IntlChar::isJavaIDStart(\"\\n\"));\nvar_dump(IntlChar::isJavaIDStart(\"\\u{2603}\"));","output":"bool(true)\nbool(true)\nbool(false)\nbool(false)"}],"intlchar::isjavaspacechar":[{"title":"Testing different code points","source":"var_dump(IntlChar::isJavaSpaceChar(\"A\"));\nvar_dump(IntlChar::isJavaSpaceChar(\" \"));\nvar_dump(IntlChar::isJavaSpaceChar(\"\\n\"));\nvar_dump(IntlChar::isJavaSpaceChar(\"\\t\"));\nvar_dump(IntlChar::isJavaSpaceChar(\"\\u{00A0}\"));","output":"bool(false)\nbool(true)\nbool(false)\nbool(false)\nbool(true)"}],"intlchar::islower":[{"title":"Testing different code points","source":"var_dump(IntlChar::islower(\"A\"));\nvar_dump(IntlChar::islower(\"a\"));\nvar_dump(IntlChar::islower(\"Φ\"));\nvar_dump(IntlChar::islower(\"φ\"));\nvar_dump(IntlChar::islower(\"1\"));","output":"bool(false)\nbool(true)\nbool(false)\nbool(true)\nbool(false)"}],"intlchar::ismirrored":[{"title":"Testing different code points","source":"var_dump(IntlChar::isMirrored(\"A\"));\nvar_dump(IntlChar::isMirrored(\"<\"));\nvar_dump(IntlChar::isMirrored(\"(\"));","output":"bool(false)\nbool(true)\nbool(true)"}],"intlchar::isprint":[{"title":"Testing different code points","source":"var_dump(IntlChar::isprint(\"A\"));\nvar_dump(IntlChar::isprint(\" \"));\nvar_dump(IntlChar::isprint(\"\\n\"));\nvar_dump(IntlChar::isprint(\"\\u{200e}\"));","output":"bool(true)\nbool(true)\nbool(false)\nbool(false)"}],"intlchar::ispunct":[{"title":"Testing different code points","source":"var_dump(IntlChar::ispunct(\".\"));\nvar_dump(IntlChar::ispunct(\",\"));\nvar_dump(IntlChar::ispunct(\"\\n\"));\nvar_dump(IntlChar::ispunct(\"$\"));","output":"bool(true)\nbool(true)\nbool(false)\nbool(false)"}],"intlchar::isspace":[{"title":"Testing different code points","source":"var_dump(IntlChar::isspace(\"A\"));\nvar_dump(IntlChar::isspace(\" \"));\nvar_dump(IntlChar::isspace(\"\\n\"));\nvar_dump(IntlChar::isspace(\"\\t\"));\nvar_dump(IntlChar::isspace(\"\\u{00A0}\"));","output":"bool(false)\nbool(true)\nbool(true)\nbool(true)\nbool(true)"}],"intlchar::istitle":[{"title":"Testing different code points","source":"var_dump(IntlChar::istitle(\"A\"));\nvar_dump(IntlChar::istitle(\"a\"));\nvar_dump(IntlChar::istitle(\"Φ\"));\nvar_dump(IntlChar::istitle(\"φ\"));\nvar_dump(IntlChar::istitle(\"1\"));","output":"bool(false)\nbool(true)\nbool(false)\nbool(true)\nbool(false)"}],"intlchar::isualphabetic":[{"title":"Testing different code points","source":"var_dump(IntlChar::isUAlphabetic(\"A\"));\nvar_dump(IntlChar::isUAlphabetic(\"1\"));\nvar_dump(IntlChar::isUAlphabetic(\"\\u{2603}\"));","output":"bool(true)\nbool(false)\nbool(false)"}],"intlchar::isulowercase":[{"title":"Testing different code points","source":"var_dump(IntlChar::isULowercase(\"A\"));\nvar_dump(IntlChar::isULowercase(\"a\"));\nvar_dump(IntlChar::isULowercase(\"Φ\"));\nvar_dump(IntlChar::isULowercase(\"φ\"));\nvar_dump(IntlChar::isULowercase(\"1\"));","output":"bool(false)\nbool(true)\nbool(false)\nbool(true)\nbool(false)"}],"intlchar::isupper":[{"title":"Testing different code points","source":"var_dump(IntlChar::isupper(\"A\"));\nvar_dump(IntlChar::isupper(\"a\"));\nvar_dump(IntlChar::isupper(\"Φ\"));\nvar_dump(IntlChar::isupper(\"φ\"));\nvar_dump(IntlChar::isupper(\"1\"));","output":"bool(true)\nbool(false)\nbool(true)\nbool(false)\nbool(false)"}],"intlchar::isuuppercase":[{"title":"Testing different code points","source":"var_dump(IntlChar::isUUppercase(\"A\"));\nvar_dump(IntlChar::isUUppercase(\"a\"));\nvar_dump(IntlChar::isUUppercase(\"Φ\"));\nvar_dump(IntlChar::isUUppercase(\"φ\"));\nvar_dump(IntlChar::isUUppercase(\"1\"));","output":"bool(true)\nbool(false)\nbool(true)\nbool(false)\nbool(false)"}],"intlchar::isuwhitespace":[{"title":"Testing different code points","source":"var_dump(IntlChar::isUWhiteSpace(\"A\"));\nvar_dump(IntlChar::isUWhiteSpace(\" \"));\nvar_dump(IntlChar::isUWhiteSpace(\"\\n\"));\nvar_dump(IntlChar::isUWhiteSpace(\"\\t\"));\nvar_dump(IntlChar::isUWhiteSpace(\"\\u{00A0}\"));","output":"bool(false)\nbool(true)\nbool(true)\nbool(true)\nbool(true)"}],"intlchar::iswhitespace":[{"title":"Testing different code points","source":"var_dump(IntlChar::iswhitespace(\"A\"));\nvar_dump(IntlChar::iswhitespace(\" \"));\nvar_dump(IntlChar::iswhitespace(\"\\n\"));\nvar_dump(IntlChar::iswhitespace(\"\\t\"));\nvar_dump(IntlChar::iswhitespace(\"\\u{00A0}\"));","output":"bool(false)\nbool(true)\nbool(true)\nbool(true)\nbool(false)"}],"intlchar::isxdigit":[{"title":"Testing different code points","source":"var_dump(IntlChar::isxdigit(\"A\"));\nvar_dump(IntlChar::isxdigit(\"1\"));\nvar_dump(IntlChar::isxdigit(\"\\u{2603}\"));","output":"bool(true)\nbool(true)\nbool(false)"}],"intlchar::ord":[{"title":"Testing different code points","source":"var_dump(IntlChar::ord(\"A\"));\nvar_dump(IntlChar::ord(\" \"));\nvar_dump(IntlChar::ord(\"\\u{2603}\"));","output":"int(65)\nint(32)\nint(9731)"}],"intlchar::tolower":[{"title":"Testing different code points","source":"var_dump(IntlChar::tolower(\"A\"));\nvar_dump(IntlChar::tolower(\"a\"));\nvar_dump(IntlChar::tolower(\"Φ\"));\nvar_dump(IntlChar::tolower(\"φ\"));\nvar_dump(IntlChar::tolower(\"1\"));\nvar_dump(IntlChar::tolower(ord(\"A\")));\nvar_dump(IntlChar::tolower(ord(\"a\")));","output":"string(1) \"a\"\nstring(1) \"a\"\nstring(2) \"φ\"\nstring(2) \"φ\"\nstring(1) \"1\"\nint(97)\nint(97)"}],"intlchar::totitle":[{"title":"Testing different code points","source":"var_dump(IntlChar::totitle(\"A\"));\nvar_dump(IntlChar::totitle(\"a\"));\nvar_dump(IntlChar::totitle(\"Φ\"));\nvar_dump(IntlChar::totitle(\"φ\"));\nvar_dump(IntlChar::totitle(\"1\"));\nvar_dump(IntlChar::totitle(ord(\"A\")));\nvar_dump(IntlChar::totitle(ord(\"a\")));","output":"string(1) \"A\"\nstring(1) \"A\"\nstring(2) \"Φ\"\nstring(2) \"Φ\"\nstring(1) \"1\"\nint(65)\nint(65)"}],"intlchar::toupper":[{"title":"Testing different code points","source":"var_dump(IntlChar::toupper(\"A\"));\nvar_dump(IntlChar::toupper(\"a\"));\nvar_dump(IntlChar::toupper(\"Φ\"));\nvar_dump(IntlChar::toupper(\"φ\"));\nvar_dump(IntlChar::toupper(\"1\"));\nvar_dump(IntlChar::toupper(ord(\"A\")));\nvar_dump(IntlChar::toupper(ord(\"a\")));","output":"string(1) \"A\"\nstring(1) \"A\"\nstring(2) \"Φ\"\nstring(2) \"Φ\"\nstring(1) \"1\"\nint(65)\nint(65)"}],"intldateformatter::create":[{"title":"datefmt_create() example","source":"$fmt = datefmt_create( \"en_US\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,\n    'America\/Los_Angeles', IntlDateFormatter::GREGORIAN  );\necho \"First Formatted output is \".datefmt_format( $fmt , 0);\n$fmt = datefmt_create( \"de-DE\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,\n    'America\/Los_Angeles',IntlDateFormatter::GREGORIAN  );\necho \"Second Formatted output is \".datefmt_format( $fmt , 0);\n\n$fmt = datefmt_create( \"en_US\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,\n     'America\/Los_Angeles',IntlDateFormatter::GREGORIAN  ,\"MM\/dd\/yyyy\");\necho \"First Formatted output with pattern is \".datefmt_format( $fmt , 0);\n$fmt = datefmt_create( \"de-DE\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,\n     'America\/Los_Angeles',IntlDateFormatter::GREGORIAN  ,\"MM\/dd\/yyyy\");\necho \"Second Formatted output with pattern is \".datefmt_format( $fmt , 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter( \"en_US\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,\n    'America\/Los_Angeles',IntlDateFormatter::GREGORIAN  );\necho \"First Formatted output is \".$fmt->format(0);\n$fmt = new IntlDateFormatter( \"de-DE\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL, \n    'America\/Los_Angeles',IntlDateFormatter::GREGORIAN  );\necho \"Second Formatted output is \".$fmt->format(0);\n\n$fmt = new IntlDateFormatter( \"en_US\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL, \n     'America\/Los_Angeles',IntlDateFormatter::GREGORIAN  ,\"MM\/dd\/yyyy\");\necho \"First Formatted output with pattern is \".$fmt->format(0);\n$fmt = new IntlDateFormatter( \"de-DE\" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,\n      'America\/Los_Angeles',IntlDateFormatter::GREGORIAN , \"MM\/dd\/yyyy\");\necho \"Second Formatted output with pattern is \".$fmt->format(0);","output":null}],"intldateformatter::format":[{"title":"datefmt_format() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'First Formatted output is ' . datefmt_format($fmt, 0);\n\n$fmt = datefmt_create(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Second Formatted output is ' . datefmt_format($fmt, 0);\n\n$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'First Formatted output with pattern is ' . datefmt_format($fmt, 0);\n\n$fmt = datefmt_create(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho \"Second Formatted output with pattern is \" . datefmt_format($fmt, 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'First Formatted output is ' . $fmt->format(0);\n\n$fmt = new IntlDateFormatter(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Second Formatted output is ' . $fmt->format(0);\n\n$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'First Formatted output with pattern is ' . $fmt->format(0);\n\n$fmt = new IntlDateFormatter(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'Second Formatted output with pattern is ' . $fmt->format(0);","output":null},{"title":"With IntlCalendar object","source":"$tz = reset(iterator_to_array(IntlTimeZone::createEnumeration('FR')));\n$formatter = IntlDateFormatter::create(\n    'fr_FR',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    $tz,\n    IntlDateFormatter::GREGORIAN\n);\n\n$cal = IntlCalendar::createInstance($tz, '@calendar=islamic-civil');\n$cal->set(IntlCalendar::FIELD_MONTH, 8); \/\/9th month, Ramadan\n$cal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 1); \/\/1st day\n$cal->clear(IntlCalendar::FIELD_HOUR_OF_DAY);\n$cal->clear(IntlCalendar::FIELD_MINUTE);\n$cal->clear(IntlCalendar::FIELD_SECOND);\n$cal->clear(IntlCalendar::FIELD_MILLISECOND);\n\necho \"In this islamic year, Ramadan started\/will start on:\\n\\t\",\n        $formatter->format($cal), \"\\n\";\n\n\/\/Itʼs the formatterʼs timezone that is used:\n$formatter->setTimeZone('Asia\/Tokyo');\necho \"After changing timezone:\\n\\t\",\n        $formatter->format($cal), \"\\n\";","output":"In this islamic year, Ramadan started\/will start on:\n    mardi 9 juillet 2013 19:00:00 heure avancée d’Europe centrale\nAfter changing timezone:\n    mercredi 10 juillet 2013 02:00:00 heure normale du Japon"}],"intldateformatter::formatobject":[{"title":"IntlDateFormatter::formatObject() examples","source":"\/* default timezone is irrelevant; timezone taken from the object *\/\nini_set('date.timezone', 'UTC');\n\/* default locale is taken from this ini setting *\/\nini_set('intl.default_locale', 'fr_FR');\n\n$cal = IntlCalendar::fromDateTime(\"2013-06-06 17:05:06 Europe\/Dublin\");\necho \"default:\\n\\t\",\n        IntlDateFormatter::formatObject($cal),\n        \"\\n\";\n\necho \"long \\$format (full):\\n\\t\",\n        IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL),\n        \"\\n\";\n\necho \"array \\$format (none, full):\\n\\t\",\n        IntlDateFormatter::formatObject($cal, array(\n                IntlDateFormatter::NONE,\n                IntlDateFormatter::FULL)),\n        \"\\n\";\n\necho \"string \\$format (d 'of' MMMM y):\\n\\t\",\n        IntlDateFormatter::formatObject($cal, \"d 'of' MMMM y\", 'en_US'),\n        \"\\n\";\n\necho \"with DateTime:\\n\\t\",\n        IntlDateFormatter::formatObject(\n                new DateTime(\"2013-09-09 09:09:09 Europe\/Madrid\"),\n                IntlDateFormatter::FULL,\n                'es_ES'),\n        \"\\n\";","output":"default:\n    6 juin 2013 17:05:06\nlong $format (full):\n    jeudi 6 juin 2013 17:05:06 heure d’été irlandaise\narray $format (none, full):\n    17:05:06 heure d’été irlandaise\nstring $format (d 'of' MMMM y):\n    6 of June 2013\nwith DateTime:\n    lunes, 9 de septiembre de 2013 09:09:09 Hora de verano de Europa central"}],"intldateformatter::getcalendar":[{"title":"datefmt_get_calendar() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'calendar of the formatter is : ' . datefmt_get_calendar($fmt);\ndatefmt_set_calendar($fmt, IntlDateFormatter::TRADITIONAL);\necho 'Now calendar of the formatter is : ' . datefmt_get_calendar($fmt);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'calendar of the formatter is : ' . $fmt->getCalendar();\n$fmt->setCalendar(IntlDateFormatter::TRADITIONAL);\necho 'Now calendar of the formatter is : ' . $fmt->getCalendar();","output":null}],"intldateformatter::getcalendarobject":[{"title":"IntlDateFormatter::getCalendarObject() example","source":"$formatter = IntlDateFormatter::create(\n    \"fr_FR@calendar=islamic\", \n    NULL,\n    NULL,\n    \"GMT-01:00\",\n    IntlDateFormatter::TRADITIONAL\n);\n\n$cal = $formatter->getCalendarObject();\n\nvar_dump(\n    $cal->getType(),\n    $cal->getTimeZone(),\n    $cal->getLocale(Locale::VALID_LOCALE)\n);","output":"string(7) \"islamic\"\nobject(IntlTimeZone)#3 (4) {\n  [\"valid\"]=>\n  bool(true)\n  [\"id\"]=>\n  string(9) \"GMT-01:00\"\n  [\"rawOffset\"]=>\n  int(-3600000)\n  [\"currentOffset\"]=>\n  int(-3600000)\n}\nstring(5) \"fr_FR\""}],"intldateformatter::getdatetype":[{"title":"datefmt_get_datetype() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'datetype of the formatter is : ' . datefmt_get_datetype($fmt);\necho 'First Formatted output with datetype is ' . datefmt_format($fmt, 0);\n\n$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::SHORT,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Now datetype of the formatter is : ' . datefmt_get_datetype($fmt);\necho 'Second Formatted output with datetype is ' . datefmt_format($fmt, 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'datetype of the formatter is : ' . $fmt->getDateType();\necho 'First Formatted output is ' . $fmt->format(0);\n$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::SHORT,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Now datetype of the formatter is : ' . $fmt->getDateType();\necho 'Second Formatted output is ' . $fmt->format(0);","output":null}],"intldateformatter::geterrorcode":[{"title":"datefmt_get_error_code() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\n$str = datefmt_format($fmt);\nif (!$str) {\n    printf(\n        \"ERROR: %s (%d)\\n\",\n        datefmt_get_error_message($fmt),\n        datefmt_get_error_code($fmt)\n    );\n}","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\n$str = $fmt->format();\nif (!$str) {\n    printf(\n        \"ERROR: %s (%d)\\n\",\n        $fmt->getErrorMessage(),\n        $fmt->getErrorCode()\n    );\n}","output":null}],"intldateformatter::geterrormessage":[{"title":"datefmt_get_error_message() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\n$str = datefmt_format($fmt);\nif (!$str) {\n    prtinf(\n        \"ERROR: %s (%d)\\n\",\n        datefmt_get_error_message($fmt),\n        datefmt_get_error_code($fmt)\n    );\n}","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\n$str = $fmt->format();\nif(!$str) {\n    prtinf(\n        \"ERROR: %s (%d)\\n\",\n        $fmt->getErrorMessage(),\n        $fmt->getErrorCode()\n    );\n}","output":null}],"intldateformatter::getlocale":[{"title":"datefmt_get_locale() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'locale of the formatter is : \" . datefmt_get_locale($fmt);\necho 'First Formatted output is \" . datefmt_format($fmt, 0);\n\n$fmt = datefmt_create(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'locale of the formatter is : ' . datefmt_get_locale($fmt);\necho 'Second Formatted output is ' . datefmt_format($fmt, 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'locale of the formatter is : ' . $fmt->getLocale();\necho 'First Formatted output is ' . $fmt->format(0);\n\n$fmt = new IntlDateFormatter(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'locale of the formatter is : ' . $fmt->getLocale();\necho 'Second Formatted output is ' . $fmt->format(0);","output":null}],"intldateformatter::getpattern":[{"title":"datefmt_get_pattern() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'pattern of the formatter is : ' . datefmt_get_pattern($fmt);\necho 'First Formatted output with pattern is ' . datefmt_format($fmt, 0);\ndatefmt_set_pattern($fmt,'yyyymmdd hh:mm:ss z');\necho 'Now pattern of the formatter is : ' . datefmt_get_pattern($fmt);\necho 'Second Formatted output with pattern is ' . datefmt_format($fmt, 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'pattern of the formatter is : ' . $fmt->getPattern();\necho 'First Formatted output is ' . $fmt->format(0);\n$fmt->setPattern('yyyymmdd hh:mm:ss z');\necho 'Now pattern of the formatter is : ' . $fmt->getPattern();\necho 'Second Formatted output is ' . $fmt->format(0);","output":null}],"intldateformatter::gettimetype":[{"title":"datefmt_get_timetype() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'timetype of the formatter is : ' . datefmt_get_timetype($fmt);\necho 'First Formatted output with timetype is ' . datefmt_format($fmt, 0);\n\n$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::SHORT,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Now timetype of the formatter is : ' . datefmt_get_timetype($fmt);\necho 'Second Formatted output with timetype is ' . datefmt_format($fmt, 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'timetype of the formatter is : ' . $fmt->getTimeType();\necho 'First Formatted output is ' . $fmt->format(0);\n\n$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::SHORT,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Now timetype of the formatter is : ' . $fmt->getTimeType();\necho 'Second Formatted output is ' . $fmt->format(0);","output":null}],"intldateformatter::gettimezone":[{"title":"IntlDateFormatter::getTimeZone() examples","source":"$madrid = IntlDateFormatter::create(NULL, NULL, NULL, 'Europe\/Madrid');\n$lisbon = IntlDateFormatter::create(NULL, NULL, NULL, 'Europe\/Lisbon');\n\nvar_dump($madrid->getTimezone());\necho $madrid->getTimezone()->getDisplayName(\n        false, IntlTimeZone::DISPLAY_GENERIC_LOCATION, \"en_US\"), \"\\n\";\necho $lisbon->getTimeZone()->getId(), \"\\n\";\n\/\/The id can also be retrieved with ->getTimezoneId()\necho $lisbon->getTimeZoneId(), \"\\n\";","output":"object(IntlTimeZone)#4 (4) {\n  [\"valid\"]=>\n  bool(true)\n  [\"id\"]=>\n  string(13) \"Europe\/Madrid\"\n  [\"rawOffset\"]=>\n  int(3600000)\n  [\"currentOffset\"]=>\n  int(7200000)\n}\nSpain Time\nEurope\/Lisbon\nEurope\/Lisbon"}],"intldateformatter::gettimezoneid":[{"title":"datefmt_get_timezone_id() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'timezone_id of the formatter is : ' . datefmt_get_timezone_id($fmt);\ndatefmt_set_timezone_id($fmt, 'CN');\necho 'Now timezone_id of the formatter is : ' . datefmt_get_timezone_id($fmt);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'timezone_id of the formatter is : ' . $fmt->getTimezoneId();\n$fmt->setTimezoneId('CN');\necho 'Now timezone_id of the formatter is : ' . $fmt->getTimezoneId();","output":null}],"intldateformatter::islenient":[{"title":"datefmt_is_lenient() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'dd\/mm\/yyyy'\n);\necho 'lenient of the formatter is : ';\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\ndatefmt_parse($fmt, '35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').\\nResult is : \" . datefmt_parse($fmt, '35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}\ndatefmt_set_lenient($fmt,false);\necho 'Now lenient of the formatter is : ';\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\ndatefmt_parse($fmt, '35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').Result is : \" . datefmt_parse($fmt, '35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    \"dd\/mm\/yyyy\"\n);\necho \"lenient of the formatter is : \";\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\n$fmt->parse('35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').\\nResult is : \" . $fmt->parse('35\/13\/1971');\nif (intl_get_error_code() != 0){\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}\n\n$fmt->setLenient(FALSE);\necho 'Now lenient of the formatter is : ';\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\n$fmt->parse('35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').\\nResult is : \" . $fmt->parse('35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}","output":null}],"intldateformatter::localtime":[{"title":"datefmt_localtime() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\n$arr = datefmt_localtime($fmt, 'Wednesday, December 31, 1969 4:00:00 PM PT', 0);\necho 'First parsed output is ';\nif ($arr) {\n    foreach ($arr as $key => $value) {\n        echo \"$key : $value , \";\n    }\n}","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\n$arr = $fmt->localtime('Wednesday, December 31, 1969 4:00:00 PM PT', 0);\necho 'First parsed output is ';\nif ($arr) {\n    foreach ($arr as $key => $value) {\n        echo \"$key : $value , \";\n    }\n}","output":null}],"intldateformatter::parse":[{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'First parsed output is ' . $fmt->parse('Wednesday, December 20, 1989 4:00:00 PM PT');\n$fmt = new IntlDateFormatter(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);","output":null},{"title":"datefmt_parse() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'First parsed output is ' . datefmt_parse($fmt, 'Wednesday, December 20, 1989 4:00:00 PM PT');\n$fmt = datefmt_create(\n    'de-DE',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'Second parsed output is ' . datefmt_parse($fmt, 'Mittwoch, 20. Dezember 1989 16:00 Uhr GMT-08:00');\n?","output":null}],"intldateformatter::setcalendar":[{"title":"datefmt_set_calendar() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'calendar of the formatter is : ' . datefmt_get_calendar($fmt);\ndatefmt_set_calendar($fmt, IntlDateFormatter::TRADITIONAL);\necho 'Now calendar of the formatter is : ' . datefmt_get_calendar($fmt);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN  \n);\necho 'calendar of the formatter is : ' . $fmt->getCalendar();\n$fmt->setCalendar(IntlDateFormatter::TRADITIONAL);\necho 'Now calendar of the formatter is : ' . $fmt->getCalendar();","output":null},{"title":"Example with IntlCalendar argument","source":"$time = strtotime(\"2013-03-03 00:00:00 UTC\");\n$formatter = IntlDateFormatter::create(\"en_US\", NULL, NULL, \"Europe\/Amsterdam\");\n\necho \"before: \", $formatter->format($time), \"\\n\";\n\n\/* note that the calendar's locale is not used! *\/\n$formatter->setCalendar(IntlCalendar::createInstance(\n               \"America\/New_York\", \"pt_PT@calendar=islamic\"));\n\necho \"after:  \", $formatter->format($time), \"\\n\";","output":"before: Sunday, March 3, 2013 at 1:00:00 AM Central European Standard Time\nafter:  Saturday, Rabiʻ II 20, 1434 at 7:00:00 PM Eastern Standard Time"}],"intldateformatter::setlenient":[{"title":"datefmt_set_lenient() example","source":"$fmt = datefmt_create(\n    'en_US', \n    IntlDateFormatter::FULL, \n    IntlDateFormatter::FULL, \n    'America\/Los_Angeles', \n    IntlDateFormatter::GREGORIAN, \n    'dd\/MM\/yyyy'\n);\necho 'lenient of the formatter is : ';\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\ndatefmt_parse($fmt, '35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').\\nResult is : \" . datefmt_parse($fmt, '35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}\ndatefmt_set_lenient($fmt, false);\necho \"\\nNow lenient of the formatter is : \";\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\ndatefmt_parse($fmt, '35\/13\/1971');\necho \"\\nTrying to do parse('35\/13\/1971').\\nResult is : \" . datefmt_parse($fmt, '35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \".intl_get_error_message();\n    echo \"\\nError_code is : \".intl_get_error_code();\n}","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'dd\/MM\/yyyy'\n);\necho 'lenient of the formatter is : ';\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\n$fmt->parse('35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').\\nResult is : \" . $fmt->parse('35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}\n\n$fmt->setLenient(FALSE);\necho \"\\nNow lenient of the formatter is : \";\nif ($fmt->isLenient()) {\n    echo 'TRUE';\n} else {\n    echo 'FALSE';\n}\n$fmt->parse('35\/13\/1971');\necho \"\\n Trying to do parse('35\/13\/1971').\\nResult is : \" . $fmt->parse('35\/13\/1971');\nif (intl_get_error_code() != 0) {\n    echo \"\\nError_msg is : \" . intl_get_error_message();\n    echo \"\\nError_code is : \" . intl_get_error_code();\n}","output":null}],"intldateformatter::setpattern":[{"title":"datefmt_set_pattern() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'pattern of the formatter is : ' . datefmt_get_pattern($fmt);\necho 'First Formatted output with pattern is ' . datefmt_format($fmt, 0);\ndatefmt_set_pattern($fmt, 'yyyymmdd hh:mm:ss z');\necho 'Now pattern of the formatter is : ' . datefmt_get_pattern($fmt);\necho 'Second Formatted output with pattern is ' . datefmt_format($fmt, 0);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN,\n    'MM\/dd\/yyyy'\n);\necho 'pattern of the formatter is : ' . $fmt->getPattern();\necho 'First Formatted output is ' . $fmt->format(0);\n$fmt->setPattern('yyyymmdd hh:mm:ss z');\necho 'Now pattern of the formatter is : ' . $fmt->getPattern();\necho 'Second Formatted output is ' . $fmt->format(0);","output":null}],"intldateformatter::settimezone":[{"title":"IntlDateFormatter::setTimeZone() examples","source":"ini_set('date.timezone', 'Europe\/Amsterdam');\n\n$formatter = IntlDateFormatter::create(NULL, NULL, NULL, \"UTC\");\n\n$formatter->setTimeZone(NULL);\necho \"NULL\\n    \", $formatter->getTimeZone()->getId(), \"\\n\";\n\n$formatter->setTimeZone(IntlTimeZone::createTimeZone('Europe\/Lisbon'));\necho \"IntlTimeZone\\n    \", $formatter->getTimeZone()->getId(), \"\\n\";\n\n$formatter->setTimeZone(new DateTimeZone('Europe\/Paris'));\necho \"DateTimeZone\\n    \", $formatter->getTimeZone()->getId(), \"\\n\";\n\n$formatter->setTimeZone('Europe\/Rome');\necho \"String\\n    \", $formatter->getTimeZone()->getId(), \"\\n\";\n\n$formatter->setTimeZone('GMT+00:30');\nprint_r($formatter->getTimeZone());","output":"NULL\n    Europe\/Amsterdam\nIntlTimeZone\n    Europe\/Lisbon\nDateTimeZone\n    Europe\/Paris\nString\n    Europe\/Rome\nIntlTimeZone Object\n(\n    [valid] => 1\n    [id] => GMT+00:30\n    [rawOffset] => 1800000\n    [currentOffset] => 1800000\n)"}],"intldateformatter::settimezoneid":[{"title":"datefmt_set_timezone_id() example","source":"$fmt = datefmt_create(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'timezone_id of the formatter is : ' . datefmt_get_timezone_id($fmt);\ndatefmt_set_timezone_id($fmt, 'CN');\necho 'Now timezone_id of the formatter is : ' . datefmt_get_timezone_id($fmt);","output":null},{"title":"OO example","source":"$fmt = new IntlDateFormatter(\n    'en_US',\n    IntlDateFormatter::FULL,\n    IntlDateFormatter::FULL,\n    'America\/Los_Angeles',\n    IntlDateFormatter::GREGORIAN\n);\necho 'timezone_id of the formatter is : ' . $fmt->getTimezoneId();\n$fmt->setTimezoneId('CN');\necho 'Now timezone_id of the formatter is : ' . $fmt->getTimezoneId();","output":null}],"jsonserializable::jsonserialize":[{"title":"JsonSerializable::jsonSerialize() example returning an array","source":"class ArrayValue implements JsonSerializable {\n    public function __construct(array $array) {\n        $this->array = $array;\n    }\n\n    public function jsonSerialize() {\n        return $this->array;\n    }\n}\n\n$array = [1, 2, 3];\necho json_encode(new ArrayValue($array), JSON_PRETTY_PRINT);","output":"[\n    1,\n    2,\n    3\n]"},{"title":"JsonSerializable::jsonSerialize() example returning an associative array","source":"class ArrayValue implements JsonSerializable {\n    public function __construct(array $array) {\n        $this->array = $array;\n    }\n\n    public function jsonSerialize() {\n        return $this->array;\n    }\n}\n\n$array = ['foo' => 'bar', 'quux' => 'baz'];\necho json_encode(new ArrayValue($array), JSON_PRETTY_PRINT);","output":"{\n    \"foo\": \"bar\",\n    \"quux\": \"baz\"\n}"},{"title":"JsonSerializable::jsonSerialize() example returning an integer","source":"class IntegerValue implements JsonSerializable {\n    public function __construct($number) {\n        $this->number = (integer) $number;\n    }\n\n    public function jsonSerialize() {\n        return $this->number;\n    }\n}\n\necho json_encode(new IntegerValue(1), JSON_PRETTY_PRINT);","output":1},{"title":"JsonSerializable::jsonSerialize() example returning a string","source":"class StringValue implements JsonSerializable {\n    public function __construct($string) {\n        $this->string = (string) $string;\n    }\n\n    public function jsonSerialize() {\n        return $this->string;\n    }\n}\n\necho json_encode(new StringValue('Hello!'), JSON_PRETTY_PRINT);","output":"\"Hello!\""}],"lapack::eigenvalues":[{"title":"Using Lapack::eigenValues():","source":"$a = array(\n     array(-1.01,   0.86,  -4.60,  3.31,  -4.81  ),\n     array( 3.98,   0.53,  -7.04,  5.29,   3.55  ),\n     array( 3.30,   8.26,  -3.89,  8.20,  -1.51  ),\n     array( 4.43,   4.96,  -7.66, -7.33,   6.18  ),\n     array( 7.31,  -6.43,  -6.16,  2.47,   5.58  ),\n );\n\n $result = Lapack::eigenValues($a);","output":null}],"lapack::leastsquaresbyfactorisation":[{"title":"Using Lapack::leastSquaresByFactorisation():","source":"$a = array(\n     array( 1.44,  -7.84,  -4.39,   4.53),\n     array(-9.96,  -0.28,  -3.24,   3.83),\n     array(-7.55,   3.24,   6.27,  -6.64),\n     array( 8.34,   8.09,   5.28,   2.06),\n     array( 7.08,   2.52,   0.74,  -2.47),\n     array(-5.45,  -5.70,  -1.19,   4.70),\n );\n\n $b = array(\n     array( 8.58,   9.35),\n     array( 8.26,  -4.43),\n     array( 8.48,  -0.70),\n     array(-5.28,  -0.26),\n     array( 5.72,  -7.36),\n     array( 8.93,  -2.52),           \n );\n\n $result = Lapack::leastSquaresByFactorisation($a, $b);","output":null}],"lapack::leastsquaresbysvd":[{"title":"Using Lapack::leastSquaresBySVD():","source":"$a = array(\n      array( 1.44,  -7.84,  -4.39,   4.53),\n      array(-9.96,  -0.28,  -3.24,   3.83),\n      array(-7.55,   3.24,   6.27,  -6.64),\n      array( 8.34,   8.09,   5.28,   2.06),\n      array( 7.08,   2.52,   0.74,  -2.47),\n      array(-5.45,  -5.70,  -1.19,   4.70),\n  );\n\n  $b = array(\n      array( 8.58,   9.35),\n      array( 8.26,  -4.43),\n      array( 8.48,  -0.70),\n      array(-5.28,  -0.26),\n      array( 5.72,  -7.36),\n      array( 8.93,  -2.52),           \n  );\n\n  $result = Lapack::leastSquaresBySVD($a, $b);","output":null}],"lapack::pseudoinverse":[{"title":"Using Lapack::pseudoInverse():","source":"$a = array(\n       array( 8, 1, 6 ),\n       array( 3, 5, 7 ),\n       array( 4, 9, 2 ),\n   );\n\n   $result = Lapack::pseudoInverse($a);","output":null}],"lapack::singularvalues":[{"title":"Using Lapack::singularValues():","source":"$a = array(\n        array( 7.52,  -1.10,  -7.95,  1.08  ),\n        array(-0.76,   0.62,   9.34, -7.10  ),\n        array( 5.13,   6.62,  -5.66,  0.87  ),\n        array(-4.75,   8.52,   5.75,  5.30  ),\n        array( 1.33,   4.91,  -5.49, -3.52  ),\n        array(-2.40,  -6.77,   2.34,  3.95  ),\n    );\n\n\n    $result = Lapack::singularValues($a);","output":null}],"lapack::solvelinearequation":[{"title":"Using Lapack::singularValues():","source":"$a = array(\n        array( 6.80,  -6.05,  -0.45,   8.32,  -9.67   ),\n        array(-2.11,  -3.30,   2.58,   2.71,  -5.14   ),\n        array( 5.66,   5.36,  -2.70,   4.35,  -7.26   ),\n        array( 5.97,  -4.44,   0.27,  -7.17,   6.08   ),\n        array( 8.23,   1.08,   9.04,   2.14,  -6.87   ),\n    );\n\n    $b = array(\n       array(  4.02,  -1.56,   9.81   ),\n       array(  6.19,   4.00,  -4.09   ),\n       array( -8.22,  -8.67,  -4.57   ),\n       array( -7.57,   1.75,  -8.61   ),\n       array( -3.03,   2.86,   8.99   ),\n    );\n\n    $result = Lapack::solveLinearEquation($a, $b);","output":null}],"limititerator::__construct":[{"title":"LimitIterator::__construct() example","source":"$ait = new ArrayIterator(array('a', 'b', 'c', 'd', 'e'));\n$lit = new LimitIterator($ait, 1, 3);\nforeach ($lit as $value) {\n    echo $value . \"\\n\";\n}","output":"b\nc\nd"}],"limititerator::getposition":[{"title":"LimitIterator::getPosition() example","source":"$fruits = array(\n    'a' => 'apple',\n    'b' => 'banana',\n    'c' => 'cherry',\n    'd' => 'damson',\n    'e' => 'elderberry'\n);\n$array_it = new ArrayIterator($fruits);\n$limit_it = new LimitIterator($array_it, 2, 3);\nforeach ($limit_it as $item) {\n    echo $limit_it->getPosition() . ' ' . $item . \"\\n\";\n}","output":"2 cherry\n3 damson\n4 elderberry"}],"locale::acceptfromhttp":[{"title":"locale_accept_from_http() example","source":"$locale = locale_accept_from_http($_SERVER['HTTP_ACCEPT_LANGUAGE']);\necho $locale;","output":null},{"title":"OO example","source":"$locale = Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);\necho $locale;","output":null}],"locale::composelocale":[{"title":"locale_compose() example","source":"$arr = array(\n    'language'=>'en' ,\n    'script'  =>'Hans' ,\n    'region'  =>'CN',\n    'variant2'=>'rozaj' ,\n    'variant1'=>'nedis' ,\n    'private1'=>'prv1' ,\n    'private2'=>'prv2'\n);\necho locale_compose( $arr );","output":null},{"title":"OO example","source":"$arr = array(\n    'language'=>'en' ,\n    'script'  =>'Hans' ,\n    'region'  =>'CN',\n    'variant2'=>'rozaj' ,\n    'variant1'=>'nedis' ,\n    'private1'=>'prv1' ,\n    'private2'=>'prv2'\n);\necho Locale::composeLocale( $arr );","output":null}],"locale::filtermatches":[{"title":"locale_filter_matches() example","source":"echo (locale_filter_matches('de-DEVA','de-DE', false)) ? \"Matches\" : \"Does not match\"; \necho '; ';\necho (locale_filter_matches('de-DE_1996','de-DE', false)) ? \"Matches\" : \"Does not match\";","output":null},{"title":"OO example","source":"echo (Locale::filterMatches('de-DEVA','de-DE', false)) ? \"Matches\" : \"Does not match\"; \necho '; ';\necho (Locale::filterMatches('de-DE-1996','de-DE', false)) ? \"Matches\" : \"Does not match\";","output":null}],"locale::getallvariants":[{"title":"locale_get_all_variants() example","source":"$arr = locale_get_all_variants('sl_IT_NEDIS_ROJAZ_1901');\nvar_export( $arr );","output":null},{"title":"OO example","source":"$arr = Locale::getAllVariants('sl_IT_NEDIS_ROJAZ_1901');\n var_export( $arr );","output":null}],"locale::getdefault":[{"title":"locale_get_default() example","source":"ini_set('intl.default_locale', 'de-DE');\necho locale_get_default();\necho '; ';\nlocale_set_default('fr');\necho locale_get_default();","output":null},{"title":"OO example","source":"ini_set('intl.default_locale', 'de-DE');\necho Locale::getDefault();\necho '; ';\nLocale::setDefault('fr');\necho Locale::getDefault();","output":null}],"locale::getdisplaylanguage":[{"title":"locale_get_display_language() example","source":"echo locale_get_display_language('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho locale_get_display_language('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho locale_get_display_language('sl-Latn-IT-nedis', 'de');","output":null},{"title":"OO example","source":"echo Locale::getDisplayLanguage('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho Locale::getDisplayLanguage('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho Locale::getDisplayLanguage('sl-Latn-IT-nedis', 'de');","output":null}],"locale::getdisplayname":[{"title":"locale_get_display_name() example","source":"echo locale_get_display_name('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho locale_get_display_name('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho locale_get_display_name('sl-Latn-IT-nedis', 'de');","output":null},{"title":"OO example","source":"echo Locale::getDisplayName('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho Locale::getDisplayName('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho Locale::getDisplayName('sl-Latn-IT-nedis', 'de');","output":"Slovenian (Latin, Italy, Natisone dialect);\nslov\\xc3\\xa8ne (latin, Italie, dialecte de Natisone;\nSlowenisch (Lateinisch, Italien, NEDIS)"}],"locale::getdisplayregion":[{"title":"locale_get_display_region() example","source":"echo locale_get_display_region('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho locale_get_display_region('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho locale_get_display_region('sl-Latn-IT-nedis', 'de');","output":null},{"title":"OO example","source":"echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho Locale::getDisplayRegion('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho Locale::getDisplayRegion('sl-Latn-IT-nedis', 'de');","output":null}],"locale::getdisplayscript":[{"title":"locale_get_display_script() example","source":"echo locale_get_display_script('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho locale_get_display_script('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho locale_get_display_script('sl-Latn-IT-nedis', 'de');","output":null},{"title":"OO example","source":"echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho Locale::getDisplayScript('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho Locale::getDisplayScript('sl-Latn-IT-nedis', 'de');","output":null}],"locale::getdisplayvariant":[{"title":"locale_get_display_variant() example","source":"echo locale_get_display_variant('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho locale_get_display_variant('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho locale_get_display_variant('sl-Latn-IT-nedis', 'de');","output":null},{"title":"OO example","source":"echo Locale::getDisplayVariant('sl-Latn-IT-nedis', 'en');\necho \";\\n\";\necho Locale::getDisplayVariant('sl-Latn-IT-nedis', 'fr');\necho \";\\n\";\necho Locale::getDisplayVariant('sl-Latn-IT-nedis', 'de');","output":null}],"locale::getkeywords":[{"title":"locale_get_keywords() example","source":"$keywords_arr = locale_get_keywords( 'de_DE@currency=EUR;collation=PHONEBOOK' );\nif ($keywords_arr) {\n    foreach ($keywords_arr as $key => $value) {\n        echo \"$key = $value\\n\"; \n    }\n}","output":null},{"title":"OO example","source":"$keywords_arr = Locale::getKeywords( 'de_DE@currency=EUR;collation=PHONEBOOK' );\nif ($keywords_arr) {\n    foreach( $keywords_arr as $key => $value){\n        echo \"$key = $value\\n\"; \n    }\n}","output":null}],"locale::getprimarylanguage":[{"title":"locale_get_primary_language() example","source":"echo locale_get_primary_language('zh-Hant');","output":null},{"title":"OO example","source":"echo Locale::getPrimaryLanguage('zh-Hant');","output":null}],"locale::getregion":[{"title":"locale_get_region() example","source":"echo locale_get_region('de-CH-1901');","output":null},{"title":"OO example","source":"echo Locale::getRegion('de-CH-1901');","output":null}],"locale::getscript":[{"title":"locale_get_script() example","source":"echo locale_get_script('sr-Cyrl');","output":null},{"title":"OO example","source":"echo Locale::getScript('sr-Cyrl');","output":null}],"locale::lookup":[{"title":"locale_lookup() example","source":"$arr = array(\n    'de-DEVA',\n    'de-DE-1996',\n    'de',\n    'de-De'\n);\necho locale_lookup($arr, 'de-DE-1996-x-prv1-prv2', true, 'en_US');","output":null},{"title":"OO example","source":"$arr = array(\n    'de-DEVA',\n    'de-DE-1996',\n    'de',\n    'de-De'\n);\necho Locale::lookup($arr, 'de-DE-1996-x-prv1-prv2', true, 'en_US');","output":null}],"locale::parselocale":[{"title":"locale_parse() example","source":"$arr = locale_parse('sl-Latn-IT-nedis');\nif ($arr) {\n    foreach ($arr as $key => $value) {\n        echo \"$key : $value , \";\n    }\n}","output":null},{"title":"OO example","source":"$arr = Locale::parseLocale('sl-Latn-IT-nedis');\nif ($arr) {\n    foreach ($arr as $key => $value) {\n        echo \"$key : $value , \";\n    }\n}","output":null}],"locale::setdefault":[{"title":"locale_set_default() example","source":"locale_set_default('de-DE');\necho locale_get_default();","output":null},{"title":"OO example","source":"Locale::setDefault('de-DE');\necho Locale::getDefault();","output":null}],"lua::assign":[{"title":"Lua::assign()example","source":"$lua = new Lua();\n$lua->assign(\"php_var\", array(1=>1, 2, 3)); \/\/lua table index begin with 1\n$lua->eval(<<<CODE\n    print(php_var);\nCODE\n);","output":"Array\n (\n     [1] => 1\n     [2] => 2\n     [3] => 3\n )"}],"lua::call":[{"title":"Lua::call()example","source":"$lua = new Lua();\n$lua->eval(<<<CODE\n    function dummy(foo, bar)\n        print(foo, \",\", bar)\n    end\nCODE\n);\n$lua->call(\"dummy\", array(\"Lua\", \"geiliable\\n\"));\n$lua->dummy(\"Lua\", \"geiliable\"); \/\/ __call()\nvar_dump($lua->call(array(\"table\", \"concat\"), array(array(1=>1, 2=>2, 3=>3), \"-\")));","output":"Lua,geiliable\nLua,geiliable\nstring(5) \"1-2-3\""}],"lua::eval":[{"title":"Lua::eval()example","source":"$lua = new Lua();\n$lua->eval(<<<CODE\n    print(2);\nCODE\n);","output":2}],"lua::registercallback":[{"title":"Lua::registerCallback()example","source":"$lua = new Lua();\n$lua->registerCallback(\"echo\", \"var_dump\");\n$lua->eval(<<<CODE\n    echo({1, 2, 3});\nCODE\n);","output":"array(3) {\n  [1]=>\n  float(1)\n  [2]=>\n  float(2)\n  [3]=>\n  float(3)\n}"}],"luaclosure::__invoke":[{"title":"LuaClosure::__invoke()example","source":"$lua = new Lua();\n$closure = $lua->eval(<<<CODE\n    return (function ()\n        print(\"hello world\")\n    end)\nCODE\n);\n\n$lua->call($closure);\n\/* after PHP 5.3 *\/\n$closure();","output":"hello worldhello world"}],"memcache::add":[{"title":"Memcache::add() example","source":"$memcache_obj = memcache_connect(\"localhost\", 11211);\n\n\/* procedural API *\/\nmemcache_add($memcache_obj, 'var_key', 'test variable', false, 30);\n\n\/* OO API *\/\n$memcache_obj->add('var_key', 'test variable', false, 30);","output":null}],"memcache::addserver":[{"title":"Memcache::addServer() example","source":"\/* OO API *\/\n\n$memcache = new Memcache;\n$memcache->addServer('memcache_host', 11211);\n$memcache->addServer('memcache_host2', 11211);\n\n\/* procedural API *\/\n\n$memcache_obj = memcache_connect('memcache_host', 11211);\nmemcache_add_server($memcache_obj, 'memcache_host2', 11211);","output":null}],"memcache::close":[{"title":"Memcache::close() example","source":"\/* procedural API *\/\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\/* \ndo something here ..\n*\/\nmemcache_close($memcache_obj);\n\n\/* OO API *\/\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n\/* \ndo something here ..\n*\/\n$memcache_obj->close();","output":null}],"memcache::connect":[{"title":"Memcache::connect() example","source":"\/* procedural API *\/\n\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\n\/* OO API *\/\n\n$memcache = new Memcache;\n$memcache->connect('memcache_host', 11211);","output":null}],"memcache::decrement":[{"title":"Memcache::decrement() example","source":"\/* procedural API *\/\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\/* decrement item by 2 *\/\n$new_value = memcache_decrement($memcache_obj, 'test_item', 2);\n\n\/* OO API *\/\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n\/* decrement item by 3 *\/\n$new_value = $memcache_obj->decrement('test_item', 3);","output":null}],"memcache::delete":[{"title":"Memcache::delete() example","source":"\/* procedural API *\/\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\n\/* item will be deleted by the server *\/\nmemcache_delete($memcache_obj, 'key_to_delete');\n\n\/* OO API *\/\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n\n$memcache_obj->delete('key_to_delete');","output":null}],"memcache::flush":[{"title":"Memcache::flush() example","source":"\/* procedural API *\/\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\nmemcache_flush($memcache_obj);\n\n\/* OO API *\/\n\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n\n$memcache_obj->flush();","output":null}],"memcache::getextendedstats":[{"title":"Memcache::getExtendedStats() example","source":"$memcache_obj = new Memcache;\n    $memcache_obj->addServer('memcache_host', 11211);\n    $memcache_obj->addServer('failed_host', 11211);\n    \n    $stats = $memcache_obj->getExtendedStats();\n    print_r($stats);","output":"Array\n(\n    [memcache_host:11211] => Array\n        (\n            [pid] => 3756\n            [uptime] => 603011\n            [time] => 1133810435\n            [version] => 1.1.12\n            [rusage_user] => 0.451931\n            [rusage_system] => 0.634903\n            [curr_items] => 2483\n            [total_items] => 3079\n            [bytes] => 2718136\n            [curr_connections] => 2\n            [total_connections] => 807\n            [connection_structures] => 13\n            [cmd_get] => 9748\n            [cmd_set] => 3096\n            [get_hits] => 5976\n            [get_misses] => 3772\n            [bytes_read] => 3448968\n            [bytes_written] => 2318883\n            [limit_maxbytes] => 33554432\n        )\n\n    [failed_host:11211] => false\n)"}],"memcache::getserverstatus":[{"title":"Memcache::getServerStatus() example","source":"\/* OO API *\/\n$memcache = new Memcache;\n$memcache->addServer('memcache_host', 11211);\necho $memcache->getServerStatus('memcache_host', 11211);\n\n\/* procedural API *\/\n$memcache = memcache_connect('memcache_host', 11211);\necho memcache_get_server_status($memcache, 'memcache_host', 11211);","output":null}],"memcache::getversion":[{"title":"Memcache::getVersion() example","source":"\/* OO API *\/\n$memcache = new Memcache;\n$memcache->connect('memcache_host', 11211);\necho $memcache->getVersion();\n\n\/* procedural API *\/\n$memcache = memcache_connect('memcache_host', 11211);\necho memcache_get_version($memcache);","output":null}],"memcache::increment":[{"title":"Memcache::increment() example","source":"\/* procedural API *\/\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\/* increment counter by 2 *\/\n$current_value = memcache_increment($memcache_obj, 'counter', 2);\n\n\/* OO API *\/\n$memcache_obj = new Memcache;\n$memcache_obj->connect('memcache_host', 11211);\n\/* increment counter by 3 *\/\n$current_value = $memcache_obj->increment('counter', 3);","output":null}],"memcache::pconnect":[{"title":"Memcache::pconnect() example","source":"\/* procedural API *\/\n$memcache_obj = memcache_pconnect('memcache_host', 11211);\n\n\/* OO API *\/\n\n$memcache_obj = new Memcache;\n$memcache_obj->pconnect('memcache_host', 11211);","output":null}],"memcache::replace":[{"title":"Memcache::replace() example","source":"$memcache_obj = memcache_connect('memcache_host', 11211);\n\n\/* procedural API *\/\nmemcache_replace($memcache_obj, \"test_key\", \"some variable\", false, 30);\n\n\/* OO API *\/\n$memcache_obj->replace(\"test_key\", \"some variable\", false, 30);","output":null}],"memcache::set":[{"title":"Memcache::set() example","source":"\/* procedural API *\/\n\n\/* connect to memcached server *\/\n$memcache_obj = memcache_connect('memcache_host', 11211);\n\n\/*\nset value of item with key 'var_key'\nusing 0 as flag value, compression is not used\nexpire time is 30 seconds\n*\/\nmemcache_set($memcache_obj, 'var_key', 'some variable', 0, 30);\n\necho memcache_get($memcache_obj, 'var_key');","output":null},{"title":"Memcache::set() example","source":"\/* OO API *\/\n\n$memcache_obj = new Memcache;\n\n\/* connect to memcached server *\/\n$memcache_obj->connect('memcache_host', 11211);\n\n\/*\nset value of item with key 'var_key', using on-the-fly compression\nexpire time is 50 seconds\n*\/\n$memcache_obj->set('var_key', 'some really big variable', MEMCACHE_COMPRESSED, 50);\n\necho $memcache_obj->get('var_key');","output":null}],"memcache::setcompressthreshold":[{"title":"Memcache::setCompressThreshold() example","source":"\/* OO API *\/\n\n$memcache_obj = new Memcache;\n$memcache_obj->addServer('memcache_host', 11211);\n$memcache_obj->setCompressThreshold(20000, 0.2);\n\n\/* procedural API *\/\n\n$memcache_obj = memcache_connect('memcache_host', 11211);\nmemcache_set_compress_threshold($memcache_obj, 20000, 0.2);","output":null}],"memcache::setserverparams":[{"title":"Memcache::setServerParams() example","source":"function _callback_memcache_failure($host, $port) {\n    print \"memcache '$host:$port' failed\";\n}\n\n\/* OO API *\/\n\n$memcache = new Memcache;\n\n\/\/ Add the server in offline mode\n$memcache->addServer('memcache_host', 11211, false, 1, 1, -1, false);\n\n\/\/ Bring the server back online\n$memcache->setServerParams('memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');\n\n\/* procedural API *\/\n\n$memcache_obj = memcache_connect('memcache_host', 11211);\nmemcache_set_server_params($memcache_obj, 'memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');","output":null}],"memcached::addserver":[{"title":"Memcached::addServer() example","source":"$m = new Memcached();\n\n\/* Add 2 servers, so that the second one\n   is twice as likely to be selected. *\/\n$m->addServer('mem1.domain.com', 11211, 33);\n$m->addServer('mem2.domain.com', 11211, 67);","output":null}],"memcached::addservers":[{"title":"Memcached::addServers() example","source":"$m = new Memcached();\n\n$servers = array(\n    array('mem1.domain.com', 11211, 33),\n    array('mem2.domain.com', 11211, 67)\n);\n$m->addServers($servers);","output":null}],"memcached::append":[{"title":"Memcached::append() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n$m->setOption(Memcached::OPT_COMPRESSION, false);\n\n$m->set('foo', 'abc');\n$m->append('foo', 'def');\nvar_dump($m->get('foo'));","output":"string(6) \"abcdef\""}],"memcached::cas":[{"title":"Memcached::cas() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\ndo {\n    \/* fetch IP list and its token *\/\n    $ips = $m->get('ip_block', null, $cas);\n    \/* if list doesn't exist yet, create it and do\n       an atomic add which will fail if someone else already added it *\/\n    if ($m->getResultCode() == Memcached::RES_NOTFOUND) {\n        $ips = array($_SERVER['REMOTE_ADDR']);\n        $m->add('ip_block', $ips);\n    \/* otherwise, add IP to the list and store via compare-and-swap\n       with the token, which will fail if someone else updated the list *\/\n    } else { \n        $ips[] = $_SERVER['REMOTE_ADDR'];\n        $m->cas($cas, 'ip_block', $ips);\n    }   \n} while ($m->getResultCode() != Memcached::RES_SUCCESS);","output":null}],"memcached::decrement":[{"title":"Memcached::decrement() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('counter', 5);\n$n = $m->decrement('counter');\nvar_dump($n);\n\n$n = $m->decrement('counter', 10);\nvar_dump($n);\n\nvar_dump($m->get('counter'));\n\n$m->set('counter', 'abc');\n$n = $m->increment('counter');\n\/\/ ^ will fail due to item value not being numeric\nvar_dump($n);","output":"int(4)\nint(0)\nint(0)\nbool(false)"}],"memcached::delete":[{"title":"Memcached::delete() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->delete('key1');","output":null}],"memcached::fetch":[{"title":"Memcached::fetch() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('int', 99);\n$m->set('string', 'a simple string');\n$m->set('array', array(11, 12));\n\n$m->getDelayed(array('int', 'array'), true);\nwhile ($result = $m->fetch()) {\n    var_dump($result);\n}","output":"array(3) {\n  [\"key\"]=>\n  string(3) \"int\"\n  \"value\"]=>\n  int(99)\n  [\"cas\"]=>\n  float(2363)\n}\narray(3) {\n  [\"key\"]=>\n  string(5) \"array\"\n  [\"value\"]=>\n  array(2) {\n    [0]=>\n    int(11)\n    [1]=>\n    int(12)\n  }\n  [\"cas\"]=>\n  float(2365)\n}"}],"memcached::fetchall":[{"title":"Memcached::getDelayed() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('int', 99);\n$m->set('string', 'a simple string');\n$m->set('array', array(11, 12));\n\n$m->getDelayed(array('int', 'array'), true);\nvar_dump($m->fetchAll());","output":"array(2) {\n  [0]=>\n  array(3) {\n    [\"key\"]=>\n    string(3) \"int\"\n    [\"value\"]=>\n    int(99)\n    [\"cas\"]=>\n    float(2363)\n  }\n  [1]=>\n  array(3) {\n    [\"key\"]=>\n    string(5) \"array\"\n    [\"value\"]=>\n    array(2) {\n      [0]=>\n      int(11)\n      [1]=>\n      int(12)\n    }\n    [\"cas\"]=>\n    float(2365)\n  }\n}"}],"memcached::flush":[{"title":"Memcached::flush() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n\/* flush all items in 10 seconds *\/\n$m->flush(10);","output":null}],"memcached::get":[{"title":"Memcached::get() example #1","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('foo', 100);\nvar_dump($m->get('foo'));","output":"int(100)"},{"title":"Memcached::get() example #2","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\nif (!($ip = $m->get('ip_block'))) {\n    if ($m->getResultCode() == Memcached::RES_NOTFOUND) {\n        $ip = array();\n        $m->set('ip_block', $ip);\n    } else {\n        \/* log error *\/\n        \/* ...       *\/\n    }\n}","output":null}],"memcached::getdelayed":[{"title":"Memcached::getDelayed() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('int', 99);\n$m->set('string', 'a simple string');\n$m->set('array', array(11, 12));\n\n$m->getDelayed(array('int', 'array'), true);\nvar_dump($m->fetchAll());","output":"array(2) {\n  [0]=>\n  array(3) {\n    [\"key\"]=>\n    string(3) \"int\"\n    [\"value\"]=>\n    int(99)\n    [\"cas\"]=>\n    float(2363)\n  }\n  [1]=>\n  array(3) {\n    [\"key\"]=>\n    string(5) \"array\"\n    [\"value\"]=>\n    array(2) {\n      [0]=>\n      int(11)\n      [1]=>\n      int(12)\n    }\n    [\"cas\"]=>\n    float(2365)\n  }\n}"}],"memcached::getmulti":[{"title":"Memcached::getMulti() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$items = array(\n    'key1' => 'value1',\n    'key2' => 'value2',\n    'key3' => 'value3'\n);\n$m->setMulti($items);\n$result = $m->getMulti(array('key1', 'key3', 'badkey'), $cas);\nvar_dump($result, $cas);","output":"array(2) {\n  [\"key1\"]=>\n  string(6) \"value1\"\n  [\"key3\"]=>\n  string(6) \"value3\"\n}\narray(2) {\n  [\"key1\"]=>\n  float(2360)\n  [\"key3\"]=>\n  float(2362)\n}"},{"title":"Memcached::GET_PRESERVE_ORDER example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$data = array(\n    'foo' => 'foo-data',\n    'bar' => 'bar-data',\n    'baz' => 'baz-data',\n    'lol' => 'lol-data',\n    'kek' => 'kek-data',\n);\n\n$m->setMulti($data, 3600);\n\n$null = null;\n$keys = array_keys($data);\n$keys[] = 'zoo';\n$got = $m->getMulti($keys, $null, Memcached::GET_PRESERVE_ORDER);\n\nforeach ($got as $k => $v) {\n    echo \"$k $v\\n\";\n}","output":"foo foo-data\nbar bar-data\nbaz baz-data\nlol lol-data\nkek kek-data\nzoo"}],"memcached::getoption":[{"title":"Retrieving Memcached options","source":"$m = new Memcached();\nvar_dump($m->getOption(Memcached::OPT_COMPRESSION));\nvar_dump($m->getOption(Memcached::OPT_POLL_TIMEOUT));","output":"bool(true)\nint(1000)"}],"memcached::getresultcode":[{"title":"Memcached::getResultCode() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->add('foo', 'bar');\nif ($m->getResultCode() == Memcached::RES_NOTSTORED) {\n    \/* ... *\/\n}","output":null}],"memcached::getresultmessage":[{"title":"Memcached::getResultMessage() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->add('foo', 'bar'); \/\/ first time should succeed\n$m->add('foo', 'bar');\necho $m->getResultMessage(),\"\\n\";","output":"NOT STORED"}],"memcached::getserverbykey":[{"title":"Memcached::getServerByKey() example","source":"$m = new Memcached();\n$m->addServers(array(\n    array('mem1.domain.com', 11211, 40),\n    array('mem2.domain.com', 11211, 40),\n    array('mem3.domain.com', 11211, 20),\n));\n\n$m->setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE, true);\n\nvar_dump($m->getServerByKey('user'));\nvar_dump($m->getServerByKey('log'));\nvar_dump($m->getServerByKey('ip'));","output":"array(3) {\n  [\"host\"]=>\n  string(15) \"mem3.domain.com\"\n  [\"port\"]=>\n  int(11211)\n  [\"weight\"]=>\n  int(20)\n}\narray(3) {\n  [\"host\"]=>\n  string(15) \"mem2.domain.com\"\n  [\"port\"]=>\n  int(11211)\n  [\"weight\"]=>\n  int(40)\n}\narray(3) {\n  [\"host\"]=>\n  string(15) \"mem2.domain.com\"\n  [\"port\"]=>\n  int(11211)\n  [\"weight\"]=>\n  int(40)\n}"}],"memcached::getserverlist":[{"title":"Memcached::getServerList() example","source":"$m = new Memcached();\n$m->addServers(array(\n    array('mem1.domain.com', 11211, 20),\n    array('mem2.domain.com', 11311, 80),\n));\nvar_dump($m->getServerList());","output":"array(2) {\n  [0]=>\n  array(3) {\n    [\"host\"]=>\n    string(15) \"mem1.domain.com\"\n    [\"port\"]=>\n    int(11211)\n    [\"weight\"]=>\n    int(20)\n  }\n  [1]=>\n  array(3) {\n    [\"host\"]=>\n    string(15) \"mem2.domain.com\"\n    [\"port\"]=>\n    int(11311)\n    [\"weight\"]=>\n    int(80)\n  }\n}"}],"memcached::getstats":[{"title":"Memcached::getStats() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\nprint_r($m->getStats());","output":"Array\n(\n    [localhost:11211] => Array\n        (\n            [pid] => 4933\n            [uptime] => 786123\n            [threads] => 1\n            [time] => 1233868010\n            [pointer_size] => 32\n            [rusage_user_seconds] => 0\n            [rusage_user_microseconds] => 140000\n            [rusage_system_seconds] => 23\n            [rusage_system_microseconds] => 210000\n            [curr_items] => 145\n            [total_items] => 2374\n            [limit_maxbytes] => 67108864\n            [curr_connections] => 2\n            [total_connections] => 151\n            [connection_structures] => 3\n            [bytes] => 20345\n            [cmd_get] => 213343\n            [cmd_set] => 2381\n            [get_hits] => 204223\n            [get_misses] => 9120\n            [evictions] => 0\n            [bytes_read] => 9092476\n            [bytes_written] => 15420512\n            [version] => 1.2.6\n        )\n\n)"}],"memcached::getversion":[{"title":"Memcached::getVersion() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\nprint_r($m->getVersion());","output":"Array\n(\n    [localhost:11211] => 1.2.6\n)"}],"memcached::increment":[{"title":"Memcached::increment() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('counter', 0);\n$m->increment('counter');\n$n = $m->increment('counter', 10);\nvar_dump($n);\n\n$m->set('counter', 'abc');\n$n = $m->increment('counter');\n\/\/ ^ will fail due to item value not being numeric\nvar_dump($n);","output":"int(11)\nbool(false)"}],"memcached::prepend":[{"title":"Memcached::prepend() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n$m->setOption(Memcached::OPT_COMPRESSION, false);\n\n$m->set('foo', 'abc');\n$m->prepend('foo', 'def');\nvar_dump($m->get('foo'));","output":"string(6) \"defabc\""}],"memcached::set":[{"title":"Memcached::set() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$m->set('int', 99);\n$m->set('string', 'a simple string');\n$m->set('array', array(11, 12));\n\/* expire 'object' key in 5 minutes *\/\n$m->set('object', new stdclass, time() + 300);\n\n\nvar_dump($m->get('int'));\nvar_dump($m->get('string'));\nvar_dump($m->get('array'));\nvar_dump($m->get('object'));","output":"int(99)\nstring(15) \"a simple string\"\narray(2) {\n  [0]=>\n  int(11)\n  [1]=>\n  int(12)\n}\nobject(stdClass)#1 (0) {\n}"}],"memcached::setbykey":[{"title":"Memcached::setByKey() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n\/* keep IP blocks on a certain server *\/\n$m->setByKey('api-cache', 'block-ip:169.254.253.252', 1);\n$m->setByKey('api-cache', 'block-ip:169.127.127.202', 1);","output":null}],"memcached::setmulti":[{"title":"Memcached::setMulti() example","source":"$m = new Memcached();\n$m->addServer('localhost', 11211);\n\n$items = array(\n    'key1' => 'value1',\n    'key2' => 'value2',\n    'key3' => 'value3'\n);\n$m->setMulti($items, time() + 300);","output":null}],"memcached::setoption":[{"title":"Setting a Memcached option","source":"$m = new Memcached();\nvar_dump($m->getOption(Memcached::OPT_HASH) == Memcached::HASH_DEFAULT);\n$m->setOption(Memcached::OPT_HASH, Memcached::HASH_MURMUR);\n$m->setOption(Memcached::OPT_PREFIX_KEY, \"widgets\");\necho \"Prefix key is now: \", $m->getOption(Memcached::OPT_PREFIX_KEY), \"\\n\";","output":"bool(true)\nPrefix key is now: widgets"}],"memcached::setoptions":[{"title":"Setting Memcached options","source":"$m = new Memcached();\nvar_dump($m->getOption(Memcached::OPT_HASH) == Memcached::HASH_DEFAULT);\n\n$m->setOptions(array(Memcached::OPT_HASH => Memcached::HASH_MURMUR, Memcached::OPT_PREFIX_KEY => \"widgets\"));\n\nvar_dump($m->getOption(Memcached::OPT_HASH) == Memcached::HASH_DEFAULT);\necho \"Prefix key is now: \", $m->getOption(Memcached::OPT_PREFIX_KEY), \"\\n\";","output":"bool(true)\nbool(false)\nPrefix key is now: widgets"}],"messageformatter::create":[{"title":"msgfmt_create() example","source":"$fmt = msgfmt_create(\"en_US\", \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\");\necho msgfmt_format($fmt, array(4560, 123, 4560\/123));\n$fmt = msgfmt_create(\"de\", \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\");\necho msgfmt_format($fmt, array(4560, 123, 4560\/123));","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter(\"en_US\", \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\");\necho $fmt->format(array(4560, 123, 4560\/123));\n$fmt = new MessageFormatter(\"de\", \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\");\necho $fmt->format(array(4560, 123, 4560\/123));","output":null}],"messageformatter::format":[{"title":"msgfmt_format() example","source":"$fmt = msgfmt_create(\"en_US\", \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\");\necho msgfmt_format($fmt, array(4560, 123, 4560\/123));\n$fmt = msgfmt_create(\"de\", \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\");\necho msgfmt_format($fmt, array(4560, 123, 4560\/123));","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter(\"en_US\", \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\");\necho $fmt->format(array(4560, 123, 4560\/123));\n$fmt = new MessageFormatter(\"de\", \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\");\necho $fmt->format(array(4560, 123, 4560\/123));","output":null}],"messageformatter::formatmessage":[{"title":"msgfmt_format_message() example","source":"echo msgfmt_format_message(\"en_US\", \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\\n\", array(4560, 123, 4560\/123));\necho msgfmt_format_message(\"de\", \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\\n\", array(4560, 123, 4560\/123));","output":null},{"title":"OO example","source":"echo MessageFormatter::formatMessage(\"en_US\", \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\\n\", array(4560, 123, 4560\/123));\necho MessageFormatter::formatMessage(\"de\", \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\\n\", array(4560, 123, 4560\/123));","output":null}],"messageformatter::geterrorcode":[{"title":"msgfmt_get_error_code() example","source":"$fmt = msgfmt_create(\"en_US\", \"{0, number} monkeys on {1, number} trees\");\n$str = msgfmt_format($fmt, array());\nif(!$str) {\n    echo \"ERROR: \".msgfmt_get_error_message($fmt) . \" (\" . msgfmt_get_error_code($fmt) . \")\\n\";\n}","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter(\"en_US\", \"{0, number} monkeys on {1, number} trees\");\n$str = $fmt->format(array());\nif(!$str) {\n    echo \"ERROR: \".$fmt->getErrorMessage() . \" (\" . $fmt->getErrorCode() . \")\\n\";\n}","output":null}],"messageformatter::geterrormessage":[{"title":"msgfmt_get_error_message() example","source":"$fmt = msgfmt_create(\"en_US\", \"{0, number} monkeys on {1, number} trees\");\n$str = msgfmt_format($fmt, array());\nif(!$str) {\n    echo \"ERROR: \".msgfmt_get_error_message($fmt) . \" (\" . msgfmt_get_error_code($fmt) . \")\\n\";\n}","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter(\"en_US\", \"{0, number} monkeys on {1, number} trees\");\n$str = $fmt->format(array());\nif(!$str) {\n    echo \"ERROR: \".$fmt->getErrorMessage() . \" (\" . $fmt->getErrorCode() . \")\\n\";\n}","output":null}],"messageformatter::getlocale":[{"title":"msgfmt_get_locale() example","source":"$fmt = msgfmt_create('en_US', \"Number {0,number}\");\necho msgfmt_get_locale($fmt);","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter('en_US', \"Number {0,number}\");\necho $fmt->getLocale();","output":null}],"messageformatter::getpattern":[{"title":"msgfmt_get_pattern() example","source":"$fmt = msgfmt_create( \"en_US\", \"{0, number} monkeys on {1, number} trees\" );\necho \"Default pattern: '\" . msgfmt_get_pattern( $fmt ) . \"'\\n\";\necho \"Formatting result: \" . msgfmt_format( $fmt, array(123, 456) ) . \"\\n\";\n\nmsgfmt_set_pattern( $fmt, \"{0, number} trees hosting {1, number} monkeys\" );\necho \"New pattern: '\" . msgfmt_get_pattern( $fmt ) . \"'\\n\";\necho \"Formatted number: \" . msgfmt_format( $fmt, array(123, 456) ) . \"\\n\";","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter( \"en_US\", \"{0, number} monkeys on {1, number} trees\" );\necho \"Default pattern: '\" . $fmt->getPattern() . \"'\\n\";\necho \"Formatting result: \" . $fmt->format(array(123, 456)) . \"\\n\";\n\n$fmt->setPattern(\"{0, number} trees hosting {1, number} monkeys\" );\necho \"New pattern: '\" . $fmt->getPattern() . \"'\\n\";\necho \"Formatted number: \" . $fmt->format(array(123, 456)) . \"\\n\";","output":null}],"messageformatter::parse":[{"title":"msgfmt_parse() example","source":"$fmt = msgfmt_create('en_US', \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\");\n$res = msgfmt_parse($fmt, \"4,560 monkeys on 123 trees make 37.073 monkeys per tree\");\nvar_export($res);\n\n$fmt = msgfmt_create('de', \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\");\n$res = msgfmt_parse($fmt, \"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\");\nvar_export($res);","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter('en_US', \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\");\n$res = $fmt->parse(\"4,560 monkeys on 123 trees make 37.073 monkeys per tree\");\nvar_export($res);\n\n$fmt = new MessageFormatter('de', \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\");\n$res = $fmt->parse(\"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\");\nvar_export($res);","output":null}],"messageformatter::parsemessage":[{"title":"msgfmt_parse_message() example","source":"$fmt = msgfmt_parse_message('en_US', \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\",\n                            \"4,560 monkeys on 123 trees make 37.073 monkeys per tree\");\nvar_export($fmt);\n\n$fmt = msgfmt_parse_message('de', \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\", \n                            \"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\");\nvar_export($fmt);","output":null},{"title":"OO example","source":"$fmt = MessageFormatter::parseMessage('en_US', \"{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree\",\n                            \"4,560 monkeys on 123 trees make 37.073 monkeys per tree\");\nvar_export($fmt);\n\n$fmt = MessageFormatter::parseMessage('de', \"{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum\", \n                            \"4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum\");\nvar_export($fmt);","output":null}],"messageformatter::setpattern":[{"title":"msgfmt_set_pattern() example","source":"$fmt = msgfmt_create( \"en_US\", \"{0, number} monkeys on {1, number} trees\" );\necho \"Default pattern: '\" . msgfmt_get_pattern( $fmt ) . \"'\\n\";\necho \"Formatting result: \" . msgfmt_format( $fmt, array(123, 456) ) . \"\\n\";\n\nmsgfmt_set_pattern( $fmt, \"{0, number} trees hosting {1, number} monkeys\" );\necho \"New pattern: '\" . msgfmt_get_pattern( $fmt ) . \"'\\n\";\necho \"Formatted number: \" . msgfmt_format( $fmt, array(123, 456) ) . \"\\n\";","output":null},{"title":"OO example","source":"$fmt = new MessageFormatter( \"en_US\", \"{0, number} monkeys on {1, number} trees\" );\necho \"Default pattern: '\" . $fmt->getPattern() . \"'\\n\";\necho \"Formatting result: \" . $fmt->format(array(123, 456)) . \"\\n\";\n\n$fmt->setPattern(\"{0, number} trees hosting {1, number} monkeys\" );\necho \"New pattern: '\" . $fmt->getPattern() . \"'\\n\";\necho \"Formatted number: \" . $fmt->format(array(123, 456)) . \"\\n\";","output":null}],"mongo::getpoolsize":[{"title":"Changing pool size","source":"$connection = new Mongo(\"host1\");\n\n\/\/ pool size is -1\necho \"pool size is: \".Mongo::getPoolSize().\"\\n\";\n\necho \"setting pool size to 200\\n\";\n\nMongo::setPoolSize(200);\n\n\/\/ pool size is 200\necho \"pool size is: \".Mongo::getPoolSize().\"\\n\";\n\n$conn2 = new Mongo(\"host2\");\n\n\/\/ remaining for host1 is -2\n\/\/ remaining for host2 is 199\nvar_dump(Mongo::poolDebug());","output":null}],"mongo::setpoolsize":[{"title":"Mongo::setPoolSize() example","source":"\/\/ only allow one connection to a server\nMongo::setPoolSize(1);\n\n\/\/ creates one connection to localhost:27017\n$m1 = new Mongo();\n\n\/\/ attempt to create a second connection to localhost:27017\n\/\/ only one connection is allowed, so this will throw an exception\n$m2 = new Mongo();","output":"Fatal error: Uncaught exception 'MongoConnectionException' with message 'no more connections in pool' in \/path\/to\/php\/script.php:10\nStack trace:\n#0 \/path\/to\/php\/script.php(10): Mongo->__construct()\n#1 {main}\n  thrown in \/path\/to\/php\/script.php on line 10"}],"mongoclient::close":[{"title":"MongoClient::close() example","source":"\/\/ Connect to a replicaset\n$a = new MongoClient(\"mongodb:\/\/whisky:13000\/?replicaset=seta\");\n\n$connections = $a->getConnections();\n\nforeach ( $connections as $con )\n{\n    \/\/ Loop over all the connections, and when the type is \"SECONDARY\"\n    \/\/ we close the connection\n    if ( $con['connection']['connection_type_desc'] == \"SECONDARY\" )\n    {\n        echo \"Closing '{$con['hash']}': \";\n        $closed = $a->close( $con['hash'] );\n        echo $closed ? \"ok\" : \"failed\", \"\\n\";\n    }\n}","output":"Closing 'whisky:13001;X;4948': ok"}],"mongoclient::getconnections":[{"title":"MongoClient::getConnections() example","source":"$m = new MongoClient;\nvar_dump($m->getConnections());","output":"array(1) {\n  [0]=>\n  array(3) {\n    [\"hash\"]=>\n    string(26) \"localhost:27017;-;X;56052\"\n    [\"server\"]=>\n    array(3) {\n      [\"host\"]=>\n      string(10) \"localhost\"\n      [\"port\"]=>\n      int(27017)\n      [\"pid\"]=>\n      int(56052)\n    }\n    [\"connection\"]=>\n    array(8) {\n      [\"last_ping\"]=>\n      int(1354076401)\n      [\"last_ismaster\"]=>\n      int(0)\n      [\"ping_ms\"]=>\n      int(0)\n      [\"connection_type\"]=>\n      int(1)\n      [\"connection_type_desc\"]=>\n      string(10) \"STANDALONE\"\n      [\"max_bson_size\"]=>\n      int(16777216)\n      [\"tag_count\"]=>\n      int(0)\n      [\"tags\"]=>\n      array(0) {\n      }\n    }\n  }\n}"}],"mongoclient::getreadpreference":[{"title":"MongoClient::getReadPreference() return value example","source":"$m = new MongoClient();\n$m->setReadPreference(MongoClient::RP_SECONDARY, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n    array(),\n));\nvar_dump($m->getReadPreference());","output":"array(2) {\n  [\"type\"]=>\n  string(9) \"secondary\"\n  [\"tagsets\"]=>\n  array(3) {\n    [0]=>\n    array(2) {\n      [\"dc\"]=>\n      string(4) \"east\"\n      [\"use\"]=>\n      string(9) \"reporting\"\n    }\n    [1]=>\n    array(1) {\n      [\"dc\"]=>\n      string(7) \"west\"\n    }\n    [2]=>\n    array(0) {\n    }\n  }\n}"}],"mongoclient::getwriteconcern":[{"title":"MongoClient::getWriteConcern() return value example","source":"$mc = new MongoClient('mongodb:\/\/localhost:27017', array('wTimeoutMS' => 500));\nvar_dump($mc->getWriteConcern());\n\n$mc->setWriteConcern(1, 1000);\nvar_dump($mc->getWriteConcern());","output":"array(2) {\n  [\"w\"]=>\n  int(1)\n  [\"wtimeout\"]=>\n  int(500)\n}\narray(2) {\n  [\"w\"]=>\n  int(1)\n  [\"wtimeout\"]=>\n  int(1000)\n}"}],"mongoclient::killcursor":[{"title":"MongoClient::killCursor() example","source":"$m = new MongoClient();\n$c = $m->testdb->collection;\n$cursor = $c->find();\n$result = $cursor->next();\n\n\/\/ Now the cursor is valid, so we can get the hash and ID out:\n$info = $cursor->info();\n\n\/\/ Kill the cursor\nMongoClient::killCursor( $info['server'], $info['id'] );","output":null}],"mongoclient::listdbs":[{"title":"MongoClient::listDBs() example","source":"$mongo = new MongoClient();\n$dbs = $mongo->listDBs();\nprint_r($dbs);","output":"Array\n(\n    [databases] => Array\n        (\n            [0] => Array\n                (\n                    [name] => doctrine\n                    [sizeOnDisk] => 218103808\n                    [empty] =>\n                )\n        )\n\n    [totalSize] => 218103808\n    [ok] => 1\n)"}],"mongoclient::selectcollection":[{"title":"MongoClient::selectCollection() example","source":"$m = new MongoClient();\n\n$c1 = $m->selectCollection(\"foo\", \"bar.baz\");\n\/\/ which is equivalent to\n$c2 = $m->selectDB(\"foo\")->selectCollection(\"bar.baz\");\n\n\/\/ $c1 and $c2 now represent the same collection","output":null}],"mongoclient::setreadpreference":[{"title":"MongoClient::setReadPreference() tag set array syntax example","source":"$m = new MongoClient();\n\n\/\/ Prefer the nearest server in the \"east\" data center also used for reporting,\n\/\/ but fall back to a server in the \"west\" data center\n$m->setReadPreference(MongoClient::RP_NEAREST, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n));","output":null}],"mongoclient::setwriteconcern":[{"title":"MongoClient::setWriteConcern() example","source":"$mc = new MongoClient('mongodb:\/\/rs1.example.com,rs2.example.com');\n\n\/\/ Require that the majority of servers in the replica set acknowledge writes\n\/\/ within three seconds.\n$mc->setWriteConcern('majority', 3000);","output":null}],"mongocode::__construct":[{"title":"MongoCode::__construct() example","source":"$code = new MongoCode('function() { '.\n    'for(i=0;i<10;i++) {'.\n        'db.foo.update({z : i}, {z : x});'.\n    '}'.\n    'return x-1;'.\n '}', array(\"x\" => 4));\nvar_dump($code);","output":"object(MongoCode)#1 (2) {\n  [\"scope\"]=>\n  array(1) {\n    [\"x\"]=>\n    int(4)\n  }\n  [\"code\"]=>\n  string(80) \"function() { for(i=0;i<10;i++) { db.foo.update({z : i}, {z : x}); } return x-1; }\"\n}"},{"title":"Using MongoCode with $where","source":"$cursor = $collection->find(array('$where' => new MongoCode('function() { return this.x < y; }', array('y'=>$y))));","output":null}],"mongocode::__tostring":[{"title":"MongoCode::__toString() example","source":"$code = new MongoCode('return x;', array(\"x\"=>\"hi\"));\necho \"$code\\n\";\n\n$code = new MongoCode('function() { for(i=0;i<10;i++) { db.foo.update({x:i}, {x:i+1}); } }');\necho \"$code\\n\";","output":"return x;\nfunction() { for(i=0;i<10;i++) { db.foo.update({x:i}, {x:i+1}); } }"}],"mongocollection::__tostring":[{"title":"MongoCollection::__toString() example","source":"$m = new MongoClient();\n\n$c1 = $m->foo->bar->baz;\necho \"Working with collection $c1.\";\n\n$c2 = $m->selectCollection('[]', '&');\necho \"Working with collection $c2.\";","output":"Working with collection foo.bar.baz.\nWorking with collection [].&."}],"mongocollection::aggregatecursor":[{"title":"MongoCollection::aggregateCursor() example","source":"$m = new MongoClient;\n$db = $m->test;\n$people = $db->people;\n$people->drop();\n\n$people->insert(array(\"name\" => \"Joe\", \"points\" => 4));\n$people->insert(array(\"name\" => \"Molly\", \"points\" => 43));\n$people->insert(array(\"name\" => \"Sally\", \"points\" => 22));\n$people->insert(array(\"name\" => \"Joe\", \"points\" => 22));\n$people->insert(array(\"name\" => \"Molly\", \"points\" => 87));\n\n$ages = $people->aggregateCursor( [\n        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],\n        [ '$sort' => [ 'points' => -1 ] ],\n] );\n\nforeach ($ages as $person) {\n    echo \"{$person['_id']}: {$person['points']}\\n\";\n}","output":null},{"title":"MongoCollection::aggregateCursor() example with different initial batch size","source":"$m = new MongoClient;\n$db = $m->test;\n$people = $db->people;\n$people->drop();\n\n\/* Insert some sample data *\/\n$people->insert(array(\"name\" => \"Joe\", \"points\" => 4));\n$people->insert(array(\"name\" => \"Molly\", \"points\" => 43));\n$people->insert(array(\"name\" => \"Sally\", \"points\" => 22));\n$people->insert(array(\"name\" => \"Joe\", \"points\" => 22));\n$people->insert(array(\"name\" => \"Molly\", \"points\" => 87));\n\n\/* Run the command cursor *\/\n$ages = $people->aggregateCursor(\n    [\n        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],\n        [ '$sort' => [ 'points' => -1 ] ],\n    ],\n    [ \"cursor\" => [ \"batchSize\" => 4 ] ]\n);\n\nforeach ($ages as $person) {\n    echo \"{$person['_id']}: {$person['points']}\\n\";\n}","output":null}],"mongocollection::batchinsert":[{"title":"MongoCollection::batchInsert() example","source":"$users = array();\nfor ($i = 0; $i<100; $i++) {\n  $users[] = array('username' => 'user'.$i, 'i' => $i);\n}\n\n$mongo = new MongoClient();\n$collection = $mongo->my_db->users;\n$collection->drop();\n\n$collection->batchInsert($users);\n\nforeach ($users as $user) {\n  echo $user['_id'].\"\\n\"; \/\/ populated with instanceof MongoId\n}\n\n$users = $collection->find()->sort(array('i' => 1));\nforeach ($users as $user) {\n    var_dump($user['username']);\n}","output":"4bf43ac68ead0e1971000000\n4bf43ac68ead0e1971010000\n4bf43ac68ead0e1971020000\n...\nstring(5) \"user1\"\nstring(5) \"user2\"\nstring(5) \"user3\"\n..."},{"title":"MongoCollection::batchInsert() example with ignoring errors","source":"$con = new Mongo;\n$db = $con->demo;\n\n$doc1 = array(\n        '_id' => new MongoId('4cb4ab6d7addf98506010001'),\n        'id' => 1,\n        'desc' => \"ONE\",\n);\n$doc2 = array(\n        '_id' => new MongoId('4cb4ab6d7addf98506010002'),\n        'id' => 2,\n        'desc' => \"TWO\",\n);\n$doc3 = array(\n        '_id' => new MongoId('4cb4ab6d7addf98506010002'), \/\/ same _id as above\n        'id' => 3,\n        'desc' => \"THREE\",\n);\n$doc4 = array(\n        '_id' => new MongoId('4cb4ab6d7addf98506010004'),\n        'id' => 4,\n        'desc' => \"FOUR\",\n);\n\n$c = $db->selectCollection('c');\n$c->batchInsert(\n    array($doc1, $doc2, $doc3, $doc4),\n    array('continueOnError' => true)\n);\n\n$docs = $c->find();\nforeach ($docs as $doc) {\n    var_dump($doc['desc']);\n}","output":"string(3) \"ONE\"\nstring(3) \"TWO\"\nstring(4) \"FOUR\""}],"mongocollection::count":[{"title":"MongoCollection::count() example","source":"$collection->insert(array('x'=>1));\n$collection->insert(array('x'=>2));\n$collection->insert(array('x'=>3));\n\nvar_dump($collection->count());\nvar_dump($collection->count(array('x'=>1)));","output":"int(3)\nint(1)"}],"mongocollection::createdbref":[{"title":"MongoCollection::createDBRef() example","source":"$songs = $db->songs;\n$playlists = $db->playlists;\n\n\/\/ create a reference to a song\n$manamana = $songs->findOne(array('title' => 'Ma na ma na'));\n$refToSong = $songs->createDBRef($manamana);\n\n\/\/ add the reference to my playlist\n$playlists->update(array('username' => 'me'), array('$push' => array('songlist' => $refToSong)));","output":null}],"mongocollection::createindex":[{"title":"MongoCollection::createIndex() example","source":"$c = new MongoCollection($db, 'foo');\n\n\/\/ create an index on 'x' ascending\n$c->createIndex(array('x' => 1));\n\n\/\/ create a unique index on 'y'\n$c->createIndex(array('y' => 1), array('unique' => true));\n\n\/\/ create a compound index on 'za' ascending and 'zb' descending\n$c->createIndex(array('za' => 1, 'zb' => -1));","output":null},{"title":"Geospatial Indexing","source":"$collection->createIndex(array('loc' => '2dsphere'));","output":null},{"title":"Drop duplicates example","source":"$collection->insert(array('username' => 'joeschmoe'));\n$collection->insert(array('username' => 'joeschmoe'));\n\n\/* Index creation fails, since you cannot create a unique index on a field when\n * duplicates exist.\n *\/\n$collection->createIndex(array('username' => 1), array('unique' => 1));\n\n\/* MongoDB will one of the conflicting documents and allow the unique index to\n * be created.\n *\/\n$collection->createIndex(array('username' => 1), array('unique' => 1, 'dropDups' => 1));\n\n\/* We now have a unique index and subsequent inserts with the same username will\n * fail.\n *\/\n$collection->insert(array('username' => 'joeschmoe'));","output":null}],"mongocollection::deleteindex":[{"title":"MongoCollection::deleteIndex() example","source":"$m = new MongoClient();\n$c = $m->example->indices;\n\n\/\/ create and remove a simple index\n$c->createIndex(array(\"i\"=>1));\n$c->deleteIndex(\"i\");\n\n\/\/ create and remove a multi-key index\n$c->ensureIndex(array(\"j\" => 1, \"k\" => 1));\n$c->deleteIndex(array(\"j\" => 1, \"k\" => 1));","output":null}],"mongocollection::deleteindexes":[{"title":"MongoCollection::deleteIndexes() example","source":"$collection = $mongo->my_db->articles;\n$response = $collection->deleteIndexes();\nprint_r($response);","output":"Array\n(\n    [nIndexesWas] => 1\n    [msg] => all indexes deleted for collection\n    [ok] => 1\n)"}],"mongocollection::distinct":[{"title":"MongoCollection::distinct() example","source":"$m = new Mongo;\n$db = $m->selectDB(\"test\");\n$db->dropCollection(\"distinct\");\n$c = $db->distinct;\n\n$c->insert(array(\"stuff\" => \"bar\", \"zip-code\" => 10010));\n$c->insert(array(\"stuff\" => \"foo\", \"zip-code\" => 10010));\n$c->insert(array(\"stuff\" => \"bar\", \"zip-code\" => 99701), array(\"w\" => 1));\n\n$retval = $c->distinct(\"zip-code\");\nvar_dump($retval);\n\n$retval = $c->distinct(\"zip-code\", array(\"stuff\" => \"foo\"));\nvar_dump($retval);\n\n$retval = $c->distinct(\"zip-code\", array(\"stuff\" => \"bar\"));\nvar_dump($retval);","output":"array(2) {\n  [0]=>\n  int(10010)\n  [1]=>\n  int(99701)\n}\narray(1) {\n  [0]=>\n  int(10010)\n}\narray(2) {\n  [0]=>\n  int(10010)\n  [1]=>\n  int(99701)\n}"},{"title":"MongoCollection::distinct() example on a embedded document","source":"$c->insert(array(\"user\" => array(\"points\" => 25)));\n$c->insert(array(\"user\" => array(\"points\" => 31)));\n$c->insert(array(\"user\" => array(\"points\" => 25)));\n\n$retval = $c->distinct(\"user.points\");\nvar_dump($retval);\n\n$retval = $c->distinct(\"user.nonexisting\");\nvar_dump($retval);","output":"array(2) {\n  [0]=>\n  int(25)\n  [1]=>\n  int(31)\n}\narray(0) {\n}"}],"mongocollection::drop":[{"title":"MongoCollection::drop() example","source":"$collection = $mongo->my_db->articles;\n$response = $collection->drop();\nprint_r($response);","output":"Array\n(\n    [nIndexesWas] => 1\n    [msg] => all indexes deleted for collection\n    [ns] => my_db.articles\n    [ok] => 1\n)"}],"mongocollection::ensureindex":[{"title":"MongoCollection::ensureIndex() example","source":"$c = new MongoCollection($db, 'foo');\n\n\/\/ create an index on 'x' ascending\n$c->ensureIndex(array('x' => 1));\n\n\/\/ create a unique index on 'y'\n$c->ensureIndex(array('y' => 1), array('unique' => true));\n\n\/\/ create a compound index on 'za' ascending and 'zb' descending\n$c->ensureIndex(array('za' => 1, 'zb' => -1));","output":null},{"title":"Geospatial Indexing","source":"$collection->ensureIndex(array('loc' => '2dsphere'));","output":null},{"title":"Drop duplicates example","source":"$collection->insert(array('username' => 'joeschmoe'));\n$collection->insert(array('username' => 'joeschmoe'));\n\n\/* Index creation fails, since you cannot create a unique index on a field when\n * duplicates exist.\n *\/\n$collection->ensureIndex(array('username' => 1), array('unique' => 1));\n\n\/* MongoDB will one of the conflicting documents and allow the unique index to\n * be created.\n *\/\n$collection->ensureIndex(array('username' => 1), array('unique' => 1, 'dropDups' => 1));\n\n\/* We now have a unique index and subsequent inserts with the same username will\n * fail.\n *\/\n$collection->insert(array('username' => 'joeschmoe'));","output":null}],"mongocollection::find":[{"title":"MongoCollection::find() example","source":"$m = new MongoClient();\n$db = $m->selectDB('test');\n$collection = new MongoCollection($db, 'produce');\n\n\/\/ search for fruits\n$fruitQuery = array('Type' => 'Fruit');\n\n$cursor = $collection->find($fruitQuery);\nforeach ($cursor as $doc) {\n    var_dump($doc);\n}\n\n\/\/ search for produce that is sweet. Taste is a child of Details. \n$sweetQuery = array('Details.Taste' => 'Sweet');\necho \"Sweet\\n\";\n$cursor = $collection->find($sweetQuery);\nforeach ($cursor as $doc) {\n    var_dump($doc);\n}","output":"array(4) {\n  [\"_id\"]=>\n  object(MongoId)#7 (1) {\n    [\"$id\"]=>\n    string(24) \"50a87dd084f045a19b220dd6\"\n  }\n  [\"Name\"]=>\n  string(5) \"Apple\"\n  [\"Type\"]=>\n  string(5) \"Fruit\"\n  [\"Details\"]=>\n  array(2) {\n    [\"Taste\"]=>\n    string(5) \"Sweet\"\n    [\"Colour\"]=>\n    string(3) \"Red\"\n  }\n}\narray(4) {\n  [\"_id\"]=>\n  object(MongoId)#8 (1) {\n    [\"$id\"]=>\n    string(24) \"50a87de084f045a19b220dd7\"\n  }\n  [\"Name\"]=>\n  string(5) \"Lemon\"\n  [\"Type\"]=>\n  string(5) \"Fruit\"\n  [\"Details\"]=>\n  array(2) {\n    [\"Taste\"]=>\n    string(4) \"Sour\"\n    [\"Colour\"]=>\n    string(5) \"Green\"\n  }\n}\n\nSweet:\narray(4) {\n  [\"_id\"]=>\n  object(MongoId)#7 (1) {\n    [\"$id\"]=>\n    string(24) \"50a87dd084f045a19b220dd6\"\n  }\n  [\"Name\"]=>\n  string(5) \"Apple\"\n  [\"Type\"]=>\n  string(5) \"Fruit\"\n  [\"Details\"]=>\n  array(2) {\n    [\"Taste\"]=>\n    string(5) \"Sweet\"\n    [\"Colour\"]=>\n    string(3) \"Red\"\n  }\n}"},{"title":"MongoCollection::find() example","source":"$m = new MongoClient();\n$db = $m->selectDB('test');\n$collection = new MongoCollection($db, 'phpmanual');\n\n\/\/ search for documents where 5 < x < 20\n$rangeQuery = array('x' => array( '$gt' => 5, '$lt' => 20 ));\n\n$cursor = $collection->find($rangeQuery);\nforeach ($cursor as $doc) {\n    var_dump($doc);\n}","output":"array(2) {\n  [\"_id\"]=>\n  object(MongoId)#10 (1) {\n    [\"$id\"]=>\n    string(24) \"4ebc3e3710b89f2349000000\"\n  }\n  [\"x\"]=>\n  int(12)\n}\narray(2) {\n  [\"_id\"]=>\n  object(MongoId)#11 (1) {\n    [\"$id\"]=>\n    string(24) \"4ebc3e3710b89f2349000001\"\n  }\n  [\"x\"]=>\n  int(12)\n}"},{"title":"MongoCollection::find() example using $where","source":"$m = new MongoClient();\n$db = $m->selectDB('test');\n$collection = new MongoCollection($db, 'phpmanual');\n\n$js = \"function() {\n    return this.name == 'Joe' || this.age == 50;\n}\";\n$cursor = $collection->find(array('$where' => $js));\nforeach ($cursor as $doc) {\n    var_dump($doc);\n}","output":"array(3) {\n  [\"_id\"]=>\n  object(MongoId)#7 (1) {\n    [\"$id\"]=>\n    string(24) \"4ebc3e3710b89f2349000002\"\n  }\n  [\"name\"]=>\n  string(3) \"Joe\"\n  [\"age\"]=>\n  int(20)\n}"},{"title":"MongoCollection::find() example using $in","source":"$m = new MongoClient();\n$db = $m->selectDB('test');\n$collection = new MongoCollection($db, 'phpmanual');\n\n$cursor = $collection->find(array(\n    'name' => array('$in' => array('Joe', 'Wendy'))\n));","output":"array(3) {\n  [\"_id\"]=>\n  object(MongoId)#7 (1) {\n    [\"$id\"]=>\n    string(24) \"4ebc3e3710b89f2349000002\"\n  }\n  [\"name\"]=>\n  string(3) \"Joe\"\n  [\"age\"]=>\n  int(20)\n}"},{"title":"Getting results as an array","source":"$m = new MongoClient();\n$db = $m->selectDB('test');\n$collection = new MongoCollection($db, 'phpmanual');\n\n$cursor = $collection->find();\n$array = iterator_to_array($cursor);","output":"array(3) {\n  [\"4ebc40af10b89f5149000000\"]=>\n  array(2) {\n    [\"_id\"]=>\n    object(MongoId)#6 (1) {\n      [\"$id\"]=>\n      string(24) \"4ebc40af10b89f5149000000\"\n    }\n    [\"x\"]=>\n    int(12)\n  }\n  [\"4ebc40af10b89f5149000001\"]=>\n  array(2) {\n    [\"_id\"]=>\n    object(MongoId)#11 (1) {\n      [\"$id\"]=>\n      string(24) \"4ebc40af10b89f5149000001\"\n    }\n    [\"x\"]=>\n    int(12)\n  }\n  [\"4ebc40af10b89f5149000002\"]=>\n  array(3) {\n    [\"_id\"]=>\n    object(MongoId)#12 (1) {\n      [\"$id\"]=>\n      string(24) \"4ebc40af10b89f5149000002\"\n    }\n    [\"name\"]=>\n    string(3) \"Joe\"\n    [\"age\"]=>\n    int(20)\n  }\n}"}],"mongocollection::findandmodify":[{"title":"MongoCollection::findAndModify() example","source":"$m = new Mongo;\n$col = $m->selectDB(\"test\")->jobs;\n\n$col->insert(array(\n     \"name\" => \"Next promo\",\n     \"inprogress\" => false,\n     \"priority\" => 0,\n     \"tasks\" => array( \"select product\", \"add inventory\", \"do placement\"),\n) );\n\n$col->insert(array(\n     \"name\" => \"Biz report\",\n     \"inprogress\" => false,\n     \"priority\" => 1,\n     \"tasks\" => array( \"run sales report\", \"email report\" )\n) );\n\n$col->insert(array(\n     \"name\" => \"Biz report\",\n     \"inprogress\" => false,\n     \"priority\" => 2,\n     \"tasks\" => array( \"run marketing report\", \"email report\" )\n    ),\n    array(\"w\" => 1)\n);\n\n\n\n$retval = $col->findAndModify(\n     array(\"inprogress\" => false, \"name\" => \"Biz report\"),\n     array('$set' => array('inprogress' => true, \"started\" => new MongoDate())),\n     null,\n     array(\n        \"sort\" => array(\"priority\" => -1),\n        \"new\" => true,\n    )\n);\n\nvar_dump($retval);","output":"array(6) {\n  [\"_id\"]=>\n  object(MongoId)#7 (1) {\n    [\"$id\"]=>\n    string(24) \"5091b5b244415e8cc3000002\"\n  }\n  [\"inprogress\"]=>\n  bool(true)\n  [\"name\"]=>\n  string(10) \"Biz report\"\n  [\"priority\"]=>\n  int(2)\n  [\"started\"]=>\n  object(MongoDate)#8 (2) {\n    [\"sec\"]=>\n    int(1351726514)\n    [\"usec\"]=>\n    int(925000)\n  }\n  [\"tasks\"]=>\n  array(2) {\n    [0]=>\n    string(20) \"run marketing report\"\n    [1]=>\n    string(12) \"email report\"\n  }\n}"},{"title":"MongoCollection::findAndModify() error handling","source":"$m = new Mongo;\n$col = $m->selectDB(\"test\")->jobs;\ntry {\n    $retval = $col->findAndModify(\n         array(\"inprogress\" => false, \"name\" => \"Next promo\"),\n         array('$pop' => array(\"tasks\" => -1)),\n         array(\"tasks\" => array('$pop' => array(\"stuff\"))),\n         array(\"new\" => true)\n    );\n} catch(MongoResultException $e) {\n    echo $e->getCode(), \" : \", $e->getMessage(), \"\\n\";\n    var_dump($e->getDocument());\n}","output":"13097 : exception: Unsupported projection option: $pop\narray(3) {\n  [\"errmsg\"]=>\n  string(46) \"exception: Unsupported projection option: $pop\"\n  [\"code\"]=>\n  int(13097)\n  [\"ok\"]=>\n  float(0)\n}"}],"mongocollection::findone":[{"title":"MongoCollection::findOne() document by its id.","source":"$articles = $mongo->my_db->articles;\n\n$article = $articles->findOne(array('_id' => new MongoId('47cc67093475061e3d9536d2')));","output":null},{"title":"MongoCollection::findOne() document by some condition.","source":"$users = $mongo->my_db->users;\n$user = $users->findOne(array('username' => 'jwage'), array('password'));\nprint_r($user);","output":"Array\n(\n    [_id] => MongoId Object\n        (\n        )\n\n    [password] => test\n)"}],"mongocollection::getdbref":[{"title":"MongoCollection::getDBRef() example","source":"$playlists = $db->playlists;\n\n$myList = $playlists->findOne(array('username' => 'me'));\n\n\/\/ fetch each song in the playlist\nforeach ($myList['songlist'] as $songRef) {\n    $song = $playlists->getDBRef($songRef);\n    echo $song['title'] . \"\\n\";\n}","output":"Dazed and Confused\nMa na ma na\nBohemian Rhapsody"}],"mongocollection::getindexinfo":[{"title":"MongoCollection::getIndexInfo() example","source":"$m = new MongoClient();\n$c = $m->selectCollection('test', 'venues');\nvar_dump($c->getIndexInfo());","output":"array(4) {\n  [0]=>\n  array(4) {\n    [\"v\"]=>\n    int(1)\n    [\"key\"]=>\n    array(1) {\n      [\"_id\"]=>\n      int(1)\n    }\n    [\"name\"]=>\n    string(4) \"_id_\"\n    [\"ns\"]=>\n    string(11) \"test.venues\"\n  }\n  [1]=>\n  array(4) {\n    [\"v\"]=>\n    int(1)\n    [\"key\"]=>\n    array(1) {\n      [\"name\"]=>\n      float(1)\n    }\n    [\"name\"]=>\n    string(6) \"name_1\"\n    [\"ns\"]=>\n    string(11) \"test.venues\"\n  }\n  [2]=>\n  array(4) {\n    [\"v\"]=>\n    int(1)\n    [\"key\"]=>\n    array(2) {\n      [\"type\"]=>\n      float(1)\n      [\"createdAt\"]=>\n      float(-1)\n    }\n    [\"name\"]=>\n    string(19) \"type_1_createdAt_-1\"\n    [\"ns\"]=>\n    string(11) \"test.venues\"\n  }\n  [3]=>\n  array(5) {\n    [\"v\"]=>\n    int(1)\n    [\"key\"]=>\n    array(1) {\n      [\"location\"]=>\n      string(8) \"2dsphere\"\n    }\n    [\"name\"]=>\n    string(17) \"location_2dsphere\"\n    [\"ns\"]=>\n    string(11) \"test.venues\"\n    [\"2dsphereIndexVersion\"]=>\n    int(2)\n  }\n}"}],"mongocollection::getname":[{"title":"MongoCollection::getName() example","source":"$m = new MongoClient();\n$c = $m->foo->bar->baz;\n\necho \"Working with collection \" . $c->getName() . \".\\n\";\n\n\/\/ the full namespace is given by the MongoCollection::__toString() method\necho \"Working in namespace $c.\\n\";","output":"Working with collection bar.baz.\nWorking in namespace foo.bar.baz."}],"mongocollection::getreadpreference":[{"title":"MongoCollection::getReadPreference() return value example","source":"$m = new MongoClient();\n$c = $m->test->users;\n$c->setReadPreference(MongoClient::RP_SECONDARY, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n    array(),\n));\nvar_dump($c->getReadPreference());","output":"array(2) {\n  [\"type\"]=>\n  string(9) \"secondary\"\n  [\"tagsets\"]=>\n  array(3) {\n    [0]=>\n    array(2) {\n      [\"dc\"]=>\n      string(4) \"east\"\n      [\"use\"]=>\n      string(9) \"reporting\"\n    }\n    [1]=>\n    array(1) {\n      [\"dc\"]=>\n      string(7) \"west\"\n    }\n    [2]=>\n    array(0) {\n    }\n  }\n}"}],"mongocollection::getwriteconcern":[{"title":"MongoCollection::getWriteConcern() return value example","source":"$mc = new MongoClient('mongodb:\/\/localhost:27017', array('wTimeoutMS' => 500));\n$coll = $mc->selectCollection('test', 'foo');\nvar_dump($coll->getWriteConcern());\n\n$coll->setWriteConcern(1, 1000);\nvar_dump($coll->getWriteConcern());","output":"array(2) {\n  [\"w\"]=>\n  int(1)\n  [\"wtimeout\"]=>\n  int(500)\n}\narray(2) {\n  [\"w\"]=>\n  int(1)\n  [\"wtimeout\"]=>\n  int(1000)\n}"}],"mongocollection::group":[{"title":"MongoCollection::group() example","source":"$collection->insert(array(\"category\" => \"fruit\", \"name\" => \"apple\"));\n$collection->insert(array(\"category\" => \"fruit\", \"name\" => \"peach\"));\n$collection->insert(array(\"category\" => \"fruit\", \"name\" => \"banana\"));\n$collection->insert(array(\"category\" => \"veggie\", \"name\" => \"corn\"));\n$collection->insert(array(\"category\" => \"veggie\", \"name\" => \"broccoli\"));\n\n$keys = array(\"category\" => 1);\n\n$initial = array(\"items\" => array());\n\n$reduce = \"function (obj, prev) { prev.items.push(obj.name); }\";\n\n$g = $collection->group($keys, $initial, $reduce);\n\necho json_encode($g['retval']);","output":"[{\"category\":\"fruit\",\"items\":[\"apple\",\"peach\",\"banana\"]},{\"category\":\"veggie\",\"items\":[\"corn\",\"broccoli\"]}]"},{"title":"MongoCollection::group() example","source":"$collection->save(array(\"a\" => 2));\n$collection->save(array(\"b\" => 5));\n$collection->save(array(\"a\" => 1));\n\n\/\/ use all fields\n$keys = array();\n\n\/\/ set intial values\n$initial = array(\"count\" => 0);\n\n\/\/ JavaScript function to perform\n$reduce = \"function (obj, prev) { prev.count++; }\";\n\n\/\/ only use documents where the \"a\" field is greater than 1\n$condition = array('condition' => array(\"a\" => array( '$gt' => 1)));\n\n$g = $collection->group($keys, $initial, $reduce, $condition);\n\nvar_dump($g);","output":"array(4) {\n  [\"retval\"]=>\n  array(1) {\n    [0]=>\n    array(1) {\n      [\"count\"]=>\n      float(1)\n    }\n  }\n  [\"count\"]=>\n  float(1)\n  [\"keys\"]=>\n  int(1)\n  [\"ok\"]=>\n  float(1)\n}"},{"title":"Passing a keys function","source":"$c->group(new MongoCode('function(doc) { return {mod : doc.num % 4}; }'),\n     array(\"count\" => 0),\n     new MongoCode('function(current, total) { total.count++; }'));","output":null}],"mongocollection::insert":[{"title":"MongoCollection::insert() _id example","source":"$m = new MongoClient();\n$collection = $m->selectCollection('test', 'phpmanual');\n\n\/\/ If an array literal is used, there is no way to access the generated _id\n$collection->insert(array('x' => 1));\n\n\/\/ The _id is available on an array passed by value\n$a = array('x' => 2);\n$collection->insert($a);\nvar_dump($a);\n\n\/\/ The _id is not available on an array passed by reference\n$b = array('x' => 3);\n$ref = &$b;\n$collection->insert($ref);\nvar_dump($ref);\n\n\/\/ The _id is available if a wrapping function does not trigger copy-on-write\nfunction insert_no_cow($collection, $document)\n{\n    $collection->insert($document);\n}\n\n$c = array('x' => 4);\ninsert_no_cow($collection, $c);\nvar_dump($c);\n\n\/\/ The _id is not available if a wrapping function triggers copy-on-write\nfunction insert_cow($collection, $document)\n{\n    $document['y'] = 1;\n    $collection->insert($document);\n}\n\n$d = array('x' => 5);\ninsert_cow($collection, $d);\nvar_dump($d);","output":"array(2) {\n  [\"x\"]=>\n  int(2)\n  [\"_id\"]=>\n  object(MongoId)#4 (0) {\n  }\n}\narray(1) {\n  [\"x\"]=>\n  int(3)\n}\narray(2) {\n  [\"x\"]=>\n  int(4)\n  [\"_id\"]=>\n  object(MongoId)#5 (0) {\n  }\n}\narray(1) {\n  [\"x\"]=>\n  int(5)\n}"},{"title":"MongoCollection::insert() acknowledged write example","source":"$person = array(\"name\" => \"Joe\", \"age\" => 20);\n$collection->insert($person);\n\n\/\/ now $person has an _id field, so if we save it \n\/\/ again, we will get an exception\ntry {\n    $collection->insert($person, array(\"w\" => 1));\n} catch(MongoCursorException $e) {\n    echo \"Can't save the same person twice!\\n\";\n}","output":null}],"mongocollection::parallelcollectionscan":[{"title":"MongoCollection::parallelCollectionScan() example","source":"$m = new MongoClient;\n$c = $m->demo->cities;\n\n\/* Request three cursors *\/\n$cursors = $c->parallelCollectionScan( 3 );\n\n\/* Add all the cursors to the MultipleIterator *\/\n$mi = new MultipleIterator( MultipleIterator::MIT_NEED_ANY );\nforeach ( $cursors as $cursor )\n{\n    $mi->attachIterator( $cursor );\n}\n\n\/* Iterate over all the associated cursors *\/\nforeach ( $mi as $items )\n{\n    foreach ( $items as $item )\n    {\n        if ( $item !== NULL )\n        {\n            echo $item['name'], \"\\n\";\n        }\n    }\n}","output":null}],"mongocollection::remove":[{"title":"MongoCollection::remove() with justOne example","source":"$radioactive = $db->radioactive;\n\n\/\/ count how much more plutonium there is\n$remaining = $radioactive->count(array('type' => 94));\n\n$halflife = $remaining\/2;\n\n\/\/ remove half of it\nwhile ($halflife > 0) {\n    $radioactive->remove(array('type' => 94), array(\"justOne\" => true));\n    $halflife--;\n}","output":null}],"mongocollection::save":[{"title":"MongoCollection::save() example","source":"$obj = array('x' => 1);\n\n\/\/ insert $obj into the db\n$collection->save($obj);\nvar_dump($obj);\n\n\/\/ add another field\n$obj['foo'] = 'bar';\n\n\/\/ $obj cannot be inserted again, causes duplicate _id error\n$collection->insert($obj);\n\n\/\/ save updates $obj with the new field\n$collection->save($obj);","output":"array(2) {\n  [\"x\"]=>\n  int(1)\n  [\"_id\"]=>\n  object(MongoId)#4 (1) {\n    [\"$id\"]=>\n    string(24) \"50b6afe544415ed606000000\"\n  }\n}"}],"mongocollection::setreadpreference":[{"title":"MongoCollection::setReadPreference() tag set array syntax example","source":"$m = new MongoClient();\n$c = $m->test->users;\n\n\/\/ Prefer the nearest server in the \"east\" data center also used for reporting,\n\/\/ but fall back to a server in the \"west\" data center\n$c->setReadPreference(MongoClient::RP_NEAREST, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n));","output":null}],"mongocollection::setwriteconcern":[{"title":"MongoDB::setWriteConcern() example","source":"$mc = new MongoClient('mongodb:\/\/rs1.example.com,rs2.example.com');\n$coll = $mc->selectCollection('test', 'foo');\n\n\/\/ Require that the majority of servers in the replica set acknowledge writes\n\/\/ within three seconds.\n$coll->setWriteConcern('majority', 3000);","output":null}],"mongocollection::toindexstring":[{"title":"MongoCollection::toIndexString() example","source":"\/\/ Create inherited class to make the method \"public\".\nclass MyCollection extends MongoCollection\n{\n    static public function toIndexString($a)\n    {\n        return parent::toIndexString($a);\n    }\n}\n\necho MyCollection::toIndexString(\"foo\"), \"\\n\";\n\/\/ Outputs: foo_1\n\necho MyCollection::toIndexString(array('name' => 1, 'age' => -1)), \"\\n\";\n\/\/ Outputs: name_1_age_-1","output":null}],"mongocollection::update":[{"title":"MongoCollection::update()","source":"$c->insert(array(\"firstname\" => \"Bob\", \"lastname\" => \"Jones\" ));\n$newdata = array('$set' => array(\"address\" => \"1 Smith Lane\"));\n$c->update(array(\"firstname\" => \"Bob\"), $newdata);\n\nvar_dump($c->findOne(array(\"firstname\" => \"Bob\")));","output":"array(4) {\n  [\"_id\"]=>\n  object(MongoId)#6 (0) {\n  }\n  [\"firstname\"]=>\n  string(3) \"Bob\"\n  [\"lastname\"]=>\n  string(5) \"Jones\"\n  [\"address\"]=>\n  string(12) \"1 Smith Lane\"\n}"},{"title":"MongoCollection::update() upsert examples","source":"$c->drop();\n$c->update(\n    array(\"uri\" => \"\/summer_pics\"),\n    array('$inc' => array(\"page hits\" => 1)),\n    array(\"upsert\" => true)\n);\nvar_dump($c->findOne());","output":"array(3) {\n  [\"_id\"]=>\n  object(MongoId)#9 (0) {\n  }\n  [\"uri\"]=>\n  string(12) \"\/summer_pics\"\n  [\"page hits\"]=>\n  int(1)\n}"},{"title":"MongoCollection::update() multiple example","source":"$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime(\"+1 day\")));\n$people->update(\n    array(\"birthday\" => $today),\n    array('$set' => array('gift' => $surprise)),\n    array(\"multiple\" => true)\n);","output":null}],"mongocommandcursor::batchsize":[{"title":"MongoCommandCursor::batchSize()","source":"$commandCursor->batchSize(20);","output":null}],"mongocommandcursor::__construct":[{"title":"MongoCommandCursor example","source":"$m = new MongoClient;\n\n\/\/ Define the aggregation pipeline\n$pipeline = [\n    [ '$group' => [\n        '_id' => '$country_code',\n        'timezones' => [ '$addToSet' => '$timezone' ]\n    ] ],\n    [ '$sort' => [ '_id' => 1 ] ],\n];\n\n\/\/ Construct a MongoCommandCursor object\n$cursor = new MongoCommandCursor(\n    $m, \/\/ MongoClient object\n    'demo.cities', \/\/ namespace\n    [\n        'aggregate' => 'cities',\n        'pipeline' => $pipeline,\n        'cursor' => [ 'batchSize' => 0 ],\n    ]\n);\n\nforeach($cursor as $result) {\n   …\n}","output":null}],"mongocommandcursor::createfromdocument":[{"title":"MongoCommandCursor::createFromDocument()","source":"$m = new MongoClient;\n$d = $m->demo;\n\n\/\/ Define the aggregation pipeline\n$pipeline = [\n    [ '$group' => [\n        '_id' => '$country_code',\n        'timezones' => [ '$addToSet' => '$timezone' ]\n    ] ],\n    [ '$sort' => [ '_id' => 1 ] ],\n];\n\n\/\/ Execute the command. The \"cursor\" option instructs the server to return\n\/\/ cursor information in the response instead of inline results.\n$r = $d->command(\n    [\n        'aggregate' => 'cities',\n        'pipeline' => $pipeline,\n        'cursor' => [ 'batchSize' => 1 ],\n    ],\n    null,\n    $hash\n);\n\n\/\/ Show result and hash\nvar_dump( $r, $hash );\n\n\/\/ Construct the command cursor\n$cursor = MongoCommandCursor::createFromDocument( $m, $hash, $r );","output":"array(2) {\n  [\"cursor\"]=>\n  array(3) {\n    [\"id\"]=>\n    object(MongoInt64)#5 (1) {\n      [\"value\"]=>\n      string(12) \"392143983421\"\n    }\n    [\"ns\"]=>\n    string(11) \"demo.cities\"\n    [\"firstBatch\"]=>\n    array(1) {\n      [0]=>\n      array(2) {\n        [\"_id\"]=>\n        string(2) \"AD\"\n        [\"timezones\"]=>\n        array(1) {\n          [0]=>\n          string(14) \"Europe\/Andorra\"\n        }\n      }\n    }\n  }\n  [\"ok\"]=>\n  float(1)\n}\nstring(25) \"localhost:27017;-;.;17617\""}],"mongocommandcursor::getreadpreference":[{"title":"MongoCommandCursor::getReadPreference() return value example","source":"$m = new MongoClient('mongodb:\/\/rs1.example.com:27017', array('replicaSet' => 'myReplSetName'));\n$collection = $m->selectCollection('test', 'people');\n\n\/\/ If a MongoCommandCursor is constructed directly, it will inherit the read\n\/\/ preference of the MongoClient instance passed to its constructor; however,\n\/\/ MongoCollection::aggregateCursor() will have the MongoCommandCursor inherit\n\/\/ the collection's read preference.\n$collection->setReadPreference(MongoClient::RP_SECONDARY);\n\n$cursor = $collection->aggregateCursor( [\n    [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],\n    [ '$sort' => [ 'points' => -1 ] ],\n] );\n\nvar_dump($cursor->getReadPreference());","output":"array(1) {\n  [\"type\"]=>\n  string(9) \"secondary\"\n}"}],"mongocommandcursor::info":[{"title":"MongoCommandCursor::info() example","source":"$m = new MongoClient();\n\n$cursor = new MongoCommandCursor(\n    $m, \/\/ MongoClient object\n    'demo.cities', \/\/ namespace\n    [\n        'aggregate' => 'cities',\n        'pipeline' => [ [ '$match' => [ '_id' => [ '$exists' => true ] ] ] ],\n        'cursor' => [ 'batchSize' => 1 ],\n    ]\n);\n\necho \"Before iteration started:\\n\";\nvar_dump($cursor->info());\n\necho \"\\nAfter iteration started:\\n\";\n$cursor->rewind();\nvar_dump($cursor->info());","output":"Before iteration started:\narray(8) {\n  [\"ns\"]=>\n  string(11) \"demo.cities\"\n  [\"limit\"]=>\n  int(0)\n  [\"batchSize\"]=>\n  int(0)\n  [\"skip\"]=>\n  int(0)\n  [\"flags\"]=>\n  int(0)\n  [\"query\"]=>\n  array(3) {\n    [\"aggregate\"]=>\n    string(6) \"cities\"\n    [\"pipeline\"]=>\n    array(1) {\n      [0]=>\n      array(1) {\n        [\"$match\"]=>\n        array(1) {\n          [\"_id\"]=>\n          array(1) {\n            [\"$exists\"]=>\n            bool(true)\n          }\n        }\n      }\n    }\n    [\"cursor\"]=>\n    array(1) {\n      [\"batchSize\"]=>\n      int(1)\n    }\n  }\n  [\"fields\"]=>\n  NULL\n  [\"started_iterating\"]=>\n  bool(false)\n}\n\nAfter iteration started:\narray(17) {\n  [\"ns\"]=>\n  string(11) \"demo.cities\"\n  [\"limit\"]=>\n  int(0)\n  [\"batchSize\"]=>\n  int(0)\n  [\"skip\"]=>\n  int(0)\n  [\"flags\"]=>\n  int(0)\n  [\"query\"]=>\n  array(3) {\n    [\"aggregate\"]=>\n    string(6) \"cities\"\n    [\"pipeline\"]=>\n    array(1) {\n      [0]=>\n      array(1) {\n        [\"$match\"]=>\n        array(1) {\n          [\"_id\"]=>\n          array(1) {\n            [\"$exists\"]=>\n            bool(true)\n          }\n        }\n      }\n    }\n    [\"cursor\"]=>\n    array(1) {\n      [\"batchSize\"]=>\n      int(1)\n    }\n  }\n  [\"fields\"]=>\n  NULL\n  [\"started_iterating\"]=>\n  bool(true)\n  [\"id\"]=>\n  int(185840310129)\n  [\"at\"]=>\n  int(0)\n  [\"numReturned\"]=>\n  int(0)\n  [\"server\"]=>\n  string(25) \"localhost:27017;-;.;23991\"\n  [\"host\"]=>\n  string(9) \"localhost\"\n  [\"port\"]=>\n  int(27017)\n  [\"connection_type_desc\"]=>\n  string(10) \"STANDALONE\"\n  [\"firstBatchAt\"]=>\n  int(0)\n  [\"firstBatchNumReturned\"]=>\n  int(1)\n}"}],"mongocommandcursor::rewind":[{"title":"MongoCommandCursor::rewind()","source":"$rawResult = $commandCursor->rewind();\n\n\/\/ Command cursor is now reset to the start of the result set\n\nvar_dump($rawResult);","output":"array(2) {\n  [\"cursor\"]=>\n  array(3) {\n    [\"id\"]=>\n    object(MongoInt64)#5 (1) {\n      [\"value\"]=>\n      string(12) \"310050110216\"\n    }\n    [\"ns\"]=>\n    string(9) \"demo.test\"\n    [\"firstBatch\"]=>\n    array(1) {\n      [0]=>\n      array(2) {\n        [\"_id\"]=>\n        object(MongoId)#6 (1) {\n          [\"$id\"]=>\n          string(24) \"52f5691544670a8077b0dc51\"\n        }\n        [\"value\"]=>\n        string(2) \"42\"\n      }\n    }\n  }\n  [\"ok\"]=>\n  float(1)\n}"}],"mongocommandcursor::setreadpreference":[{"title":"MongoCommandCursor::setReadPreference() tag set array syntax example","source":"$m = new MongoClient('mongodb:\/\/rs1.example.com:27017', array('replicaSet' => 'myReplSetName'));\n$collection = $m->selectCollection('test', 'people');\n\n$cursor = $collection->aggregateCursor( [\n    [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],\n    [ '$sort' => [ 'points' => -1 ] ],\n] );\n\n\/\/ Prefer the nearest server in the \"east\" data center also used for reporting,\n\/\/ but fall back to a server in the \"west\" data center\n$cursor->setReadPreference(MongoClient::RP_NEAREST, [\n    [ 'dc' => 'east', 'use' => 'reporting' ],\n    [ 'dc' => 'west' ],\n] );\n\nforeach ($cursor as $person) {\n    \/\/ ...\n}\n\n\/\/ If the read preference is changed, it will be used the next time the cursor\n\/\/ is rewound and the command is re-executed.\n$cursor->setReadPreference(MongoClient::RP_PRIMARY);\n\nforeach ($cursor as $person) {\n    \/\/ ...\n}","output":null}],"mongocommandcursor::timeout":[{"title":"MongoCommandCursor::timeout() example","source":"$m = new MongoClient;\n$col = $m->database->collection;\n\n$pipeline = [ … ];\n\n$cursor = $col->aggregateCursor( $pipeline );\n$cursor->timeout( 60000 ); \/\/ for 60 seconds\n\nforeach ( $cursor as $result ) {\n   …\n}","output":null}],"mongocursor::addoption":[{"title":"Adding a comment with MongoCursor::addOption() example","source":"$m = new MongoClient;\n$c = $m->demo->demo;\n$cursor = $c->find();\n$cursor->addOption('$comment', \"This comment will show up in the profiling log\");\n\nforeach ($cursor as $document) { \/* empty *\/ }","output":"{\n    \"op\" : \"query\",\n    \"ns\" : \"demo.demo\",\n    \"query\" : {\n        \"$query\" : {\n             \n        },\n        \"$comment\" : \"This comment will show up in the profiling log\"\n    },\n    \"cursorid\" : 168463566447,\n    \"ntoreturn\" : 0,\n    \"ntoskip\" : 0,\n    \"nscanned\" : 101,\n    \"nscannedObjects\" : 101,\n    \"keyUpdates\" : 0,\n    \"numYield\" : 0,\n…"},{"title":"MongoCursor::addOption() example","source":"\/\/ make sure we have an index\n$c->ensureIndex(array(\"ts\" => 1));\n\n\/\/ you may have to modify this to run in a reasonable amount of time on slow \n\/\/ machines (should take about 30 seconds on a good machine)\nfor ($i = 0; $i < 30000000; $i++) {\n    $c->insert(array(\"ts\" => new MongoDate(), \"i\" => $i));\n}\n\n$now = strtotime(\"now\");\n\n\/\/ find documents inserted in the last 2 seconds\n$cursor = $c->find()->addOption('$min', array(\"ts\" => $now-2));","output":null}],"mongocursor::awaitdata":[{"title":"MongoCursor::awaitData() example","source":"$m = new MongoClient( 'mongodb:\/\/localhost:13000', array( 'replSet' => 'seta' ) );\n$c = $m->local->selectCollection( 'oplog.rs' );\n$cursor = $c->find( array( 'ns' => 'demo.article', 'op' => 'i' ) );\n$cursor->tailable( true );\n$cursor->awaitData( true );\n\nwhile (true) {\n    if (!$cursor->hasNext()) {\n        \/\/ we've read all the results, exit\n        if ($cursor->dead()) {\n            break;\n        }\n    } else {\n        var_dump( $cursor->getNext() );\n    }\n}","output":null}],"mongocursor::batchsize":[{"title":"MongoCursor::batchSize() and combinations with MongoCursor::limit()","source":"\/\/ one batch, at most 10 items. The -10 makes the server to return 10 items,\n\/\/ and then remove the cursor.\n$cursor->limit(20)->batchSize(-10);\n\n\/\/ first batch: at most 10 items\n$cursor->limit(10);\n\n\/\/ first batch: at most 10 items\n$cursor->limit(10)->batchSize(20);\n\n\/\/ results are fetched in batches of 10 each, with a maximum of 20 items\n\/\/ returned (that means two batches of 10).\n$cursor->limit(20)->batchSize(10);\n\n\/\/ results are fetched in batches of 7 each, with a maximum of 30 items\n\/\/ returned (that means that the driver requests 4 batches of 7, and one batch\n\/\/ of 2).\n$cursor->limit(30)->batchSize(7)","output":null}],"mongocursor::count":[{"title":"MongoCursor::count() example","source":"$collection->insert(array('x'=>1));\n$collection->insert(array('x'=>2));\n$collection->insert(array('x'=>3));\n\n$cursor = $collection->find();\n\nvar_dump($cursor->count());\nvar_dump($cursor->count(true));\n\n$cursor->limit(2);\n\nvar_dump($cursor->count());\nvar_dump($cursor->count(true));","output":"int(3)\nint(3)\nint(3)\nint(2)"}],"mongocursor::doquery":[{"title":"MongoCursor::doQuery() example","source":"class MyCursor extends MongoCursor {\n\n    protected function doQuery() {\n\n        $this->slaveOkay();\n\n        try {\n            MongoCursor::doQuery();\n        }\n        catch(MongoCursorException $e) {\n            $this->slaveOkay(false);\n            MongoCursor::doQuery();\n        }\n    }\n}","output":null}],"mongocursor::explain":[{"title":"MongoCursor::explain() example","source":"$cursor = $collection->find(array(\"x\"=>1), array(\"y\"));\n$cursor->sort(array(\"z\" => 1))->limit(4)->skip(5);\n\nvar_dump($cursor->explain());","output":"array(8) {\n  [\"cursor\"]=>\n  string(15) \"BtreeCursor x_1\"\n  [\"startKey\"]=>\n  array(1) {\n    [\"x\"]=>\n    int(1)\n  }\n  [\"endKey\"]=>\n  array(1) {\n    [\"x\"]=>\n    int(1)\n  }\n  [\"nscanned\"]=>\n  float(4)\n  [\"n\"]=>\n  int(4)\n  [\"scanAndOrder\"]=>\n  int(1)\n  [\"millis\"]=>\n  int(3)\n  [\"allPlans\"]=>\n  array(2) {\n    [0]=>\n    array(3) {\n      [\"cursor\"]=>\n      string(15) \"BtreeCursor x_1\"\n      [\"startKey\"]=>\n      array(1) {\n        [\"x\"]=>\n        int(1)\n      }\n      [\"endKey\"]=>\n      array(1) {\n        [\"x\"]=>\n        int(1)\n      }\n    }\n    [1]=>\n    array(3) {\n      [\"cursor\"]=>\n      string(11) \"BasicCursor\"\n      [\"startKey\"]=>\n      array(0) {\n      }\n      [\"endKey\"]=>\n      array(0) {\n      }\n    }\n  }\n}"}],"mongocursor::getreadpreference":[{"title":"MongoCursor::getReadPreference() return value example","source":"$m = new MongoClient();\n$cursor = $m->test->users->find();\n$cursor->setReadPreference(MongoClient::RP_SECONDARY, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n    array(),\n));\nvar_dump($cursor->getReadPreference());","output":"array(2) {\n  [\"type\"]=>\n  string(9) \"secondary\"\n  [\"tagsets\"]=>\n  array(3) {\n    [0]=>\n    array(2) {\n      [\"dc\"]=>\n      string(4) \"east\"\n      [\"use\"]=>\n      string(9) \"reporting\"\n    }\n    [1]=>\n    array(1) {\n      [\"dc\"]=>\n      string(7) \"west\"\n    }\n    [2]=>\n    array(0) {\n    }\n  }\n}"}],"mongocursor::info":[{"title":"MongoCursor::info() example","source":"$m = new MongoClient();\n\n$cursor = $m->test->foo->find(array(\"x\" => 4), array(\"y\" => 0));\n\necho \"Before iteration started:\\n\";\nvar_dump($cursor->info());\n\necho \"\\nAfter iteration started:\\n\";\n$cursor->rewind();\nvar_dump($cursor->info());","output":"Before iteration started:\narray(8) {\n  [\"ns\"]=>\n  string(8) \"test.foo\"\n  [\"limit\"]=>\n  int(0)\n  [\"batchSize\"]=>\n  int(0)\n  [\"skip\"]=>\n  int(0)\n  [\"flags\"]=>\n  int(0)\n  [\"query\"]=>\n  array(1) {\n    [\"x\"]=>\n    int(4)\n  }\n  [\"fields\"]=>\n  array(1) {\n    [\"y\"]=>\n    int(0)\n  }\n  [\"started_iterating\"]=>\n  bool(false)\n}\n\nAfter iteration started:\narray(15) {\n  [\"ns\"]=>\n  string(8) \"test.foo\"\n  [\"limit\"]=>\n  int(0)\n  [\"batchSize\"]=>\n  int(0)\n  [\"skip\"]=>\n  int(0)\n  [\"flags\"]=>\n  int(0)\n  [\"query\"]=>\n  array(1) {\n    [\"x\"]=>\n    int(4)\n  }\n  [\"fields\"]=>\n  array(1) {\n    [\"y\"]=>\n    int(0)\n  }\n  [\"started_iterating\"]=>\n  bool(true)\n  [\"id\"]=>\n  int(0)\n  [\"at\"]=>\n  int(0)\n  [\"numReturned\"]=>\n  int(1)\n  [\"server\"]=>\n  string(25) \"localhost:27017;-;.;26450\"\n  [\"host\"]=>\n  string(9) \"localhost\"\n  [\"port\"]=>\n  int(27017)\n  [\"connection_type_desc\"]=>\n  string(10) \"STANDALONE\"\n}"}],"mongocursor::maxtimems":[{"title":"MongoCursor::maxTimeMS() example","source":"$cursor = $collection->find();\n$cursor->maxTimeMS(2000);\n\ntry {\n    $results = iterator_to_array($cursor);\n} catch (MongoExecutionTimeoutException $e) {\n    echo \"query took too long!\";\n}","output":null}],"mongocursor::setflag":[{"title":"MongoCursor::setFlag() example","source":"$m = new MongoClient( 'mongodb:\/\/localhost:13000', array( 'replSet' => 'seta' ) );\n$c = $m->local->selectCollection( 'oplog.rs' );\n$cursor = $c->find( array( 'ns' => 'demo.article', 'op' => 'i' ) );\n$cursor->setFlag( 1, true ); \/\/ sets the tailable flag\n$cursor->setFlag( 5, true ); \/\/ sets the await data flag","output":null}],"mongocursor::setreadpreference":[{"title":"MongoCursor::setReadPreference() tag set array syntax example","source":"$m = new MongoClient();\n$cursor = $m->test->users->find();\n\n\/\/ Prefer the nearest server in the \"east\" data center also used for reporting,\n\/\/ but fall back to a server in the \"west\" data center\n$cursor->setReadPreference(MongoClient::RP_NEAREST, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n));","output":null}],"mongocursor::slaveokay":[{"title":"MongoCursor::slaveOkay() example","source":"MongoCursor::$slaveOkay = false;\n\n\/\/ cannot query secondary\n$cursor = $collection->find();\n\n\/\/ can query secondary\n$cursor = $collection->find()->slaveOkay();\n\nMongoCursor::$slaveOkay = true;\n\n\/\/ can query secondary\n$cursor = $collection->find();\n\n\/\/ cannot query secondary\n$cursor = $collection->find()->slaveOkay(false);","output":null}],"mongocursor::sort":[{"title":"MongoCursor::sort() example","source":"\/\/ Sort on field x, ascending\n$cursor->sort(array('x' => 1));\n\n\/\/ The order in the associative array is important. For instance, these two\n\/\/ examples will yield different results:\n\n\/\/ Sort on date ascending and age descending\n$cursor->sort(array('date' => 1, 'age' => -1));\n\n\/\/ Sort on age descending and date ascending\n$cursor->sort(array('age' => -1, 'date' => 1));","output":null}],"mongocursor::tailable":[{"title":"MongoCursor::tailable() example","source":"$cursor = $collection->find()->tailable();\n\n$results = array();\n\nwhile (1) {\n    if (!$cursor->hasNext()) {\n        \/\/ we've read all the results, exit\n        if ($cursor->dead()) {\n            break;\n        }\n        \/\/ read all results so far, wait for more\n        sleep(10);\n    }\n    else {\n        $results[] = $cursor->getNext();\n    }\n}","output":null}],"mongocursor::timeout":[{"title":"MongoCursor::timeout() example","source":"$cursor = $collection->find();\n$cursor->timeout(-1);\n\n\/* $cursor->hasNext() executes the query. An infinite timeout has been set, so\n * the driver will wait as long as necessary for a response.\n *\/\nwhile ($cursor->hasNext()) {\n    $cursor->timeout(100);\n\n    \/* A timeout has now been set, so if the cursor needs to get more results\n     * from the database, it will only wait 100ms for a response.\n     *\/\n    try {\n        print_r($cursor->getNext());\n    } catch (MongoCursorTimeoutException $e) {\n        echo \"query took too long!\";\n    }\n}","output":null}],"mongodate::__construct":[{"title":"MongoDate::__construct() example","source":"$d = new MongoDate();\necho \"$d\\n\";\n$d = new MongoDate(1234567890);\necho \"$d\\n\";\n$d = new MongoDate(strtotime(\"2009-05-01 00:00:01\"));\necho \"$d\\n\";","output":"0.23660600 1235685067\n0.00000000 1234567890\n0.00000000 1241150401"}],"mongodate::todatetime":[{"title":"MongoDate::toDateTime() example","source":"$d = new MongoDate(strtotime(\"2014-11-18 11:01:25\"));\nvar_dump( $d->toDateTime() );","output":"class DateTime#2 (3) {\n  public $date =>\n  string(26) \"2014-11-18 11:01:25.000000\"\n  public $timezone_type =>\n  int(1)\n  public $timezone =>\n  string(6) \"+00:00\"\n}"}],"mongodb\\bson\\binary::__construct":[{"title":"MongoDB\\BSON\\Binary::__construct() example","source":"$binary = new MongoDB\\BSON\\Binary('foo', MongoDB\\BSON\\Binary::TYPE_GENERIC);\nvar_dump($binary);","output":"object(MongoDB\\BSON\\Binary)#1 (2) {\n  [\"data\"]=>\n  string(3) \"foo\"\n  [\"type\"]=>\n  int(0)\n}"}],"mongodb\\bson\\binary::getdata":[{"title":"MongoDB\\BSON\\Binary::getData() example","source":"$binary = new MongoDB\\BSON\\Binary('foo', MongoDB\\BSON\\Binary::TYPE_GENERIC);\nvar_dump($binary->getData());","output":"string(3) \"foo\""}],"mongodb\\bson\\binary::gettype":[{"title":"MongoDB\\BSON\\Binary::getType() example","source":"$binary = new MongoDB\\BSON\\Binary('foo', MongoDB\\BSON\\Binary::TYPE_GENERIC);\nvar_dump($binary->getType());","output":"int(0)"}],"mongodb\\bson\\binary::__tostring":[{"title":"MongoDB\\BSON\\Binary::__toString() example","source":"var_dump((string) new MongoDB\\BSON\\Binary('foo', MongoDB\\BSON\\Binary::TYPE_GENERIC));","output":"string(3) \"foo\""}],"mongodb\\bson\\decimal128::__construct":[{"title":"MongoDB\\BSON\\Decimal128::__construct() example","source":"var_dump(new MongoDB\\BSON\\Decimal128(1234.5678));\nvar_dump(new MongoDB\\BSON\\Decimal128(NAN));\nvar_dump(new MongoDB\\BSON\\Decimal128(INF));","output":"object(MongoDB\\BSON\\Decimal128)#1 (1) {\n  [\"dec\"]=>\n  string(9) \"1234.5678\"\n}\nobject(MongoDB\\BSON\\Decimal128)#1 (1) {\n  [\"dec\"]=>\n  string(3) \"NaN\"\n}\nobject(MongoDB\\BSON\\Decimal128)#1 (1) {\n  [\"dec\"]=>\n  string(8) \"Infinity\"\n}"}],"mongodb\\bson\\decimal128::__tostring":[{"title":"MongoDB\\BSON\\Decimal128::__toString() example","source":"var_dump((string) new MongoDB\\BSON\\Decimal128(1234.5678));\nvar_dump((string) new MongoDB\\BSON\\Decimal128(NAN));\nvar_dump((string) new MongoDB\\BSON\\Decimal128(INF));","output":"string(9) \"1234.5678\"\nstring(3) \"NaN\"\nstring(8) \"Infinity\""}],"mongodb\\bson\\javascript::__construct":[{"title":"MongoDB\\BSON\\Javascript::__construct() example","source":"$code = new MongoDB\\BSON\\Javascript('function() { return 1; }');\nvar_dump($code);\n\n$codews = new MongoDB\\BSON\\Javascript('function() { return foo; }', ['foo' => 'bar']);\nvar_dump($codews);","output":"object(MongoDB\\BSON\\Javascript)#1 (2) {\n  [\"javascript\"]=>\n  string(24) \"function() { return 1; }\"\n  [\"scope\"]=>\n  object(stdClass)#2 (0) {\n  }\n}\nobject(MongoDB\\BSON\\Javascript)#2 (2) {\n  [\"javascript\"]=>\n  string(26) \"function() { return foo; }\"\n  [\"scope\"]=>\n  object(stdClass)#1 (1) {\n    [\"foo\"]=>\n    string(3) \"bar\"\n  }\n}"}],"mongodb\\bson\\javascript::getcode":[{"title":"MongoDB\\BSON\\Javascript::getCode() example","source":"$js = new MongoDB\\BSON\\Javascript('function foo(bar) { return bar; }');\nvar_dump($js->getCode());","output":"string(33) \"function foo(bar) { return bar; }\""}],"mongodb\\bson\\javascript::getscope":[{"title":"MongoDB\\BSON\\Javascript::getScope() example","source":"$js = new MongoDB\\BSON\\Javascript('function foo(bar) { return bar; }');\nvar_dump($js->getScope());\n\n$js = new MongoDB\\BSON\\Javascript('function foo() { return foo; }', ['foo' => 42]);\nvar_dump($js->getScope());","output":"NULL\nobject(stdClass)#1 (1) {\n  [\"foo\"]=>\n  int(42)\n}"}],"mongodb\\bson\\javascript::__tostring":[{"title":"MongoDB\\BSON\\Javascript::__toString() example","source":"var_dump((string) new MongoDB\\BSON\\Javascript('function foo(bar) { return bar; }'));","output":"string(33) \"function foo(bar) { return bar; }\""}],"mongodb\\bson\\maxkey::__construct":[{"title":"MongoDB\\BSON\\MaxKey::__construct() example","source":"var_dump(new MongoDB\\BSON\\MaxKey());","output":"object(MongoDB\\BSON\\MaxKey)#1 (0) {\n}"}],"mongodb\\bson\\minkey::__construct":[{"title":"MongoDB\\BSON\\MinKey::__construct() example","source":"var_dump(new MongoDB\\BSON\\MinKey());","output":"object(MongoDB\\BSON\\MinKey)#1 (0) {\n}"}],"mongodb\\bson\\objectid::__construct":[{"title":"MongoDB\\BSON\\ObjectID::__construct() example","source":"var_dump(new MongoDB\\BSON\\ObjectId());\n\nvar_dump(new MongoDB\\BSON\\ObjectId('000000000000000000000001'));","output":"object(MongoDB\\BSON\\ObjectID)#1 (1) {\n  [\"oid\"]=>\n  string(24) \"56732d3dda14d81214634921\"\n}\nobject(MongoDB\\BSON\\ObjectID)#1 (1) {\n  [\"oid\"]=>\n  string(24) \"000000000000000000000001\"\n}"}],"mongodb\\bson\\objectid::gettimestamp":[{"title":"MongoDB\\BSON\\ObjectID::getTimestamp() example","source":"var_dump((new MongoDB\\BSON\\ObjectId())->getTimestamp());\n\nvar_dump((new MongoDB\\BSON\\ObjectId('0000002a0000000000000000'))->getTimestamp());","output":"integer(1484854719)\ninteger(42)"}],"mongodb\\bson\\objectid::__tostring":[{"title":"MongoDB\\BSON\\ObjectID::__toString() example","source":"var_dump((string) new MongoDB\\BSON\\ObjectId());\nvar_dump((string) new MongoDB\\BSON\\ObjectId('000000000000000000000001'));","output":"string(24) \"56731b49da14d8747d701211\"\nstring(24) \"000000000000000000000001\""}],"mongodb\\bson\\regex::__construct":[{"title":"MongoDB\\BSON\\Regex::__construct() example","source":"$regex = new MongoDB\\BSON\\Regex('^foo', 'i');\nvar_dump($regex);","output":"object(MongoDB\\BSON\\Regex)#1 (2) {\n  [\"pattern\"]=>\n  string(4) \"^foo\"\n  [\"flags\"]=>\n  string(1) \"i\"\n}"}],"mongodb\\bson\\regex::getflags":[{"title":"MongoDB\\BSON\\Regex::getFlags() example","source":"$regex = new MongoDB\\BSON\\Regex('regex', 'i');\nvar_dump($regex->getFlags());","output":"string(1) \"i\""}],"mongodb\\bson\\regex::getpattern":[{"title":"MongoDB\\BSON\\Regex::getPattern() example","source":"$regex = new MongoDB\\BSON\\Regex('regex', 'i');\nvar_dump($regex->getPattern());","output":"string(5) \"regex\""}],"mongodb\\bson\\regex::__tostring":[{"title":"MongoDB\\BSON\\Regex::__toString() example","source":"$regex = new MongoDB\\BSON\\Regex('regex', 'i');\nvar_dump((string) $regex);","output":"string(8) \"\/regex\/i\""}],"mongodb\\bson\\serializable::bsonserialize":[{"title":"MongoDB\\BSON\\Serializable::bsonSerialize() returning an associative array for root document","source":"class MyDocument implements MongoDB\\BSON\\Serializable\n{\n    private $id;\n\n    function __construct()\n    {\n        $this->id = new MongoDB\\BSON\\ObjectID;\n    }\n\n    function bsonSerialize()\n    {\n        return ['_id' => $this->id, 'foo' => 'bar'];\n    }\n}\n\n$bson = MongoDB\\BSON\\fromPHP(new MyDocument);\necho MongoDB\\BSON\\toJSON($bson), \"\\n\";","output":"{ \"_id\" : { \"$oid\" : \"56cccdcada14d8755a58c591\" }, \"foo\" : \"bar\" }"},{"title":"MongoDB\\BSON\\Serializable::bsonSerialize() returning a sequential array for root document","source":"class MyArray implements MongoDB\\BSON\\Serializable\n{\n    function bsonSerialize()\n    {\n        return [1, 2, 3];\n    }\n}\n\n$bson = MongoDB\\BSON\\fromPHP(new MyArray);\necho MongoDB\\BSON\\toJSON($bson), \"\\n\";","output":"{ \"0\" : 1, \"1\" : 2, \"2\" : 3 }"},{"title":"MongoDB\\BSON\\Serializable::bsonSerialize() returning an associative array for document field","source":"class MyDocument implements MongoDB\\BSON\\Serializable\n{\n    function bsonSerialize()\n    {\n        return ['foo' => 'bar'];\n    }\n}\n\n$value = ['document' => new MyDocument];\n$bson = MongoDB\\BSON\\fromPHP($value);\necho MongoDB\\BSON\\toJSON($bson), \"\\n\";","output":"{ \"document\" : { \"foo\" : \"bar\" } }"},{"title":"MongoDB\\BSON\\Serializable::bsonSerialize() returning a sequential array for document field","source":"class MyArray implements MongoDB\\BSON\\Serializable\n{\n    function bsonSerialize()\n    {\n        return [1, 2, 3];\n    }\n}\n\n$value = ['array' => new MyArray];\n$bson = MongoDB\\BSON\\fromPHP($value);\necho MongoDB\\BSON\\toJSON($bson), \"\\n\";","output":"{ \"array\" : [ 1, 2, 3 ] }"}],"mongodb\\bson\\timestamp::__construct":[{"title":"MongoDB\\BSON\\Timestamp::__construct() example","source":"$timestamp = new MongoDB\\BSON\\Timestamp(1234, 5678);","output":"object(MongoDB\\BSON\\Timestamp)#1 (2) {\n  [\"increment\"]=>\n  int(1234)\n  [\"timestamp\"]=>\n  int(5678)\n}"}],"mongodb\\bson\\timestamp::__tostring":[{"title":"MongoDB\\BSON\\Timestamp::__toString() example","source":"$timestamp = new MongoDB\\BSON\\Timestamp(1234, 5678);\nvar_dump((string) $timestamp);","output":"string(11) \"[1234:5678]\""}],"mongodb\\bson\\unserializable::bsonunserialize":[{"title":"MongoDB\\BSON\\Unserializable::bsonUnserialize() example","source":"class MyDocument implements MongoDB\\BSON\\Unserializable\n{\n    private $data = [];\n\n    function bsonUnserialize(array $data)\n    {\n        $this->data = $data;\n    }\n}\n\n$bson = MongoDB\\BSON\\fromJSON('{ \"foo\": \"bar\" }');\n$value = MongoDB\\BSON\\toPHP($bson, ['root' => 'MyDocument']);\nvar_dump($value);","output":"object(MyDocument)#1 (1) {\n  [\"data\":\"MyDocument\":private]=>\n  array(1) {\n    [\"foo\"]=>\n    string(3) \"bar\"\n  }\n}"}],"mongodb\\bson\\utcdatetime::__construct":[{"title":"MongoDB\\BSON\\UTCDateTime::__construct() example","source":"var_dump(new MongoDB\\BSON\\UTCDateTime);\n\nvar_dump(new MongoDB\\BSON\\UTCDateTime(new DateTime));\n\nvar_dump(new MongoDB\\BSON\\UTCDateTime(1416445411987));","output":"object(MongoDB\\BSON\\UTCDateTime)#1 (1) {\n  [\"milliseconds\"]=>\n  string(13) \"1484852905560\"\n}\nobject(MongoDB\\BSON\\UTCDateTime)#1 (1) {\n  [\"milliseconds\"]=>\n  string(13) \"1484852905560\"\n}\nobject(MongoDB\\BSON\\UTCDateTime)#1 (1) {\n  [\"milliseconds\"]=>\n  string(13) \"1416445411987\"\n}"}],"mongodb\\bson\\utcdatetime::todatetime":[{"title":"MongoDB\\BSON\\UTCDatetime::toDateTime() example","source":"$utcdatetime = new MongoDB\\BSON\\UTCDateTime(1416445411987);\n$datetime = $utcdatetime->toDateTime();\nvar_dump($datetime->format('r'));\nvar_dump($datetime->format('U.u'));\nvar_dump($datetime->getTimezone());","output":"string(31) \"Thu, 20 Nov 2014 01:03:31 +0000\"\nstring(17) \"1416445411.987000\"\nobject(DateTimeZone)#3 (2) {\n  [\"timezone_type\"]=>\n  int(1)\n  [\"timezone\"]=>\n  string(6) \"+00:00\"\n}"}],"mongodb\\bson\\utcdatetime::__tostring":[{"title":"MongoDB\\BSON\\UTCDateTime::__toString() example","source":"$utcdatetime = new MongoDB\\BSON\\UTCDateTime(1416445411987);\nvar_dump((string) $utcdatetime);","output":"string(13) \"1416445411987\""}],"mongodb\\driver\\bulkwrite::__construct":[{"title":"MongoDB\\Driver\\BulkWrite::__construct() example","source":"$bulk = new MongoDB\\Driver\\BulkWrite(['ordered' => true]);\n$bulk->delete([]);\n$bulk->insert(['_id' => 1, 'x' => 1]);\n$bulk->insert(['_id' => 2, 'x' => 2]);\n$bulk->update(\n    ['x' => 2],\n    ['$set' => ['x' => 1]],\n    ['limit' => 1, 'upsert' => false]\n);\n$bulk->delete(['x' => 1], ['limit' => 1]);\n$bulk->update(\n    ['_id' => 3],\n    ['$set' => ['x' => 3]],\n    ['limit' => 1, 'upsert' => true]\n);\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$writeConcern = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 1000);\n\ntry {\n    $result = $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);\n} catch (MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    $result = $e->getWriteResult();\n\n    \/\/ Check if the write concern could not be fulfilled\n    if ($writeConcernError = $result->getWriteConcernError()) {\n        printf(\"%s (%d): %s\\n\",\n            $writeConcernError->getMessage(),\n            $writeConcernError->getCode(),\n            var_export($writeConcernError->getInfo(), true)\n        );\n    }\n\n    \/\/ Check if any write operations did not complete at all\n    foreach ($result->getWriteErrors() as $writeError) {\n        printf(\"Operation#%d: %s (%d)\\n\",\n            $writeError->getIndex(),\n            $writeError->getMessage(),\n            $writeError->getCode()\n        );\n    }\n} catch (MongoDB\\Driver\\Exception\\Exception $e) {\n    printf(\"Other error: %s\\n\", $e->getMessage());\n    exit;\n}\n\nprintf(\"Inserted %d document(s)\\n\", $result->getInsertedCount());\nprintf(\"Updated  %d document(s)\\n\", $result->getModifiedCount());\nprintf(\"Upserted %d document(s)\\n\", $result->getUpsertedCount());\nprintf(\"Deleted  %d document(s)\\n\", $result->getDeletedCount());","output":"Inserted 2 document(s)\nUpdated  1 document(s)\nUpserted 1 document(s)\nDeleted  1 document(s)"}],"mongodb\\driver\\bulkwrite::count":[{"title":"MongoDB\\Driver\\BulkWrite::count() example","source":"$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['_id' => 1, 'x' => 1]);\n$bulk->insert(['_id' => 2, 'x' => 2]);\n$bulk->update(['x' => 2], ['$set' => ['x' => 1]]);\n$bulk->delete(['x' => 1]);\n\nvar_dump(count($bulk));","output":"int(4)"}],"mongodb\\driver\\bulkwrite::delete":[{"title":"MongoDB\\Driver\\BulkWrite::delete() example","source":"$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->delete(['x' => 1], ['limit' => 1]);\n$bulk->delete(['x' => 2], ['limit' => 0]);\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$writeConcern = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 1000);\n$result = $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);","output":null}],"mongodb\\driver\\bulkwrite::insert":[{"title":"MongoDB\\Driver\\BulkWrite::insert() example","source":"$bulk = new MongoDB\\Driver\\BulkWrite;\n\n$document1 = ['title' => 'one'];\n$document2 = ['_id' => 'custom ID', 'title' => 'two'];\n$document3 = ['_id' => new MongoDB\\BSON\\ObjectID, 'title' => 'three'];\n\n$_id1 = $bulk->insert($document1);\n$_id2 = $bulk->insert($document2);\n$_id3 = $bulk->insert($document3);\n\nvar_dump($_id1, $_id2, $_id3);\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$writeConcern = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 1000);\n$result = $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);","output":"object(MongoDB\\BSON\\ObjectID)#3 (1) {\n  [\"oid\"]=>\n  string(24) \"54d51146bd21b91405401d92\"\n}\nNULL\nNULL"}],"mongodb\\driver\\bulkwrite::update":[{"title":"MongoDB\\Driver\\BulkWrite::update() example","source":"$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->update(\n    ['x' => 2],\n    ['$set' => ['y' => 3]],\n    ['multi' => false, 'upsert' => false]\n);\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$writeConcern = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 1000);\n$result = $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);","output":null}],"mongodb\\driver\\command::__construct":[{"title":"MongoDB\\Driver\\Command::__construct() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n$command = new MongoDB\\Driver\\Command(array(\"buildinfo\" => 1));\n\ntry {\n    $cursor = $manager->executeCommand(\"admin\", $command);\n    $response = $cursor->toArray()[0];\n} catch(MongoDB\\Driver\\Exception $e) {\n    echo $e->getMessage(), \"\\n\";\n    exit;\n}\nvar_dump($response);","output":"array(13) {\n  [\"version\"]=>\n  string(14) \"2.8.0-rc2-pre-\"\n  [\"gitVersion\"]=>\n  string(62) \"b743d7158f7642f4da6b7eac8320374b3b88dc2e modules: subscription\"\n  [\"OpenSSLVersion\"]=>\n  string(25) \"OpenSSL 1.0.1f 6 Jan 2014\"\n  [\"sysInfo\"]=>\n  string(104) \"Linux infant 3.16.0-24-generic #32-Ubuntu SMP Tue Oct 28 13:07:32 UTC 2014 x86_64 BOOST_LIB_VERSION=1_49\"\n  [\"loaderFlags\"]=>\n  string(91) \"-fPIC -pthread -Wl,-z,now -rdynamic -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,-E\"\n  [\"compilerFlags\"]=>\n  string(301) \"-Wnon-virtual-dtor -Woverloaded-virtual -std=c++11 -fPIC -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -pipe -Werror -O3 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-but-set-variable -fno-builtin-memcmp -std=c99\"\n  [\"allocator\"]=>\n  string(8) \"tcmalloc\"\n  [\"versionArray\"]=>\n  array(4) {\n    [0]=>\n    int(2)\n    [1]=>\n    int(8)\n    [2]=>\n    int(0)\n    [3]=>\n    int(-8)\n  }\n  [\"javascriptEngine\"]=>\n  string(2) \"V8\"\n  [\"bits\"]=>\n  int(64)\n  [\"debug\"]=>\n  bool(false)\n  [\"maxBsonObjectSize\"]=>\n  int(16777216)\n  [\"ok\"]=>\n  float(1)\n}"}],"mongodb\\driver\\cursor::getid":[{"title":"MongoDB\\Driver\\Cursor::getId() example","source":"\/* In this example, we insert several documents into the collection and specify\n * a smaller batchSize to ensure that the first batch contains only a subset of\n * our results and the cursor remains open on the server. *\/\n$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n$query = new MongoDB\\Driver\\Query([], ['batchSize' => 2]);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->insert(['x' => 2]);\n$bulk->insert(['x' => 3]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$cursor = $manager->executeQuery('db.collection', $query);\nvar_dump($cursor->getId());","output":"object(MongoDB\\Driver\\CursorId)#5 (1) {\n  [\"id\"]=>\n  int(94810124093)\n}"}],"mongodb\\driver\\cursor::getserver":[{"title":"MongoDB\\Driver\\Cursor::getServer() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n$query = new MongoDB\\Driver\\Query([]);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$cursor = $manager->executeQuery('db.collection', $query);\nvar_dump($cursor->getServer());","output":"object(MongoDB\\Driver\\Server)#5 (10) {\n  [\"host\"]=>\n  string(9) \"localhost\"\n  [\"port\"]=>\n  int(27017)\n  [\"type\"]=>\n  int(1)\n  [\"is_primary\"]=>\n  bool(false)\n  [\"is_secondary\"]=>\n  bool(false)\n  [\"is_arbiter\"]=>\n  bool(false)\n  [\"is_hidden\"]=>\n  bool(false)\n  [\"is_passive\"]=>\n  bool(false)\n  [\"last_is_master\"]=>\n  array(8) {\n    [\"ismaster\"]=>\n    bool(true)\n    [\"maxBsonObjectSize\"]=>\n    int(16777216)\n    [\"maxMessageSizeBytes\"]=>\n    int(48000000)\n    [\"maxWriteBatchSize\"]=>\n    int(1000)\n    [\"localTime\"]=>\n    object(MongoDB\\BSON\\UTCDateTime)#6 (1) {\n      [\"milliseconds\"]=>\n      int(1446505367907)\n    }\n    [\"maxWireVersion\"]=>\n    int(3)\n    [\"minWireVersion\"]=>\n    int(0)\n    [\"ok\"]=>\n    float(1)\n  }\n  [\"round_trip_time\"]=>\n  int(584)\n}"}],"mongodb\\driver\\cursor::isdead":[{"title":"MongoDB\\Driver\\Cursor::isDead() example","source":"\/* In this example, we insert several documents into the collection and specify\n * a smaller batchSize to ensure that the first batch contains only a subset of\n * our results and the cursor remains open on the server. *\/\n$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n$query = new MongoDB\\Driver\\Query([], ['batchSize' => 2]);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->insert(['x' => 2]);\n$bulk->insert(['x' => 3]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$cursor = $manager->executeQuery('db.collection', $query);\n\nvar_dump($cursor->isDead());\n$cursor->toArray();\nvar_dump($cursor->isDead());","output":"bool(false)\nbool(true)"}],"mongodb\\driver\\cursor::settypemap":[{"title":"MongoDB\\Driver\\Cursor::setTypeMap() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$id = $bulk->insert(['x' => 1]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$query = new MongoDB\\Driver\\Query(['_id' => $id]);\n$cursor = $manager->executeQuery('db.collection', $query);\n$cursor->setTypeMap(['root' => 'array']);\n\nforeach ($cursor as $document) {\n    var_dump($document);\n}","output":"array(2) {\n  [\"_id\"]=>\n  object(MongoDB\\BSON\\ObjectID)#6 (1) {\n    [\"oid\"]=>\n    string(24) \"56424fb76118fd3267180741\"\n  }\n  [\"x\"]=>\n  int(1)\n}"}],"mongodb\\driver\\cursor::toarray":[{"title":"MongoDB\\Driver\\Cursor::toArray() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->insert(['x' => 2]);\n$bulk->insert(['x' => 3]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$query = new MongoDB\\Driver\\Query([]);\n$cursor = $manager->executeQuery('db.collection', $query);\n\nvar_dump($cursor->toArray());","output":"array(3) {\n  [0]=>\n  object(stdClass)#6 (2) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectID)#5 (1) {\n      [\"oid\"]=>\n      string(24) \"564259a96118fd40b41bcf61\"\n    }\n    [\"x\"]=>\n    int(1)\n  }\n  [1]=>\n  object(stdClass)#8 (2) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectID)#7 (1) {\n      [\"oid\"]=>\n      string(24) \"564259a96118fd40b41bcf62\"\n    }\n    [\"x\"]=>\n    int(2)\n  }\n  [2]=>\n  object(stdClass)#10 (2) {\n    [\"_id\"]=>\n    object(MongoDB\\BSON\\ObjectID)#9 (1) {\n      [\"oid\"]=>\n      string(24) \"564259a96118fd40b41bcf63\"\n    }\n    [\"x\"]=>\n    int(3)\n  }\n}"}],"mongodb\\driver\\cursorid::__tostring":[{"title":"MongoDB\\Driver\\CursorId::__toString() example","source":"\/* In this example, we insert several documents into the collection and specify\n * a smaller batchSize to ensure that the first batch contains only a subset of\n * our results and the cursor remains open on the server. *\/\n$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n$query = new MongoDB\\Driver\\Query([], ['batchSize' => 2]);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->insert(['x' => 2]);\n$bulk->insert(['x' => 3]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$cursor = $manager->executeQuery('db.collection', $query);\nvar_dump((string) $cursor->getId());","output":"string(11) \"98061641158\""}],"mongodb\\driver\\manager::__construct":[{"title":"MongoDB\\Driver\\Manager::__construct() basic examples","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/example.com:27017\");","output":null}],"mongodb\\driver\\manager::executebulkwrite":[{"title":"MongoDB\\Driver\\Manager::executeBulkWrite() example","source":"$bulk = new MongoDB\\Driver\\BulkWrite();\n\n$bulk->insert(['_id' => 1, 'x' => 1]);\n$bulk->insert(['_id' => 2, 'x' => 2]);\n\n$bulk->update(['x' => 2], ['$set' => ['x' => 1]], ['multi' => false, 'upsert' => false]);\n$bulk->update(['x' => 3], ['$set' => ['x' => 3]], ['multi' => false, 'upsert' => true]);\n$bulk->update(['_id' => 3], ['$set' => ['x' => 3]], ['multi' => false, 'upsert' => true]);\n\n$bulk->insert(['_id' => 4, 'x' => 2]);\n\n$bulk->delete(['x' => 1], ['limit' => 1]);\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$writeConcern = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 100);\n$result = $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);\n\nprintf(\"Inserted %d document(s)\\n\", $result->getInsertedCount());\nprintf(\"Matched  %d document(s)\\n\", $result->getMatchedCount());\nprintf(\"Updated  %d document(s)\\n\", $result->getModifiedCount());\nprintf(\"Upserted %d document(s)\\n\", $result->getUpsertedCount());\nprintf(\"Deleted  %d document(s)\\n\", $result->getDeletedCount());\n\nforeach ($result->getUpsertedIds() as $index => $id) {\n    printf('upsertedId[%d]: ', $index);\n    var_dump($id);\n}\n\n\/* If the WriteConcern could not be fulfilled *\/\nif ($writeConcernError = $result->getWriteConcernError()) {\n    printf(\"%s (%d): %s\\n\", $writeConcernError->getMessage(), $writeConcernError->getCode(), var_export($writeConcernError->getInfo(), true));\n}\n\n\/* If a write could not happen at all *\/\nforeach ($result->getWriteErrors() as $writeError) {\n    printf(\"Operation#%d: %s (%d)\\n\", $writeError->getIndex(), $writeError->getMessage(), $writeError->getCode());\n}","output":"Inserted 3 document(s)\nMatched  1 document(s)\nUpdated  1 document(s)\nUpserted 2 document(s)\nDeleted  1 document(s)\nupsertedId[3]: object(MongoDB\\BSON\\ObjectID)#5 (1) {\n  [\"oid\"]=>\n  string(24) \"54d3adc3ce7a792f4d703756\"\n}\nupsertedId[4]: int(3)"}],"mongodb\\driver\\manager::executecommand":[{"title":"MongoDB\\Driver\\Manager::executeCommand() with a command returning a single result document","source":"$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$command = new MongoDB\\Driver\\Command(['ping' => 1]);\n\ntry {\n    $cursor = $manager->executeCommand('admin', $command);\n} catch(MongoDB\\Driver\\Exception $e) {\n    echo $e->getMessage(), \"\\n\";\n    exit;\n}\n\n\/* The ping command returns a single result document, so we need to access the\n * first result in the cursor. *\/\n$response = $cursor->toArray()[0];\n\nvar_dump($response);","output":"array(1) {\n  [\"ok\"]=>\n  float(1)\n}"},{"title":"MongoDB\\Driver\\Manager::executeCommand() with a command returning a cursor","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1, 'y' => 'foo']);\n$bulk->insert(['x' => 2, 'y' => 'bar']);\n$bulk->insert(['x' => 3, 'y' => 'bar']);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$command = new MongoDB\\Driver\\Command([\n    'aggregate' => 'collection',\n    'pipeline' => [\n        ['$group' => ['_id' => '$y', 'sum' => ['$sum' => '$x']]],\n    ],\n    'cursor' => new stdClass,\n]);\n$cursor = $manager->executeCommand('db', $command);\n\n\/* The aggregate command can optionally return its results in a cursor instead\n * of a single result document. In this case, we can iterate on the cursor\n * directly to access those results. *\/\nforeach ($cursor as $document) {\n    var_dump($document);\n}","output":"object(stdClass)#6 (2) {\n  [\"_id\"]=>\n  string(3) \"bar\"\n  [\"sum\"]=>\n  int(10)\n}\nobject(stdClass)#7 (2) {\n  [\"_id\"]=>\n  string(3) \"foo\"\n  [\"sum\"]=>\n  int(2)\n}"}],"mongodb\\driver\\manager::executequery":[{"title":"MongoDB\\Driver\\Manager::executeQuery() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->insert(['x' => 2]);\n$bulk->insert(['x' => 3]);\n$manager->executeBulkWrite('db.collection', $bulk);\n\n$filter = ['x' => ['$gt' => 1]];\n$options = [\n    'projection' => ['_id' => 0],\n    'sort' => ['x' => -1],\n];\n\n$query = new MongoDB\\Driver\\Query($filter, $options);\n$cursor = $manager->executeQuery('db.collection', $query);\n\nforeach ($cursor as $document) {\n    var_dump($document);\n}","output":"object(stdClass)#6 (1) {\n  [\"x\"]=>\n  int(3)\n}\nobject(stdClass)#7 (1) {\n  [\"x\"]=>\n  int(2)\n}"}],"mongodb\\driver\\manager::getreadconcern":[{"title":"MongoDB\\Driver\\Manager::getReadConcern() example","source":"$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\nvar_dump($manager->getReadConcern());\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017\/?readConcernLevel=local');\nvar_dump($manager->getReadConcern());","output":"object(MongoDB\\Driver\\ReadConcern)#2 (0) {\n}\nobject(MongoDB\\Driver\\ReadConcern)#1 (1) {\n  [\"level\"]=>\n  string(5) \"local\"\n}"}],"mongodb\\driver\\manager::getreadpreference":[{"title":"MongoDB\\Driver\\Manager::getReadPreference() example","source":"$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\nvar_dump($manager->getReadPreference());\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017\/?readPreference=secondaryPreferred&readPreferenceTags=dc:ny,rack:1&readPreferenceTags=dc:ny&readPreferenceTags=');\nvar_dump($manager->getReadPreference());","output":"object(MongoDB\\Driver\\ReadPreference)#2 (1) {\n  [\"mode\"]=>\n  string(7) \"primary\"\n}\nobject(MongoDB\\Driver\\ReadPreference)#1 (2) {\n  [\"mode\"]=>\n  string(18) \"secondaryPreferred\"\n  [\"tags\"]=>\n  array(3) {\n    [0]=>\n    object(stdClass)#3 (2) {\n      [\"dc\"]=>\n      string(2) \"ny\"\n      [\"rack\"]=>\n      string(1) \"1\"\n    }\n    [1]=>\n    object(stdClass)#4 (1) {\n      [\"dc\"]=>\n      string(2) \"ny\"\n    }\n    [2]=>\n    object(stdClass)#5 (0) {\n    }\n  }\n}"}],"mongodb\\driver\\manager::getservers":[{"title":"MongoDB\\Driver\\Manager::getServers() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\");\n\n\/* The driver connects to the database server lazily, so Manager::getServers()\n * may initially return an empty array. *\/\nvar_dump($manager->getServers());\n\n$command = new MongoDB\\Driver\\Command(['ping' => 1]);\n$manager->executeCommand('db', $command);\n\nvar_dump($manager->getServers());","output":"array(0) {\n}\narray(1) {\n  [0]=>\n  object(MongoDB\\Driver\\Server)#3 (10) {\n    [\"host\"]=>\n    string(9) \"localhost\"\n    [\"port\"]=>\n    int(27017)\n    [\"type\"]=>\n    int(1)\n    [\"is_primary\"]=>\n    bool(false)\n    [\"is_secondary\"]=>\n    bool(false)\n    [\"is_arbiter\"]=>\n    bool(false)\n    [\"is_hidden\"]=>\n    bool(false)\n    [\"is_passive\"]=>\n    bool(false)\n    [\"last_is_master\"]=>\n    array(8) {\n      [\"ismaster\"]=>\n      bool(true)\n      [\"maxBsonObjectSize\"]=>\n      int(16777216)\n      [\"maxMessageSizeBytes\"]=>\n      int(48000000)\n      [\"maxWriteBatchSize\"]=>\n      int(1000)\n      [\"localTime\"]=>\n      object(MongoDB\\BSON\\UTCDateTime)#4 (1) {\n        [\"milliseconds\"]=>\n        int(1447267964517)\n      }\n      [\"maxWireVersion\"]=>\n      int(3)\n      [\"minWireVersion\"]=>\n      int(0)\n      [\"ok\"]=>\n      float(1)\n    }\n    [\"round_trip_time\"]=>\n    int(554)\n  }\n}"}],"mongodb\\driver\\manager::getwriteconcern":[{"title":"MongoDB\\Driver\\Manager::getWriteConcern() example","source":"$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\nvar_dump($manager->getWriteConcern());\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017\/?w=majority&wtimeoutMS=2000');\nvar_dump($manager->getWriteConcern());","output":"object(MongoDB\\Driver\\WriteConcern)#2 (0) {\n}\nobject(MongoDB\\Driver\\WriteConcern)#1 (2) {\n  [\"w\"]=>\n  string(8) \"majority\"\n  [\"wtimeout\"]=>\n  int(2000)\n}"}],"mongodb\\driver\\query::__construct":[{"title":"MongoDB\\Driver\\Query::__construct() example","source":"\/* Select only documents authord by \"bjori\" with at least 100 views *\/\n$filter = [\n    'author' => 'bjori',\n    'views' => [\n        '$gte' => 100,\n    ],\n];\n\n$options = [\n    \/* Only return the following fields in the matching documents *\/\n    'projection' => [\n        'title' => 1,\n        'article' => 1,\n    ],\n    \/* Return the documents in descending order of views *\/\n    'sort' => [\n        'views' => -1\n    ],\n];\n\n$query = new MongoDB\\Driver\\Query($filter, $options);\n\n$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost:27017');\n$readPreference = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\n$cursor = $manager->executeQuery('databaseName.collectionName', $query, $readPreference);\n\nforeach($cursor as $document) {\n    var_dump($document);\n}","output":null}],"mongodb\\driver\\readconcern::bsonserialize":[{"title":"MongoDB\\Driver\\ReadConcern::bsonSerialize() with empty read concern","source":"$rc = new MongoDB\\Driver\\ReadConcern;\nvar_dump($rc->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($rc));","output":"object(stdClass)#2 (0) {\n}\n\n{ }"},{"title":"MongoDB\\Driver\\ReadConcern::bsonSerialize() with local read concern","source":"$rc = new MongoDB\\Driver\\ReadConcern(MongoDB\\Driver\\ReadConcern::LOCAL);\nvar_dump($rc->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($rc));","output":"object(stdClass)#2 (1) {\n  [\"level\"]=>\n  string(5) \"local\"\n}\n\n{ \"level\" : \"local\" }"}],"mongodb\\driver\\readconcern::__construct":[{"title":"MongoDB\\Driver\\ReadConcern::__construct() example","source":"\/* Unspecified read isolation level (uses the server's default behavior) *\/\n$rc = new MongoDB\\Driver\\ReadConcern();\n\n\/* Request read isolation from a single replica set node *\/\n$rc = new MongoDB\\Driver\\ReadConcern(MongoDB\\Driver\\ReadConcern::LOCAL);\n\n\/* Request read isolation from a majority of the replica set nodes *\/\n$rc = new MongoDB\\Driver\\ReadConcern(MongoDB\\Driver\\ReadConcern::MAJORITY);","output":null}],"mongodb\\driver\\readconcern::getlevel":[{"title":"MongoDB\\Driver\\ReadConcern::getLevel() example","source":"$rc = new MongoDB\\Driver\\ReadConcern();\nvar_dump($rc->getLevel());\n\n$rc = new MongoDB\\Driver\\ReadConcern(MongoDB\\Driver\\ReadConcern::LOCAL);\nvar_dump($rc->getLevel());\n\n$rc = new MongoDB\\Driver\\ReadConcern(MongoDB\\Driver\\ReadConcern::MAJORITY);\nvar_dump($rc->getLevel());","output":"NULL\nstring(5) \"local\"\nstring(8) \"majority\""}],"mongodb\\driver\\readpreference::bsonserialize":[{"title":"MongoDB\\Driver\\ReadPreference::bsonSerialize() with primary read preference","source":"$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\nvar_dump($rp->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($rp));","output":"object(stdClass)#2 (1) {\n  [\"mode\"]=>\n  string(7) \"primary\"\n}\n\n{ \"mode\" : \"primary\" }"},{"title":"MongoDB\\Driver\\ReadPreference::bsonSerialize() with secondary read preference and tag sets","source":"$rp = new MongoDB\\Driver\\ReadPreference(\n    MongoDB\\Driver\\ReadPreference::RP_SECONDARY,\n    [\n        ['dc' => 'ny'],\n        ['dc' => 'sf', 'use' => 'reporting'],\n        []\n    ]\n);\nvar_dump($rp->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($rp));","output":"object(stdClass)#2 (2) {\n  [\"mode\"]=>\n  string(9) \"secondary\"\n  [\"tags\"]=>\n  array(3) {\n    [0]=>\n    object(stdClass)#1 (1) {\n      [\"dc\"]=>\n      string(2) \"ny\"\n    }\n    [1]=>\n    object(stdClass)#5 (2) {\n      [\"dc\"]=>\n      string(2) \"sf\"\n      [\"use\"]=>\n      string(9) \"reporting\"\n    }\n    [2]=>\n    object(stdClass)#4 (0) {\n    }\n  }\n}\n\n{ \"mode\" : \"secondary\", \"tags\" : [ { \"dc\" : \"ny\" }, { \"dc\" : \"sf\", \"use\" : \"reporting\" }, {  } ] }"},{"title":"MongoDB\\Driver\\ReadPreference::bsonSerialize() with secondary read preference and max staleness","source":"$rp = new MongoDB\\Driver\\ReadPreference(\n    MongoDB\\Driver\\ReadPreference::RP_SECONDARY,\n    null,\n    ['maxStalenessSeconds' => 120]\n);\nvar_dump($rp->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($rp));","output":"object(stdClass)#2 (2) {\n  [\"mode\"]=>\n  string(9) \"secondary\"\n  [\"maxStalenessSeconds\"]=>\n  int(120)\n}\n\n{ \"mode\" : \"secondary\", \"maxStalenessSeconds\" : 120 }"}],"mongodb\\driver\\readpreference::__construct":[{"title":"MongoDB\\Driver\\ReadPreference::__construct() example","source":"\/* Prefer a secondary node but fall back to a primary. *\/\nvar_dump(new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED));\n\n\/* Prefer a node in the New York data center with lowest latency. *\/\nvar_dump(new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_NEAREST, [['dc' => 'ny']]));\n\n\/* Require a secondary node whose replication lag is within two minutes of the primary *\/\nvar_dump(new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY, null, ['maxStalenessSeconds' => 120]));","output":"object(MongoDB\\Driver\\ReadPreference)#1 (1) {\n  [\"mode\"]=>\n  string(18) \"secondaryPreferred\"\n}\nobject(MongoDB\\Driver\\ReadPreference)#1 (2) {\n  [\"mode\"]=>\n  string(7) \"nearest\"\n  [\"tags\"]=>\n  array(1) {\n    [0]=>\n    object(stdClass)#2 (1) {\n      [\"dc\"]=>\n      string(2) \"ny\"\n    }\n  }\n}\nobject(MongoDB\\Driver\\ReadPreference)#1 (2) {\n  [\"mode\"]=>\n  string(9) \"secondary\"\n  [\"maxStalenessSeconds\"]=>\n  int(120)\n}"}],"mongodb\\driver\\readpreference::getmaxstalenessseconds":[{"title":"MongoDB\\Driver\\ReadPreference::getMaxStalenessSeconds() example","source":"$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY);\nvar_dump($rp->getMaxStalenessSeconds());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY, null, [\n    'maxStalenessSeconds' => MongoDB\\Driver\\ReadPreference::NO_MAX_STALENESS,\n]);\nvar_dump($rp->getMaxStalenessSeconds());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY, null, [\n    'maxStalenessSeconds' => MongoDB\\Driver\\ReadPreference::SMALLEST_MAX_STALENESS_SECONDS,\n]);\nvar_dump($rp->getMaxStalenessSeconds());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY, null, [\n    'maxStalenessSeconds' => 1000,\n]);\nvar_dump($rp->getMaxStalenessSeconds());","output":"int(-1)\nint(-1)\nint(90)\nint(1000)"}],"mongodb\\driver\\readpreference::getmode":[{"title":"MongoDB\\Driver\\ReadPreference::getMode() example","source":"$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\nvar_dump($rp->getMode());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY_PREFERRED);\nvar_dump($rp->getMode());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY);\nvar_dump($rp->getMode());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED);\nvar_dump($rp->getMode());\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_NEAREST);\nvar_dump($rp->getMode());","output":"int(1)\nint(5)\nint(2)\nint(6)\nint(10)"}],"mongodb\\driver\\readpreference::gettagsets":[{"title":"MongoDB\\Driver\\ReadPreference::getTagSets() example","source":"$mode = MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED);\n\n\/* Null and an empty array both denote no tag set preference. *\/\n$rp = new MongoDB\\Driver\\ReadPreference($mode, null);\nvar_dump($rp->getTagSets());\n\n$rp = new MongoDB\\Driver\\ReadPreference($mode, []);\nvar_dump($rp->getTagSets());\n\n\/* Prefer a node in New York, but fall back to any available node. *\/\n$rp = new MongoDB\\Driver\\ReadPreference($mode, [['dc' => 'ny']]);\nvar_dump($rp->getTagSets());\n\n\/* Prefer a node in the New York, followed by a node in San Francisco that is\n   labeled for reporting usage, and finally fall back to any available node. *\/\n$rp = new MongoDB\\Driver\\ReadPreference($mode, [\n  ['dc' => 'ny'],\n  ['dc' => 'sf', 'use' => 'reporting'],\n  [],\n]);\nvar_dump($rp->getTagSets());","output":"array(0) {\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  array(1) {\n    [\"dc\"]=>\n    string(2) \"ny\"\n  }\n  [1]=>\n  array(0) {\n  }\n}\narray(3) {\n  [0]=>\n  array(1) {\n    [\"dc\"]=>\n    string(2) \"ny\"\n  }\n  [1]=>\n  array(2) {\n    [\"dc\"]=>\n    string(2) \"sf\"\n    [\"use\"]=>\n    string(9) \"reporting\"\n  }\n  [2]=>\n  array(0) {\n  }\n}"}],"mongodb\\driver\\server::gethost":[{"title":"MongoDB\\Driver\\Server::getHost() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\/\");\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\n$server = $manager->selectServer($rp);\n\nvar_dump($server->getHost());","output":"string(9) \"localhost\""}],"mongodb\\driver\\server::getinfo":[{"title":"MongoDB\\Driver\\Server::getInfo() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\/\");\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\n$server = $manager->selectServer($rp);\n\nvar_dump($server->getInfo());","output":"array(8) {\n  [\"ismaster\"]=>\n  bool(true)\n  [\"maxBsonObjectSize\"]=>\n  int(16777216)\n  [\"maxMessageSizeBytes\"]=>\n  int(48000000)\n  [\"maxWriteBatchSize\"]=>\n  int(1000)\n  [\"localTime\"]=>\n  object(MongoDB\\BSON\\UTCDateTime)#4 (1) {\n    [\"milliseconds\"]=>\n    int(1447276242774)\n  }\n  [\"maxWireVersion\"]=>\n  int(3)\n  [\"minWireVersion\"]=>\n  int(0)\n  [\"ok\"]=>\n  float(1)\n}"}],"mongodb\\driver\\server::getlatency":[{"title":"MongoDB\\Driver\\Server::getLatency() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\/\");\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\n$server = $manager->selectServer($rp);\n\nvar_dump($server->getLatency());","output":"int(592)"}],"mongodb\\driver\\server::getport":[{"title":"MongoDB\\Driver\\Server::getPort() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/localhost:27017\/\");\n\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY);\n$server = $manager->selectServer($rp);\n\nvar_dump($server->getPort());","output":"int(27017)"}],"mongodb\\driver\\writeconcern::bsonserialize":[{"title":"MongoDB\\Driver\\WriteConcern::bsonSerialize() with majority write concern","source":"$wc = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY);\nvar_dump($wc->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($wc));","output":"object(stdClass)#2 (1) {\n  [\"w\"]=>\n  string(8) \"majority\"\n}\n\n{ \"w\" : \"majority\" }"},{"title":"MongoDB\\Driver\\WriteConcern::bsonSerialize() with wtimeout and journal","source":"$wc = new MongoDB\\Driver\\WriteConcern(2, 1000, true);\nvar_dump($wc->bsonSerialize());\n\necho \"\\n\", MongoDB\\BSON\\toJSON(MongoDB\\BSON\\fromPHP($wc));","output":"object(stdClass)#2 (3) {\n  [\"w\"]=>\n  int(2)\n  [\"j\"]=>\n  bool(true)\n  [\"wtimeout\"]=>\n  int(1000)\n}\n\n{ \"w\" : 2, \"j\" : true, \"wtimeout\" : 1000 }"}],"mongodb\\driver\\writeconcern::__construct":[{"title":"MongoDB\\Driver\\WriteConcern::__construct() example","source":"\/* Request write acknowledgement from the majority of the replica set nodes *\/\n$wc = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 500);\n\n\/* Request write acknowledgement from a node configured with the \"MultipleDC\" tag *\/\n$wc = new MongoDB\\Driver\\WriteConcern(\"MultipleDC\", 500);","output":null}],"mongodb\\driver\\writeconcern::getjournal":[{"title":"MongoDB\\Driver\\WriteConcern::getJournal() example","source":"$wc = new MongoDB\\Driver\\WriteConcern(1);\nvar_dump($wc->getJournal());\n\n$wc = new MongoDB\\Driver\\WriteConcern(1, 0, true);\nvar_dump($wc->getJournal());\n\n$wc = new MongoDB\\Driver\\WriteConcern(1, 0, false);\nvar_dump($wc->getJournal());","output":"NULL\nbool(true)\nbool(false)"}],"mongodb\\driver\\writeconcern::getw":[{"title":"MongoDB\\Driver\\WriteConcern::getW() example","source":"$wc = new MongoDB\\Driver\\WriteConcern(1);\nvar_dump($wc->getW());\n\n$wc = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY);\nvar_dump($wc->getW());","output":"int(1)\nstring(8) \"majority\""}],"mongodb\\driver\\writeconcern::getwtimeout":[{"title":"MongoDB\\Driver\\WriteConcern::getWtimeout() example","source":"$wc = new MongoDB\\Driver\\WriteConcern(1);\nvar_dump($wc->getWtimeout());\n\n$wc = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY, 3000);\nvar_dump($wc->getWtimeout());","output":"int(0)\nint(3000)"}],"mongodb\\driver\\writeconcernerror::getcode":[{"title":"MongoDB\\Driver\\WriteConcernError::getCode() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/rs1.example.com,rs2.example.com\/?replicaSet=myReplicaSet\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$writeConcern = new MongoDB\\Driver\\WriteConcern(2, 1);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteConcernError()->getCode());\n}","output":"int(64)"}],"mongodb\\driver\\writeconcernerror::getinfo":[{"title":"MongoDB\\Driver\\WriteConcernError::getInfo() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/rs1.example.com,rs2.example.com\/?replicaSet=myReplicaSet\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$writeConcern = new MongoDB\\Driver\\WriteConcern(2, 1);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteConcernError()->getInfo());\n}","output":"object(stdClass)#1 (1) {\n  [\"wtimeout\"]=>\n  bool(true)\n}"}],"mongodb\\driver\\writeconcernerror::getmessage":[{"title":"MongoDB\\Driver\\WriteConcernError::getMessage() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/rs1.example.com,rs2.example.com\/?replicaSet=myReplicaSet\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$writeConcern = new MongoDB\\Driver\\WriteConcern(2, 1);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteConcernError()->getMessage());\n}","output":"string(33) \"waiting for replication timed out\""}],"mongodb\\driver\\writeerror::getcode":[{"title":"MongoDB\\Driver\\WriteError::getCode() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['_id' => 1]);\n$bulk->insert(['_id' => 1]);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteErrors()[0]->getCode());\n}","output":"int(11000)"}],"mongodb\\driver\\writeerror::getindex":[{"title":"MongoDB\\Driver\\WriteError::getIndex() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['_id' => 1]);\n$bulk->insert(['_id' => 1]);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteErrors()[0]->getIndex());\n}","output":"int(1)"}],"mongodb\\driver\\writeerror::getmessage":[{"title":"MongoDB\\Driver\\WriteError::getMessage() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['_id' => 1]);\n$bulk->insert(['_id' => 1]);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteErrors()[0]->getMessage());\n}","output":"string(70) \"E11000 duplicate key error index: db.collection.$_id_ dup key: { : 1 }\""}],"mongodb\\driver\\exception\\writeexception::getwriteresult":[{"title":"MongoDB\\Driver\\Exception\\WriteException::getWriteResult() example","source":"$manager = new MongoDB\\Driver\\Manager('mongodb:\/\/localhost');\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['_id' => 1]);\n$bulk->insert(['_id' => 1]);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk);\n} catch (MongoDB\\Driver\\Exception\\WriteException $e) {\n    $writeResult = $e->getWriteResult();\n\n    if ($writeConcernError = $writeResult->getWriteConcernError()) {\n        var_dump($writeConcernError);\n    }\n\n    if ($writeErrors = $writeResult->getWriteErrors()) {\n        var_dump($writeErrors);\n    }\n}","output":"array(1) {\n  [0]=>\n  object(MongoDB\\Driver\\WriteError)#5 (4) {\n    [\"message\"]=>\n    string(70) \"E11000 duplicate key error index: db.collection.$_id_ dup key: { : 1 }\"\n    [\"code\"]=>\n    int(11000)\n    [\"index\"]=>\n    int(1)\n    [\"info\"]=>\n    NULL\n  }\n}"}],"mongodb\\driver\\writeresult::getdeletedcount":[{"title":"MongoDB\\Driver\\WriteResult::getDeletedCount() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);\n$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);\n$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);\n$bulk->delete(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getDeletedCount());","output":"int(1)"}],"mongodb\\driver\\writeresult::getinsertedcount":[{"title":"MongoDB\\Driver\\WriteResult::getInsertedCount() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);\n$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);\n$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);\n$bulk->delete(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getInsertedCount());","output":"int(1)"}],"mongodb\\driver\\writeresult::getmatchedcount":[{"title":"MongoDB\\Driver\\WriteResult::getMatchedCount() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);\n$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);\n$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);\n$bulk->delete(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getMatchedCount());","output":"int(1)"}],"mongodb\\driver\\writeresult::getmodifiedcount":[{"title":"MongoDB\\Driver\\WriteResult::getModifiedCount() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);\n$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);\n$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);\n$bulk->delete(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getModifiedCount());","output":"int(1)"}],"mongodb\\driver\\writeresult::getserver":[{"title":"MongoDB\\Driver\\WriteResult::getServer() example","source":"$manager = new MongoDB\\Driver\\Manager;\n$server = $manager->selectServer(new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY));\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$result = $server->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getServer() == $server);","output":"bool(true)"}],"mongodb\\driver\\writeresult::getupsertedcount":[{"title":"MongoDB\\Driver\\WriteResult::getUpsertedCount() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);\n$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);\n$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);\n$bulk->delete(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getUpsertedCount());","output":"int(2)"}],"mongodb\\driver\\writeresult::getupsertedids":[{"title":"MongoDB\\Driver\\WriteResult::getUpsertedIds() example","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);\n$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);\n$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);\n$bulk->delete(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->getUpsertedIds());","output":"array(2) {\n  [2]=>\n  object(MongoDB\\BSON\\ObjectID)#4 (1) {\n    [\"oid\"]=>\n    string(24) \"580e62a224f2302f191b880b\"\n  }\n  [3]=>\n  object(MongoDB\\BSON\\ObjectID)#5 (1) {\n    [\"oid\"]=>\n    string(24) \"580e62a224f2302f191b880c\"\n  }\n}"}],"mongodb\\driver\\writeresult::getwriteconcernerror":[{"title":"MongoDB\\Driver\\WriteResult::getWriteConcernError() example","source":"$manager = new MongoDB\\Driver\\Manager(\"mongodb:\/\/rs1.example.com,rs2.example.com\/?replicaSet=myReplicaSet\");\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$writeConcern = new MongoDB\\Driver\\WriteConcern(2, 1);\n\ntry {\n    $manager->executeBulkWrite('db.collection', $bulk, $writeConcern);\n} catch(MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteConcernError());\n}","output":"object(MongoDB\\Driver\\WriteConcernError)#6 (3) {\n  [\"message\"]=>\n  string(33) \"waiting for replication timed out\"\n  [\"code\"]=>\n  int(64)\n  [\"info\"]=>\n  object(stdClass)#7 (1) {\n    [\"wtimeout\"]=>\n    bool(true)\n  }\n}"}],"mongodb\\driver\\writeresult::getwriteerrors":[{"title":"MongoDB\\Driver\\WriteResult::getWriteErrors() with a single error","source":"$manager = new MongoDB\\Driver\\Manager;\n\n\/* By default, bulk write operations are executed serially in order and\n * execution will stop after the first error.\n *\/\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['_id' => 1]);\n$bulk->insert(['_id' => 2]);\n$bulk->insert(['_id' => 2]);\n$bulk->insert(['_id' => 3]);\n$bulk->insert(['_id' => 4]);\n$bulk->insert(['_id' => 4]);\n\ntry {\n    $result = $manager->executeBulkWrite('db.collection', $bulk);\n} catch (MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteErrors());\n}","output":"array(1) {\n  [0]=>\n  object(MongoDB\\Driver\\WriteError)#5 (4) {\n    [\"message\"]=>\n    string(81) \"E11000 duplicate key error collection: db.collection index: _id_ dup key: { : 2 }\"\n    [\"code\"]=>\n    int(11000)\n    [\"index\"]=>\n    int(2)\n    [\"info\"]=>\n    NULL\n  }\n}"},{"title":"MongoDB\\Driver\\WriteResult::getWriteErrors() with multiple errors","source":"$manager = new MongoDB\\Driver\\Manager;\n\n\/* The \"ordered\" option may be used to allow bulk write operations to continue\n * executing after the first error is encountered.\n *\/\n$bulk = new MongoDB\\Driver\\BulkWrite(['ordered' => false]);\n$bulk->insert(['_id' => 1]);\n$bulk->insert(['_id' => 2]);\n$bulk->insert(['_id' => 2]);\n$bulk->insert(['_id' => 3]);\n$bulk->insert(['_id' => 4]);\n$bulk->insert(['_id' => 4]);\n\ntry {\n    $result = $manager->executeBulkWrite('db.collection', $bulk);\n} catch (MongoDB\\Driver\\Exception\\BulkWriteException $e) {\n    var_dump($e->getWriteResult()->getWriteErrors());\n}","output":"array(2) {\n  [0]=>\n  object(MongoDB\\Driver\\WriteError)#5 (4) {\n    [\"message\"]=>\n    string(81) \"E11000 duplicate key error collection: db.collection index: _id_ dup key: { : 2 }\"\n    [\"code\"]=>\n    int(11000)\n    [\"index\"]=>\n    int(2)\n    [\"info\"]=>\n    NULL\n  }\n  [1]=>\n  object(MongoDB\\Driver\\WriteError)#6 (4) {\n    [\"message\"]=>\n    string(81) \"E11000 duplicate key error collection: db.collection index: _id_ dup key: { : 4 }\"\n    [\"code\"]=>\n    int(11000)\n    [\"index\"]=>\n    int(5)\n    [\"info\"]=>\n    NULL\n  }\n}"}],"mongodb\\driver\\writeresult::isacknowledged":[{"title":"MongoDB\\Driver\\WriteResult::isAcknowledged() with acknowledged write concern","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk);\n\nvar_dump($result->isAcknowledged());","output":"bool(true)"},{"title":"MongoDB\\Driver\\WriteResult::isAcknowledged() with unacknowledged write concern","source":"$manager = new MongoDB\\Driver\\Manager;\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n$bulk->insert(['x' => 1]);\n\n$result = $manager->executeBulkWrite('db.collection', $bulk, new MongoDB\\Driver\\WriteConcern(0));\n\nvar_dump($result->isAcknowledged());","output":"bool(false)"}],"mongodb::command":[{"title":"MongoDB::command() \"distinct\" example","source":"$people = $db->people;\n\n$people->insert(array(\"name\" => \"Joe\", \"age\" => 4));\n$people->insert(array(\"name\" => \"Sally\", \"age\" => 22));\n$people->insert(array(\"name\" => \"Dave\", \"age\" => 22));\n$people->insert(array(\"name\" => \"Molly\", \"age\" => 87));\n\n$ages = $db->command(array(\"distinct\" => \"people\", \"key\" => \"age\"));\n\nforeach ($ages['values'] as $age) {\n    echo \"$age\\n\";\n}","output":null},{"title":"MongoDB::command() \"distinct\" example","source":"$people = $db->people;\n\n$people->insert(array(\"name\" => \"Joe\", \"age\" => 4));\n$people->insert(array(\"name\" => \"Sally\", \"age\" => 22));\n$people->insert(array(\"name\" => \"Dave\", \"age\" => 22));\n$people->insert(array(\"name\" => \"Molly\", \"age\" => 87));\n\n$ages = $db->command(\n    array(\n        \"distinct\" => \"people\",\n        \"key\" => \"age\", \n        \"query\" => array(\"age\" => array('$gte' => 18))\n    )\n);  \n\nforeach ($ages['values'] as $age) {\n    echo \"$age\\n\";\n}","output":null},{"title":"MongoDB::command() MapReduce example","source":"\/\/ sample event document\n$events->insert(array(\"user_id\" => $id, \n    \"type\" => $type, \n    \"time\" => new MongoDate(), \n    \"desc\" => $description));\n\n\/\/ construct map and reduce functions\n$map = new MongoCode(\"function() { emit(this.user_id,1); }\");\n$reduce = new MongoCode(\"function(k, vals) { \".\n    \"var sum = 0;\".\n    \"for (var i in vals) {\".\n        \"sum += vals[i];\". \n    \"}\".\n    \"return sum; }\");\n\n$sales = $db->command(array(\n    \"mapreduce\" => \"events\", \n    \"map\" => $map,\n    \"reduce\" => $reduce,\n    \"query\" => array(\"type\" => \"sale\"),\n    \"out\" => array(\"merge\" => \"eventCounts\")));\n\n$users = $db->selectCollection($sales['result'])->find();\n\nforeach ($users as $user) {\n    echo \"{$user['_id']} had {$user['value']} sale(s).\\n\";\n}","output":null},{"title":"MongoDB::command() \"geoNear\" example","source":"$m = new MongoClient();\n$d = $m->demo;\n$c = $d->poiConcat;\n\n$r = $d->command(array(\n    'geoNear' => \"poiConcat\",      \/\/ Search in the poiConcat collection\n    'near' => array(-0.08, 51.48), \/\/ Search near 51.48°N, 0.08°E\n    'spherical' => true,           \/\/ Enable spherical search\n    'num' => 5,                    \/\/ Maximum 5 returned documents\n));\nprint_r($r);","output":null}],"mongodb::createcollection":[{"title":"MongoDB::createCollection() capped collection example","source":"$log = $db->createCollection(\n    \"logger\",\n    array(\n        'capped' => true,\n        'size' => 10*1024,\n        'max' => 10\n    )\n);\n\nfor ($i = 0; $i < 100; $i++) {\n    $log->insert(array(\"level\" => WARN, \"msg\" => \"sample log message #$i\", \"ts\" => new MongoDate()));\n}\n\n$msgs = $log->find();\n\nforeach ($msgs as $msg) {\n    echo $msg['msg'].\"\\n\";\n}","output":null}],"mongodb::createdbref":[{"title":"MongoDB::createDBRef() example","source":"$articles = $db->articles;\n\n$article = array(\n 'title' => 'Test article',\n 'description' => 'Test article description'\n);\n\n$articles->insert($article);\n$ref = $db->createDBRef('articles', $article);\n\nprint_r($article);\nprint_r($ref);","output":"Array\n     (\n         [title] => Test article\n         [description] => Test article description\n         [_id] => MongoId Object\n             (\n             )\n\n     )\n     Array\n     (\n         [$ref] => articles\n         [$id] => MongoId Object\n             (\n             )\n\n     )"},{"title":"MongoDB::createDBRef() example","source":"$id = new MongoId('47cc67093475061e3d9536d2');\n$ref = $db->createDBRef('articles', $id);","output":null}],"mongodb::drop":[{"title":"MongoDB::drop() example","source":"$db = $mongo->foo;\n$response = $db->drop();\nprint_r($response);","output":"Array\n(\n    [dropped] => foo.$cmd\n    [ok] => 1\n)"}],"mongodb::execute":[{"title":"Simple MongoDB::execute() example","source":"$response = $db->execute(\"function() { return 'Hello, world!'; }\");\necho $response['retval'];","output":null},{"title":"Parameter MongoDB::execute() example","source":"$response = $db->execute(\"function(greeting, name) { return greeting+', '+name+'!'; }\", array(\"Good bye\", \"Joe\"));\necho $response['retval'];","output":null},{"title":"Scope example","source":"$func = \n    \"function(greeting, name) { \".\n        \"return greeting+', '+name+', says '+greeter;\".\n    \"}\";\n$scope = array(\"greeter\" => \"Fred\");\n\n$code = new MongoCode($func, $scope);\n\n$response = $db->execute($code, array(\"Goodbye\", \"Joe\"));\necho $response['retval'];","output":null}],"mongodb::getcollectioninfo":[{"title":"MongoDB::getCollectionInfo() example","source":"$m = new MongoClient();\n$db = $m->selectDB(\"demo\");\nvar_dump($db->getCollectionInfo());","output":"array(2) {\n  [0]=>\n  array(2) {\n    [\"name\"]=>\n    string(4) \"logs\"\n    [\"options\"]=>\n    array(2) {\n      [\"capped\"]=>\n      bool(true)\n      [\"size\"]=>\n      int(10240)\n    }\n  }\n  [1]=>\n  array(2) {\n    [\"name\"]=>\n    string(5) \"users\"\n    [\"options\"]=>\n    array(1) {\n      [\"flags\"]=>\n      int(1)\n    }\n  }\n}"}],"mongodb::getcollectionnames":[{"title":"MongoDB::getCollectionNames() example","source":"$m = new MongoClient();\n$db = $m->selectDB(\"demo\");\n$collections = $db->getCollectionNames();\n\nforeach ($collections as $collectionName) {\n    echo \"Found collection: \", $collectionName, \"\\n\";\n}","output":"...\nFound collection: img\nFound collection: beer\nFound collection: collation\n..."}],"mongodb::getdbref":[{"title":"MongoDB::getDBRef() example","source":"$ref = array(\n   '$ref' => 'profiles',\n   '$id' => new MongoId('47cc67093475061e3d9536d2')\n );\n \n $profile = $db->getDBRef($ref);","output":null}],"mongodb::getgridfs":[{"title":"MongoDB::getGridFS() example","source":"$db = $mongo->my_db;\n\n$prefix = 'files';\n$collection = $db->getGridFS($prefix);","output":null}],"mongodb::getreadpreference":[{"title":"MongoDB::getReadPreference() return value example","source":"$m = new MongoClient();\n$db = $m->test;\n$db->setReadPreference(MongoClient::RP_SECONDARY, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n    array(),\n));\nvar_dump($db->getReadPreference());","output":"array(2) {\n  [\"type\"]=>\n  string(9) \"secondary\"\n  [\"tagsets\"]=>\n  array(3) {\n    [0]=>\n    array(2) {\n      [\"dc\"]=>\n      string(4) \"east\"\n      [\"use\"]=>\n      string(9) \"reporting\"\n    }\n    [1]=>\n    array(1) {\n      [\"dc\"]=>\n      string(7) \"west\"\n    }\n    [2]=>\n    array(0) {\n    }\n  }\n}"}],"mongodb::getwriteconcern":[{"title":"MongoDB::getWriteConcern() return value example","source":"$mc = new MongoClient('mongodb:\/\/localhost:27017', array('wTimeoutMS' => 500));\n$db = $mc->selectDB('test');\nvar_dump($db->getWriteConcern());\n\n$db->setWriteConcern(1, 1000);\nvar_dump($db->getWriteConcern());","output":"array(2) {\n  [\"w\"]=>\n  int(1)\n  [\"wtimeout\"]=>\n  int(500)\n}\narray(2) {\n  [\"w\"]=>\n  int(1)\n  [\"wtimeout\"]=>\n  int(1000)\n}"}],"mongodb::lasterror":[{"title":"MongoDB::lastError() NULL error example","source":"$db->resetError();\nvar_dump($db->lastError());","output":"array(3) {\n  [\"err\"]=>\n  NULL\n  [\"n\"]=>\n  int(0)\n  [\"ok\"]=>\n  float(1)\n}"},{"title":"MongoDB::lastError() duplicate key example","source":"$c = $db->selectCollection(\"foo\");\n\n\/\/ insert two documents with the same _id\n$c->insert(array(\"_id\" => 1));\n$c->insert(array(\"_id\" => 1));\n\nvar_dump($db->lastError());","output":"array(3) {\n  [\"err\"]=>\n  string(64) \"E11000 duplicate key errorindex: foo.foo.$_id_  dup key: { : 1 }\"\n  [\"n\"]=>\n  int(0)\n  [\"ok\"]=>\n  float(1)\n}"}],"mongodb::listcollections":[{"title":"MongoDB::listCollections() example","source":"$m = new MongoClient();\n$db = $m->selectDB(\"demo\");\n$collections = $db->listCollections();\n\nforeach ($collections as $collection) {\n    echo \"amount of documents in $collection: \";\n    echo $collection->count(), \"\\n\";\n}","output":"...\namount of documents in demo.pubs: 4\namount of documents in demo.elephpants: 3\namount of documents in demo.cities: 22840\n..."}],"mongodb::repair":[{"title":"MongoDB::repair() example","source":"$db = $mongo->foo;\n\n$response = $db->repair();\nprint_r($response);","output":"Array\n(\n    [ok] => 1\n)"}],"mongodb::setreadpreference":[{"title":"MongoDB::setReadPreference() tag set array syntax example","source":"$m = new MongoClient();\n$db = $m->test;\n\n\/\/ Prefer the nearest server in the \"east\" data center also used for reporting,\n\/\/ but fall back to a server in the \"west\" data center\n$db->setReadPreference(MongoClient::RP_NEAREST, array(\n    array('dc' => 'east', 'use' => 'reporting'),\n    array('dc' => 'west'),\n));","output":null}],"mongodb::setwriteconcern":[{"title":"MongoDB::setWriteConcern() example","source":"$mc = new MongoClient('mongodb:\/\/rs1.example.com,rs2.example.com');\n$db = $mc->selectDB('test');\n\n\/\/ Require that the majority of servers in the replica set acknowledge writes\n\/\/ within three seconds.\n$db->setWriteConcern('majority', 3000);","output":null}],"mongodbref::create":[{"title":"MongoDBRef::create() example","source":"$addresses = $db->addresses;\n$people = $db->people;\n\n\/\/ save $address so it has an _id\n$addresses->insert($address);\n\n\/\/ create a reference\n$ref = MongoDBRef::create($addresses->getName(), $address['_id']);\n\n\/\/ set the field in $person\n$person['address'] = $ref;\n$people->save($person);","output":null}],"mongodbref::get":[{"title":"MongoCollection::createDBRef() example","source":"\/\/ get $person out of the db\n$person = $people->findOne();\n\n\/\/ dereference the address\n$address = MongoDBRef::get($people->db, $person['address']);","output":null}],"mongogridfs::findone":[{"title":"MongoGridFS::findOne() example","source":"$downloads = $mongo->my_db->getGridFS('downloads');\n\n$downloads->storeFile('filename.tgz');\n\n$download = $downloads->findOne('filename.tgz'); \/\/ instance of MongoGridFSFile\n\nprint_r($download);","output":"MongoGridFSFile Object\n(\n    [file] => Array\n        (\n            [_id] => MongoId Object\n                (\n                )\n\n            [filename] => filename.tgz\n            [uploadDate] => MongoDate Object\n                (\n                    [sec] => 1274288014\n                    [usec] => 467000\n                )\n\n            [chunkSize] => 262144\n            [md5] => d41d8cd98f00b204e9800998ecf8427e\n        )\n\n    [gridfs:protected] => MongoGridFS Object\n        (\n            [chunks] => MongoCollection Object\n                (\n                )\n\n            [filesName:protected] => downloads.files\n            [chunksName:protected] => downloads.chunks\n        )\n\n)"}],"mongogridfs::storebytes":[{"title":"MongoGridFS::storeBytes() with additional metadata","source":"$m = new MongoClient();\n$gridfs = $m->selectDB('test')->getGridFS();\n\n$bytes = 'abcdefghijklmnopqrstuvwxyz';\n$id = $gridfs->storeBytes($bytes, array('_id' => 'alphabet'));\n$gridfsFile = $gridfs->get($id);\n\nvar_dump($gridfsFile->file);","output":"array(7) {\n  [\"_id\"]=>\n  string(8) \"alphabet\"\n  [\"uploadDate\"]=>\n  object(MongoDate)#7 (0) {\n  }\n  [\"length\"]=>\n  int(26)\n  [\"chunkSize\"]=>\n  int(262144)\n  [\"md5\"]=>\n  string(32) \"c3fcd3d76192e4007dfb496cca67e13b\"\n}"}],"mongogridfs::storefile":[{"title":"MongoGridFS::storeFile() with additional metadata","source":"$m = new MongoClient();\n$gridfs = $m->selectDB('test')->getGridFS();\n\n$id = $gridfs->storeFile('example.txt', array('contentType' => 'plain\/text'));\n$gridfsFile = $gridfs->get($id);\n\nvar_dump($gridfsFile->file);","output":"array(7) {\n  [\"_id\"]=>\n  object(MongoId)#6 (0) {\n  }\n  [\"contentType\"]=>\n  string(10) \"plain\/text\"\n  [\"filename\"]=>\n  string(11) \"example.txt\"\n  [\"uploadDate\"]=>\n  object(MongoDate)#7 (0) {\n  }\n  [\"length\"]=>\n  int(26)\n  [\"chunkSize\"]=>\n  int(262144)\n  [\"md5\"]=>\n  string(32) \"c3fcd3d76192e4007dfb496cca67e13b\"\n}"}],"mongogridfs::storeupload":[{"title":"MongoGridFS::storeUpload() HTML form example","source":"$m = new MongoClient();\n$gridfs = $m->selectDB('test')->getGridFS();\n\n$gridfs->storeUpload('pic', array('username' => $_POST['username']));","output":null}],"mongogridfsfile::getbytes":[{"title":"MongoGridFSFile::getBytes() example","source":"$images = $db->my_db->getGridFS('images');\n\n$image = $images->findOne('jwage.png');\n\nheader('Content-type: image\/png;');\necho $image->getBytes();","output":null}],"mongogridfsfile::getresource":[{"title":"MongoGridFSFile::getResource() example","source":"$m = new Mongo;\n$images = $m->my_db->getGridFS('images');\n\n$image = $images->findOne('mongo.png');\n\nheader('Content-type: image\/png;');\n$stream = $image->getResource();\n\nwhile (!feof($stream)) {\n    echo fread($stream, 8192);\n}","output":null}],"mongogridfsfile::write":[{"title":"MongoGridFSFile::write() example","source":"$images = $db->my_db->getGridFS('images');\n\n$image = $images->findOne('jwage.png');\n$image->write('\/path\/to\/write\/jwage.png');","output":null}],"mongoid::__construct":[{"title":"MongoId::__construct() example","source":"$id1 = new MongoId();\n  echo \"$id1\\n\";\n\n  $id2 = new MongoId();\n  echo \"$id2\\n\";","output":"49a7011a05c677b9a916612a\n49a702d5450046d3d515d10d"},{"title":"Parameter example","source":"$id1 = new MongoId();\n\n  \/\/ create a new id from $id1\n  $id2 = new MongoId(\"$id1\");\n\n  \/\/ show that $id1 and $id2 have the same hexidecimal value\n  var_dump($id1 == $id2);","output":"bool(true)"}],"mongoid::__tostring":[{"title":"MongoId::__toString() example","source":"$m = new MongoClient();\n$collection = $m->selectDB(\"foo\")->selectCollection(\"bar\");\n\n$collection->insert(array( \"x\" => \"y\" ));\n$collection->insert(array( \"x\" => \"y\" ));\n\n$cursor = $collection->find();\n$r1 = $cursor->next();\n$r2 = $cursor->next();\n\necho $r1[\"_id\"] . \"\\n\";\necho $r2[\"_id\"] . \"\\n\";","output":"49a7011a05c677b9a916612a\n49a702d5450046d3d515d10d"}],"mongolog::setcallback":[{"title":"MongoLog::setCallback() example","source":"function module2string($module)\n{\n    switch ($module) {\n        case MongoLog::RS: return \"REPLSET\";\n        case MongoLog::CON: return \"CON\";\n        case MongoLog::IO: return \"IO\";\n        case MongoLog::SERVER: return \"SERVER\";\n        case MongoLog::PARSE: return \"PARSE\";\n        default: return \"UNKNOWN\";\n    }\n}\n\nfunction level2string($level)\n{\n    switch ($level) {\n        case MongoLog::WARNING: return \"WARN\";\n        case MongoLog::INFO: return \"INFO\";\n        case MongoLog::FINE: return \"FINE\";\n        default: return \"UNKNOWN\";\n    }\n}\n\nfunction callback($module, $level, $message)\n{\n    echo date(\"Y-m-d H:i:s - \");\n    printf(\"%s (%s): %s\\n\", module2string($module), level2string($level), $message);\n}\n\nMongoLog::setLevel(MongoLog::ALL);\nMongoLog::setModule(MongoLog::ALL);\n\n\/\/ We specify the function name here, but any callable (e.g. anonymous function) will work\nMongoLog::setCallback(\"callback\");\n\nnew MongoClient();","output":"2013-07-09 09:41:42 - PARSE (INFO): Parsing localhost:27017\n2013-07-09 09:41:42 - PARSE (INFO): - Found node: localhost:27017\n2013-07-09 09:41:42 - PARSE (INFO): - Connection type: STANDALONE\n2013-07-09 09:41:42 - CON (INFO): mongo_get_read_write_connection: finding a STANDALONE connection\n2013-07-09 09:41:42 - CON (INFO): connection_create: creating new connection for localhost:27017\n2013-07-09 09:41:42 - CON (INFO): stream_connect: Not establishing SSL for localhost:27017\n2013-07-09 09:41:42 - CON (INFO): get_server_flags: start\n2013-07-09 09:41:42 - CON (FINE): send_packet: read from header: 36\n2013-07-09 09:41:42 - CON (FINE): send_packet: data_size: 95\n2013-07-09 09:41:42 - CON (FINE): get_server_flags: setting maxBsonObjectSize to 16777216\n2013-07-09 09:41:42 - CON (FINE): get_server_flags: setting maxMessageSizeBytes to 48000000\n2013-07-09 09:41:42 - CON (INFO): is_ping: pinging localhost:27017;-;.;1543\n2013-07-09 09:41:42 - CON (FINE): send_packet: read from header: 36\n2013-07-09 09:41:42 - CON (FINE): send_packet: data_size: 17\n2013-07-09 09:41:42 - CON (INFO): is_ping: last pinged at 1373359302; time: 0ms\n2013-07-09 09:41:42 - REPLSET (FINE): finding candidate servers\n2013-07-09 09:41:42 - REPLSET (FINE): - all servers\n2013-07-09 09:41:42 - REPLSET (FINE): filter_connections: adding connections:\n2013-07-09 09:41:42 - REPLSET (FINE): - connection: type: STANDALONE, socket: 42, ping: 0, hash: localhost:27017;-;.;1543\n2013-07-09 09:41:42 - REPLSET (FINE): filter_connections: done\n2013-07-09 09:41:42 - REPLSET (FINE): limiting by seeded\/discovered servers\n2013-07-09 09:41:42 - REPLSET (FINE): - connection: type: STANDALONE, socket: 42, ping: 0, hash: localhost:27017;-;.;1543\n2013-07-09 09:41:42 - REPLSET (FINE): limiting by seeded\/discovered servers: done\n2013-07-09 09:41:42 - REPLSET (FINE): limiting by credentials\n2013-07-09 09:41:42 - REPLSET (FINE): - connection: type: STANDALONE, socket: 42, ping: 0, hash: localhost:27017;-;.;1543\n2013-07-09 09:41:42 - REPLSET (FINE): limiting by credentials: done\n2013-07-09 09:41:42 - REPLSET (FINE): sorting servers by priority and ping time\n2013-07-09 09:41:42 - REPLSET (FINE): - connection: type: STANDALONE, socket: 42, ping: 0, hash: localhost:27017;-;.;1543\n2013-07-09 09:41:42 - REPLSET (FINE): sorting servers: done\n2013-07-09 09:41:42 - REPLSET (FINE): selecting near servers\n2013-07-09 09:41:42 - REPLSET (FINE): selecting near servers: nearest is 0ms\n2013-07-09 09:41:42 - REPLSET (FINE): - connection: type: STANDALONE, socket: 42, ping: 0, hash: localhost:27017;-;.;1543\n2013-07-09 09:41:42 - REPLSET (FINE): selecting near server: done\n2013-07-09 09:41:42 - REPLSET (INFO): pick server: random element 0\n2013-07-09 09:41:42 - REPLSET (INFO): - connection: type: STANDALONE, socket: 42, ping: 0, hash: localhost:27017;-;.;1543"}],"mongopool::getsize":[{"title":"Changing pool size","source":"$connection = new Mongo(\"host1\");\n\n\/\/ pool size is -1\necho \"pool size is: \".MongoPool::getSize().\"\\n\";\n\necho \"setting pool size to 200\\n\";\n\nMongoPool::setSize(200);\n\n\/\/ pool size is 200\necho \"pool size is: \".MongoPool::getSize().\"\\n\";\n\n$conn2 = new Mongo(\"host2\");\n\n\/\/ remaining for host1 is -2\n\/\/ remaining for host2 is 199\nvar_dump(Mongo::poolDebug());","output":null}],"mongopool::setsize":[{"title":"Mongo::setPoolSize() example","source":"\/\/ only allow one connection to a server\nMongoPool::setSize(1);\n\n\/\/ creates one connection to localhost:27017\n$m1 = new Mongo();\n\n\/\/ attempt to create a second connection to localhost:27017\n\/\/ only one connection is allowed, so this will throw an exception\n$m2 = new Mongo();","output":"Fatal error: Uncaught exception 'MongoConnectionException' with message 'no more connections in pool' in \/path\/to\/php\/script.php:10\nStack trace:\n#0 \/path\/to\/php\/script.php(10): Mongo->__construct()\n#1 {main}\n  thrown in \/path\/to\/php\/script.php on line 10"}],"mongoregex::__construct":[{"title":"MongoRegex::__construct() example","source":"$luke_search = new MongoRegex(\"\/^l[aeiouy]\/i\");\n$cursor = $collection->find(array(\"username\" => $luke_search));","output":null}],"mongoregex::__tostring":[{"title":"MongoRegex::__toString() example","source":"$r = new MongoRegex( \"\/[a-fA-F0-9]{16}\/g\" );\necho $r->regex . \"\\n\";\necho $r->flags . \"\\n\";\necho \"$r\\n\";","output":"[a-fA-F0-9]{16}\ng\n\/[a-fA-F0-9]{16}\/g"}],"mongoresultexception::getdocument":[{"title":"MongoResultException::getDocument() example","source":"$mc = new MongoClient(\"localhost\");\n$c = $mc->selectCollection(\"test\", \"test\");\n\n$c->insert(array(\n     \"name\" => \"Next promo\",\n     \"inprogress\" => false,\n     \"priority\" => 0,\n     \"tasks\" => array( \"select product\", \"add inventory\", \"do placement\"),\n) );\n\n$c->insert(array(\n     \"name\" => \"Biz report\",\n     \"inprogress\" => false,\n     \"priority\" => 1,\n     \"tasks\" => array( \"run sales report\", \"email report\" )\n) );\n\n$c->insert(array(\n     \"name\" => \"Biz report\",\n     \"inprogress\" => false,\n     \"priority\" => 2,\n     \"tasks\" => array( \"run marketing report\", \"email report\" )\n    ),\n    array(\"w\" => true)\n);\n\ntry {\n    $retval = $c->findAndModify(\n         array(\"inprogress\" => false, \"name\" => \"Biz report\"),\n         array('$set' => array('$set' => array('inprogress' => true, \"started\" => new MongoDate()))),\n         null,\n         array(\n            \"sort\" => array(\"priority\" => -1),\n            \"new\" => true,\n        )\n    );\n} catch(MongoResultException $e) {\n    echo $e->getMessage(), \"\\n\";\n    $res = $e->getDocument();\n    var_dump($res);\n}","output":"$set is not valid for storage.\narray(3) {\n  [\"lastErrorObject\"]=>\n  array(5) {\n    [\"connectionId\"]=>\n    int(6)\n    [\"err\"]=>\n    string(30) \"$set is not valid for storage.\"\n    [\"code\"]=>\n    int(52)\n    [\"n\"]=>\n    int(0)\n    [\"ok\"]=>\n    float(1)\n  }\n  [\"ok\"]=>\n  float(0)\n  [\"errmsg\"]=>\n  string(30) \"$set is not valid for storage.\"\n}"}],"mongowritebatch::add":[{"title":"MongoWriteBatch::add() example","source":"$mc = new MongoClient(\"localhost\");\n$collection = $mc->selectCollection(\"test\", \"test\");\n\n\n$docs = array();\n$docs[] = array(\"my\" => \"demo\");\n$docs[] = array(\"is\" => \"working\");\n$docs[] = array(\"pretty\" => \"well\");\n\n$batch = new MongoInsertBatch($collection);\nforeach($docs as $document) {\n    $batch->add($document);\n}\n$batch->execute(array(\"w\" => 1));","output":null},{"title":"MongoWriteBatch::add() example","source":"$mc = new MongoClient(\"localhost\");\n$collection = $mc->selectCollection(\"test\", \"test\");\n\n\n$item1 = array(\n    \"q\" => array(\"my\" => \"demo\"),\n    \"u\" => array('$set' => array(\"try\" => 1)),\n    \"multi\"  => false, \/* default value *\/\n    \"upsert\" => false, \/* default value *\/\n);\n$item2 = array(\n    \"q\" => array(\"is\" => \"working\"),\n    \"u\" => array('$set' => array(\"try\" => 2)),\n    \"multi\" => true,\n);\n$item3 = array(\n    \"q\" => array(\"created\" => \"new-document\"),\n    \"u\" => array('$set' => array(\"try\" => 3)),\n    \"upsert\" => true,\n);\n\n$batch = new MongoUpdateBatch($collection);\n$batch->add($item1);\n$batch->add($item2);\n$batch->add($item3);\n$batch->execute(array(\"w\" => 1));","output":null},{"title":"MongoWriteBatch::add() example","source":"$mc = new MongoClient(\"localhost\");\n$collection = $mc->selectCollection(\"test\", \"test\");\n\n\n$item1 = array(\n    \"q\" => array(\"my\" => \"demo\"),\n    \"limit\" => 1,\n);\n$item2 = array(\n    \"q\" => array(\"try\" => 3),\n    \"limit\" => 1,\n);\n\n\n$batch = new MongoDeleteBatch($collection);\n$batch->add($item1);\n$batch->add($item2);\n$batch->execute(array(\"w\" => 1));","output":null}],"mongowritebatch::execute":[{"title":"MongoWriteBatch::add() example","source":"$mc = new MongoClient(\"localhost\");\n$collection = $mc->selectCollection(\"test\", \"test\");\n\n\n$docs = array();\n$docs[] = array(\"my\" => \"demo\");\n$docs[] = array(\"is\" => \"working\");\n$docs[] = array(\"pretty\" => \"well\");\n\n$batch = new MongoInsertBatch($collection);\nforeach($docs as $document) {\n    $batch->add($document);\n}\n$retval = $batch->execute(array(\"w\" => 1));\nvar_dump($retval);","output":"array(2) {\n  [\"nInserted\"]=>\n  int(3)\n  [\"ok\"]=>\n  bool(true)\n}"},{"title":"MongoWriteBatch::add() example","source":"$mc = new MongoClient(\"localhost\");\n$collection = $mc->selectCollection(\"test\", \"test\");\n\n\n$item1 = array(\n    \"q\" => array(\"my\" => \"demo\"),\n    \"u\" => array('$set' => array(\"try\" => 1)),\n    \"multi\"  => false, \/* default value *\/\n    \"upsert\" => false, \/* default value *\/\n);\n$item2 = array(\n    \"q\" => array(\"is\" => \"working\"),\n    \"u\" => array('$set' => array(\"try\" => 2)),\n    \"multi\" => true,\n);\n$item3 = array(\n    \"q\" => array(\"created\" => \"new-document\"),\n    \"u\" => array('$set' => array(\"try\" => 3)),\n    \"upsert\" => true,\n);\n\n$batch = new MongoUpdateBatch($collection);\n$batch->add($item1);\n$batch->add($item2);\n$batch->add($item3);\n$retval = $batch->execute(array(\"w\" => 1));\nvar_dump($retval);","output":"array(4) {\n  [\"nMatched\"]=>\n  int(18)\n  [\"nModified\"]=>\n  int(2)\n  [\"nUpserted\"]=>\n  int(0)\n  [\"ok\"]=>\n  bool(true)\n}"},{"title":"MongoWriteBatch::add() example","source":"$mc = new MongoClient(\"localhost\");\n$collection = $mc->selectCollection(\"test\", \"test\");\n\n\n$item1 = array(\n    \"q\" => array(\"my\" => \"demo\"),\n    \"limit\" => 1,\n);\n$item2 = array(\n    \"q\" => array(\"try\" => 3),\n    \"limit\" => 1,\n);\n\n\n$batch = new MongoDeleteBatch($collection);\n$batch->add($item1);\n$batch->add($item2);\n$retval = $batch->execute(array(\"w\" => 1));\nvar_dump($retval);","output":"array(2) {\n  [\"nRemoved\"]=>\n  int(1)\n  [\"ok\"]=>\n  bool(true)\n}"}],"mutex::create":[{"title":"Mutex Creation and Destruction","source":"\/** You cannot use the \"new\" keyword, a Mutex is not a PHP object **\/\n$mutex = Mutex::create();\n\/** You have the physical address of the Mutex **\/\nvar_dump($mutex);\n\/** Always destroy mutex you have created **\/\nMutex::destroy($mutex);","output":"int(40096976)"}],"mutex::destroy":[{"title":"Mutex Creation and Destruction","source":"\/** You cannot use the \"new\" keyword, a Mutex is not a PHP object **\/\n$mutex = Mutex::create();\n\/** You have the physical address of the Mutex **\/\nvar_dump($mutex);\n\/** Always destroy mutex you have created **\/\nMutex::destroy($mutex);","output":"int(40096976)"}],"mutex::lock":[{"title":"Mutex Locking and Unlocking","source":"\/** You cannot use the \"new\" keyword, a Mutex is not a PHP object **\/\n$mutex = Mutex::create();\n\/** You can now lock the mutex in any context **\/\nvar_dump(Mutex::lock($mutex));\n\/** It is invalid to attempt to destroy a locked Mutex **\/\nvar_dump(Mutex::unlock($mutex));\n\/** Always destroy mutex you have created **\/\nMutex::destroy($mutex);","output":"bool(true)\nbool(true)"}],"mutex::trylock":[{"title":"Mutex Locking and Unlocking","source":"\/** You cannot use the \"new\" keyword, a Mutex is not a PHP object **\/\n$mutex = Mutex::create();\n\/** You can now try to lock the mutex in any context **\/\nvar_dump(Mutex::trylock($mutex));\n\/** It is invalid to attempt to destroy a locked Mutex **\/\nvar_dump(Mutex::unlock($mutex));\n\/** Always destroy mutex you have created **\/\nMutex::destroy($mutex);","output":"bool(true)\nbool(true)"}],"mutex::unlock":[{"title":"Mutex Locking and Unlocking","source":"\/** You cannot use the \"new\" keyword, a Mutex is not a PHP object **\/\n$mutex = Mutex::create();\n\/** You can now lock the mutex in any context **\/\nvar_dump(Mutex::lock($mutex));\n\/** It is invalid to attempt to destroy a locked Mutex **\/\nvar_dump(Mutex::unlock($mutex));\n\/** Always destroy mutex you have created **\/\nMutex::destroy($mutex);","output":"bool(true)\nbool(true)"}],"mysqli_report":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* activate reporting *\/\n$driver = new mysqli_driver();\n$driver->report_mode = MYSQLI_REPORT_ALL;\n\ntry {\n\n    \/* this query should report an error *\/\n    $result = $mysqli->query(\"SELECT Name FROM Nonexistingtable WHERE population > 50000\");\n\n    \/* this query should report a bad index *\/\n    $result = $mysqli->query(\"SELECT Name FROM City WHERE population > 50000\");\n\n    $result->close();\n\n    $mysqli->close();\n\n} catch (mysqli_sql_exception $e) {\n\n    echo $e->__toString();\n}","output":null},{"title":"Procedural style","source":"\/* activate reporting *\/\nmysqli_report(MYSQLI_REPORT_ALL);\n\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* this query should report an error *\/\n$result = mysqli_query(\"SELECT Name FROM Nonexistingtable WHERE population > 50000\");\n\n\/* this query should report a bad index *\/\n$result = mysqli_query(\"SELECT Name FROM City WHERE population > 50000\");\n\nmysqli_free_result($result);\n\nmysqli_close($link);","output":null}],"mysqli_field_tell":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* Get field information for all columns *\/\n    while ($finfo = $result->fetch_field()) {\n\n        \/* get fieldpointer offset *\/\n        $currentfield = $result->current_field;\n\n        printf(\"Column %d:\\n\", $currentfield);\n        printf(\"Name:     %s\\n\", $finfo->name);\n        printf(\"Table:    %s\\n\", $finfo->table);\n        printf(\"max. Len: %d\\n\", $finfo->max_length);\n        printf(\"Flags:    %d\\n\", $finfo->flags);\n        printf(\"Type:     %d\\n\\n\", $finfo->type);\n    }\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* Get field information for all fields *\/\n    while ($finfo = mysqli_fetch_field($result)) {\n\n        \/* get fieldpointer offset *\/\n        $currentfield = mysqli_field_tell($result);\n\n        printf(\"Column %d:\\n\", $currentfield);\n        printf(\"Name:     %s\\n\", $finfo->name);\n        printf(\"Table:    %s\\n\", $finfo->table);\n        printf(\"max. Len: %d\\n\", $finfo->max_length);\n        printf(\"Flags:    %d\\n\", $finfo->flags);\n        printf(\"Type:     %d\\n\\n\", $finfo->type);\n    }\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Column 1:\nName:     Name\nTable:    Country\nmax. Len: 11\nFlags:    1\nType:     254\n\nColumn 2:\nName:     SurfaceArea\nTable:    Country\nmax. Len: 10\nFlags:    32769\nType:     4"}],"mysqli_result::data_seek":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name\";\nif ($result = $mysqli->query($query)) {\n\n    \/* seek to row no. 400 *\/\n    $result->data_seek(399);\n\n    \/* fetch row *\/\n    $row = $result->fetch_row();\n\n    printf (\"City: %s  Countrycode: %s\\n\", $row[0], $row[1]);\n\n    \/* free result set*\/\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (!$link) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* seek to row no. 400 *\/\n    mysqli_data_seek($result, 399);\n\n    \/* fetch row *\/\n    $row = mysqli_fetch_row($result);\n\n    printf (\"City: %s  Countrycode: %s\\n\", $row[0], $row[1]);\n\n    \/* free result set*\/\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"City: Benin City  Countrycode: NGA"}],"mysqli_result::fetch_array":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3\";\n$result = $mysqli->query($query);\n\n\/* numeric array *\/\n$row = $result->fetch_array(MYSQLI_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n\n\/* associative array *\/\n$row = $result->fetch_array(MYSQLI_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"Name\"], $row[\"CountryCode\"]);\n\n\/* associative and numeric array *\/\n$row = $result->fetch_array(MYSQLI_BOTH);\nprintf (\"%s (%s)\\n\", $row[0], $row[\"CountryCode\"]);\n\n\/* free result set *\/\n$result->free();\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3\";\n$result = mysqli_query($link, $query);\n\n\/* numeric array *\/\n$row = mysqli_fetch_array($result, MYSQLI_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n\n\/* associative array *\/\n$row = mysqli_fetch_array($result, MYSQLI_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"Name\"], $row[\"CountryCode\"]);\n\n\/* associative and numeric array *\/\n$row = mysqli_fetch_array($result, MYSQLI_BOTH);\nprintf (\"%s (%s)\\n\", $row[0], $row[\"CountryCode\"]);\n\n\/* free result set *\/\nmysqli_free_result($result);\n\n\/* close connection *\/\nmysqli_close($link);","output":"Kabul (AFG)\nQandahar (AFG)\nHerat (AFG)"}],"mysqli_result::fetch_assoc":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* fetch associative array *\/\n    while ($row = $result->fetch_assoc()) {\n        printf (\"%s (%s)\\n\", $row[\"Name\"], $row[\"CountryCode\"]);\n    }\n\n    \/* free result set *\/\n    $result->free();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* fetch associative array *\/\n    while ($row = mysqli_fetch_assoc($result)) {\n        printf (\"%s (%s)\\n\", $row[\"Name\"], $row[\"CountryCode\"]);\n    }\n\n    \/* free result set *\/\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Pueblo (USA)\nArvada (USA)\nCape Coral (USA)\nGreen Bay (USA)\nSanta Clara (USA)"},{"title":"A mysqli_result example comparing iterator usage","source":"$c = mysqli_connect('127.0.0.1','user', 'pass');\n\n\/\/ Using iterators (support was added with PHP 5.4)\nforeach ( $c->query('SELECT user,host FROM mysql.user') as $row ) {\n    printf(\"'%s'@'%s'\\n\", $row['user'], $row['host']);\n}\n\necho \"\\n==================\\n\";\n\n\/\/ Not using iterators\n$result = $c->query('SELECT user,host FROM mysql.user');\nwhile ($row = $result->fetch_assoc()) {\n    printf(\"'%s'@'%s'\\n\", $row['user'], $row['host']);\n}","output":"'root'@'192.168.1.1'\n'root'@'127.0.0.1'\n'dude'@'localhost'\n'lebowski'@'localhost'\n\n==================\n\n'root'@'192.168.1.1'\n'root'@'127.0.0.1'\n'dude'@'localhost'\n'lebowski'@'localhost'"}],"mysqli_result::fetch_field_direct":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* Get field information for column 'SurfaceArea' *\/\n    $finfo = $result->fetch_field_direct(1);\n\n    printf(\"Name:     %s\\n\", $finfo->name);\n    printf(\"Table:    %s\\n\", $finfo->table);\n    printf(\"max. Len: %d\\n\", $finfo->max_length);\n    printf(\"Flags:    %d\\n\", $finfo->flags);\n    printf(\"Type:     %d\\n\", $finfo->type);\n\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* Get field information for column 'SurfaceArea' *\/\n    $finfo = mysqli_fetch_field_direct($result, 1);\n\n    printf(\"Name:     %s\\n\", $finfo->name);\n    printf(\"Table:    %s\\n\", $finfo->table);\n    printf(\"max. Len: %d\\n\", $finfo->max_length);\n    printf(\"Flags:    %d\\n\", $finfo->flags);\n    printf(\"Type:     %d\\n\", $finfo->type);\n\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Name:     SurfaceArea\nTable:    Country\nmax. Len: 10\nFlags:    32769\nType:     4"}],"mysqli_result::fetch_field":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* Get field information for all columns *\/\n    while ($finfo = $result->fetch_field()) {\n\n        printf(\"Name:     %s\\n\", $finfo->name);\n        printf(\"Table:    %s\\n\", $finfo->table);\n        printf(\"max. Len: %d\\n\", $finfo->max_length);\n        printf(\"Flags:    %d\\n\", $finfo->flags);\n        printf(\"Type:     %d\\n\\n\", $finfo->type);\n    }\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* Get field information for all fields *\/\n    while ($finfo = mysqli_fetch_field($result)) {\n\n        printf(\"Name:     %s\\n\", $finfo->name);\n        printf(\"Table:    %s\\n\", $finfo->table);\n        printf(\"max. Len: %d\\n\", $finfo->max_length);\n        printf(\"Flags:    %d\\n\", $finfo->flags);\n        printf(\"Type:     %d\\n\\n\", $finfo->type);\n    }\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Name:     Name\nTable:    Country\nmax. Len: 11\nFlags:    1\nType:     254\n\nName:     SurfaceArea\nTable:    Country\nmax. Len: 10\nFlags:    32769\nType:     4"}],"mysqli_result::fetch_fields":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"127.0.0.1\", \"root\", \"foofoo\", \"sakila\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\nforeach (array('latin1', 'utf8') as $charset) {\n\n    \/\/ Set character set, to show its impact on some values (e.g., length in bytes)\n    $mysqli->set_charset($charset);\n\n    $query = \"SELECT actor_id, last_name from actor ORDER BY actor_id\";\n\n    echo \"======================\\n\";\n    echo \"Character Set: $charset\\n\";\n    echo \"======================\\n\";\n    \n    if ($result = $mysqli->query($query)) {\n\n        \/* Get field information for all columns *\/\n        $finfo = $result->fetch_fields();\n\n        foreach ($finfo as $val) {\n            printf(\"Name:      %s\\n\",   $val->name);\n            printf(\"Table:     %s\\n\",   $val->table);\n            printf(\"Max. Len:  %d\\n\",   $val->max_length);\n            printf(\"Length:    %d\\n\",   $val->length);\n            printf(\"charsetnr: %d\\n\",   $val->charsetnr);\n            printf(\"Flags:     %d\\n\",   $val->flags);\n            printf(\"Type:      %d\\n\\n\", $val->type);\n        }\n        $result->free();\n    }\n}\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"127.0.0.1\", \"my_user\", \"my_password\", \"sakila\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nforeach (array('latin1', 'utf8') as $charset) {\n\n    \/\/ Set character set, to show its impact on some values (e.g., length in bytes)\n    mysqli_set_charset($link, $charset);\n\n    $query = \"SELECT actor_id, last_name from actor ORDER BY actor_id\";\n\n    echo \"======================\\n\";\n    echo \"Character Set: $charset\\n\";\n    echo \"======================\\n\";\n\n    if ($result = mysqli_query($link, $query)) {\n\n        \/* Get field information for all columns *\/\n        $finfo = mysqli_fetch_fields($result);\n\n        foreach ($finfo as $val) {\n            printf(\"Name:      %s\\n\",   $val->name);\n            printf(\"Table:     %s\\n\",   $val->table);\n            printf(\"Max. Len:  %d\\n\",   $val->max_length);\n            printf(\"Length:    %d\\n\",   $val->length);\n            printf(\"charsetnr: %d\\n\",   $val->charsetnr);\n            printf(\"Flags:     %d\\n\",   $val->flags);\n            printf(\"Type:      %d\\n\\n\", $val->type);\n        }\n        mysqli_free_result($result);\n    }\n}\n\nmysqli_close($link);","output":"======================\nCharacter Set: latin1\n======================\nName:      actor_id\nTable:     actor\nMax. Len:  3\nLength:    5\ncharsetnr: 63\nFlags:     49699\nType:      2\n\nName:      last_name\nTable:     actor\nMax. Len:  12\nLength:    45\ncharsetnr: 8\nFlags:     20489\nType:      253\n\n======================\nCharacter Set: utf8\n======================\nName:      actor_id\nTable:     actor\nMax. Len:  3\nLength:    5\ncharsetnr: 63\nFlags:     49699\nType:      2\n\nName:      last_name\nTable:     actor\nMax. Len:  12\nLength:    135\ncharsetnr: 33\nFlags:     20489"}],"mysqli_result::fetch_object":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n \n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* fetch object array *\/\n    while ($obj = $result->fetch_object()) {\n        printf (\"%s (%s)\\n\", $obj->Name, $obj->CountryCode);\n    }\n\n    \/* free result set *\/\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* fetch associative array *\/\n    while ($obj = mysqli_fetch_object($result)) {\n        printf (\"%s (%s)\\n\", $obj->Name, $obj->CountryCode);\n    }\n\n    \/* free result set *\/\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Pueblo (USA)\nArvada (USA)\nCape Coral (USA)\nGreen Bay (USA)\nSanta Clara (USA)"}],"mysqli_result::fetch_row":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* fetch object array *\/\n    while ($row = $result->fetch_row()) {\n        printf (\"%s (%s)\\n\", $row[0], $row[1]);\n    }\n\n    \/* free result set *\/\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* fetch associative array *\/\n    while ($row = mysqli_fetch_row($result)) {\n        printf (\"%s (%s)\\n\", $row[0], $row[1]);\n    }\n\n    \/* free result set *\/\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Pueblo (USA)\nArvada (USA)\nCape Coral (USA)\nGreen Bay (USA)\nSanta Clara (USA)"}],"mysqli_num_fields":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif ($result = $mysqli->query(\"SELECT * FROM City ORDER BY ID LIMIT 1\")) {\n\n    \/* determine number of fields in result set *\/\n    $field_cnt = $result->field_count;\n\n    printf(\"Result set has %d fields.\\n\", $field_cnt);\n\n    \/* close result set *\/\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif ($result = mysqli_query($link, \"SELECT * FROM City ORDER BY ID LIMIT 1\")) {\n\n    \/* determine number of fields in result set *\/\n    $field_cnt = mysqli_num_fields($result);\n\n    printf(\"Result set has %d fields.\\n\", $field_cnt);\n\n    \/* close result set *\/\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Result set has 5 fields."}],"mysqli_result::field_seek":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\";\n\nif ($result = $mysqli->query($query)) {\n\n    \/* Get field information for 2nd column *\/\n    $result->field_seek(1);\n    $finfo = $result->fetch_field();\n\n    printf(\"Name:     %s\\n\", $finfo->name);\n    printf(\"Table:    %s\\n\", $finfo->table);\n    printf(\"max. Len: %d\\n\", $finfo->max_length);\n    printf(\"Flags:    %d\\n\", $finfo->flags);\n    printf(\"Type:     %d\\n\\n\", $finfo->type);\n\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    \/* Get field information for 2nd column *\/\n    mysqli_field_seek($result, 1);\n    $finfo = mysqli_fetch_field($result);\n\n    printf(\"Name:     %s\\n\", $finfo->name);\n    printf(\"Table:    %s\\n\", $finfo->table);\n    printf(\"max. Len: %d\\n\", $finfo->max_length);\n    printf(\"Flags:    %d\\n\", $finfo->flags);\n    printf(\"Type:     %d\\n\\n\", $finfo->type);\n\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Name:     SurfaceArea\nTable:    Country\nmax. Len: 10\nFlags:    32769\nType:     4"}],"mysqli_fetch_lengths":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT * from Country ORDER BY Code LIMIT 1\";\n\nif ($result = $mysqli->query($query)) {\n\n    $row = $result->fetch_row();\n\n    \/* display column lengths *\/\n    foreach ($result->lengths as $i => $val) {\n        printf(\"Field %2d has Length %2d\\n\", $i+1, $val);\n    }\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT * from Country ORDER BY Code LIMIT 1\";\n\nif ($result = mysqli_query($link, $query)) {\n\n    $row = mysqli_fetch_row($result);\n\n    \/* display column lengths *\/\n    foreach (mysqli_fetch_lengths($result) as $i => $val) {\n        printf(\"Field %2d has Length %2d\\n\", $i+1, $val);\n    }\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Field  1 has Length  3\nField  2 has Length  5\nField  3 has Length 13\nField  4 has Length  9\nField  5 has Length  6\nField  6 has Length  1\nField  7 has Length  6\nField  8 has Length  4\nField  9 has Length  6\nField 10 has Length  6\nField 11 has Length  5\nField 12 has Length 44\nField 13 has Length  7\nField 14 has Length  3\nField 15 has Length  2"}],"mysqli_num_rows":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif ($result = $mysqli->query(\"SELECT Code, Name FROM Country ORDER BY Name\")) {\n\n    \/* determine number of rows result set *\/\n    $row_cnt = $result->num_rows;\n\n    printf(\"Result set has %d rows.\\n\", $row_cnt);\n\n    \/* close result set *\/\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif ($result = mysqli_query($link, \"SELECT Code, Name FROM Country ORDER BY Name\")) {\n\n    \/* determine number of rows result set *\/\n    $row_cnt = mysqli_num_rows($result);\n\n    printf(\"Result set has %d rows.\\n\", $row_cnt);\n\n    \/* close result set *\/\n    mysqli_free_result($result);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Result set has 239 rows."}],"mysqli_stmt_affected_rows":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* create temp table *\/\n$mysqli->query(\"CREATE TEMPORARY TABLE myCountry LIKE Country\");\n\n$query = \"INSERT INTO myCountry SELECT * FROM Country WHERE Code LIKE ?\";\n\n\/* prepare statement *\/\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* Bind variable for placeholder *\/\n    $code = 'A%';\n    $stmt->bind_param(\"s\", $code);\n\n    \/* execute statement *\/\n    $stmt->execute();\n\n    printf(\"rows inserted: %d\\n\", $stmt->affected_rows);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* create temp table *\/\nmysqli_query($link, \"CREATE TEMPORARY TABLE myCountry LIKE Country\");\n\n$query = \"INSERT INTO myCountry SELECT * FROM Country WHERE Code LIKE ?\";\n\n\/* prepare statement *\/\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* Bind variable for placeholder *\/\n    $code = 'A%';\n    mysqli_stmt_bind_param($stmt, \"s\", $code);\n\n    \/* execute statement *\/\n    mysqli_stmt_execute($stmt);\n\n    printf(\"rows inserted: %d\\n\", mysqli_stmt_affected_rows($stmt));\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"rows inserted: 17"}],"mysqli_stmt::bind_param":[{"title":"Object oriented style","source":"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$stmt = $mysqli->prepare(\"INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)\");\n$stmt->bind_param('sssd', $code, $language, $official, $percent);\n\n$code = 'DEU';\n$language = 'Bavarian';\n$official = \"F\";\n$percent = 11.2;\n\n\/* execute prepared statement *\/\n$stmt->execute();\n\nprintf(\"%d Row inserted.\\n\", $stmt->affected_rows);\n\n\/* close statement and connection *\/\n$stmt->close();\n\n\/* Clean up table CountryLanguage *\/\n$mysqli->query(\"DELETE FROM CountryLanguage WHERE Language='Bavarian'\");\nprintf(\"%d Row deleted.\\n\", $mysqli->affected_rows);\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect('localhost', 'my_user', 'my_password', 'world');\n\n\/* check connection *\/\nif (!$link) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$stmt = mysqli_prepare($link, \"INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)\");\nmysqli_stmt_bind_param($stmt, 'sssd', $code, $language, $official, $percent);\n\n$code = 'DEU';\n$language = 'Bavarian';\n$official = \"F\";\n$percent = 11.2;\n\n\/* execute prepared statement *\/\nmysqli_stmt_execute($stmt);\n\nprintf(\"%d Row inserted.\\n\", mysqli_stmt_affected_rows($stmt));\n\n\/* close statement and connection *\/\nmysqli_stmt_close($stmt);\n\n\/* Clean up table CountryLanguage *\/\nmysqli_query($link, \"DELETE FROM CountryLanguage WHERE Language='Bavarian'\");\nprintf(\"%d Row deleted.\\n\", mysqli_affected_rows($link));\n\n\/* close connection *\/\nmysqli_close($link);","output":"1 Row inserted.\n1 Row deleted."}],"mysqli_stmt::bind_result":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* prepare statement *\/\nif ($stmt = $mysqli->prepare(\"SELECT Code, Name FROM Country ORDER BY Name LIMIT 5\")) {\n    $stmt->execute();\n\n    \/* bind variables to prepared statement *\/\n    $stmt->bind_result($col1, $col2);\n\n    \/* fetch values *\/\n    while ($stmt->fetch()) {\n        printf(\"%s %s\\n\", $col1, $col2);\n    }\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (!$link) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* prepare statement *\/\nif ($stmt = mysqli_prepare($link, \"SELECT Code, Name FROM Country ORDER BY Name LIMIT 5\")) {\n    mysqli_stmt_execute($stmt);\n\n    \/* bind variables to prepared statement *\/\n    mysqli_stmt_bind_result($stmt, $col1, $col2);\n\n    \/* fetch values *\/\n    while (mysqli_stmt_fetch($stmt)) {\n        printf(\"%s %s\\n\", $col1, $col2);\n    }\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"AFG Afghanistan\nALB Albania\nDZA Algeria\nASM American Samoa\nAND Andorra"}],"mysqli_stmt::data_seek":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    \/* bind result variables *\/\n    $stmt->bind_result($name, $code);\n\n    \/* store result *\/\n    $stmt->store_result();\n\n    \/* seek to row no. 400 *\/\n    $stmt->data_seek(399);\n\n    \/* fetch values *\/\n    $stmt->fetch();\n\n    printf (\"City: %s  Countrycode: %s\\n\", $name, $code);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    \/* bind result variables *\/\n    mysqli_stmt_bind_result($stmt, $name, $code);\n\n    \/* store result *\/\n    mysqli_stmt_store_result($stmt);\n\n    \/* seek to row no. 400 *\/\n    mysqli_stmt_data_seek($stmt, 399);\n\n    \/* fetch values *\/\n    mysqli_stmt_fetch($stmt);\n\n    printf (\"City: %s  Countrycode: %s\\n\", $name, $code);\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"City: Benin City  Countrycode: NGA"}],"mysqli_stmt_errno":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCountry LIKE Country\");\n$mysqli->query(\"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* drop table *\/\n    $mysqli->query(\"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    printf(\"Error: %d.\\n\", $stmt->errno);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nmysqli_query($link, \"CREATE TABLE myCountry LIKE Country\");\nmysqli_query($link, \"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* drop table *\/\n    mysqli_query($link, \"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    printf(\"Error: %d.\\n\", mysqli_stmt_errno($stmt));\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Error: 1146."}],"mysqli_stmt_error_list":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCountry LIKE Country\");\n$mysqli->query(\"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* drop table *\/\n    $mysqli->query(\"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    $stmt->execute();\n    \n    echo \"Error:\\n\";\n    print_r($stmt->error_list);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nmysqli_query($link, \"CREATE TABLE myCountry LIKE Country\");\nmysqli_query($link, \"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* drop table *\/\n    mysqli_query($link, \"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n    \n    echo \"Error:\\n\";\n    print_r(mysql_stmt_error_list($stmt));\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Array\n(\n    [0] => Array\n        (\n            [errno] => 1146\n            [sqlstate] => 42S02\n            [error] => Table 'world.myCountry' doesn't exist\n        )\n\n)"}],"mysqli_stmt_error":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCountry LIKE Country\");\n$mysqli->query(\"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* drop table *\/\n    $mysqli->query(\"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    printf(\"Error: %s.\\n\", $stmt->error);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nmysqli_query($link, \"CREATE TABLE myCountry LIKE Country\");\nmysqli_query($link, \"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* drop table *\/\n    mysqli_query($link, \"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    printf(\"Error: %s.\\n\", mysqli_stmt_error($stmt));\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Error: Table 'world.myCountry' doesn't exist."}],"mysqli_stmt::execute":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCity LIKE City\");\n\n\/* Prepare an insert statement *\/\n$query = \"INSERT INTO myCity (Name, CountryCode, District) VALUES (?,?,?)\";\n$stmt = $mysqli->prepare($query);\n\n$stmt->bind_param(\"sss\", $val1, $val2, $val3);\n\n$val1 = 'Stuttgart';\n$val2 = 'DEU';\n$val3 = 'Baden-Wuerttemberg';\n\n\/* Execute the statement *\/\n$stmt->execute();\n\n$val1 = 'Bordeaux';\n$val2 = 'FRA';\n$val3 = 'Aquitaine';\n\n\/* Execute the statement *\/\n$stmt->execute();\n\n\/* close statement *\/\n$stmt->close();\n\n\/* retrieve all rows from myCity *\/\n$query = \"SELECT Name, CountryCode, District FROM myCity\";\nif ($result = $mysqli->query($query)) {\n    while ($row = $result->fetch_row()) {\n        printf(\"%s (%s,%s)\\n\", $row[0], $row[1], $row[2]);\n    }\n    \/* free result set *\/\n    $result->close();\n}\n\n\/* remove table *\/\n$mysqli->query(\"DROP TABLE myCity\");\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nmysqli_query($link, \"CREATE TABLE myCity LIKE City\");\n\n\/* Prepare an insert statement *\/\n$query = \"INSERT INTO myCity (Name, CountryCode, District) VALUES (?,?,?)\";\n$stmt = mysqli_prepare($link, $query);\n\nmysqli_stmt_bind_param($stmt, \"sss\", $val1, $val2, $val3);\n\n$val1 = 'Stuttgart';\n$val2 = 'DEU';\n$val3 = 'Baden-Wuerttemberg';\n\n\/* Execute the statement *\/\nmysqli_stmt_execute($stmt);\n\n$val1 = 'Bordeaux';\n$val2 = 'FRA';\n$val3 = 'Aquitaine';\n\n\/* Execute the statement *\/\nmysqli_stmt_execute($stmt);\n\n\/* close statement *\/\nmysqli_stmt_close($stmt);\n\n\/* retrieve all rows from myCity *\/\n$query = \"SELECT Name, CountryCode, District FROM myCity\";\nif ($result = mysqli_query($link, $query)) {\n    while ($row = mysqli_fetch_row($result)) {\n        printf(\"%s (%s,%s)\\n\", $row[0], $row[1], $row[2]);\n    }\n    \/* free result set *\/\n    mysqli_free_result($result);\n}\n\n\/* remove table *\/\nmysqli_query($link, \"DROP TABLE myCity\");\n\n\/* close connection *\/\nmysqli_close($link);","output":"Stuttgart (DEU,Baden-Wuerttemberg)\nBordeaux (FRA,Aquitaine)"}],"mysqli_stmt::fetch":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5\";\n\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* execute statement *\/\n    $stmt->execute();\n\n    \/* bind result variables *\/\n    $stmt->bind_result($name, $code);\n\n    \/* fetch values *\/\n    while ($stmt->fetch()) {\n        printf (\"%s (%s)\\n\", $name, $code);\n    }\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5\";\n\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* execute statement *\/\n    mysqli_stmt_execute($stmt);\n\n    \/* bind result variables *\/\n    mysqli_stmt_bind_result($stmt, $name, $code);\n\n    \/* fetch values *\/\n    while (mysqli_stmt_fetch($stmt)) {\n        printf (\"%s (%s)\\n\", $name, $code);\n    }\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Rockford (USA)\nTallahassee (USA)\nSalinas (USA)\nSanta Clarita (USA)\nSpringfield (USA)"}],"mysqli_stmt_num_rows":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    \/* store result *\/\n    $stmt->store_result();\n\n    printf(\"Number of rows: %d.\\n\", $stmt->num_rows);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    \/* store result *\/\n    mysqli_stmt_store_result($stmt);\n\n    printf(\"Number of rows: %d.\\n\", mysqli_stmt_num_rows($stmt));\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Number of rows: 20."}],"mysqli_stmt_param_count":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif ($stmt = $mysqli->prepare(\"SELECT Name FROM Country WHERE Name=? OR Code=?\")) {\n\n    $marker = $stmt->param_count;\n    printf(\"Statement has %d markers.\\n\", $marker);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif ($stmt = mysqli_prepare($link, \"SELECT Name FROM Country WHERE Name=? OR Code=?\")) {\n\n    $marker = mysqli_stmt_param_count($stmt);\n    printf(\"Statement has %d markers.\\n\", $marker);\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Statement has 2 markers."}],"mysqli_stmt::prepare":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$city = \"Amersfoort\";\n\n\/* create a prepared statement *\/\n$stmt =  $mysqli->stmt_init();\nif ($stmt->prepare(\"SELECT District FROM City WHERE Name=?\")) {\n\n    \/* bind parameters for markers *\/\n    $stmt->bind_param(\"s\", $city);\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    \/* bind result variables *\/\n    $stmt->bind_result($district);\n\n    \/* fetch value *\/\n    $stmt->fetch();\n\n    printf(\"%s is in district %s\\n\", $city, $district);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$city = \"Amersfoort\";\n\n\/* create a prepared statement *\/\n$stmt = mysqli_stmt_init($link);\nif (mysqli_stmt_prepare($stmt, 'SELECT District FROM City WHERE Name=?')) {\n\n    \/* bind parameters for markers *\/\n    mysqli_stmt_bind_param($stmt, \"s\", $city);\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    \/* bind result variables *\/\n    mysqli_stmt_bind_result($stmt, $district);\n\n    \/* fetch value *\/\n    mysqli_stmt_fetch($stmt);\n\n    printf(\"%s is in district %s\\n\", $city, $district);\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Amersfoort is in district Utrecht"}],"mysqli_stmt::result_metadata":[{"title":"Object oriented style","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"test\");\n\n$mysqli->query(\"DROP TABLE IF EXISTS friends\");\n$mysqli->query(\"CREATE TABLE friends (id int, name varchar(20))\");\n\n$mysqli->query(\"INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')\");\n\n$stmt = $mysqli->prepare(\"SELECT id, name FROM friends\");\n$stmt->execute();\n\n\/* get resultset for metadata *\/\n$result = $stmt->result_metadata();\n\n\/* retrieve field information from metadata result set *\/\n$field = $result->fetch_field();\n\nprintf(\"Fieldname: %s\\n\", $field->name);\n\n\/* close resultset *\/\n$result->close();\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"test\");\n\nmysqli_query($link, \"DROP TABLE IF EXISTS friends\");\nmysqli_query($link, \"CREATE TABLE friends (id int, name varchar(20))\");\n\nmysqli_query($link, \"INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')\");\n\n$stmt = mysqli_prepare($link, \"SELECT id, name FROM friends\");\nmysqli_stmt_execute($stmt);\n\n\/* get resultset for metadata *\/\n$result = mysqli_stmt_result_metadata($stmt);\n\n\/* retrieve field information from metadata result set *\/\n$field = mysqli_fetch_field($result);\n\nprintf(\"Fieldname: %s\\n\", $field->name);\n\n\/* close resultset *\/\nmysqli_free_result($result);\n\n\/* close connection *\/\nmysqli_close($link);","output":null}],"mysqli_stmt::send_long_data":[{"title":"Object oriented style","source":"$stmt = $mysqli->prepare(\"INSERT INTO messages (message) VALUES (?)\");\n$null = NULL;\n$stmt->bind_param(\"b\", $null);\n$fp = fopen(\"messages.txt\", \"r\");\nwhile (!feof($fp)) {\n    $stmt->send_long_data(0, fread($fp, 8192));\n}\nfclose($fp);\n$stmt->execute();","output":null}],"mysqli_stmt_sqlstate":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCountry LIKE Country\");\n$mysqli->query(\"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* drop table *\/\n    $mysqli->query(\"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    printf(\"Error: %s.\\n\", $stmt->sqlstate);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nmysqli_query($link, \"CREATE TABLE myCountry LIKE Country\");\nmysqli_query($link, \"INSERT INTO myCountry SELECT * FROM Country\");\n\n\n$query = \"SELECT Name, Code FROM myCountry ORDER BY Name\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* drop table *\/\n    mysqli_query($link, \"DROP TABLE myCountry\");\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    printf(\"Error: %s.\\n\", mysqli_stmt_sqlstate($stmt));\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Error: 42S02."}],"mysqli_stmt::store_result":[{"title":"Object oriented style","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\";\nif ($stmt = $mysqli->prepare($query)) {\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    \/* store result *\/\n    $stmt->store_result();\n\n    printf(\"Number of rows: %d.\\n\", $stmt->num_rows);\n\n    \/* free result *\/\n    $stmt->free_result();\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null},{"title":"Procedural style","source":"\/* Open a connection *\/\n$link = mysqli_connect(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query = \"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20\";\nif ($stmt = mysqli_prepare($link, $query)) {\n\n    \/* execute query *\/\n    mysqli_stmt_execute($stmt);\n\n    \/* store result *\/\n    mysqli_stmt_store_result($stmt);\n\n    printf(\"Number of rows: %d.\\n\", mysqli_stmt_num_rows($stmt));\n\n    \/* free result *\/\n    mysqli_stmt_free_result($stmt);\n\n    \/* close statement *\/\n    mysqli_stmt_close($stmt);\n}\n\n\/* close connection *\/\nmysqli_close($link);","output":"Number of rows: 20."}],"mysqli_affected_rows":[{"title":"$mysqli->affected_rows example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* Insert rows *\/\n$mysqli->query(\"CREATE TABLE Language SELECT * from CountryLanguage\");\nprintf(\"Affected rows (INSERT): %d\\n\", $mysqli->affected_rows);\n\n$mysqli->query(\"ALTER TABLE Language ADD Status int default 0\");\n\n\/* update rows *\/\n$mysqli->query(\"UPDATE Language SET Status=1 WHERE Percentage > 50\");\nprintf(\"Affected rows (UPDATE): %d\\n\", $mysqli->affected_rows);\n\n\/* delete rows *\/\n$mysqli->query(\"DELETE FROM Language WHERE Percentage < 50\");\nprintf(\"Affected rows (DELETE): %d\\n\", $mysqli->affected_rows);\n\n\/* select all rows *\/\n$result = $mysqli->query(\"SELECT CountryCode FROM Language\");\nprintf(\"Affected rows (SELECT): %d\\n\", $mysqli->affected_rows);\n\n$result->close();\n\n\/* Delete table Language *\/\n$mysqli->query(\"DROP TABLE Language\");\n\n\/* close connection *\/\n$mysqli->close();","output":"Affected rows (INSERT): 984\nAffected rows (UPDATE): 168\nAffected rows (DELETE): 815\nAffected rows (SELECT): 169"}],"mysqli::autocommit":[{"title":"mysqli::autocommit() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* turn autocommit on *\/\n$mysqli->autocommit(TRUE);\n\nif ($result = $mysqli->query(\"SELECT @@autocommit\")) {\n    $row = $result->fetch_row();\n    printf(\"Autocommit is %s\\n\", $row[0]);\n    $result->free();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Autocommit is 1"}],"mysqli::begin_transaction":[{"title":"$mysqli->begin_transaction() example","source":"$mysqli = new mysqli(\"127.0.0.1\", \"my_user\", \"my_password\", \"sakila\");\n\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\n$mysqli->begin_transaction(MYSQLI_TRANS_START_READ_ONLY);\n\n$mysqli->query(\"SELECT first_name, last_name FROM actor\");\n$mysqli->commit();\n\n$mysqli->close();","output":null}],"mysqli::change_user":[{"title":"mysqli::change_user() example","source":"\/* connect database test *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"test\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* Set Variable a *\/\n$mysqli->query(\"SET @a:=1\");\n\n\/* reset all and select a new database *\/\n$mysqli->change_user(\"my_user\", \"my_password\", \"world\");\n\nif ($result = $mysqli->query(\"SELECT DATABASE()\")) {\n    $row = $result->fetch_row();\n    printf(\"Default database: %s\\n\", $row[0]);\n    $result->close();\n}\n\nif ($result = $mysqli->query(\"SELECT @a\")) {\n    $row = $result->fetch_row();\n    if ($row[0] === NULL) {\n        printf(\"Value of variable a is NULL\\n\");\n    }\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Default database: world\nValue of variable a is NULL"}],"mysqli::character_set_name":[{"title":"mysqli::character_set_name() example","source":"\/* Open a connection *\/\n$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* Print current character set *\/\n$charset = $mysqli->character_set_name();\nprintf (\"Current character set is %s\\n\", $charset);\n\n$mysqli->close();","output":"Current character set is latin1_swedish_ci"}],"mysqli_get_client_version":[{"title":"mysqli_get_client_version","source":"\/* We don't need a connection to determine\n   the version of mysql client library *\/\n\nprintf(\"Client library version: %d\\n\", mysqli_get_client_version());","output":null},{"title":"mysqli_get_client_version","source":"\/* We don't need a connection to determine\n   the version of mysql client library *\/\n\nprintf(\"Client library version: %d\\n\", mysqli_get_client_version());","output":null}],"mysqli::commit":[{"title":"mysqli::commit() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE Language LIKE CountryLanguage\");\n\n\/* set autocommit to off *\/\n$mysqli->autocommit(FALSE);\n\n\/* Insert some values *\/\n$mysqli->query(\"INSERT INTO Language VALUES ('DEU', 'Bavarian', 'F', 11.2)\");\n$mysqli->query(\"INSERT INTO Language VALUES ('DEU', 'Swabian', 'F', 9.4)\");\n\n\/* commit transaction *\/\nif (!$mysqli->commit()) {\n    print(\"Transaction commit failed\\n\");\n    exit();\n}\n\n\/* drop table *\/\n$mysqli->query(\"DROP TABLE Language\");\n\n\/* close connection *\/\n$mysqli->close();","output":null}],"mysqli_connect_errno":[{"title":"$mysqli->connect_errno example","source":"$mysqli = @new mysqli('localhost', 'fake_user', 'my_password', 'my_db');\n\nif ($mysqli->connect_errno) {\n    die('Connect Error: ' . $mysqli->connect_errno);\n}","output":"Connect Error: 1045"}],"mysqli_connect_error":[{"title":"$mysqli->connect_error example","source":"$mysqli = @new mysqli('localhost', 'fake_user', 'my_password', 'my_db');\n\n\/\/ Works as of PHP 5.2.9 and 5.3.0.\nif ($mysqli->connect_error) {\n    die('Connect Error: ' . $mysqli->connect_error);\n}","output":"Connect Error: Access denied for user 'fake_user'@'localhost' (using password: YES)"}],"mysqli_connect":[{"title":"mysqli::__construct() example","source":"$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'my_db');\n\n\/*\n * This is the \"official\" OO way to do it,\n * BUT $connect_error was broken until PHP 5.2.9 and 5.3.0.\n *\/\nif ($mysqli->connect_error) {\n    die('Connect Error (' . $mysqli->connect_errno . ') '\n            . $mysqli->connect_error);\n}\n\n\/*\n * Use this instead of $connect_error if you need to ensure\n * compatibility with PHP versions prior to 5.2.9 and 5.3.0.\n *\/\nif (mysqli_connect_error()) {\n    die('Connect Error (' . mysqli_connect_errno() . ') '\n            . mysqli_connect_error());\n}\n\necho 'Success... ' . $mysqli->host_info . \"\\n\";\n\n$mysqli->close();","output":"Success... MySQL host info: localhost via TCP\/IP"}],"mysqli::debug":[{"title":"Generating a Trace File","source":"\/* Create a trace file in '\/tmp\/client.trace' on the local (client) machine: *\/\nmysqli_debug(\"d:t:o,\/tmp\/client.trace\");","output":null}],"mysqli_errno":[{"title":"$mysqli->errno example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\nif (!$mysqli->query(\"SET a=1\")) {\n    printf(\"Errorcode: %d\\n\", $mysqli->errno);\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Errorcode: 1193"}],"mysqli_error_list":[{"title":"$mysqli->error_list example","source":"$mysqli = new mysqli(\"localhost\", \"nobody\", \"\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nif (!$mysqli->query(\"SET a=1\")) {\n    print_r($mysqli->error_list);\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Array\n(\n    [0] => Array\n        (\n            [errno] => 1193\n            [sqlstate] => HY000\n            [error] => Unknown system variable 'a'\n        )\n\n)"}],"mysqli_error":[{"title":"$mysqli->error example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\nif (!$mysqli->query(\"SET a=1\")) {\n    printf(\"Errormessage: %s\\n\", $mysqli->error);\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Errormessage: Unknown system variable 'a'"}],"mysqli_field_count":[{"title":"$mysqli->field_count example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"test\");\n\n$mysqli->query( \"DROP TABLE IF EXISTS friends\");\n$mysqli->query( \"CREATE TABLE friends (id int, name varchar(20))\");\n\n$mysqli->query( \"INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')\");\n\n\n$mysqli->real_query(\"SELECT * FROM friends\");\n\nif ($mysqli->field_count) {\n    \/* this was a select\/show or describe query *\/\n    $result = $mysqli->store_result();\n\n    \/* process resultset *\/\n    $row = $result->fetch_row();\n\n    \/* free resultset *\/\n    $result->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":null}],"mysqli::get_charset":[{"title":"mysqli::get_charset() example","source":"$db = mysqli_init();\n  $db->real_connect(\"localhost\",\"root\",\"\",\"test\");\n  var_dump($db->get_charset());","output":"object(stdClass)#2 (7) {\n  [\"charset\"]=>\n  string(6) \"latin1\"\n  [\"collation\"]=>\n  string(17) \"latin1_swedish_ci\"\n  [\"dir\"]=>\n  string(0) \"\"\n  [\"min_length\"]=>\n  int(1)\n  [\"max_length\"]=>\n  int(1)\n  [\"number\"]=>\n  int(8)\n  [\"state\"]=>\n  int(801)\n}"}],"mysqli::get_client_info":[{"title":"mysqli_get_client_info","source":"\/* We don't need a connection to determine\n   the version of mysql client library *\/\n\nprintf(\"Client library version: %s\\n\", mysqli_get_client_info());","output":null}],"mysqli_get_client_stats":[{"title":"A mysqli_get_client_stats() example","source":"$link = mysqli_connect();\nprint_r(mysqli_get_client_stats());","output":"Array\n(\n    [bytes_sent] => 43\n    [bytes_received] => 80\n    [packets_sent] => 1\n    [packets_received] => 2\n    [protocol_overhead_in] => 8\n    [protocol_overhead_out] => 4\n    [bytes_received_ok_packet] => 11\n    [bytes_received_eof_packet] => 0\n    [bytes_received_rset_header_packet] => 0\n    [bytes_received_rset_field_meta_packet] => 0\n    [bytes_received_rset_row_packet] => 0\n    [bytes_received_prepare_response_packet] => 0\n    [bytes_received_change_user_packet] => 0\n    [packets_sent_command] => 0\n    [packets_received_ok] => 1\n    [packets_received_eof] => 0\n    [packets_received_rset_header] => 0\n    [packets_received_rset_field_meta] => 0\n    [packets_received_rset_row] => 0\n    [packets_received_prepare_response] => 0\n    [packets_received_change_user] => 0\n    [result_set_queries] => 0\n    [non_result_set_queries] => 0\n    [no_index_used] => 0\n    [bad_index_used] => 0\n    [slow_queries] => 0\n    [buffered_sets] => 0\n    [unbuffered_sets] => 0\n    [ps_buffered_sets] => 0\n    [ps_unbuffered_sets] => 0\n    [flushed_normal_sets] => 0\n    [flushed_ps_sets] => 0\n    [ps_prepared_never_executed] => 0\n    [ps_prepared_once_executed] => 0\n    [rows_fetched_from_server_normal] => 0\n    [rows_fetched_from_server_ps] => 0\n    [rows_buffered_from_client_normal] => 0\n    [rows_buffered_from_client_ps] => 0\n    [rows_fetched_from_client_normal_buffered] => 0\n    [rows_fetched_from_client_normal_unbuffered] => 0\n    [rows_fetched_from_client_ps_buffered] => 0\n    [rows_fetched_from_client_ps_unbuffered] => 0\n    [rows_fetched_from_client_ps_cursor] => 0\n    [rows_skipped_normal] => 0\n    [rows_skipped_ps] => 0\n    [copy_on_write_saved] => 0\n    [copy_on_write_performed] => 0\n    [command_buffer_too_small] => 0\n    [connect_success] => 1\n    [connect_failure] => 0\n    [connection_reused] => 0\n    [reconnect] => 0\n    [pconnect_success] => 0\n    [active_connections] => 1\n    [active_persistent_connections] => 0\n    [explicit_close] => 0\n    [implicit_close] => 0\n    [disconnect_close] => 0\n    [in_middle_of_command_close] => 0\n    [explicit_free_result] => 0\n    [implicit_free_result] => 0\n    [explicit_stmt_close] => 0\n    [implicit_stmt_close] => 0\n    [mem_emalloc_count] => 0\n    [mem_emalloc_ammount] => 0\n    [mem_ecalloc_count] => 0\n    [mem_ecalloc_ammount] => 0\n    [mem_erealloc_count] => 0\n    [mem_erealloc_ammount] => 0\n    [mem_efree_count] => 0\n    [mem_malloc_count] => 0\n    [mem_malloc_ammount] => 0\n    [mem_calloc_count] => 0\n    [mem_calloc_ammount] => 0\n    [mem_realloc_count] => 0\n    [mem_realloc_ammount] => 0\n    [mem_free_count] => 0\n    [proto_text_fetched_null] => 0\n    [proto_text_fetched_bit] => 0\n    [proto_text_fetched_tinyint] => 0\n    [proto_text_fetched_short] => 0\n    [proto_text_fetched_int24] => 0\n    [proto_text_fetched_int] => 0\n    [proto_text_fetched_bigint] => 0\n    [proto_text_fetched_decimal] => 0\n    [proto_text_fetched_float] => 0\n    [proto_text_fetched_double] => 0\n    [proto_text_fetched_date] => 0\n    [proto_text_fetched_year] => 0\n    [proto_text_fetched_time] => 0\n    [proto_text_fetched_datetime] => 0\n    [proto_text_fetched_timestamp] => 0\n    [proto_text_fetched_string] => 0\n    [proto_text_fetched_blob] => 0\n    [proto_text_fetched_enum] => 0\n    [proto_text_fetched_set] => 0\n    [proto_text_fetched_geometry] => 0\n    [proto_text_fetched_other] => 0\n    [proto_binary_fetched_null] => 0\n    [proto_binary_fetched_bit] => 0\n    [proto_binary_fetched_tinyint] => 0\n    [proto_binary_fetched_short] => 0\n    [proto_binary_fetched_int24] => 0\n    [proto_binary_fetched_int] => 0\n    [proto_binary_fetched_bigint] => 0\n    [proto_binary_fetched_decimal] => 0\n    [proto_binary_fetched_float] => 0\n    [proto_binary_fetched_double] => 0\n    [proto_binary_fetched_date] => 0\n    [proto_binary_fetched_year] => 0\n    [proto_binary_fetched_time] => 0\n    [proto_binary_fetched_datetime] => 0\n    [proto_binary_fetched_timestamp] => 0\n    [proto_binary_fetched_string] => 0\n    [proto_binary_fetched_blob] => 0\n    [proto_binary_fetched_enum] => 0\n    [proto_binary_fetched_set] => 0\n    [proto_binary_fetched_geometry] => 0\n    [proto_binary_fetched_other] => 0\n)"}],"mysqli::get_connection_stats":[{"title":"A mysqli_get_connection_stats() example","source":"$link = mysqli_connect();\nprint_r(mysqli_get_connection_stats($link));","output":"Array\n(\n    [bytes_sent] => 43\n    [bytes_received] => 80\n    [packets_sent] => 1\n    [packets_received] => 2\n    [protocol_overhead_in] => 8\n    [protocol_overhead_out] => 4\n    [bytes_received_ok_packet] => 11\n    [bytes_received_eof_packet] => 0\n    [bytes_received_rset_header_packet] => 0\n    [bytes_received_rset_field_meta_packet] => 0\n    [bytes_received_rset_row_packet] => 0\n    [bytes_received_prepare_response_packet] => 0\n    [bytes_received_change_user_packet] => 0\n    [packets_sent_command] => 0\n    [packets_received_ok] => 1\n    [packets_received_eof] => 0\n    [packets_received_rset_header] => 0\n    [packets_received_rset_field_meta] => 0\n    [packets_received_rset_row] => 0\n    [packets_received_prepare_response] => 0\n    [packets_received_change_user] => 0\n    [result_set_queries] => 0\n    [non_result_set_queries] => 0\n    [no_index_used] => 0\n    [bad_index_used] => 0\n    [slow_queries] => 0\n    [buffered_sets] => 0\n    [unbuffered_sets] => 0\n    [ps_buffered_sets] => 0\n    [ps_unbuffered_sets] => 0\n    [flushed_normal_sets] => 0\n    [flushed_ps_sets] => 0\n    [ps_prepared_never_executed] => 0\n    [ps_prepared_once_executed] => 0\n    [rows_fetched_from_server_normal] => 0\n    [rows_fetched_from_server_ps] => 0\n    [rows_buffered_from_client_normal] => 0\n    [rows_buffered_from_client_ps] => 0\n    [rows_fetched_from_client_normal_buffered] => 0\n    [rows_fetched_from_client_normal_unbuffered] => 0\n    [rows_fetched_from_client_ps_buffered] => 0\n    [rows_fetched_from_client_ps_unbuffered] => 0\n    [rows_fetched_from_client_ps_cursor] => 0\n    [rows_skipped_normal] => 0\n    [rows_skipped_ps] => 0\n    [copy_on_write_saved] => 0\n    [copy_on_write_performed] => 0\n    [command_buffer_too_small] => 0\n    [connect_success] => 1\n    [connect_failure] => 0\n    [connection_reused] => 0\n    [reconnect] => 0\n    [pconnect_success] => 0\n    [active_connections] => 1\n    [active_persistent_connections] => 0\n    [explicit_close] => 0\n    [implicit_close] => 0\n    [disconnect_close] => 0\n    [in_middle_of_command_close] => 0\n    [explicit_free_result] => 0\n    [implicit_free_result] => 0\n    [explicit_stmt_close] => 0\n    [implicit_stmt_close] => 0\n    [mem_emalloc_count] => 0\n    [mem_emalloc_ammount] => 0\n    [mem_ecalloc_count] => 0\n    [mem_ecalloc_ammount] => 0\n    [mem_erealloc_count] => 0\n    [mem_erealloc_ammount] => 0\n    [mem_efree_count] => 0\n    [mem_malloc_count] => 0\n    [mem_malloc_ammount] => 0\n    [mem_calloc_count] => 0\n    [mem_calloc_ammount] => 0\n    [mem_realloc_count] => 0\n    [mem_realloc_ammount] => 0\n    [mem_free_count] => 0\n    [proto_text_fetched_null] => 0\n    [proto_text_fetched_bit] => 0\n    [proto_text_fetched_tinyint] => 0\n    [proto_text_fetched_short] => 0\n    [proto_text_fetched_int24] => 0\n    [proto_text_fetched_int] => 0\n    [proto_text_fetched_bigint] => 0\n    [proto_text_fetched_decimal] => 0\n    [proto_text_fetched_float] => 0\n    [proto_text_fetched_double] => 0\n    [proto_text_fetched_date] => 0\n    [proto_text_fetched_year] => 0\n    [proto_text_fetched_time] => 0\n    [proto_text_fetched_datetime] => 0\n    [proto_text_fetched_timestamp] => 0\n    [proto_text_fetched_string] => 0\n    [proto_text_fetched_blob] => 0\n    [proto_text_fetched_enum] => 0\n    [proto_text_fetched_set] => 0\n    [proto_text_fetched_geometry] => 0\n    [proto_text_fetched_other] => 0\n    [proto_binary_fetched_null] => 0\n    [proto_binary_fetched_bit] => 0\n    [proto_binary_fetched_tinyint] => 0\n    [proto_binary_fetched_short] => 0\n    [proto_binary_fetched_int24] => 0\n    [proto_binary_fetched_int] => 0\n    [proto_binary_fetched_bigint] => 0\n    [proto_binary_fetched_decimal] => 0\n    [proto_binary_fetched_float] => 0\n    [proto_binary_fetched_double] => 0\n    [proto_binary_fetched_date] => 0\n    [proto_binary_fetched_year] => 0\n    [proto_binary_fetched_time] => 0\n    [proto_binary_fetched_datetime] => 0\n    [proto_binary_fetched_timestamp] => 0\n    [proto_binary_fetched_string] => 0\n    [proto_binary_fetched_blob] => 0\n    [proto_binary_fetched_enum] => 0\n    [proto_binary_fetched_set] => 0\n    [proto_binary_fetched_geometry] => 0\n    [proto_binary_fetched_other] => 0\n)"}],"mysqli_get_host_info":[{"title":"$mysqli->host_info example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* print host information *\/\nprintf(\"Host info: %s\\n\", $mysqli->host_info);\n\n\/* close connection *\/\n$mysqli->close();","output":"Host info: Localhost via UNIX socket"}],"mysqli_get_proto_info":[{"title":"$mysqli->protocol_version example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* print protocol version *\/\nprintf(\"Protocol version: %d\\n\", $mysqli->protocol_version);\n\n\/* close connection *\/\n$mysqli->close();","output":"Protocol version: 10"}],"mysqli_get_server_info":[{"title":"$mysqli->server_info example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* print server version *\/\nprintf(\"Server version: %s\\n\", $mysqli->server_info);\n\n\/* close connection *\/\n$mysqli->close();","output":"Server version: 4.1.2-alpha-debug"}],"mysqli_get_server_version":[{"title":"$mysqli->server_version example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* print server version *\/\nprintf(\"Server version: %d\\n\", $mysqli->server_version);\n\n\/* close connection *\/\n$mysqli->close();","output":"Server version: 40102"}],"mysqli_info":[{"title":"$mysqli->info example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TEMPORARY TABLE t1 LIKE City\");\n\n\/* INSERT INTO .. SELECT *\/\n$mysqli->query(\"INSERT INTO t1 SELECT * FROM City ORDER BY ID LIMIT 150\");\nprintf(\"%s\\n\", $mysqli->info);\n\n\/* close connection *\/\n$mysqli->close();","output":"Records: 150  Duplicates: 0  Warnings: 0"}],"mysqli_insert_id":[{"title":"$mysqli->insert_id example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCity LIKE City\");\n\n$query = \"INSERT INTO myCity VALUES (NULL, 'Stuttgart', 'DEU', 'Stuttgart', 617000)\";\n$mysqli->query($query);\n\nprintf (\"New Record has id %d.\\n\", $mysqli->insert_id);\n\n\/* drop table *\/\n$mysqli->query(\"DROP TABLE myCity\");\n\n\/* close connection *\/\n$mysqli->close();","output":"New Record has id 1."}],"mysqli::kill":[{"title":"mysqli::kill() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* determine our thread id *\/\n$thread_id = $mysqli->thread_id;\n\n\/* Kill connection *\/\n$mysqli->kill($thread_id);\n\n\/* This should produce an error *\/\nif (!$mysqli->query(\"CREATE TABLE myCity LIKE City\")) {\n    printf(\"Error: %s\\n\", $mysqli->error);\n    exit;\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Error: MySQL server has gone away"}],"mysqli::multi_query":[{"title":"mysqli::multi_query() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query  = \"SELECT CURRENT_USER();\";\n$query .= \"SELECT Name FROM City ORDER BY ID LIMIT 20, 5\";\n\n\/* execute multi query *\/\nif ($mysqli->multi_query($query)) {\n    do {\n        \/* store first result set *\/\n        if ($result = $mysqli->store_result()) {\n            while ($row = $result->fetch_row()) {\n                printf(\"%s\\n\", $row[0]);\n            }\n            $result->free();\n        }\n        \/* print divider *\/\n        if ($mysqli->more_results()) {\n            printf(\"-----------------\\n\");\n        }\n    } while ($mysqli->next_result());\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"my_user@localhost\n-----------------\nAmersfoort\nMaastricht\nDordrecht\nLeiden\nHaarlemmermeer"}],"mysqli::ping":[{"title":"mysqli::ping() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\n\/* check if server is alive *\/\nif ($mysqli->ping()) {\n    printf (\"Our connection is ok!\\n\");\n} else {\n    printf (\"Error: %s\\n\", $mysqli->error);\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Our connection is ok!"}],"mysqli::poll":[{"title":"A mysqli_poll() example","source":"$link1 = mysqli_connect();\n$link1->query(\"SELECT 'test'\", MYSQLI_ASYNC);\n$all_links = array($link1);\n$processed = 0;\ndo {\n    $links = $errors = $reject = array();\n    foreach ($all_links as $link) {\n        $links[] = $errors[] = $reject[] = $link;\n    }\n    if (!mysqli_poll($links, $errors, $reject, 1)) {\n        continue;\n    }\n    foreach ($links as $link) {\n        if ($result = $link->reap_async_query()) {\n            print_r($result->fetch_row());\n            if (is_object($result))\n                mysqli_free_result($result);\n        } else die(sprintf(\"MySQLi Error: %s\", mysqli_error($link)));\n        $processed++;\n    }\n} while ($processed < count($all_links));","output":"Array\n(\n    [0] => test\n)"}],"mysqli::prepare":[{"title":"mysqli::prepare() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$city = \"Amersfoort\";\n\n\/* create a prepared statement *\/\nif ($stmt = $mysqli->prepare(\"SELECT District FROM City WHERE Name=?\")) {\n\n    \/* bind parameters for markers *\/\n    $stmt->bind_param(\"s\", $city);\n\n    \/* execute query *\/\n    $stmt->execute();\n\n    \/* bind result variables *\/\n    $stmt->bind_result($district);\n\n    \/* fetch value *\/\n    $stmt->fetch();\n\n    printf(\"%s is in district %s\\n\", $city, $district);\n\n    \/* close statement *\/\n    $stmt->close();\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Amersfoort is in district Utrecht"}],"mysqli::query":[{"title":"mysqli::query() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif ($mysqli->connect_errno) {\n    printf(\"Connect failed: %s\\n\", $mysqli->connect_error);\n    exit();\n}\n\n\/* Create table doesn't return a resultset *\/\nif ($mysqli->query(\"CREATE TEMPORARY TABLE myCity LIKE City\") === TRUE) {\n    printf(\"Table myCity successfully created.\\n\");\n}\n\n\/* Select queries return a resultset *\/\nif ($result = $mysqli->query(\"SELECT Name FROM City LIMIT 10\")) {\n    printf(\"Select returned %d rows.\\n\", $result->num_rows);\n\n    \/* free result set *\/\n    $result->close();\n}\n\n\/* If we have to retrieve large amount of data we use MYSQLI_USE_RESULT *\/\nif ($result = $mysqli->query(\"SELECT * FROM City\", MYSQLI_USE_RESULT)) {\n\n    \/* Note, that we can't execute any functions which interact with the\n       server until result set was closed. All calls will return an\n       'out of sync' error *\/\n    if (!$mysqli->query(\"SET @a:='this will not work'\")) {\n        printf(\"Error: %s\\n\", $mysqli->error);\n    }\n    $result->close();\n}\n\n$mysqli->close();","output":"Table myCity successfully created.\nSelect returned 10 rows.\nError: Commands out of sync;  You can't run this command now"}],"mysqli::real_connect":[{"title":"mysqli::real_connect() example","source":"$mysqli = mysqli_init();\nif (!$mysqli) {\n    die('mysqli_init failed');\n}\n\nif (!$mysqli->options(MYSQLI_INIT_COMMAND, 'SET AUTOCOMMIT = 0')) {\n    die('Setting MYSQLI_INIT_COMMAND failed');\n}\n\nif (!$mysqli->options(MYSQLI_OPT_CONNECT_TIMEOUT, 5)) {\n    die('Setting MYSQLI_OPT_CONNECT_TIMEOUT failed');\n}\n\nif (!$mysqli->real_connect('localhost', 'my_user', 'my_password', 'my_db')) {\n    die('Connect Error (' . mysqli_connect_errno() . ') '\n            . mysqli_connect_error());\n}\n\necho 'Success... ' . $mysqli->host_info . \"\\n\";\n\n$mysqli->close();","output":"Success... MySQL host info: localhost via TCP\/IP"}],"mysqli::escape_string":[{"title":"mysqli::real_escape_string() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TEMPORARY TABLE myCity LIKE City\");\n\n$city = \"'s Hertogenbosch\";\n\n\/* this query will fail, cause we didn't escape $city *\/\nif (!$mysqli->query(\"INSERT into myCity (Name) VALUES ('$city')\")) {\n    printf(\"Error: %s\\n\", $mysqli->sqlstate);\n}\n\n$city = $mysqli->real_escape_string($city);\n\n\/* this query with escaped $city will work *\/\nif ($mysqli->query(\"INSERT into myCity (Name) VALUES ('$city')\")) {\n    printf(\"%d Row inserted.\\n\", $mysqli->affected_rows);\n}\n\n$mysqli->close();","output":"Error: 42000\n1 Row inserted."}],"mysqli::rollback":[{"title":"mysqli::rollback() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* disable autocommit *\/\n$mysqli->autocommit(FALSE);\n\n$mysqli->query(\"CREATE TABLE myCity LIKE City\");\n$mysqli->query(\"ALTER TABLE myCity Type=InnoDB\");\n$mysqli->query(\"INSERT INTO myCity SELECT * FROM City LIMIT 50\");\n\n\/* commit insert *\/\n$mysqli->commit();\n\n\/* delete all rows *\/\n$mysqli->query(\"DELETE FROM myCity\");\n\nif ($result = $mysqli->query(\"SELECT COUNT(*) FROM myCity\")) {\n    $row = $result->fetch_row();\n    printf(\"%d rows in table myCity.\\n\", $row[0]);\n    \/* Free result *\/\n    $result->close();\n}\n\n\/* Rollback *\/\n$mysqli->rollback();\n\nif ($result = $mysqli->query(\"SELECT COUNT(*) FROM myCity\")) {\n    $row = $result->fetch_row();\n    printf(\"%d rows in table myCity (after rollback).\\n\", $row[0]);\n    \/* Free result *\/\n    $result->close();\n}\n\n\/* Drop table myCity *\/\n$mysqli->query(\"DROP TABLE myCity\");\n\n$mysqli->close();","output":"0 rows in table myCity.\n50 rows in table myCity (after rollback)."}],"mysqli::select_db":[{"title":"mysqli::select_db() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"test\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* return name of current default database *\/\nif ($result = $mysqli->query(\"SELECT DATABASE()\")) {\n    $row = $result->fetch_row();\n    printf(\"Default database is %s.\\n\", $row[0]);\n    $result->close();\n}\n\n\/* change db to world db *\/\n$mysqli->select_db(\"world\");\n\n\/* return name of current default database *\/\nif ($result = $mysqli->query(\"SELECT DATABASE()\")) {\n    $row = $result->fetch_row();\n    printf(\"Default database is %s.\\n\", $row[0]);\n    $result->close();\n}\n\n$mysqli->close();","output":"Default database is test.\nDefault database is world."}],"mysqli::set_charset":[{"title":"mysqli::set_charset() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"test\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nprintf(\"Initial character set: %s\\n\", $mysqli->character_set_name());\n\n\/* change character set to utf8 *\/\nif (!$mysqli->set_charset(\"utf8\")) {\n    printf(\"Error loading character set utf8: %s\\n\", $mysqli->error);\n    exit();\n} else {\n    printf(\"Current character set: %s\\n\", $mysqli->character_set_name());\n}\n\n$mysqli->close();","output":"Initial character set: latin1\nCurrent character set: utf8"}],"mysqli::set_local_infile_handler":[{"title":"mysqli::set_local_infile_handler() example","source":"$db = mysqli_init();\n  $db->real_connect(\"localhost\",\"root\",\"\",\"test\");\n\n  function callme($stream, &$buffer, $buflen, &$errmsg)\n  {\n    $buffer = fgets($stream);\n\n    echo $buffer;\n\n    \/\/ convert to upper case and replace \",\" delimiter with [TAB]\n    $buffer = strtoupper(str_replace(\",\", \"\\t\", $buffer));\n\n    return strlen($buffer);\n  }\n\n\n  echo \"Input:\\n\";\n\n  $db->set_local_infile_handler(\"callme\");\n  $db->query(\"LOAD DATA LOCAL INFILE 'input.txt' INTO TABLE t1\");\n  $db->set_local_infile_default();\n\n  $res = $db->query(\"SELECT * FROM t1\");\n\n  echo \"\\nResult:\\n\";\n  while ($row = $res->fetch_assoc()) {\n    echo join(\",\", $row).\"\\n\";\n  }","output":"Input:\n23,foo\n42,bar\n\nOutput:\n23,FOO\n42,BAR"}],"mysqli_sqlstate":[{"title":"$mysqli->sqlstate example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* Table City already exists, so we should get an error *\/\nif (!$mysqli->query(\"CREATE TABLE City (ID INT, Name VARCHAR(30))\")) {\n    printf(\"Error - SQLSTATE %s.\\n\", $mysqli->sqlstate);\n}\n\n$mysqli->close();","output":"Error - SQLSTATE 42S01."}],"mysqli::stat":[{"title":"mysqli::stat() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\nprintf (\"System status: %s\\n\", $mysqli->stat());\n\n$mysqli->close();","output":"System status: Uptime: 272  Threads: 1  Questions: 5340  Slow queries: 0\nOpens: 13  Flush tables: 1  Open tables: 0  Queries per second avg: 19.632\nMemory in use: 8496K  Max memory used: 8560K"}],"mysqli_thread_id":[{"title":"$mysqli->thread_id example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n\/* determine our thread id *\/\n$thread_id = $mysqli->thread_id;\n\n\/* Kill connection *\/\n$mysqli->kill($thread_id);\n\n\/* This should produce an error *\/\nif (!$mysqli->query(\"CREATE TABLE myCity LIKE City\")) {\n    printf(\"Error: %s\\n\", $mysqli->error);\n    exit;\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Error: MySQL server has gone away"}],"mysqli::use_result":[{"title":"mysqli::use_result() example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$query  = \"SELECT CURRENT_USER();\";\n$query .= \"SELECT Name FROM City ORDER BY ID LIMIT 20, 5\";\n\n\/* execute multi query *\/\nif ($mysqli->multi_query($query)) {\n    do {\n        \/* store first result set *\/\n        if ($result = $mysqli->use_result()) {\n            while ($row = $result->fetch_row()) {\n                printf(\"%s\\n\", $row[0]);\n            }\n            $result->close();\n        }\n        \/* print divider *\/\n        if ($mysqli->more_results()) {\n            printf(\"-----------------\\n\");\n        }\n    } while ($mysqli->next_result());\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"my_user@localhost\n-----------------\nAmersfoort\nMaastricht\nDordrecht\nLeiden\nHaarlemmermeer"}],"mysqli_warning_count":[{"title":"$mysqli->warning_count example","source":"$mysqli = new mysqli(\"localhost\", \"my_user\", \"my_password\", \"world\");\n\n\/* check connection *\/\nif (mysqli_connect_errno()) {\n    printf(\"Connect failed: %s\\n\", mysqli_connect_error());\n    exit();\n}\n\n$mysqli->query(\"CREATE TABLE myCity LIKE City\");\n\n\/* a remarkable city in Wales *\/\n$query = \"INSERT INTO myCity (CountryCode, Name) VALUES('GBR',\n        'Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch')\";\n\n$mysqli->query($query);\n\nif ($mysqli->warning_count) {\n    if ($result = $mysqli->query(\"SHOW WARNINGS\")) {\n        $row = $result->fetch_row();\n        printf(\"%s (%d): %s\\n\", $row[0], $row[1], $row[2]);\n        $result->close();\n    }\n}\n\n\/* close connection *\/\n$mysqli->close();","output":"Warning (1264): Data truncated for column 'Name' at row 1"}],"mysqlnduhconnection::changeuser":[{"title":"MysqlndUhConnection::changeUser() example","source":"class proxy extends MysqlndUhConnection {\n \/* Hook mysqlnd's connection::change_user call *\/\n public function changeUser($res, $user, $passwd, $db, $silent, $passwd_len) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::changeUser($res, $user, $passwd, $db, $silent, $passwd_len);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\n\/* Install proxy\/hooks to be used with all future mysqlnd connection *\/\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n\/* Create mysqli connection which is using the mysqlnd library *\/\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n\n\/* Example of a user API call which triggers the hooked mysqlnd call *\/\nvar_dump($mysqli->change_user(\"root\", \"bar\", \"test\"));","output":"proxy::changeUser(array (\n  0 => NULL,\n  1 => 'root',\n  2 => 'bar',\n  3 => 'test',\n  4 => false,\n  5 => 3,\n))\nproxy::changeUser returns false\nbool(false)"}],"mysqlnduhconnection::charsetname":[{"title":"MysqlndUhConnection::charsetName() example","source":"class proxy extends MysqlndUhConnection {\n  public function charsetName($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::charsetName($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump(mysqli_character_set_name($mysqli));","output":"proxy::charsetName(array (\n  0 => NULL,\n))\nproxy::charsetName returns 'latin1'\nstring(6) \"latin1\""}],"mysqlnduhconnection::close":[{"title":"MysqlndUhConnection::close() example","source":"function close_type_to_string($close_type) {\n $mapping = array(\n  MYSQLND_UH_MYSQLND_CLOSE_DISCONNECTED => \"MYSQLND_UH_MYSQLND_CLOSE_DISCONNECTED\",\n  MYSQLND_UH_MYSQLND_CLOSE_EXPLICIT => \"MYSQLND_UH_MYSQLND_CLOSE_EXPLICIT\",\n  MYSQLND_UH_MYSQLND_CLOSE_IMPLICIT => \"MYSQLND_UH_MYSQLND_CLOSE_IMPLICIT\",\n  MYSQLND_UH_MYSQLND_CLOSE_LAST => \"MYSQLND_UH_MYSQLND_CLOSE_IMPLICIT\"\n );\n return (isset($mapping[$close_type])) ? $mapping[$close_type] : 'unknown';\n}\n\nclass proxy extends MysqlndUhConnection {\n  public function close($res, $close_type) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   printf(\"close_type = %s\\n\", close_type_to_string($close_type));\n   \/* WARNING: you must call the parent *\/\n   $ret = parent::close($res, $close_type);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->close();","output":"proxy::close(array (\n  0 => NULL,\n  1 => 0,\n))\nclose_type = MYSQLND_UH_MYSQLND_CLOSE_EXPLICIT\nproxy::close returns true"}],"mysqlnduhconnection::connect":[{"title":"MysqlndUhConnection::connect() example","source":"class proxy extends MysqlndUhConnection {\n public function connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");","output":"proxy::connect(array (\n  0 => NULL,\n  1 => 'localhost',\n  2 => 'root',\n  3 => '',\n  4 => 'test',\n  5 => 3306,\n  6 => NULL,\n  7 => 131072,\n))\nproxy::connect returns true"}],"mysqlnduhconnection::endpsession":[{"title":"MysqlndUhConnection::endPSession() example","source":"class proxy extends MysqlndUhConnection {\n public function endPSession($conn) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::endPSession($conn);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"p:localhost\", \"root\", \"\", \"test\");\n$mysqli->close();","output":"proxy::endPSession(array (\n  0 => NULL,\n))\nproxy::endPSession returns true"}],"mysqlnduhconnection::escapestring":[{"title":"MysqlndUhConnection::escapeString() example","source":"class proxy extends MysqlndUhConnection {\n public function escapeString($res, $string) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::escapeString($res, $string);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->set_charset(\"latin1\");\n$mysqli->real_escape_string(\"test0'test\");","output":"proxy::escapeString(array (\n  0 => NULL,\n  1 => 'test0\\'test',\n))\nproxy::escapeString returns 'test0\\\\\\'test'"}],"mysqlnduhconnection::getaffectedrows":[{"title":"MysqlndUhConnection::getAffectedRows() example","source":"class proxy extends MysqlndUhConnection {\n public function getAffectedRows($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getAffectedRows($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->query(\"DROP TABLE IF EXISTS test\");\n$mysqli->query(\"CREATE TABLE test(id INT)\");\n$mysqli->query(\"INSERT INTO test(id) VALUES (1)\");\nvar_dump($mysqli->affected_rows);","output":"proxy::getAffectedRows(array (\n  0 => NULL,\n))\nproxy::getAffectedRows returns 1\nint(1)"}],"mysqlnduhconnection::geterrornumber":[{"title":"MysqlndUhConnection::getErrorNumber() example","source":"class proxy extends MysqlndUhConnection {\n public function getErrorNumber($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getErrorNumber($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\nprintf(\"connect...\\n\");\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nprintf(\"query...\\n\");\n$mysqli->query(\"PLEASE_LET_THIS_BE_INVALID_SQL\");\nprintf(\"errno...\\n\");\nvar_dump($mysqli->errno);\nprintf(\"close...\\n\");\n$mysqli->close();","output":"connect...\nproxy::getErrorNumber(array (\n  0 => NULL,\n))\nproxy::getErrorNumber returns 0\nquery...\nerrno...\nproxy::getErrorNumber(array (\n  0 => NULL,\n))\nproxy::getErrorNumber returns 1064\nint(1064)\nclose..."}],"mysqlnduhconnection::geterrorstring":[{"title":"MysqlndUhConnection::getErrorString() example","source":"class proxy extends MysqlndUhConnection {\n public function getErrorString($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getErrorString($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\nprintf(\"connect...\\n\");\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nprintf(\"query...\\n\");\n$mysqli->query(\"WILL_I_EVER_LEARN_SQL?\");\nprintf(\"errno...\\n\");\nvar_dump($mysqli->error);\nprintf(\"close...\\n\");\n$mysqli->close();","output":"connect...\nproxy::getErrorString(array (\n  0 => NULL,\n))\nproxy::getErrorString returns ''\nquery...\nerrno...\nproxy::getErrorString(array (\n  0 => NULL,\n))\nproxy::getErrorString returns 'You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'WILL_I_EVER_LEARN_SQL?\\' at line 1'\nstring(168) \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WILL_I_EVER_LEARN_SQL?' at line 1\"\nclose..."}],"mysqlnduhconnection::getfieldcount":[{"title":"MysqlndUhConnection::getFieldCount() example","source":"class proxy extends MysqlndUhConnection {\n public function getFieldCount($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getFieldCount($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->query(\"WILL_I_EVER_LEARN_SQL?\");\nvar_dump($mysqli->field_count);\n$mysqli->query(\"SELECT 1, 2, 3 FROM DUAL\");\nvar_dump($mysqli->field_count);","output":"proxy::getFieldCount(array (\n  0 => NULL,\n))\nproxy::getFieldCount returns 0\nint(0)\nproxy::getFieldCount(array (\n  0 => NULL,\n))\nproxy::getFieldCount returns 3\nproxy::getFieldCount(array (\n  0 => NULL,\n))\nproxy::getFieldCount returns 3\nint(3)"}],"mysqlnduhconnection::gethostinformation":[{"title":"MysqlndUhConnection::getHostInformation() example","source":"class proxy extends MysqlndUhConnection {\n public function getHostInformation($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getHostInformation($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->host_info);","output":"proxy::getHostInformation(array (\n  0 => NULL,\n))\nproxy::getHostInformation returns 'Localhost via UNIX socket'\nstring(25) \"Localhost via UNIX socket\""}],"mysqlnduhconnection::getlastinsertid":[{"title":"MysqlndUhConnection::getLastInsertId() example","source":"class proxy extends MysqlndUhConnection {\n public function getLastInsertId($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getLastInsertId($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->query(\"DROP TABLE IF EXISTS test\");\n$mysqli->query(\"CREATE TABLE test(id INT AUTO_INCREMENT PRIMARY KEY, col VARCHAR(255))\");\n$mysqli->query(\"INSERT INTO test(col) VALUES ('a')\");\nvar_dump($mysqli->insert_id);","output":"proxy::getLastInsertId(array (\n  0 => NULL,\n))\nproxy::getLastInsertId returns 1\nint(1)"}],"mysqlnduhconnection::getlastmessage":[{"title":"MysqlndUhConnection::getLastMessage() example","source":"class proxy extends MysqlndUhConnection {\n public function getLastMessage($res) {\n   printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n   $ret = parent::getLastMessage($res);\n   printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n   return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->info);\n$mysqli->query(\"DROP TABLE IF EXISTS test\");\nvar_dump($mysqli->info);","output":"proxy::getLastMessage(array (\n  0 => NULL,\n))\nproxy::getLastMessage returns ''\nstring(0) \"\"\nproxy::getLastMessage(array (\n  0 => NULL,\n))\nproxy::getLastMessage returns ''\nstring(0) \"\""}],"mysqlnduhconnection::getprotocolinformation":[{"title":"MysqlndUhConnection::getProtocolInformation() example","source":"class proxy extends MysqlndUhConnection {\n public function getProtocolInformation($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getProtocolInformation($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->protocol_version);","output":"proxy::getProtocolInformation(array (\n  0 => NULL,\n))\nproxy::getProtocolInformation returns 10\nint(10)"}],"mysqlnduhconnection::getserverinformation":[{"title":"MysqlndUhConnection::getServerInformation() example","source":"class proxy extends MysqlndUhConnection {\n public function getServerInformation($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getServerInformation($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->server_info);","output":"proxy::getServerInformation(array (\n  0 => NULL,\n))\nproxy::getServerInformation returns '5.1.45-debug-log'\nstring(16) \"5.1.45-debug-log\""}],"mysqlnduhconnection::getserverstatistics":[{"title":"MysqlndUhConnection::getServerStatistics() example","source":"class proxy extends MysqlndUhConnection {\n public function getServerStatistics($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getServerStatistics($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump(mysqli_stat($mysqli));","output":"proxy::getServerStatistics(array (\n  0 => NULL,\n))\nproxy::getServerStatistics returns 'Uptime: 2059995  Threads: 1  Questions: 126157  Slow queries: 0  Opens: 6377  Flush tables: 1  Open tables: 18  Queries per second avg: 0.61'\nstring(140) \"Uptime: 2059995  Threads: 1  Questions: 126157  Slow queries: 0  Opens: 6377  Flush tables: 1  Open tables: 18  Queries per second avg: 0.61\""}],"mysqlnduhconnection::getserverversion":[{"title":"MysqlndUhConnection::getServerVersion() example","source":"class proxy extends MysqlndUhConnection {\n public function getServerVersion($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getServerVersion($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->server_version);","output":"proxy::getServerVersion(array (\n  0 => NULL,\n))\nproxy::getServerVersion returns 50145\nint(50145)"}],"mysqlnduhconnection::getsqlstate":[{"title":"MysqlndUhConnection::getSqlstate() example","source":"class proxy extends MysqlndUhConnection {\n public function getSqlstate($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getSqlstate($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->sqlstate);\n$mysqli->query(\"AN_INVALID_REQUEST_TO_PROVOKE_AN_ERROR\");\nvar_dump($mysqli->sqlstate);","output":"proxy::getSqlstate(array (\n  0 => NULL,\n))\nproxy::getSqlstate returns '00000'\nstring(5) \"00000\"\nproxy::getSqlstate(array (\n  0 => NULL,\n))\nproxy::getSqlstate returns '42000'\nstring(5) \"42000\""}],"mysqlnduhconnection::getstatistics":[{"title":"MysqlndUhConnection::getStatistics() example","source":"class proxy extends MysqlndUhConnection {\n public function getStatistics($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getStatistics($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->get_connection_stats());","output":"proxy::getStatistics(array (\n  0 => NULL,\n))\nproxy::getStatistics returns array (\n  'bytes_sent' => '73',\n  'bytes_received' => '77',\n  'packets_sent' => '2',\n  'packets_received' => '2',\n  'protocol_overhead_in' => '8',\n  'protocol_overhead_out' => '8',\n  'bytes_received_ok_packet' => '0',\n  'bytes_received_eof_packet' => '0',\n  'bytes_received_rset_header_packet' => '0',\n  'bytes_received_rset_field_meta_packet' => '0',\n  'bytes_received_rset_row_packet' => '0',\n  'bytes_received_prepare_response_packet' => '0',\n  'bytes_received_change_user_packet' => '0',\n  'packets_sent_command' => '0',\n  'packets_received_ok' => '0',\n  'packets_received_eof' => '0',\n  'packets_received_rset_header' => '0',\n  'packets_received_rset_field_meta' => '0',\n  'packets_received_rset_row' => '0',\n  'packets_received_prepare_response' => '0',\n  'packets_received_change_user' => '0',\n  'result_set_queries' => '0',\n  'non_result_set_queries' => '0',\n  'no_index_used' => '0',\n  'bad_index_used' => '0',\n  'slow_queries' => '0',\n  'buffered_sets' => '0',\n  'unbuffered_sets' => '0',\n  'ps_buffered_sets' => '0',\n  'ps_unbuffered_sets' => '0',\n  'flushed_normal_sets' => '0',\n  'flushed_ps_sets' => '0',\n  'ps_prepared_never_executed' => '0',\n  'ps_prepared_once_executed' => '0',\n  'rows_fetched_from_server_normal' => '0',\n  'rows_fetched_from_server_ps' => '0',\n  'rows_buffered_from_client_normal' => '0',\n  'rows_buffered_from_client_ps' => '0',\n  'rows_fetched_from_client_normal_buffered' => '0',\n  'rows_fetched_from_client_normal_unbuffered' => '0',\n  'rows_fetched_from_client_ps_buffered' => '0',\n  'rows_fetched_from_client_ps_unbuffered' => '0',\n  'rows_fetched_from_client_ps_cursor' => '0',\n  'rows_affected_normal' => '0',\n  'rows_affected_ps' => '0',\n  'rows_skipped_normal' => '0',\n  'rows_skipped_ps' => '0',\n  'copy_on_write_saved' => '0',\n  'copy_on_write_performed' => '0',\n  'command_buffer_too_small' => '0',\n  'connect_success' => '1',\n  'connect_failure' => '0',\n  'connection_reused' => '0',\n  'reconnect' => '0',\n  'pconnect_success' => '0',\n  'active_connections' => '1',\n  'active_persistent_connections' => '0',\n  'explicit_close' => '0',\n  'implicit_close' => '0',\n  'disconnect_close' => '0',\n  'in_middle_of_command_close' => '0',\n  'explicit_free_result' => '0',\n  'implicit_free_result' => '0',\n  'explicit_stmt_close' => '0',\n  'implicit_stmt_close' => '0',\n  'mem_emalloc_count' => '0',\n  'mem_emalloc_amount' => '0',\n  'mem_ecalloc_count' => '0',\n  'mem_ecalloc_amount' => '0',\n  'mem_erealloc_count' => '0',\n  'mem_erealloc_amount' => '0',\n  'mem_efree_count' => '0',\n  'mem_efree_amount' => '0',\n  'mem_malloc_count' => '0',\n  'mem_malloc_amount' => '0',\n  'mem_calloc_count' => '0',\n  'mem_calloc_amount' => '0',\n  'mem_realloc_count' => '0',\n  'mem_realloc_amount' => '0',\n  'mem_free_count' => '0',\n  'mem_free_amount' => '0',\n  'mem_estrndup_count' => '0',\n  'mem_strndup_count' => '0',\n  'mem_estndup_count' => '0',\n  'mem_strdup_count' => '0',\n  'proto_text_fetched_null' => '0',\n  'proto_text_fetched_bit' => '0',\n  'proto_text_fetched_tinyint' => '0',\n  'proto_text_fetched_short' => '0',\n  'proto_text_fetched_int24' => '0',\n  'proto_text_fetched_int' => '0',\n  'proto_text_fetched_bigint' => '0',\n  'proto_text_fetched_decimal' => '0',\n  'proto_text_fetched_float' => '0',\n  'proto_text_fetched_double' => '0',\n  'proto_text_fetched_date' => '0',\n  'proto_text_fetched_year' => '0',\n  'proto_text_fetched_time' => '0',\n  'proto_text_fetched_datetime' => '0',\n  'proto_text_fetched_timestamp' => '0',\n  'proto_text_fetched_string' => '0',\n  'proto_text_fetched_blob' => '0',\n  'proto_text_fetched_enum' => '0',\n  'proto_text_fetched_set' => '0',\n  'proto_text_fetched_geometry' => '0',\n  'proto_text_fetched_other' => '0',\n  'proto_binary_fetched_null' => '0',\n  'proto_binary_fetched_bit' => '0',\n  'proto_binary_fetched_tinyint' => '0',\n  'proto_binary_fetched_short' => '0',\n  'proto_binary_fetched_int24' => '0',\n  'proto_binary_fetched_int' => '0',\n  'proto_binary_fetched_bigint' => '0',\n  'proto_binary_fetched_decimal' => '0',\n  'proto_binary_fetched_float' => '0',\n  'proto_binary_fetched_double' => '0',\n  'proto_binary_fetched_date' => '0',\n  'proto_binary_fetched_year' => '0',\n  'proto_binary_fetched_time' => '0',\n  'proto_binary_fetched_datetime' => '0',\n  'proto_binary_fetched_timestamp' => '0',\n  'proto_binary_fetched_string' => '0',\n  'proto_binary_fetched_blob' => '0',\n  'proto_binary_fetched_enum' => '0',\n  'proto_binary_fetched_set' => '0',\n  'proto_binary_fetched_geometry' => '0',\n  'proto_binary_fetched_other' => '0',\n  'init_command_executed_count' => '0',\n  'init_command_failed_count' => '0',\n  'com_quit' => '0',\n  'com_init_db' => '0',\n  'com_query' => '0',\n  'com_field_list' => '0',\n  'com_create_db' => '0',\n  'com_drop_db' => '0',\n  'com_refresh' => '0',\n  'com_shutdown' => '0',\n  'com_statistics' => '0',\n  'com_process_info' => '0',\n  'com_connect' => '0',\n  'com_process_kill' => '0',\n  'com_debug' => '0',\n  'com_ping' => '0',\n  'com_time' => '0',\n  'com_delayed_insert' => '0',\n  'com_change_user' => '0',\n  'com_binlog_dump' => '0',\n  'com_table_dump' => '0',\n  'com_connect_out' => '0',\n  'com_register_slave' => '0',\n  'com_stmt_prepare' => '0',\n  'com_stmt_execute' => '0',\n  'com_stmt_send_long_data' => '0',\n  'com_stmt_close' => '0',\n  'com_stmt_reset' => '0',\n  'com_stmt_set_option' => '0',\n  'com_stmt_fetch' => '0',\n  'com_deamon' => '0',\n  'bytes_received_real_data_normal' => '0',\n  'bytes_received_real_data_ps' => '0',\n)\narray(160) {\n  [\"bytes_sent\"]=>\n  string(2) \"73\"\n  [\"bytes_received\"]=>\n  string(2) \"77\"\n  [\"packets_sent\"]=>\n  string(1) \"2\"\n  [\"packets_received\"]=>\n  string(1) \"2\"\n  [\"protocol_overhead_in\"]=>\n  string(1) \"8\"\n  [\"protocol_overhead_out\"]=>\n  string(1) \"8\"\n  [\"bytes_received_ok_packet\"]=>\n  string(1) \"0\"\n  [\"bytes_received_eof_packet\"]=>\n  string(1) \"0\"\n  [\"bytes_received_rset_header_packet\"]=>\n  string(1) \"0\"\n  [\"bytes_received_rset_field_meta_packet\"]=>\n  string(1) \"0\"\n  [\"bytes_received_rset_row_packet\"]=>\n  string(1) \"0\"\n  [\"bytes_received_prepare_response_packet\"]=>\n  string(1) \"0\"\n  [\"bytes_received_change_user_packet\"]=>\n  string(1) \"0\"\n  [\"packets_sent_command\"]=>\n  string(1) \"0\"\n  [\"packets_received_ok\"]=>\n  string(1) \"0\"\n  [\"packets_received_eof\"]=>\n  string(1) \"0\"\n  [\"packets_received_rset_header\"]=>\n  string(1) \"0\"\n  [\"packets_received_rset_field_meta\"]=>\n  string(1) \"0\"\n  [\"packets_received_rset_row\"]=>\n  string(1) \"0\"\n  [\"packets_received_prepare_response\"]=>\n  string(1) \"0\"\n  [\"packets_received_change_user\"]=>\n  string(1) \"0\"\n  [\"result_set_queries\"]=>\n  string(1) \"0\"\n  [\"non_result_set_queries\"]=>\n  string(1) \"0\"\n  [\"no_index_used\"]=>\n  string(1) \"0\"\n  [\"bad_index_used\"]=>\n  string(1) \"0\"\n  [\"slow_queries\"]=>\n  string(1) \"0\"\n  [\"buffered_sets\"]=>\n  string(1) \"0\"\n  [\"unbuffered_sets\"]=>\n  string(1) \"0\"\n  [\"ps_buffered_sets\"]=>\n  string(1) \"0\"\n  [\"ps_unbuffered_sets\"]=>\n  string(1) \"0\"\n  [\"flushed_normal_sets\"]=>\n  string(1) \"0\"\n  [\"flushed_ps_sets\"]=>\n  string(1) \"0\"\n  [\"ps_prepared_never_executed\"]=>\n  string(1) \"0\"\n  [\"ps_prepared_once_executed\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_server_normal\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_server_ps\"]=>\n  string(1) \"0\"\n  [\"rows_buffered_from_client_normal\"]=>\n  string(1) \"0\"\n  [\"rows_buffered_from_client_ps\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_client_normal_buffered\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_client_normal_unbuffered\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_client_ps_buffered\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_client_ps_unbuffered\"]=>\n  string(1) \"0\"\n  [\"rows_fetched_from_client_ps_cursor\"]=>\n  string(1) \"0\"\n  [\"rows_affected_normal\"]=>\n  string(1) \"0\"\n  [\"rows_affected_ps\"]=>\n  string(1) \"0\"\n  [\"rows_skipped_normal\"]=>\n  string(1) \"0\"\n  [\"rows_skipped_ps\"]=>\n  string(1) \"0\"\n  [\"copy_on_write_saved\"]=>\n  string(1) \"0\"\n  [\"copy_on_write_performed\"]=>\n  string(1) \"0\"\n  [\"command_buffer_too_small\"]=>\n  string(1) \"0\"\n  [\"connect_success\"]=>\n  string(1) \"1\"\n  [\"connect_failure\"]=>\n  string(1) \"0\"\n  [\"connection_reused\"]=>\n  string(1) \"0\"\n  [\"reconnect\"]=>\n  string(1) \"0\"\n  [\"pconnect_success\"]=>\n  string(1) \"0\"\n  [\"active_connections\"]=>\n  string(1) \"1\"\n  [\"active_persistent_connections\"]=>\n  string(1) \"0\"\n  [\"explicit_close\"]=>\n  string(1) \"0\"\n  [\"implicit_close\"]=>\n  string(1) \"0\"\n  [\"disconnect_close\"]=>\n  string(1) \"0\"\n  [\"in_middle_of_command_close\"]=>\n  string(1) \"0\"\n  [\"explicit_free_result\"]=>\n  string(1) \"0\"\n  [\"implicit_free_result\"]=>\n  string(1) \"0\"\n  [\"explicit_stmt_close\"]=>\n  string(1) \"0\"\n  [\"implicit_stmt_close\"]=>\n  string(1) \"0\"\n  [\"mem_emalloc_count\"]=>\n  string(1) \"0\"\n  [\"mem_emalloc_amount\"]=>\n  string(1) \"0\"\n  [\"mem_ecalloc_count\"]=>\n  string(1) \"0\"\n  [\"mem_ecalloc_amount\"]=>\n  string(1) \"0\"\n  [\"mem_erealloc_count\"]=>\n  string(1) \"0\"\n  [\"mem_erealloc_amount\"]=>\n  string(1) \"0\"\n  [\"mem_efree_count\"]=>\n  string(1) \"0\"\n  [\"mem_efree_amount\"]=>\n  string(1) \"0\"\n  [\"mem_malloc_count\"]=>\n  string(1) \"0\"\n  [\"mem_malloc_amount\"]=>\n  string(1) \"0\"\n  [\"mem_calloc_count\"]=>\n  string(1) \"0\"\n  [\"mem_calloc_amount\"]=>\n  string(1) \"0\"\n  [\"mem_realloc_count\"]=>\n  string(1) \"0\"\n  [\"mem_realloc_amount\"]=>\n  string(1) \"0\"\n  [\"mem_free_count\"]=>\n  string(1) \"0\"\n  [\"mem_free_amount\"]=>\n  string(1) \"0\"\n  [\"mem_estrndup_count\"]=>\n  string(1) \"0\"\n  [\"mem_strndup_count\"]=>\n  string(1) \"0\"\n  [\"mem_estndup_count\"]=>\n  string(1) \"0\"\n  [\"mem_strdup_count\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_null\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_bit\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_tinyint\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_short\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_int24\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_int\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_bigint\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_decimal\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_float\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_double\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_date\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_year\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_time\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_datetime\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_timestamp\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_string\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_blob\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_enum\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_set\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_geometry\"]=>\n  string(1) \"0\"\n  [\"proto_text_fetched_other\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_null\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_bit\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_tinyint\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_short\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_int24\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_int\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_bigint\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_decimal\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_float\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_double\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_date\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_year\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_time\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_datetime\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_timestamp\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_string\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_blob\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_enum\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_set\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_geometry\"]=>\n  string(1) \"0\"\n  [\"proto_binary_fetched_other\"]=>\n  string(1) \"0\"\n  [\"init_command_executed_count\"]=>\n  string(1) \"0\"\n  [\"init_command_failed_count\"]=>\n  string(1) \"0\"\n  [\"com_quit\"]=>\n  string(1) \"0\"\n  [\"com_init_db\"]=>\n  string(1) \"0\"\n  [\"com_query\"]=>\n  string(1) \"0\"\n  [\"com_field_list\"]=>\n  string(1) \"0\"\n  [\"com_create_db\"]=>\n  string(1) \"0\"\n  [\"com_drop_db\"]=>\n  string(1) \"0\"\n  [\"com_refresh\"]=>\n  string(1) \"0\"\n  [\"com_shutdown\"]=>\n  string(1) \"0\"\n  [\"com_statistics\"]=>\n  string(1) \"0\"\n  [\"com_process_info\"]=>\n  string(1) \"0\"\n  [\"com_connect\"]=>\n  string(1) \"0\"\n  [\"com_process_kill\"]=>\n  string(1) \"0\"\n  [\"com_debug\"]=>\n  string(1) \"0\"\n  [\"com_ping\"]=>\n  string(1) \"0\"\n  [\"com_time\"]=>\n  string(1) \"0\"\n  [\"com_delayed_insert\"]=>\n  string(1) \"0\"\n  [\"com_change_user\"]=>\n  string(1) \"0\"\n  [\"com_binlog_dump\"]=>\n  string(1) \"0\"\n  [\"com_table_dump\"]=>\n  string(1) \"0\"\n  [\"com_connect_out\"]=>\n  string(1) \"0\"\n  [\"com_register_slave\"]=>\n  string(1) \"0\"\n  [\"com_stmt_prepare\"]=>\n  string(1) \"0\"\n  [\"com_stmt_execute\"]=>\n  string(1) \"0\"\n  [\"com_stmt_send_long_data\"]=>\n  string(1) \"0\"\n  [\"com_stmt_close\"]=>\n  string(1) \"0\"\n  [\"com_stmt_reset\"]=>\n  string(1) \"0\"\n  [\"com_stmt_set_option\"]=>\n  string(1) \"0\"\n  [\"com_stmt_fetch\"]=>\n  string(1) \"0\"\n  [\"com_deamon\"]=>\n  string(1) \"0\"\n  [\"bytes_received_real_data_normal\"]=>\n  string(1) \"0\"\n  [\"bytes_received_real_data_ps\"]=>\n  string(1) \"0\"\n}"}],"mysqlnduhconnection::getthreadid":[{"title":"MysqlndUhConnection::getThreadId() example","source":"class proxy extends MysqlndUhConnection {\n public function getThreadId($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getThreadId($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->thread_id);","output":"proxy::getThreadId(array (\n  0 => NULL,\n))\nproxy::getThreadId returns 27646\nint(27646)"}],"mysqlnduhconnection::getwarningcount":[{"title":"MysqlndUhConnection::getWarningCount() example","source":"class proxy extends MysqlndUhConnection {\n public function getWarningCount($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::getWarningCount($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nvar_dump($mysqli->warning_count);","output":"proxy::getWarningCount(array (\n  0 => NULL,\n))\nproxy::getWarningCount returns 0\nint(0)"}],"mysqlnduhconnection::init":[{"title":"MysqlndUhConnection::init() example","source":"class proxy extends MysqlndUhConnection {\n public function init($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::init($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");","output":"proxy::init(array (\n  0 => NULL,\n))\nproxy::init returns true"}],"mysqlnduhconnection::killconnection":[{"title":"MysqlndUhConnection::kill() example","source":"class proxy extends MysqlndUhConnection {\n public function killConnection($res, $pid) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::killConnection($res, $pid);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->kill($mysqli->thread_id);","output":"proxy::killConnection(array (\n  0 => NULL,\n  1 => 27650,\n))\nproxy::killConnection returns true"}],"mysqlnduhconnection::listfields":[{"title":"MysqlndUhConnection::listFields() example","source":"class proxy extends MysqlndUhConnection {\n public function listFields($res, $table, $pattern) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::listFields($res, $table, $pattern);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysql = mysql_connect(\"localhost\", \"root\", \"\");\nmysql_select_db(\"test\", $mysql);\nmysql_query(\"DROP TABLE IF EXISTS test_a\", $mysql);\nmysql_query(\"CREATE TABLE test_a(id INT, col1 VARCHAR(255))\", $mysql);\n$res = mysql_list_fields(\"test\", \"test_a\", $mysql);\nprintf(\"num_rows = %d\\n\", mysql_num_rows($res));\nwhile ($row = mysql_fetch_assoc($res))\n var_dump($row);","output":"proxy::listFields(array (\n  0 => NULL,\n  1 => 'test_a',\n  2 => '',\n))\nproxy::listFields returns NULL\nnum_rows = 0"}],"mysqlnduhconnection::listmethod":[{"title":"MysqlndUhConnection::listMethod() example","source":"class proxy extends MysqlndUhConnection {\n public function listMethod($res, $query, $pattern, $par1) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::listMethod($res, $query, $pattern, $par1);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysql = mysql_connect(\"localhost\", \"root\", \"\");\n$res = mysql_list_dbs($mysql);\nprintf(\"num_rows = %d\\n\", mysql_num_rows($res));\nwhile ($row = mysql_fetch_assoc($res))\n var_dump($row);","output":"proxy::listMethod(array (\n  0 => NULL,\n  1 => 'SHOW DATABASES',\n  2 => '',\n  3 => '',\n))\nproxy::listMethod returns NULL\nnum_rows = 6\narray(1) {\n  [\"Database\"]=>\n  string(18) \"information_schema\"\n}\narray(1) {\n  [\"Database\"]=>\n  string(5) \"mysql\"\n}\narray(1) {\n  [\"Database\"]=>\n  string(8) \"oxid_new\"\n}\narray(1) {\n  [\"Database\"]=>\n  string(7) \"phptest\"\n}\narray(1) {\n  [\"Database\"]=>\n  string(7) \"pushphp\"\n}\narray(1) {\n  [\"Database\"]=>\n  string(4) \"test\"\n}"}],"mysqlnduhconnection::moreresults":[{"title":"MysqlndUhConnection::moreResults() example","source":"class proxy extends MysqlndUhConnection {\n public function moreResults($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::moreResults($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->multi_query(\"SELECT 1 AS _one; SELECT 2 AS _two\");\ndo {\n  $res = $mysqli->store_result();\n  var_dump($res->fetch_assoc());\n  printf(\"%s\\n\", str_repeat(\"-\", 40));\n} while ($mysqli->more_results() && $mysqli->next_result());","output":"array(1) {\n  [\"_one\"]=>\n  string(1) \"1\"\n}\n----------------------------------------\nproxy::moreResults(array (\n  0 => NULL,\n))\nproxy::moreResults returns true\nproxy::moreResults(array (\n  0 => NULL,\n))\nproxy::moreResults returns true\narray(1) {\n  [\"_two\"]=>\n  string(1) \"2\"\n}\n----------------------------------------\nproxy::moreResults(array (\n  0 => NULL,\n))\nproxy::moreResults returns false"}],"mysqlnduhconnection::nextresult":[{"title":"MysqlndUhConnection::nextResult() example","source":"class proxy extends MysqlndUhConnection {\n public function nextResult($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::nextResult($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->multi_query(\"SELECT 1 AS _one; SELECT 2 AS _two\");\ndo {\n  $res = $mysqli->store_result();\n  var_dump($res->fetch_assoc());\n  printf(\"%s\\n\", str_repeat(\"-\", 40));\n} while ($mysqli->more_results() && $mysqli->next_result());","output":"array(1) {\n  [\"_one\"]=>\n  string(1) \"1\"\n}\n----------------------------------------\nproxy::nextResult(array (\n  0 => NULL,\n))\nproxy::nextResult returns true\narray(1) {\n  [\"_two\"]=>\n  string(1) \"2\"\n}\n----------------------------------------"}],"mysqlnduhconnection::ping":[{"title":"MysqlndUhConnection::ping() example","source":"class proxy extends MysqlndUhConnection {\n public function ping($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::ping($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->ping();","output":"proxy::ping(array (\n  0 => NULL,\n))\nproxy::ping returns true"}],"mysqlnduhconnection::query":[{"title":"MysqlndUhConnection::query() example","source":"class proxy extends MysqlndUhConnection {\n public function query($res, $query) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $query = \"SELECT 'How about query rewriting?'\";\n  $ret = parent::query($res, $query);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$res = $mysqli->query(\"SELECT 'Welcome mysqlnd_uh!' FROM DUAL\");\nvar_dump($res->fetch_assoc());","output":"proxy::query(array (\n  0 => NULL,\n  1 => 'SELECT \\'Welcome mysqlnd_uh!\\' FROM DUAL',\n))\nproxy::query returns true\narray(1) {\n  [\"How about query rewriting?\"]=>\n  string(26) \"How about query rewriting?\"\n}"}],"mysqlnduhconnection::queryreadresultsetheader":[{"title":"MysqlndUhConnection::queryReadResultsetHeader() example","source":"class proxy extends MysqlndUhConnection {\n public function queryReadResultsetHeader($res, $stmt) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::queryReadResultsetHeader($res, $stmt);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$res = $mysqli->query(\"SELECT 'Welcome mysqlnd_uh!' FROM DUAL\");\nvar_dump($res->fetch_assoc());","output":"proxy::queryReadResultsetHeader(array (\n  0 => NULL,\n  1 => NULL,\n))\nproxy::queryReadResultsetHeader returns true\narray(1) {\n  [\"Welcome mysqlnd_uh!\"]=>\n  string(19) \"Welcome mysqlnd_uh!\"\n}"}],"mysqlnduhconnection::reapquery":[{"title":"MysqlndUhConnection::reapQuery() example","source":"class proxy extends MysqlndUhConnection {\n public function reapQuery($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::reapQuery($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$conn1 = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$conn2 = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n\n$conn1->query(\"SELECT 1 as 'one', SLEEP(1) AS _sleep FROM DUAL\", MYSQLI_ASYNC |  MYSQLI_USE_RESULT);\n$conn2->query(\"SELECT 1.1 as 'one dot one' FROM DUAL\", MYSQLI_ASYNC |  MYSQLI_USE_RESULT);\n\n$links = array(\n $conn1->thread_id => array('link' => $conn1, 'processed' => false),\n $conn2->thread_id => array('link' => $conn2, 'processed' => false)\n);\n\n$saved_errors = array();\ndo {\n $poll_links = $poll_errors = $poll_reject = array();\n foreach ($links as $thread_id => $link) {\n  if (!$link['processed']) {\n   $poll_links[] = $link['link'];\n   $poll_errors[] = $link['link'];\n   $poll_reject[] = $link['link'];\n  }\n }\n if (0 == count($poll_links))\n  break;\n\n if (0 == ($num_ready = mysqli_poll($poll_links, $poll_errors, $poll_reject, 0, 200000)))\n  continue;\n\n if (!empty($poll_errors)) {\n  die(var_dump($poll_errors));\n }\n\n foreach ($poll_links as $link) {\n  $thread_id = mysqli_thread_id($link);\n  $links[$thread_id]['processed'] = true;\n\n  if (is_object($res = mysqli_reap_async_query($link))) {\n   \/\/ result set object\n   while ($row = mysqli_fetch_assoc($res)) {\n    \/\/ eat up all results\n    var_dump($row);\n   }\n   mysqli_free_result($res);\n  } else {\n   \/\/ either there is no result (no SELECT) or there is an error\n   if (mysqli_errno($link) > 0) {\n    $saved_errors[$thread_id] = mysqli_errno($link);\n    printf(\"'%s' caused %d\\n\", $links[$thread_id]['query'],     mysqli_errno($link));\n   }\n  }\n }\n} while (true);","output":"proxy::reapQuery(array (\n  0 => NULL,\n))\nproxy::reapQuery returns true\narray(1) {\n  [\"one dot one\"]=>\n  string(3) \"1.1\"\n}\nproxy::reapQuery(array (\n  0 => NULL,\n))\nproxy::reapQuery returns true\narray(2) {\n  [\"one\"]=>\n  string(1) \"1\"\n  [\"_sleep\"]=>\n  string(1) \"0\"\n}"}],"mysqlnduhconnection::refreshserver":[{"title":"MysqlndUhConnection::refreshServer() example","source":"class proxy extends MysqlndUhConnection {\n public function refreshServer($res, $option) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::refreshServer($res, $option);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\nmysqli_refresh($mysqli, 1);","output":"proxy::refreshServer(array (\n  0 => NULL,\n  1 => 1,\n))\nproxy::refreshServer returns false"}],"mysqlnduhconnection::restartpsession":[{"title":"MysqlndUhConnection::restartPSession() example","source":"class proxy extends MysqlndUhConnection {\n public function ping($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::ping($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->ping();","output":"proxy::restartPSession(array (\n  0 => NULL,\n))\nproxy::restartPSession returns true"}],"mysqlnduhconnection::selectdb":[{"title":"MysqlndUhConnection::selectDb() example","source":"class proxy extends MysqlndUhConnection {\n public function selectDb($res, $database) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::selectDb($res, $database);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->select_db(\"mysql\");","output":"proxy::selectDb(array (\n  0 => NULL,\n  1 => 'mysql',\n))\nproxy::selectDb returns true"}],"mysqlnduhconnection::sendclose":[{"title":"MysqlndUhConnection::sendClose() example","source":"class proxy extends MysqlndUhConnection {\n public function sendClose($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::sendClose($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->close();","output":"proxy::sendClose(array (\n  0 => NULL,\n))\nproxy::sendClose returns true\nproxy::sendClose(array (\n  0 => NULL,\n))\nproxy::sendClose returns true"}],"mysqlnduhconnection::sendquery":[{"title":"MysqlndUhConnection::sendQuery() example","source":"class proxy extends MysqlndUhConnection {\n public function sendQuery($res, $query) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::sendQuery($res, $query);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->query(\"SELECT 1\");","output":"proxy::sendQuery(array (\n  0 => NULL,\n  1 => 'SELECT 1',\n))\nproxy::sendQuery returns true"}],"mysqlnduhconnection::serverdumpdebuginformation":[{"title":"MysqlndUhConnection::serverDumpDebugInformation() example","source":"class proxy extends MysqlndUhConnection {\n public function serverDumpDebugInformation($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::serverDumpDebugInformation($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->dump_debug_info();","output":"proxy::serverDumpDebugInformation(array (\n  0 => NULL,\n))\nproxy::serverDumpDebugInformation returns true"}],"mysqlnduhconnection::setautocommit":[{"title":"MysqlndUhConnection::setAutocommit() example","source":"class proxy extends MysqlndUhConnection {\n public function setAutocommit($res, $mode) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::setAutocommit($res, $mode);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->autocommit(false);\n$mysqli->autocommit(true);","output":"proxy::setAutocommit(array (\n  0 => NULL,\n  1 => 0,\n))\nproxy::setAutocommit returns true\nproxy::setAutocommit(array (\n  0 => NULL,\n  1 => 1,\n))\nproxy::setAutocommit returns true"}],"mysqlnduhconnection::setcharset":[{"title":"MysqlndUhConnection::setCharset() example","source":"class proxy extends MysqlndUhConnection {\n public function setCharset($res, $charset) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::setCharset($res, $charset);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->set_charset(\"latin1\");","output":"proxy::setCharset(array (\n  0 => NULL,\n  1 => 'latin1',\n))\nproxy::setCharset returns true"}],"mysqlnduhconnection::setclientoption":[{"title":"MysqlndUhConnection::setClientOption() example","source":"function client_option_to_string($option) {\n static $mapping = array(\n  MYSQLND_UH_MYSQLND_OPTION_OPT_CONNECT_TIMEOUT => \"MYSQLND_UH_MYSQLND_OPTION_OPT_CONNECT_TIMEOUT\",\n  MYSQLND_UH_MYSQLND_OPTION_OPT_COMPRESS => \"MYSQLND_UH_MYSQLND_OPTION_OPT_COMPRESS\",\n  MYSQLND_UH_MYSQLND_OPTION_OPT_NAMED_PIPE => \"MYSQLND_UH_MYSQLND_OPTION_OPT_NAMED_PIPE\",\n  MYSQLND_UH_MYSQLND_OPTION_INIT_COMMAND => \"MYSQLND_UH_MYSQLND_OPTION_INIT_COMMAND\",\n  MYSQLND_UH_MYSQLND_READ_DEFAULT_FILE => \"MYSQLND_UH_MYSQLND_READ_DEFAULT_FILE\",\n  MYSQLND_UH_MYSQLND_READ_DEFAULT_GROUP => \"MYSQLND_UH_MYSQLND_READ_DEFAULT_GROUP\",\n  MYSQLND_UH_MYSQLND_SET_CHARSET_DIR => \"MYSQLND_UH_MYSQLND_SET_CHARSET_DIR\",\n  MYSQLND_UH_MYSQLND_SET_CHARSET_NAME => \"MYSQLND_UH_MYSQLND_SET_CHARSET_NAME\",\n  MYSQLND_UH_MYSQLND_OPT_LOCAL_INFILE => \"MYSQLND_UH_MYSQLND_OPT_LOCAL_INFILE\",\n  MYSQLND_UH_MYSQLND_OPT_PROTOCOL => \"MYSQLND_UH_MYSQLND_OPT_PROTOCOL\",\n  MYSQLND_UH_MYSQLND_SHARED_MEMORY_BASE_NAME => \"MYSQLND_UH_MYSQLND_SHARED_MEMORY_BASE_NAME\",\n  MYSQLND_UH_MYSQLND_OPT_READ_TIMEOUT => \"MYSQLND_UH_MYSQLND_OPT_READ_TIMEOUT\",\n  MYSQLND_UH_MYSQLND_OPT_WRITE_TIMEOUT => \"MYSQLND_UH_MYSQLND_OPT_WRITE_TIMEOUT\",\n  MYSQLND_UH_MYSQLND_OPT_USE_RESULT => \"MYSQLND_UH_MYSQLND_OPT_USE_RESULT\",\n  MYSQLND_UH_MYSQLND_OPT_USE_REMOTE_CONNECTION => \"MYSQLND_UH_MYSQLND_OPT_USE_REMOTE_CONNECTION\",\n  MYSQLND_UH_MYSQLND_OPT_USE_EMBEDDED_CONNECTION => \"MYSQLND_UH_MYSQLND_OPT_USE_EMBEDDED_CONNECTION\",\n  MYSQLND_UH_MYSQLND_OPT_GUESS_CONNECTION => \"MYSQLND_UH_MYSQLND_OPT_GUESS_CONNECTION\",\n  MYSQLND_UH_MYSQLND_SET_CLIENT_IP => \"MYSQLND_UH_MYSQLND_SET_CLIENT_IP\",\n  MYSQLND_UH_MYSQLND_SECURE_AUTH => \"MYSQLND_UH_MYSQLND_SECURE_AUTH\",\n  MYSQLND_UH_MYSQLND_REPORT_DATA_TRUNCATION => \"MYSQLND_UH_MYSQLND_REPORT_DATA_TRUNCATION\",\n  MYSQLND_UH_MYSQLND_OPT_RECONNECT => \"MYSQLND_UH_MYSQLND_OPT_RECONNECT\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_VERIFY_SERVER_CERT => \"MYSQLND_UH_MYSQLND_OPT_SSL_VERIFY_SERVER_CERT\",\n  MYSQLND_UH_MYSQLND_OPT_NET_CMD_BUFFER_SIZE => \"MYSQLND_UH_MYSQLND_OPT_NET_CMD_BUFFER_SIZE\",\n  MYSQLND_UH_MYSQLND_OPT_NET_READ_BUFFER_SIZE => \"MYSQLND_UH_MYSQLND_OPT_NET_READ_BUFFER_SIZE\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_KEY => \"MYSQLND_UH_MYSQLND_OPT_SSL_KEY\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_CERT => \"MYSQLND_UH_MYSQLND_OPT_SSL_CERT\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_CA => \"MYSQLND_UH_MYSQLND_OPT_SSL_CA\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_CAPATH => \"MYSQLND_UH_MYSQLND_OPT_SSL_CAPATH\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_CIPHER => \"MYSQLND_UH_MYSQLND_OPT_SSL_CIPHER\",\n  MYSQLND_UH_MYSQLND_OPT_SSL_PASSPHRASE => \"MYSQLND_UH_MYSQLND_OPT_SSL_PASSPHRASE\",\n  MYSQLND_UH_SERVER_OPTION_PLUGIN_DIR => \"MYSQLND_UH_SERVER_OPTION_PLUGIN_DIR\",\n  MYSQLND_UH_SERVER_OPTION_DEFAULT_AUTH => \"MYSQLND_UH_SERVER_OPTION_DEFAULT_AUTH\",\n  MYSQLND_UH_SERVER_OPTION_SET_CLIENT_IP => \"MYSQLND_UH_SERVER_OPTION_SET_CLIENT_IP\"\n );\n if (version_compare(PHP_VERSION, '5.3.99-dev', '>')) {\n  $mapping[MYSQLND_UH_MYSQLND_OPT_MAX_ALLOWED_PACKET] = \"MYSQLND_UH_MYSQLND_OPT_MAX_ALLOWED_PACKET\";\n  $mapping[MYSQLND_UH_MYSQLND_OPT_AUTH_PROTOCOL] = \"MYSQLND_UH_MYSQLND_OPT_AUTH_PROTOCOL\";\n }\n if (defined(\"MYSQLND_UH_MYSQLND_OPT_INT_AND_FLOAT_NATIVE\")) {\n  \/* special mysqlnd build *\/\n  $mapping[\"MYSQLND_UH_MYSQLND_OPT_INT_AND_FLOAT_NATIVE\"] = \"MYSQLND_UH_MYSQLND_OPT_INT_AND_FLOAT_NATIVE\";\n }\n return (isset($mapping[$option])) ? $mapping[$option] : 'unknown';\n}\n\nclass proxy extends MysqlndUhConnection {\n public function setClientOption($res, $option, $value) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  printf(\"Option '%s' set to %s\\n\", client_option_to_string($option), var_export($value, true));\n  $ret = parent::setClientOption($res, $option, $value);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");","output":"proxy::setClientOption(array (\n  0 => NULL,\n  1 => 210,\n  2 => 3221225472,\n))\nOption 'MYSQLND_UH_MYSQLND_OPT_MAX_ALLOWED_PACKET' set to 3221225472\nproxy::setClientOption returns true\nproxy::setClientOption(array (\n  0 => NULL,\n  1 => 211,\n  2 => 'mysql_native_password',\n))\nOption 'MYSQLND_UH_MYSQLND_OPT_AUTH_PROTOCOL' set to 'mysql_native_password'\nproxy::setClientOption returns true\nproxy::setClientOption(array (\n  0 => NULL,\n  1 => 8,\n  2 => 1,\n))\nOption 'MYSQLND_UH_MYSQLND_OPT_LOCAL_INFILE' set to 1\nproxy::setClientOption returns true"}],"mysqlnduhconnection::setserveroption":[{"title":"MysqlndUhConnection::setServerOption() example","source":"function server_option_to_string($option) {\n $ret = 'unknown';\n switch ($option) {\n  case MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_ON:\n   $ret = 'MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_ON';\n   break;\n  case MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_OFF:\n   $ret = 'MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_ON';\n   break;\n }\n return $ret;\n}\n\nclass proxy extends MysqlndUhConnection {\n public function setServerOption($res, $option) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  printf(\"Option '%s' set\\n\", server_option_to_string($option));\n  $ret = parent::setServerOption($res, $option);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->multi_query(\"SELECT 1; SELECT 2\");","output":"proxy::setServerOption(array (\n  0 => NULL,\n  1 => 0,\n))\nOption 'MYSQLND_UH_SERVER_OPTION_MULTI_STATEMENTS_ON' set\nproxy::setServerOption returns true"}],"mysqlnduhconnection::simplecommand":[{"title":"MysqlndUhConnection::simpleCommand() example","source":"function server_cmd_2_string($command) {\n $mapping = array(\n  MYSQLND_UH_MYSQLND_COM_SLEEP => \"MYSQLND_UH_MYSQLND_COM_SLEEP\",\n  MYSQLND_UH_MYSQLND_COM_QUIT => \"MYSQLND_UH_MYSQLND_COM_QUIT\",\n  MYSQLND_UH_MYSQLND_COM_INIT_DB => \"MYSQLND_UH_MYSQLND_COM_INIT_DB\",\n  MYSQLND_UH_MYSQLND_COM_QUERY => \"MYSQLND_UH_MYSQLND_COM_QUERY\",\n  MYSQLND_UH_MYSQLND_COM_FIELD_LIST => \"MYSQLND_UH_MYSQLND_COM_FIELD_LIST\",\n  MYSQLND_UH_MYSQLND_COM_CREATE_DB => \"MYSQLND_UH_MYSQLND_COM_CREATE_DB\",\n  MYSQLND_UH_MYSQLND_COM_DROP_DB => \"MYSQLND_UH_MYSQLND_COM_DROP_DB\",\n  MYSQLND_UH_MYSQLND_COM_REFRESH => \"MYSQLND_UH_MYSQLND_COM_REFRESH\",\n  MYSQLND_UH_MYSQLND_COM_SHUTDOWN => \"MYSQLND_UH_MYSQLND_COM_SHUTDOWN\",\n  MYSQLND_UH_MYSQLND_COM_STATISTICS => \"MYSQLND_UH_MYSQLND_COM_STATISTICS\",\n  MYSQLND_UH_MYSQLND_COM_PROCESS_INFO => \"MYSQLND_UH_MYSQLND_COM_PROCESS_INFO\",\n  MYSQLND_UH_MYSQLND_COM_CONNECT => \"MYSQLND_UH_MYSQLND_COM_CONNECT\",\n  MYSQLND_UH_MYSQLND_COM_PROCESS_KILL => \"MYSQLND_UH_MYSQLND_COM_PROCESS_KILL\",\n  MYSQLND_UH_MYSQLND_COM_DEBUG => \"MYSQLND_UH_MYSQLND_COM_DEBUG\",\n  MYSQLND_UH_MYSQLND_COM_PING => \"MYSQLND_UH_MYSQLND_COM_PING\",\n  MYSQLND_UH_MYSQLND_COM_TIME => \"MYSQLND_UH_MYSQLND_COM_TIME\",\n  MYSQLND_UH_MYSQLND_COM_DELAYED_INSERT => \"MYSQLND_UH_MYSQLND_COM_DELAYED_INSERT\",\n  MYSQLND_UH_MYSQLND_COM_CHANGE_USER => \"MYSQLND_UH_MYSQLND_COM_CHANGE_USER\",\n  MYSQLND_UH_MYSQLND_COM_BINLOG_DUMP => \"MYSQLND_UH_MYSQLND_COM_BINLOG_DUMP\",\n  MYSQLND_UH_MYSQLND_COM_TABLE_DUMP => \"MYSQLND_UH_MYSQLND_COM_TABLE_DUMP\",\n  MYSQLND_UH_MYSQLND_COM_CONNECT_OUT => \"MYSQLND_UH_MYSQLND_COM_CONNECT_OUT\",\n  MYSQLND_UH_MYSQLND_COM_REGISTER_SLAVED => \"MYSQLND_UH_MYSQLND_COM_REGISTER_SLAVED\",\n  MYSQLND_UH_MYSQLND_COM_STMT_PREPARE => \"MYSQLND_UH_MYSQLND_COM_STMT_PREPARE\",\n  MYSQLND_UH_MYSQLND_COM_STMT_EXECUTE => \"MYSQLND_UH_MYSQLND_COM_STMT_EXECUTE\",\n  MYSQLND_UH_MYSQLND_COM_STMT_SEND_LONG_DATA => \"MYSQLND_UH_MYSQLND_COM_STMT_SEND_LONG_DATA\",\n  MYSQLND_UH_MYSQLND_COM_STMT_CLOSE => \"MYSQLND_UH_MYSQLND_COM_STMT_CLOSE\",\n  MYSQLND_UH_MYSQLND_COM_STMT_RESET => \"MYSQLND_UH_MYSQLND_COM_STMT_RESET\",\n  MYSQLND_UH_MYSQLND_COM_SET_OPTION => \"MYSQLND_UH_MYSQLND_COM_SET_OPTION\",\n  MYSQLND_UH_MYSQLND_COM_STMT_FETCH => \"MYSQLND_UH_MYSQLND_COM_STMT_FETCH\",\n  MYSQLND_UH_MYSQLND_COM_DAEMON => \"MYSQLND_UH_MYSQLND_COM_DAEMON\",\n  MYSQLND_UH_MYSQLND_COM_END => \"MYSQLND_UH_MYSQLND_COM_END\",\n );\n return (isset($mapping[$command])) ? $mapping[$command] : 'unknown';\n}\n\nfunction ok_packet_2_string($ok_packet) {\n $mapping = array(\n  MYSQLND_UH_MYSQLND_PROT_GREET_PACKET => \"MYSQLND_UH_MYSQLND_PROT_GREET_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_AUTH_PACKET => \"MYSQLND_UH_MYSQLND_PROT_AUTH_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_OK_PACKET => \"MYSQLND_UH_MYSQLND_PROT_OK_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_EOF_PACKET => \"MYSQLND_UH_MYSQLND_PROT_EOF_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_CMD_PACKET => \"MYSQLND_UH_MYSQLND_PROT_CMD_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_RSET_HEADER_PACKET => \"MYSQLND_UH_MYSQLND_PROT_RSET_HEADER_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_RSET_FLD_PACKET => \"MYSQLND_UH_MYSQLND_PROT_RSET_FLD_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_ROW_PACKET => \"MYSQLND_UH_MYSQLND_PROT_ROW_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_STATS_PACKET => \"MYSQLND_UH_MYSQLND_PROT_STATS_PACKET\",\n  MYSQLND_UH_MYSQLND_PREPARE_RESP_PACKET => \"MYSQLND_UH_MYSQLND_PREPARE_RESP_PACKET\",\n  MYSQLND_UH_MYSQLND_CHG_USER_RESP_PACKET => \"MYSQLND_UH_MYSQLND_CHG_USER_RESP_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_LAST => \"MYSQLND_UH_MYSQLND_PROT_LAST\",\n );\n return (isset($mapping[$ok_packet])) ? $mapping[$ok_packet] : 'unknown';\n}\n\nclass proxy extends MysqlndUhConnection {\n public function simpleCommand($conn, $command, $arg, $ok_packet, $silent, $ignore_upsert_status) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  printf(\"Command '%s'\\n\", server_cmd_2_string($command));\n  printf(\"OK packet '%s'\\n\",  ok_packet_2_string($ok_packet));\n  $ret = parent::simpleCommand($conn, $command, $arg, $ok_packet, $silent, $ignore_upsert_status);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->query(\"SELECT 1\");","output":"proxy::simpleCommand(array (\n  0 => NULL,\n  1 => 3,\n  2 => 'SELECT 1',\n  3 => 13,\n  4 => false,\n  5 => false,\n))\nCommand 'MYSQLND_UH_MYSQLND_COM_QUERY'\nOK packet 'MYSQLND_UH_MYSQLND_PROT_LAST'\nproxy::simpleCommand returns true\n:)proxy::simpleCommand(array (\n  0 => NULL,\n  1 => 1,\n  2 => '',\n  3 => 13,\n  4 => true,\n  5 => true,\n))\nCommand 'MYSQLND_UH_MYSQLND_COM_QUIT'\nOK packet 'MYSQLND_UH_MYSQLND_PROT_LAST'\nproxy::simpleCommand returns true"}],"mysqlnduhconnection::simplecommandhandleresponse":[{"title":"MysqlndUhConnection::simpleCommandHandleResponse() example","source":"function server_cmd_2_string($command) {\n $mapping = array(\n  MYSQLND_UH_MYSQLND_COM_SLEEP => \"MYSQLND_UH_MYSQLND_COM_SLEEP\",\n  MYSQLND_UH_MYSQLND_COM_QUIT => \"MYSQLND_UH_MYSQLND_COM_QUIT\",\n  MYSQLND_UH_MYSQLND_COM_INIT_DB => \"MYSQLND_UH_MYSQLND_COM_INIT_DB\",\n  MYSQLND_UH_MYSQLND_COM_QUERY => \"MYSQLND_UH_MYSQLND_COM_QUERY\",\n  MYSQLND_UH_MYSQLND_COM_FIELD_LIST => \"MYSQLND_UH_MYSQLND_COM_FIELD_LIST\",\n  MYSQLND_UH_MYSQLND_COM_CREATE_DB => \"MYSQLND_UH_MYSQLND_COM_CREATE_DB\",\n  MYSQLND_UH_MYSQLND_COM_DROP_DB => \"MYSQLND_UH_MYSQLND_COM_DROP_DB\",\n  MYSQLND_UH_MYSQLND_COM_REFRESH => \"MYSQLND_UH_MYSQLND_COM_REFRESH\",\n  MYSQLND_UH_MYSQLND_COM_SHUTDOWN => \"MYSQLND_UH_MYSQLND_COM_SHUTDOWN\",\n  MYSQLND_UH_MYSQLND_COM_STATISTICS => \"MYSQLND_UH_MYSQLND_COM_STATISTICS\",\n  MYSQLND_UH_MYSQLND_COM_PROCESS_INFO => \"MYSQLND_UH_MYSQLND_COM_PROCESS_INFO\",\n  MYSQLND_UH_MYSQLND_COM_CONNECT => \"MYSQLND_UH_MYSQLND_COM_CONNECT\",\n  MYSQLND_UH_MYSQLND_COM_PROCESS_KILL => \"MYSQLND_UH_MYSQLND_COM_PROCESS_KILL\",\n  MYSQLND_UH_MYSQLND_COM_DEBUG => \"MYSQLND_UH_MYSQLND_COM_DEBUG\",\n  MYSQLND_UH_MYSQLND_COM_PING => \"MYSQLND_UH_MYSQLND_COM_PING\",\n  MYSQLND_UH_MYSQLND_COM_TIME => \"MYSQLND_UH_MYSQLND_COM_TIME\",\n  MYSQLND_UH_MYSQLND_COM_DELAYED_INSERT => \"MYSQLND_UH_MYSQLND_COM_DELAYED_INSERT\",\n  MYSQLND_UH_MYSQLND_COM_CHANGE_USER => \"MYSQLND_UH_MYSQLND_COM_CHANGE_USER\",\n  MYSQLND_UH_MYSQLND_COM_BINLOG_DUMP => \"MYSQLND_UH_MYSQLND_COM_BINLOG_DUMP\",\n  MYSQLND_UH_MYSQLND_COM_TABLE_DUMP => \"MYSQLND_UH_MYSQLND_COM_TABLE_DUMP\",\n  MYSQLND_UH_MYSQLND_COM_CONNECT_OUT => \"MYSQLND_UH_MYSQLND_COM_CONNECT_OUT\",\n  MYSQLND_UH_MYSQLND_COM_REGISTER_SLAVED => \"MYSQLND_UH_MYSQLND_COM_REGISTER_SLAVED\",\n  MYSQLND_UH_MYSQLND_COM_STMT_PREPARE => \"MYSQLND_UH_MYSQLND_COM_STMT_PREPARE\",\n  MYSQLND_UH_MYSQLND_COM_STMT_EXECUTE => \"MYSQLND_UH_MYSQLND_COM_STMT_EXECUTE\",\n  MYSQLND_UH_MYSQLND_COM_STMT_SEND_LONG_DATA => \"MYSQLND_UH_MYSQLND_COM_STMT_SEND_LONG_DATA\",\n  MYSQLND_UH_MYSQLND_COM_STMT_CLOSE => \"MYSQLND_UH_MYSQLND_COM_STMT_CLOSE\",\n  MYSQLND_UH_MYSQLND_COM_STMT_RESET => \"MYSQLND_UH_MYSQLND_COM_STMT_RESET\",\n  MYSQLND_UH_MYSQLND_COM_SET_OPTION => \"MYSQLND_UH_MYSQLND_COM_SET_OPTION\",\n  MYSQLND_UH_MYSQLND_COM_STMT_FETCH => \"MYSQLND_UH_MYSQLND_COM_STMT_FETCH\",\n  MYSQLND_UH_MYSQLND_COM_DAEMON => \"MYSQLND_UH_MYSQLND_COM_DAEMON\",\n  MYSQLND_UH_MYSQLND_COM_END => \"MYSQLND_UH_MYSQLND_COM_END\",\n );\n return (isset($mapping[$command])) ? $mapping[$command] : 'unknown';\n}\n\nfunction ok_packet_2_string($ok_packet) {\n $mapping = array(\n  MYSQLND_UH_MYSQLND_PROT_GREET_PACKET => \"MYSQLND_UH_MYSQLND_PROT_GREET_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_AUTH_PACKET => \"MYSQLND_UH_MYSQLND_PROT_AUTH_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_OK_PACKET => \"MYSQLND_UH_MYSQLND_PROT_OK_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_EOF_PACKET => \"MYSQLND_UH_MYSQLND_PROT_EOF_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_CMD_PACKET => \"MYSQLND_UH_MYSQLND_PROT_CMD_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_RSET_HEADER_PACKET => \"MYSQLND_UH_MYSQLND_PROT_RSET_HEADER_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_RSET_FLD_PACKET => \"MYSQLND_UH_MYSQLND_PROT_RSET_FLD_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_ROW_PACKET => \"MYSQLND_UH_MYSQLND_PROT_ROW_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_STATS_PACKET => \"MYSQLND_UH_MYSQLND_PROT_STATS_PACKET\",\n  MYSQLND_UH_MYSQLND_PREPARE_RESP_PACKET => \"MYSQLND_UH_MYSQLND_PREPARE_RESP_PACKET\",\n  MYSQLND_UH_MYSQLND_CHG_USER_RESP_PACKET => \"MYSQLND_UH_MYSQLND_CHG_USER_RESP_PACKET\",\n  MYSQLND_UH_MYSQLND_PROT_LAST => \"MYSQLND_UH_MYSQLND_PROT_LAST\",\n );\n return (isset($mapping[$ok_packet])) ? $mapping[$ok_packet] : 'unknown';\n}\n\nclass proxy extends MysqlndUhConnection {\n public function simpleCommandHandleResponse($conn, $ok_packet, $silent, $command, $ignore_upsert_status) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  printf(\"Command '%s'\\n\", server_cmd_2_string($command));\n  printf(\"OK packet '%s'\\n\",  ok_packet_2_string($ok_packet));\n  $ret = parent::simpleCommandHandleResponse($conn, $ok_packet, $silent, $command, $ignore_upsert_status);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysql = mysql_connect(\"localhost\", \"root\", \"\");\nmysql_query(\"SELECT 1 FROM DUAL\", $mysql);","output":"proxy::simpleCommandHandleResponse(array (\n  0 => NULL,\n  1 => 5,\n  2 => false,\n  3 => 27,\n  4 => true,\n))\nCommand 'MYSQLND_UH_MYSQLND_COM_SET_OPTION'\nOK packet 'MYSQLND_UH_MYSQLND_PROT_EOF_PACKET'\nproxy::simpleCommandHandleResponse returns true"}],"mysqlnduhconnection::sslset":[{"title":"MysqlndUhConnection::sslSet() example","source":"class proxy extends MysqlndUhConnection {\n public function sslSet($conn, $key, $cert, $ca, $capath, $cipher) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::sslSet($conn, $key, $cert, $ca, $capath, $cipher);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->ssl_set(\"key\", \"cert\", \"ca\", \"capath\", \"cipher\");","output":"proxy::sslSet(array (\n  0 => NULL,\n  1 => 'key',\n  2 => 'cert',\n  3 => 'ca',\n  4 => 'capath',\n  5 => 'cipher',\n))\nproxy::sslSet returns true"}],"mysqlnduhconnection::stmtinit":[{"title":"MysqlndUhConnection::stmtInit() example","source":"class proxy extends MysqlndUhConnection {\n public function stmtInit($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  var_dump($res);\n  $ret = parent::stmtInit($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  var_dump($ret);\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$stmt = $mysqli->prepare(\"SELECT 1 AS _one FROM DUAL\");\n$stmt->execute();\n$one = NULL;\n$stmt->bind_result($one);\n$stmt->fetch();\nvar_dump($one);","output":"proxy::stmtInit(array (\n  0 => NULL,\n))\nresource(19) of type (Mysqlnd Connection)\nproxy::stmtInit returns NULL\nresource(246) of type (Mysqlnd Prepared Statement (internal only - you must not modify it!))\nint(1)"}],"mysqlnduhconnection::storeresult":[{"title":"MysqlndUhConnection::storeResult() example","source":"class proxy extends MysqlndUhConnection {\n public function storeResult($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::storeResult($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  var_dump($ret);\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$res = $mysqli->query(\"SELECT 'Also called buffered result' AS _msg FROM DUAL\");\nvar_dump($res->fetch_assoc());\n\n$mysqli->real_query(\"SELECT 'Good morning!' AS _msg FROM DUAL\");\n$res = $mysqli->store_result();\nvar_dump($res->fetch_assoc());","output":"proxy::storeResult(array (\n  0 => NULL,\n))\nproxy::storeResult returns NULL\nresource(475) of type (Mysqlnd Resultset (internal only - you must not modify it!))\narray(1) {\n  [\"_msg\"]=>\n  string(27) \"Also called buffered result\"\n}\nproxy::storeResult(array (\n  0 => NULL,\n))\nproxy::storeResult returns NULL\nresource(730) of type (Mysqlnd Resultset (internal only - you must not modify it!))\narray(1) {\n  [\"_msg\"]=>\n  string(13) \"Good morning!\"\n}"}],"mysqlnduhconnection::txcommit":[{"title":"MysqlndUhConnection::txCommit() example","source":"class proxy extends MysqlndUhConnection {\n public function txCommit($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::txCommit($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->commit();","output":"proxy::txCommit(array (\n  0 => NULL,\n))\nproxy::txCommit returns true"}],"mysqlnduhconnection::txrollback":[{"title":"MysqlndUhConnection::txRollback() example","source":"class proxy extends MysqlndUhConnection {\n public function txRollback($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::txRollback($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->rollback();","output":"proxy::txRollback(array (\n  0 => NULL,\n))\nproxy::txRollback returns true"}],"mysqlnduhconnection::useresult":[{"title":"MysqlndUhConnection::useResult() example","source":"class proxy extends MysqlndUhConnection {\n public function useResult($res) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $ret = parent::useResult($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  var_dump($ret);\n  return $ret;\n }\n}\nmysqlnd_uh_set_connection_proxy(new proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$mysqli->real_query(\"SELECT 'Good morning!' AS _msg FROM DUAL\");\n$res = $mysqli->use_result();\nvar_dump($res->fetch_assoc());","output":"proxy::useResult(array (\n  0 => NULL,\n))\nproxy::useResult returns NULL\nresource(425) of type (Mysqlnd Resultset (internal only - you must not modify it!))\narray(1) {\n  [\"_msg\"]=>\n  string(13) \"Good morning!\"\n}"}],"mysqlnduhpreparedstatement::execute":[{"title":"MysqlndUhPreparedStatement::execute() example","source":"class stmt_proxy extends MysqlndUhPreparedStatement {\n public function execute($res) {\n  printf(\"%s(\", __METHOD__);\n  var_dump($res);\n  printf(\")\\n\");\n  $ret = parent::execute($res);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  var_dump($ret);\n  return $ret;\n }\n}\nmysqlnd_uh_set_statement_proxy(new stmt_proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$stmt = $mysqli->prepare(\"SELECT 'Labskaus' AS _msg FROM DUAL\");\n$stmt->execute();\n$msg = NULL;\n$stmt->bind_result($msg);\n$stmt->fetch();\nvar_dump($msg);","output":"stmt_proxy::execute(resource(256) of type (Mysqlnd Prepared Statement (internal only - you must not modify it!))\n)\nstmt_proxy::execute returns true\nbool(true)\nstring(8) \"Labskaus\""}],"mysqlnduhpreparedstatement::prepare":[{"title":"MysqlndUhPreparedStatement::prepare() example","source":"class stmt_proxy extends MysqlndUhPreparedStatement {\n public function prepare($res, $query) {\n  printf(\"%s(%s)\\n\", __METHOD__, var_export(func_get_args(), true));\n  $query = \"SELECT 'No more you-know-what-I-mean for lunch, please' AS _msg FROM DUAL\";\n  $ret = parent::prepare($res, $query);\n  printf(\"%s returns %s\\n\", __METHOD__, var_export($ret, true));\n  var_dump($ret);\n  return $ret;\n }\n}\nmysqlnd_uh_set_statement_proxy(new stmt_proxy());\n\n$mysqli = new mysqli(\"localhost\", \"root\", \"\", \"test\");\n$stmt = $mysqli->prepare(\"SELECT 'Labskaus' AS _msg FROM DUAL\");\n$stmt->execute();\n$msg = NULL;\n$stmt->bind_result($msg);\n$stmt->fetch();\nvar_dump($msg);","output":"stmt_proxy::prepare(array (\n  0 => NULL,\n  1 => 'SELECT \\'Labskaus\\' AS _msg FROM DUAL',\n))\nstmt_proxy::prepare returns true\nbool(true)\nstring(46) \"No more you-know-what-I-mean for lunch, please\""}],"norewinditerator::__construct":[{"title":"NoRewindIterator::__construct() example","source":"$fruit = array('apple', 'banana', 'cranberry');\n\n$arr = new ArrayObject($fruit);\n$it  = new NoRewindIterator($arr->getIterator());\n\necho \"Fruit A:\\n\";\nforeach( $it as $item ) {\n    echo $item . \"\\n\";\n}\n\necho \"Fruit B:\\n\";\nforeach( $it as $item ) {\n    echo $item . \"\\n\";\n}","output":"Fruit A:\napple\nbanana\ncranberry\nFruit B:"}],"norewinditerator::rewind":[{"title":"NoRewindIterator::rewind() example","source":"$fruits = array(\"lemon\", \"orange\", \"apple\", \"pear\");\n\n$noRewindIterator = new NoRewindIterator(new ArrayIterator($fruits));\n\necho $noRewindIterator->current() . \"\\n\";\n$noRewindIterator->next();\n\/\/ now rewind the iterator (nothing should happen)\n$noRewindIterator->rewind();\necho $noRewindIterator->current() . \"\\n\";","output":"lemon\norange"}],"normalizer::isnormalized":[{"title":"normalizer_is_normalized() example","source":"$char_A_ring = \"\\xC3\\x85\"; \/\/ 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above = \"\\xCC\\x8A\";  \/\/ 'COMBINING RING ABOVE' (U+030A)\n \n$char_orig = 'A' . $char_combining_ring_above;\n$char_norm = normalizer_normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );\n \necho ( normalizer_is_normalized($char_orig, Normalizer::FORM_C) ) ? \"normalized\" : \"not normalized\";\necho '; ';\necho ( normalizer_is_normalized($char_norm, Normalizer::FORM_C) ) ? \"normalized\" : \"not normalized\";","output":null},{"title":"OO example","source":"$char_A_ring = \"\\xC3\\x85\"; \/\/ 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above = \"\\xCC\\x8A\";  \/\/ 'COMBINING RING ABOVE' (U+030A)\n \n$char_orig = 'A' . $char_combining_ring_above;\n$char_norm = Normalizer::normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );\n \necho ( Normalizer::isNormalized($char_orig, Normalizer::FORM_C) ) ? \"normalized\" : \"not normalized\";\necho '; ';\necho ( Normalizer::isNormalized($char_norm, Normalizer::FORM_C) ) ? \"normalized\" : \"not normalized\";","output":null}],"normalizer::normalize":[{"title":"normalizer_normalize() example","source":"$char_A_ring = \"\\xC3\\x85\"; \/\/ 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above = \"\\xCC\\x8A\";  \/\/ 'COMBINING RING ABOVE' (U+030A)\n \n$char_1 = normalizer_normalize( $char_A_ring, Normalizer::FORM_C );\n$char_2 = normalizer_normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );\n \necho urlencode($char_1);\necho ' ';\necho urlencode($char_2);","output":null},{"title":"OO example","source":"$char_A_ring = \"\\xC3\\x85\"; \/\/ 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)\n$char_combining_ring_above = \"\\xCC\\x8A\";  \/\/ 'COMBINING RING ABOVE' (U+030A)\n \n$char_1 = Normalizer::normalize( $char_A_ring, Normalizer::FORM_C );\n$char_2 = Normalizer::normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );\n \necho urlencode($char_1);\necho ' ';\necho urlencode($char_2);","output":null}],"numberformatter::create":[{"title":"numfmt_create() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\n$fmt = numfmt_create( 'it', NumberFormatter::SPELLOUT );\necho numfmt_format($fmt, 1142).\"\\n\";","output":null},{"title":"NumberFormatter::create() example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt = new NumberFormatter( 'it', NumberFormatter::SPELLOUT );\necho $fmt->format(1142).\"\\n\";","output":null}],"numberformatter::format":[{"title":"numfmt_format() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\n$data = numfmt_format($fmt, 1234567.891234567890000);\nif(intl_is_failure(numfmt_format($fmt))) {\n    report_error(\"Formatter error\");\n}","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\n$fmt->format(1234567.891234567890000);\nif(intl_is_failure($fmt->getErrorCode())) {\n    report_error(\"Formatter error\");\n}","output":null}],"numberformatter::formatcurrency":[{"title":"numfmt_format_currency() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::CURRENCY );\necho numfmt_format_currency($fmt, 1234567.891234567890000, \"EUR\").\"\\n\";\necho numfmt_format_currency($fmt, 1234567.891234567890000, \"RUR\").\"\\n\";\n$fmt = numfmt_create( 'ru_RU', NumberFormatter::CURRENCY );\necho numfmt_format_currency($fmt, 1234567.891234567890000, \"EUR\").\"\\n\";\necho numfmt_format_currency($fmt, 1234567.891234567890000, \"RUR\").\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::CURRENCY );\necho $fmt->formatCurrency(1234567.891234567890000, \"EUR\").\"\\n\";\necho $fmt->formatCurrency(1234567.891234567890000, \"RUR\").\"\\n\";\n$fmt = new NumberFormatter( 'ru_RU', NumberFormatter::CURRENCY );\necho $fmt->formatCurrency(1234567.891234567890000, \"EUR\").\"\\n\";\necho $fmt->formatCurrency(1234567.891234567890000, \"RUR\").\"\\n\";","output":null}],"numberformatter::getattribute":[{"title":"numfmt_get_attribute() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Digits: \".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\nnumfmt_set_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS, 2);\necho \"Digits: \".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Digits: \".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt->setAttribute(NumberFormatter::MAX_FRACTION_DIGITS, 2);\necho \"Digits: \".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::geterrorcode":[{"title":"numfmt_get_error_code() example","source":"$fmt  = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\n$data = numfmt_format($fmt, 1234567.891234567890000);\nif(intl_is_failure(numfmt_get_error_code($fmt))) {\n    report_error(\"Formatter error\");\n}","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\n$fmt->format(1234567.891234567890000);\nif(intl_is_failure($fmt->getErrorCode())) {\n    report_error(\"Formatter error\");\n}","output":null}],"numberformatter::geterrormessage":[{"title":"numfmt_get_error_message() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\n$data = numfmt_format($fmt, 1234567.891234567890000);\nvar_dump(numfmt_get_error_message($fmt));","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\n$fmt->format(1234567.891234567890000);\nvar_dump(numfmt_get_error_message($fmt));","output":null}],"numberformatter::getlocale":[{"title":"numfmt_get_locale() example","source":"$req     = 'fr_FR_PARIS';\n$fmt     = numfmt_create( $req,  NumberFormatter::DECIMAL);\n$res_val = numfmt_get_locale( $fmt, Locale::VALID_LOCALE );\n$res_act = numfmt_get_locale( $fmt, Locale::ACTUAL_LOCALE );\nprintf( \"Requested locale name: %s\\nValid locale name: %s\\nActual locale name: %s\\n\",\n         $req, $res_val, $res_act );","output":"Requested locale name: fr_FR_PARIS\nValid locale name: fr_FR\nActual locale name: fr"}],"numberformatter::getpattern":[{"title":"numfmt_get_pattern() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Pattern: \".numfmt_get_pattern($fmt).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\nnumfmt_set_pattern($fmt, \"#0.# kg\");\necho \"Pattern: \".numfmt_get_pattern($fmt).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Pattern: \".$fmt->getPattern().\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt->setPattern(\"#0.# kg\");\necho \"Pattern: \".$fmt->getPattern().\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::getsymbol":[{"title":"numfmt_get_symbol() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Sep: \".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\nnumfmt_set_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL, \"*\");\necho \"Sep: \".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Sep: \".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt->setSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL, \"*\");\necho \"Sep: \".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::gettextattribute":[{"title":"numfmt_get_text_attribute() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Prefix: \".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho numfmt_format($fmt, -1234567.891234567890000).\"\\n\";\nnumfmt_set_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX, \"MINUS\");\necho \"Prefix: \".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho numfmt_format($fmt, -1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Prefix: \".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho $fmt->format(-1234567.891234567890000).\"\\n\";\n$fmt->setTextAttribute(NumberFormatter::NEGATIVE_PREFIX, \"MINUS\");\necho \"Prefix: \".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho $fmt->format(-1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::parse":[{"title":"numfmt_parse() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\n$num = \"1.234.567,891\";\necho numfmt_parse($fmt, $num).\"\\n\";\necho numfmt_parse($fmt, $num, NumberFormatter::TYPE_INT32).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\n$num = \"1.234.567,891\";\necho $fmt->parse($num).\"\\n\";\necho $fmt->parse($num, NumberFormatter::TYPE_INT32).\"\\n\";","output":null}],"numberformatter::parsecurrency":[{"title":"numfmt_parse_currency() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::CURRENCY );\n$num = \"1.234.567,89\\xc2\\xa0$\";\necho \"We have \".numfmt_parse_currency($fmt, $num, $curr).\" in $curr\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::CURRENCY );\n$num = \"1.234.567,89\\xc2\\xa0$\";\necho \"We have \".$fmt->parseCurrency($num, $curr).\" in $curr\\n\";","output":null}],"numberformatter::setattribute":[{"title":"numfmt_set_attribute() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Digits: \".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\nnumfmt_set_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS, 2);\necho \"Digits: \".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Digits: \".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt->setAttribute(NumberFormatter::MAX_FRACTION_DIGITS, 2);\necho \"Digits: \".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::setpattern":[{"title":"numfmt_set_pattern() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Pattern: \".numfmt_get_pattern($fmt).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\nnumfmt_set_pattern($fmt, \"#0.# kg\");\necho \"Pattern: \".numfmt_get_pattern($fmt).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Pattern: \".$fmt->getPattern().\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt->setPattern(\"#0.# kg\");\necho \"Pattern: \".$fmt->getPattern().\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::setsymbol":[{"title":"numfmt_set_symbol() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Sep: \".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";\nnumfmt_set_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL, \"*\");\necho \"Sep: \".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho numfmt_format($fmt, 1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Sep: \".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";\n$fmt->setSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL, \"*\");\necho \"Sep: \".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL).\"\\n\";\necho $fmt->format(1234567.891234567890000).\"\\n\";","output":null}],"numberformatter::settextattribute":[{"title":"numfmt_set_text_attribute() example","source":"$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );\necho \"Prefix: \".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho numfmt_format($fmt, -1234567.891234567890000).\"\\n\";\nnumfmt_set_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX, \"MINUS\");\necho \"Prefix: \".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho numfmt_format($fmt, -1234567.891234567890000).\"\\n\";","output":null},{"title":"OO example","source":"$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );\necho \"Prefix: \".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho $fmt->format(-1234567.891234567890000).\"\\n\";\n$fmt->setTextAttribute(NumberFormatter::NEGATIVE_PREFIX, \"MINUS\");\necho \"Prefix: \".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX).\"\\n\";\necho $fmt->format(-1234567.891234567890000).\"\\n\";","output":null}],"oauth::fetch":[{"title":"OAuth::fetch() example","source":"try {\n    $oauth = new OAuth(\"consumer_key\",\"consumer_secret\",OAUTH_SIG_METHOD_HMACSHA1,OAUTH_AUTH_TYPE_AUTHORIZATION);\n    $oauth->setToken(\"access_token\",\"access_token_secret\");\n\n    $oauth->fetch(\"http:\/\/photos.example.net\/photo?file=vacation.jpg\");\n\n    $response_info = $oauth->getLastResponseInfo();\n    header(\"Content-Type: {$response_info[\"content_type\"]}\");\n    echo $oauth->getLastResponse();\n} catch(OAuthException $E) {\n    echo \"Exception caught!\\n\";\n    echo \"Response: \". $E->lastResponse . \"\\n\";\n}","output":null}],"oauth::getaccesstoken":[{"title":"OAuth::getAccessToken() example","source":"try {\n    $oauth = new OAuth(OAUTH_CONSUMER_KEY,OAUTH_CONSUMER_SECRET);\n    $oauth->setToken($request_token,$request_token_secret);\n    $access_token_info = $oauth->getAccessToken(\"https:\/\/example.com\/oauth\/access_token\");\n    if(!empty($access_token_info)) {\n        print_r($access_token_info);\n    } else {\n        print \"Failed fetching access token, response was: \" . $oauth->getLastResponse();\n    }\n} catch(OAuthException $E) {\n    echo \"Response: \". $E->lastResponse . \"\\n\";\n}","output":"Array\n(\n    [oauth_token] => some_token\n    [oauth_token_secret] => some_token_secret\n)"}],"oauth::getrequesttoken":[{"title":"OAuth::getRequestToken() example","source":"try {\n    $oauth = new OAuth(OAUTH_CONSUMER_KEY,OAUTH_CONSUMER_SECRET);\n    $request_token_info = $oauth->getRequestToken(\"https:\/\/example.com\/oauth\/request_token\");\n    if(!empty($request_token_info)) {\n        print_r($request_token_info);\n    } else {\n        print \"Failed fetching request token, response was: \" . $oauth->getLastResponse();\n    }\n} catch(OAuthException $E) {\n    echo \"Response: \". $E->lastResponse . \"\\n\";\n}","output":"Array\n(\n    [oauth_token] => some_token\n    [oauth_token_secret] => some_token_secret\n)"}],"oauth::setrequestengine":[{"title":"OAuth::setRequestEngine() example","source":"$consumer = new OAuth();\n\n$consumer->setRequestEngine(OAUTH_REQENGINE_STREAMS);","output":null}],"oauth::setrsacertificate":[{"title":"An OAuth::setRsaCertificate() example","source":"$consume = new OAuth('1234', '', OAUTH_SIG_METHOD_RSASHA1);\n\n$consume->setRSACertificate(file_get_contents('test.pem'));","output":null}],"oauth::settoken":[{"title":"OAuth::setToken() example","source":"$oauth = new OAuth(OAUTH_CONSUMER_KEY,OAUTH_CONSUMER_SECRET);\n$oauth->setToken(\"token\",\"token-secret\");","output":null}],"oauthprovider::__construct":[{"title":"OAuthProvider::__construct() example","source":"try {\n\n    $op = new OAuthProvider();\n\n    \/\/ Uses user-defined callback functions\n    $op->consumerHandler(array($this, 'lookupConsumer'));\n    $op->timestampNonceHandler(array($this, 'timestampNonceChecker'));\n    $op->tokenHandler(array($this, 'myTokenHandler'));\n\n    \/\/ Ignore the foo_uri parameter\n    $op->setParam('foo_uri', NULL);\n\n    \/\/ No token needed for this end point\n    $op->setRequestTokenPath('\/v1\/oauth\/request_token');\n\n    $op->checkOAuthRequest();\n\n} catch (OAuthException $e) {\n\n    echo OAuthProvider::reportProblem($e);\n}","output":null}],"oauthprovider::consumerhandler":[{"title":"Example OAuthProvider::consumerHandler() callback","source":"function lookupConsumer($provider) {\n\n    if ($provider->consumer_key === 'unknown') {\n        return OAUTH_CONSUMER_KEY_UNKNOWN;\n    } else if($provider->consumer_key == 'blacklisted' || $provider->consumer_key === 'throttled') {\n        return OAUTH_CONSUMER_KEY_REFUSED;\n    }\n\n    $provider->consumer_secret = \"the_consumers_secret\";\n\n    return OAUTH_OK;\n}","output":null}],"oauthprovider::generatetoken":[{"title":"OAuthProvider::generateToken() example","source":"$p = new OAuthProvider();\n\n$t = $p->generateToken(4);\n\necho strlen($t),  PHP_EOL;\necho bin2hex($t), PHP_EOL;","output":"4\nb6a82c27"}],"oauthprovider::is2leggedendpoint":[{"title":"OAuthProvider::is2LeggedEndpoint() example","source":"$provider = new OAuthProvider();\n\n$provider->is2LeggedEndpoint(true);","output":null}],"oauthprovider::timestampnoncehandler":[{"title":"Example OAuthProvider::timestampNonceHandler() callback","source":"function timestampNonceChecker($provider) {\n\n    if ($provider->nonce === 'bad') {\n        return OAUTH_BAD_NONCE;\n    } elseif ($provider->timestamp == '0') {\n        return OAUTH_BAD_TIMESTAMP;\n    }\n    \n    return OAUTH_OK;\n}","output":null}],"oauthprovider::tokenhandler":[{"title":"Example OAuthProvider::tokenHandler() callback","source":"function tokenHandler($provider) {\n    \n    if ($provider->token === 'rejected') {\n        return OAUTH_TOKEN_REJECTED;\n    } elseif ($provider->token === 'revoked') {\n        return OAUTH_TOKEN_REVOKED;\n    }\n\n    $provider->token_secret = \"the_tokens_secret\";\n    return OAUTH_OK;\n}","output":null}],"pdo::begintransaction":[{"title":"Roll back a transaction","source":"\/* Begin a transaction, turning off autocommit *\/\n$dbh->beginTransaction();\n\n\/* Change the database schema and data *\/\n$sth = $dbh->exec(\"DROP TABLE fruit\");\n$sth = $dbh->exec(\"UPDATE dessert\n    SET name = 'hamburger'\");\n\n\/* Recognize mistake and roll back changes *\/\n$dbh->rollBack();\n\n\/* Database connection is now back in autocommit mode *\/","output":null}],"pdo::commit":[{"title":"Committing a basic transaction","source":"\/* Begin a transaction, turning off autocommit *\/\n$dbh->beginTransaction();\n\n\/* Insert multiple records on an all-or-nothing basis *\/\n$sql = 'INSERT INTO fruit\n    (name, colour, calories)\n    VALUES (?, ?, ?)';\n\n$sth = $dbh->prepare($sql);\n\nforeach ($fruits as $fruit) {\n    $sth->execute(array(\n        $fruit->name,\n        $fruit->colour,\n        $fruit->calories,\n    ));\n}\n\n\/* Commit the changes *\/\n$dbh->commit();\n\n\/* Database connection is now back in autocommit mode *\/","output":null},{"title":"Committing a DDL transaction","source":"\/* Begin a transaction, turning off autocommit *\/\n$dbh->beginTransaction();\n\n\/* Change the database schema *\/\n$sth = $dbh->exec(\"DROP TABLE fruit\");\n\n\/* Commit the changes *\/\n$dbh->commit();\n\n\/* Database connection is now back in autocommit mode *\/","output":null}],"pdo::cubrid_schema":[{"title":"A PDO::cubrid_schema() example","source":"$pk_list = $dbh->cubrid_schema(PDO::CUBRID_SCH_PRIMARY_KEY, \"game\");\nprint_r($pk_list);\n\n$fk_list = $dbh->cubrid_schema(PDO::CUBRID_SCH_IMPORTED_KEYS, \"game\");\nprint_r($fk_list);","output":"Result:\nArray\n(\n    [0] => Array\n        (\n            [CLASS_NAME] => game\n            [ATTR_NAME] => athlete_code\n            [KEY_SEQ] => 3\n            [KEY_NAME] => pk_game_host_year_event_code_athlete_code\n        )\n\n    [1] => Array\n        (\n            [CLASS_NAME] => game\n            [ATTR_NAME] => event_code\n            [KEY_SEQ] => 2\n            [KEY_NAME] => pk_game_host_year_event_code_athlete_code\n        )\n\n    [2] => Array\n        (\n            [CLASS_NAME] => game\n            [ATTR_NAME] => host_year\n            [KEY_SEQ] => 1\n            [KEY_NAME] => pk_game_host_year_event_code_athlete_code\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n            [PKTABLE_NAME] => athlete\n            [PKCOLUMN_NAME] => code\n            [FKTABLE_NAME] => game\n            [FKCOLUMN_NAME] => athlete_code\n            [KEY_SEQ] => 1\n            [UPDATE_RULE] => 1\n            [DELETE_RULE] => 1\n            [FK_NAME] => fk_game_athlete_code\n            [PK_NAME] => pk_athlete_code\n        )\n\n    [1] => Array\n        (\n            [PKTABLE_NAME] => event\n            [PKCOLUMN_NAME] => code\n            [FKTABLE_NAME] => game\n            [FKCOLUMN_NAME] => event_code\n            [KEY_SEQ] => 1\n            [UPDATE_RULE] => 1\n            [DELETE_RULE] => 1\n            [FK_NAME] => fk_game_event_code\n            [PK_NAME] => pk_event_code\n        )\n\n)"}],"pdo::errorcode":[{"title":"Retrieving an SQLSTATE code","source":"\/* Provoke an error -- the BONES table does not exist *\/\n$dbh->exec(\"INSERT INTO bones(skull) VALUES ('lucy')\");\n\necho \"\\nPDO::errorCode(): \", $dbh->errorCode();","output":"PDO::errorCode(): 42S02"}],"pdo::errorinfo":[{"title":"Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database","source":"\/* Provoke an error -- bogus SQL syntax *\/\n$stmt = $dbh->prepare('bogus sql');\nif (!$stmt) {\n    echo \"\\nPDO::errorInfo():\\n\";\n    print_r($dbh->errorInfo());\n}","output":"PDO::errorInfo():\nArray\n(\n    [0] => HY000\n    [1] => 1\n    [2] => near \"bogus\": syntax error\n)"}],"pdo::exec":[{"title":"Issuing a DELETE statement","source":"$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');\n\n\/* Delete all rows from the FRUIT table *\/\n$count = $dbh->exec(\"DELETE FROM fruit WHERE colour = 'red'\");\n\n\/* Return number of rows that were deleted *\/\nprint(\"Deleted $count rows.\\n\");","output":"Deleted 1 rows."}],"pdo::getattribute":[{"title":"Retrieving database connection attributes","source":"$conn = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');\n$attributes = array(\n    \"AUTOCOMMIT\", \"ERRMODE\", \"CASE\", \"CLIENT_VERSION\", \"CONNECTION_STATUS\",\n    \"ORACLE_NULLS\", \"PERSISTENT\", \"PREFETCH\", \"SERVER_INFO\", \"SERVER_VERSION\",\n    \"TIMEOUT\"\n);\n\nforeach ($attributes as $val) {\n    echo \"PDO::ATTR_$val: \";\n    echo $conn->getAttribute(constant(\"PDO::ATTR_$val\")) . \"\\n\";\n}","output":null}],"pdo::getavailabledrivers":[{"title":"A PDO::getAvailableDrivers() example","source":"print_r(PDO::getAvailableDrivers());","output":"Array\n(\n    [0] => mysql\n    [1] => sqlite\n)"}],"pdo::pgsqllobcreate":[{"title":"A PDO::pgsqlLOBCreate() example","source":"$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->beginTransaction();\n$oid = $db->pgsqlLOBCreate();\n$stream = $db->pgsqlLOBOpen($oid, 'w');\n$local = fopen($filename, 'rb');\nstream_copy_to_stream($local, $stream);\n$local = null;\n$stream = null;\n$stmt = $db->prepare(\"INSERT INTO BLOBS (ident, oid) VALUES (?, ?)\");\n$stmt->execute(array($some_id, $oid));\n$db->commit();","output":null}],"pdo::pgsqllobopen":[{"title":"A PDO::pgsqlLOBOpen() example","source":"$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->beginTransaction();\n$stmt = $db->prepare(\"select oid from BLOBS where ident = ?\");\n$stmt->execute(array($some_id));\n$stmt->bindColumn('oid', $oid, PDO::PARAM_STR);\n$stmt->fetch(PDO::FETCH_BOUND);\n$stream = $db->pgsqlLOBOpen($oid, 'r');\nheader(\"Content-type: application\/octet-stream\");\nfpassthru($stream);","output":null}],"pdo::pgsqllobunlink":[{"title":"A PDO::pgsqlLOBUnlink() example","source":"$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);\n$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n$db->beginTransaction();\n$db->pgsqlLOBUnlink($oid);\n$stmt = $db->prepare(\"DELETE FROM BLOBS where ident = ?\");\n$stmt->execute(array($some_id));\n$db->commit();","output":null}],"pdo::prepare":[{"title":"Prepare an SQL statement with named parameters","source":"\/* Execute a prepared statement by passing an array of values *\/\n$sql = 'SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour';\n$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));\n$sth->execute(array(':calories' => 150, ':colour' => 'red'));\n$red = $sth->fetchAll();\n$sth->execute(array(':calories' => 175, ':colour' => 'yellow'));\n$yellow = $sth->fetchAll();","output":null},{"title":"Prepare an SQL statement with question mark parameters","source":"\/* Execute a prepared statement by passing an array of values *\/\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->execute(array(150, 'red'));\n$red = $sth->fetchAll();\n$sth->execute(array(175, 'yellow'));\n$yellow = $sth->fetchAll();","output":null}],"pdo::quote":[{"title":"Quoting a normal string","source":"$conn = new PDO('sqlite:\/home\/lynn\/music.sql3');\n\n\/* Simple string *\/\n$string = 'Nice';\nprint \"Unquoted string: $string\\n\";\nprint \"Quoted string: \" . $conn->quote($string) . \"\\n\";","output":"Unquoted string: Nice\nQuoted string: 'Nice'"},{"title":"Quoting a dangerous string","source":"$conn = new PDO('sqlite:\/home\/lynn\/music.sql3');\n\n\/* Dangerous string *\/\n$string = 'Naughty \\' string';\nprint \"Unquoted string: $string\\n\";\nprint \"Quoted string:\" . $conn->quote($string) . \"\\n\";","output":"Unquoted string: Naughty ' string\nQuoted string: 'Naughty '' string'"},{"title":"Quoting a complex string","source":"$conn = new PDO('sqlite:\/home\/lynn\/music.sql3');\n\n\/* Complex string *\/\n$string = \"Co'mpl''ex \\\"st'\\\"ring\";\nprint \"Unquoted string: $string\\n\";\nprint \"Quoted string: \" . $conn->quote($string) . \"\\n\";","output":"Unquoted string: Co'mpl''ex \"st'\"ring\nQuoted string: 'Co''mpl''''ex \"st''\"ring'"}],"pdo::rollback":[{"title":"Roll back a transaction","source":"\/* Begin a transaction, turning off autocommit *\/\n$dbh->beginTransaction();\n\n\/* Change the database schema and data *\/\n$sth = $dbh->exec(\"DROP TABLE fruit\");\n$sth = $dbh->exec(\"UPDATE dessert\n    SET name = 'hamburger'\");\n\n\/* Recognize mistake and roll back changes *\/\n$dbh->rollBack();\n\n\/* Database connection is now back in autocommit mode *\/","output":null}],"pdo::sqlitecreateaggregate":[{"title":"max_length aggregation function example","source":"$data = array(\n   'one',\n   'two',\n   'three',\n   'four',\n   'five',\n   'six',\n   'seven',\n   'eight',\n   'nine',\n   'ten',\n   );\n$db = new PDO('sqlite::memory:');\n$db->exec(\"CREATE TABLE strings(a)\");\n$insert = $db->prepare('INSERT INTO strings VALUES (?)');\nforeach ($data as $str) {\n    $insert->execute(array($str));\n}\n$insert = null;\n\nfunction max_len_step(&$context, $rownumber, $string) \n{\n    if (strlen($string) > $context) {\n        $context = strlen($string);\n    }\n    return $context;\n}\n\nfunction max_len_finalize(&$context, $rownumber) \n{\n    return $context === null ? 0 : $context;\n}\n\n$db->sqliteCreateAggregate('max_len', 'max_len_step', 'max_len_finalize');\n\nvar_dump($db->query('SELECT max_len(a) from strings')->fetchAll());","output":null}],"pdo::sqlitecreatecollation":[{"title":"PDO::sqliteCreateCollation() example","source":"$db = new PDO('sqlite::memory:');\n$db->exec(\"CREATE TABLE test (col1 string)\");\n$db->exec(\"INSERT INTO test VALUES ('a1')\");\n$db->exec(\"INSERT INTO test VALUES ('a10')\");\n$db->exec(\"INSERT INTO test VALUES ('a2')\");\n\n$db->sqliteCreateCollation('NATURAL_CMP', 'strnatcmp');\nforeach ($db->query(\"SELECT col1 FROM test ORDER BY col1\") as $row) {\n  echo $row['col1'] . \"\\n\";\n}\necho \"\\n\";\nforeach ($db->query(\"SELECT col1 FROM test ORDER BY col1 COLLATE NATURAL_CMP\") as $row) {\n  echo $row['col1'] . \"\\n\";\n}","output":"a1\na10\na2\n\na1\na2\na10"}],"pdo::sqlitecreatefunction":[{"title":"PDO::sqliteCreateFunction() example","source":"function md5_and_reverse($string) \n{\n    return strrev(md5($string));\n}\n\n$db = new PDO('sqlite:sqlitedb');\n$db->sqliteCreateFunction('md5rev', 'md5_and_reverse', 1);\n$rows = $db->query('SELECT md5rev(filename) FROM files')->fetchAll();","output":null}],"pdostatement::bindcolumn":[{"title":"Binding result set output to PHP variables","source":"function readData($dbh) {\n  $sql = 'SELECT name, colour, calories FROM fruit';\n  try {\n    $stmt = $dbh->prepare($sql);\n    $stmt->execute();\n\n    \/* Bind by column number *\/\n    $stmt->bindColumn(1, $name);\n    $stmt->bindColumn(2, $colour);\n    \n    \/* Bind by column name *\/\n    $stmt->bindColumn('calories', $cals);\n\n    while ($row = $stmt->fetch(PDO::FETCH_BOUND)) {\n      $data = $name . \"\\t\" . $colour . \"\\t\" . $cals . \"\\n\";\n      print $data;\n    }\n  }\n  catch (PDOException $e) {\n    print $e->getMessage();\n  }\n}\nreadData($dbh);","output":"apple   red     150\nbanana  yellow  175\nkiwi    green   75\norange  orange  150\nmango   red     200\nstrawberry      red     25"}],"pdostatement::bindparam":[{"title":"Execute a prepared statement with named placeholders","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour');\n$sth->bindParam(':calories', $calories, PDO::PARAM_INT);\n$sth->bindParam(':colour', $colour, PDO::PARAM_STR, 12);\n$sth->execute();","output":null},{"title":"Execute a prepared statement with question mark placeholders","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->bindParam(1, $calories, PDO::PARAM_INT);\n$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);\n$sth->execute();","output":null},{"title":"Call a stored procedure with an INOUT parameter","source":"\/* Call a stored procedure with an INOUT parameter *\/\n$colour = 'red';\n$sth = $dbh->prepare('CALL puree_fruit(?)');\n$sth->bindParam(1, $colour, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);\n$sth->execute();\nprint(\"After pureeing fruit, the colour is: $colour\");","output":null}],"pdostatement::bindvalue":[{"title":"Execute a prepared statement with named placeholders","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour');\n$sth->bindValue(':calories', $calories, PDO::PARAM_INT);\n$sth->bindValue(':colour', $colour, PDO::PARAM_STR);\n$sth->execute();","output":null},{"title":"Execute a prepared statement with question mark placeholders","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->bindValue(1, $calories, PDO::PARAM_INT);\n$sth->bindValue(2, $colour, PDO::PARAM_STR);\n$sth->execute();","output":null}],"pdostatement::closecursor":[{"title":"A PDOStatement::closeCursor() example","source":"\/* Create a PDOStatement object *\/\n$stmt = $dbh->prepare('SELECT foo FROM bar');\n\n\/* Create a second PDOStatement object *\/\n$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');\n\n\/* Execute the first statement *\/\n$stmt->execute();\n\n\/* Fetch only the first row from the results *\/\n$stmt->fetch();\n\n\/* The following call to closeCursor() may be required by some drivers *\/\n$stmt->closeCursor();\n\n\/* Now we can execute the second statement *\/\n$otherStmt->execute();","output":null}],"pdostatement::columncount":[{"title":"Counting columns","source":"$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n\n\/* Count the number of columns in the (non-existent) result set *\/\n$colcount = $sth->columnCount();\nprint(\"Before execute(), result set has $colcount columns (should be 0)\\n\");\n\n$sth->execute();\n\n\/* Count the number of columns in the result set *\/\n$colcount = $sth->columnCount();\nprint(\"After execute(), result set has $colcount columns (should be 2)\\n\");","output":"Before execute(), result set has 0 columns (should be 0)\nAfter execute(), result set has 2 columns (should be 2)"}],"pdostatement::debugdumpparams":[{"title":"PDOStatement::debugDumpParams() example with named parameters","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour');\n$sth->bindParam(':calories', $calories, PDO::PARAM_INT);\n$sth->bindValue(':colour', $colour, PDO::PARAM_STR, 12);\n$sth->execute();\n\n$sth->debugDumpParams();","output":"SQL: [96] SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour\nParams:  2\nKey: Name: [9] :calories\nparamno=-1\nname=[9] \":calories\"\nis_param=1\nparam_type=1\nKey: Name: [7] :colour\nparamno=-1\nname=[7] \":colour\"\nis_param=1\nparam_type=2"},{"title":"PDOStatement::debugDumpParams() example with unnamed parameters","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$name = 'apple';\n\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->bindParam(1, $calories, PDO::PARAM_INT);\n$sth->bindValue(2, $colour, PDO::PARAM_STR);\n$sth->execute();\n\n$sth->debugDumpParams();","output":"SQL: [82] SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?\nParams:  2\nKey: Position #0:\nparamno=0\nname=[0] \"\"\nis_param=1\nparam_type=1\nKey: Position #1:\nparamno=1\nname=[0] \"\"\nis_param=1\nparam_type=2"}],"pdostatement::errorcode":[{"title":"Retrieving an SQLSTATE code","source":"\/* Provoke an error -- the BONES table does not exist *\/\n$err = $dbh->prepare('SELECT skull FROM bones');\n$err->execute();\n\necho \"\\nPDOStatement::errorCode(): \";\nprint $err->errorCode();","output":"PDOStatement::errorCode(): 42S02"}],"pdostatement::errorinfo":[{"title":"Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database","source":"\/* Provoke an error -- the BONES table does not exist *\/\n$sth = $dbh->prepare('SELECT skull FROM bones');\n$sth->execute();\n\necho \"\\nPDOStatement::errorInfo():\\n\";\n$arr = $sth->errorInfo();\nprint_r($arr);","output":"PDOStatement::errorInfo():\nArray\n(\n    [0] => 42S02\n    [1] => -204\n    [2] => [IBM][CLI Driver][DB2\/LINUX] SQL0204N  \"DANIELS.BONES\" is an undefined name.  SQLSTATE=42704\n)"}],"pdostatement::execute":[{"title":"Execute a prepared statement with a bound variable and value","source":"\/* Execute a prepared statement by binding a variable and value *\/\n$calories = 150;\n$colour = 'gre';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour LIKE :colour');\n$sth->bindParam(':calories', $calories, PDO::PARAM_INT);\n$sth->bindValue(':colour', \"%{$colour}%\");\n$sth->execute();","output":null},{"title":"Execute a prepared statement with an array of insert values (named parameters)","source":"\/* Execute a prepared statement by passing an array of insert values *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < :calories AND colour = :colour');\n$sth->execute(array(':calories' => $calories, ':colour' => $colour));","output":null},{"title":"Execute a prepared statement with an array of insert values (placeholders)","source":"\/* Execute a prepared statement by passing an array of insert values *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->execute(array($calories, $colour));","output":null},{"title":"Execute a prepared statement with question mark placeholders","source":"\/* Execute a prepared statement by binding PHP variables *\/\n$calories = 150;\n$colour = 'red';\n$sth = $dbh->prepare('SELECT name, colour, calories\n    FROM fruit\n    WHERE calories < ? AND colour = ?');\n$sth->bindParam(1, $calories, PDO::PARAM_INT);\n$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);\n$sth->execute();","output":null},{"title":"Execute a prepared statement using array for IN clause","source":"\/* Execute a prepared statement using an array of values for an IN clause *\/\n$params = array(1, 21, 63, 171);\n\/* Create a string for the parameter placeholders filled to the number of params *\/\n$place_holders = implode(',', array_fill(0, count($params), '?'));\n\n\/*\n    This prepares the statement with enough unnamed placeholders for every value\n    in our $params array. The values of the $params array are then bound to the\n    placeholders in the prepared statement when the statement is executed.\n    This is not the same thing as using PDOStatement::bindParam() since this\n    requires a reference to the variable. PDOStatement::execute() only binds\n    by value instead.\n*\/\n$sth = $dbh->prepare(\"SELECT id, name FROM contacts WHERE id IN ($place_holders)\");\n$sth->execute($params);","output":null}],"pdostatement::fetch":[{"title":"Fetching rows using different fetch styles","source":"$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n\/* Exercise PDOStatement::fetch styles *\/\nprint(\"PDO::FETCH_ASSOC: \");\nprint(\"Return next row as an array indexed by column name\\n\");\n$result = $sth->fetch(PDO::FETCH_ASSOC);\nprint_r($result);\nprint(\"\\n\");\n\nprint(\"PDO::FETCH_BOTH: \");\nprint(\"Return next row as an array indexed by both column name and number\\n\");\n$result = $sth->fetch(PDO::FETCH_BOTH);\nprint_r($result);\nprint(\"\\n\");\n\nprint(\"PDO::FETCH_LAZY: \");\nprint(\"Return next row as an anonymous object with column names as properties\\n\");\n$result = $sth->fetch(PDO::FETCH_LAZY);\nprint_r($result);\nprint(\"\\n\");\n\nprint(\"PDO::FETCH_OBJ: \");\nprint(\"Return next row as an anonymous object with column names as properties\\n\");\n$result = $sth->fetch(PDO::FETCH_OBJ);\nprint $result->name;\nprint(\"\\n\");","output":"PDO::FETCH_ASSOC: Return next row as an array indexed by column name\nArray\n(\n    [name] => apple\n    [colour] => red\n)\n\nPDO::FETCH_BOTH: Return next row as an array indexed by both column name and number\nArray\n(\n    [name] => banana\n    [0] => banana\n    [colour] => yellow\n    [1] => yellow\n)\n\nPDO::FETCH_LAZY: Return next row as an anonymous object with column names as properties\nPDORow Object\n(\n    [name] => orange\n    [colour] => orange\n)\n\nPDO::FETCH_OBJ: Return next row as an anonymous object with column names as properties\nkiwi"},{"title":"Fetching rows with a scrollable cursor","source":"function readDataForwards($dbh) {\n  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';\n  try {\n    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));\n    $stmt->execute();\n    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {\n      $data = $row[0] . \"\\t\" . $row[1] . \"\\t\" . $row[2] . \"\\n\";\n      print $data;\n    }\n    $stmt = null;\n  }\n  catch (PDOException $e) {\n    print $e->getMessage();\n  }\n}\nfunction readDataBackwards($dbh) {\n  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';\n  try {\n    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));\n    $stmt->execute();\n    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);\n    do {\n      $data = $row[0] . \"\\t\" . $row[1] . \"\\t\" . $row[2] . \"\\n\";\n      print $data;\n    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));\n    $stmt = null;\n  }\n  catch (PDOException $e) {\n    print $e->getMessage();\n  }\n}\n\nprint \"Reading forwards:\\n\";\nreadDataForwards($conn);\n\nprint \"Reading backwards:\\n\";\nreadDataBackwards($conn);","output":"Reading forwards:\n21    10    5\n16    0     5\n19    20    10\n\nReading backwards:\n19    20    10\n16    0     5\n21    10    5"},{"title":"Construction order","source":"class Person\n{\n    private $name;\n\n    public function __construct()\n    {\n        $this->tell();\n    }\n\n    public function tell()\n    {\n        if (isset($this->name)) {\n            echo \"I am {$this->name}.\\n\";\n        } else {\n            echo \"I don't have a name yet.\\n\";\n        }\n    }\n}\n\n$sth = $dbh->query(\"SELECT * FROM people\");\n$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');\n$person = $sth->fetch();\n$person->tell();\n$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');\n$person = $sth->fetch();\n$person->tell();","output":"I am Alice.\nI am Alice.\nI don't have a name yet.\nI am Bob."}],"pdostatement::fetchall":[{"title":"Fetch all remaining rows in a result set","source":"$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n\/* Fetch all of the remaining rows in the result set *\/\nprint(\"Fetch all of the remaining rows in the result set:\\n\");\n$result = $sth->fetchAll();\nprint_r($result);","output":"Fetch all of the remaining rows in the result set:\nArray\n(\n    [0] => Array\n        (\n            [name] => apple\n            [0] => apple\n            [colour] => red\n            [1] => red\n        )\n\n    [1] => Array\n        (\n            [name] => pear\n            [0] => pear\n            [colour] => green\n            [1] => green\n        )\n\n    [2] => Array\n        (\n            [name] => watermelon\n            [0] => watermelon\n            [colour] => pink\n            [1] => pink\n        )\n\n)"},{"title":"Fetching all values of a single column from a result set","source":"$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n\/* Fetch all of the values of the first column *\/\n$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);\nvar_dump($result);","output":"Array(3)\n(\n    [0] =>\n    string(5) => apple\n    [1] =>\n    string(4) => pear\n    [2] =>\n    string(10) => watermelon\n)"},{"title":"Grouping all values by a single column","source":"$insert = $dbh->prepare(\"INSERT INTO fruit(name, colour) VALUES (?, ?)\");\n$insert->execute(array('apple', 'green'));\n$insert->execute(array('pear', 'yellow'));\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n\/* Group values by the first column *\/\nvar_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));","output":"array(3) {\n  [\"apple\"]=>\n  array(2) {\n    [0]=>\n    string(5) \"green\"\n    [1]=>\n    string(3) \"red\"\n  }\n  [\"pear\"]=>\n  array(2) {\n    [0]=>\n    string(5) \"green\"\n    [1]=>\n    string(6) \"yellow\"\n  }\n  [\"watermelon\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"pink\"\n  }\n}"},{"title":"Instantiating a class for each result","source":"class fruit {\n    public $name;\n    public $colour;\n}\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n$result = $sth->fetchAll(PDO::FETCH_CLASS, \"fruit\");\nvar_dump($result);","output":"array(3) {\n  [0]=>\n  object(fruit)#1 (2) {\n    [\"name\"]=>\n    string(5) \"apple\"\n    [\"colour\"]=>\n    string(5) \"green\"\n  }\n  [1]=>\n  object(fruit)#2 (2) {\n    [\"name\"]=>\n    string(4) \"pear\"\n    [\"colour\"]=>\n    string(6) \"yellow\"\n  }\n  [2]=>\n  object(fruit)#3 (2) {\n    [\"name\"]=>\n    string(10) \"watermelon\"\n    [\"colour\"]=>\n    string(4) \"pink\"\n  }\n  [3]=>\n  object(fruit)#4 (2) {\n    [\"name\"]=>\n    string(5) \"apple\"\n    [\"colour\"]=>\n    string(3) \"red\"\n  }\n  [4]=>\n  object(fruit)#5 (2) {\n    [\"name\"]=>\n    string(4) \"pear\"\n    [\"colour\"]=>\n    string(5) \"green\"\n  }\n}"},{"title":"Calling a function for each result","source":"function fruit($name, $colour) {\n    return \"{$name}: {$colour}\";\n}\n\n$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\n$result = $sth->fetchAll(PDO::FETCH_FUNC, \"fruit\");\nvar_dump($result);","output":"array(3) {\n  [0]=>\n  string(12) \"apple: green\"\n  [1]=>\n  string(12) \"pear: yellow\"\n  [2]=>\n  string(16) \"watermelon: pink\"\n  [3]=>\n  string(10) \"apple: red\"\n  [4]=>\n  string(11) \"pear: green\"\n}"}],"pdostatement::fetchcolumn":[{"title":"Return first column of the next row","source":"$sth = $dbh->prepare(\"SELECT name, colour FROM fruit\");\n$sth->execute();\n\nprint(\"Fetch the first column from the first row in the result set:\\n\");\n$result = $sth->fetchColumn();\nprint(\"name = $result\\n\");\n\nprint(\"Fetch the second column from the second row in the result set:\\n\");\n$result = $sth->fetchColumn(1);\nprint(\"colour = $result\\n\");","output":"Fetch the first column from the first row in the result set:\nname = lemon\nFetch the second column from the second row in the result set:\ncolour = red"}],"pdostatement::getcolumnmeta":[{"title":"Retrieving column metadata","source":"$select = $DB->query('SELECT COUNT(*) FROM fruit');\n$meta = $select->getColumnMeta(0);\nvar_dump($meta);","output":"array(6) {\n  [\"native_type\"]=>\n  string(7) \"integer\"\n  [\"flags\"]=>\n  array(0) {\n  }\n  [\"name\"]=>\n  string(8) \"COUNT(*)\"\n  [\"len\"]=>\n  int(-1)\n  [\"precision\"]=>\n  int(0)\n  [\"pdo_type\"]=>\n  int(2)\n}"}],"pdostatement::nextrowset":[{"title":"Fetching multiple rowsets returned from a stored procedure","source":"$sql = 'CALL multiple_rowsets()';\n$stmt = $conn->query($sql);\n$i = 1;\ndo {\n    $rowset = $stmt->fetchAll(PDO::FETCH_NUM);\n    if ($rowset) {\n        printResultSet($rowset, $i);\n    }\n    $i++;\n} while ($stmt->nextRowset());\n\nfunction printResultSet(&$rowset, $i) {\n    print \"Result set $i:\\n\";\n    foreach ($rowset as $row) {\n        foreach ($row as $col) {\n            print $col . \"\\t\";\n        }\n        print \"\\n\";\n    }\n    print \"\\n\";\n}","output":"Result set 1:\napple    red\nbanana   yellow\n\nResult set 2:\norange   orange    150\nbanana   yellow    175\n\nResult set 3:\nlime     green\napple    red\nbanana   yellow"}],"pdostatement::rowcount":[{"title":"Return the number of deleted rows","source":"\/* Delete all rows from the FRUIT table *\/\n$del = $dbh->prepare('DELETE FROM fruit');\n$del->execute();\n\n\/* Return number of rows that were deleted *\/\nprint(\"Return number of rows that were deleted:\\n\");\n$count = $del->rowCount();\nprint(\"Deleted $count rows.\\n\");","output":"Return number of rows that were deleted:\nDeleted 9 rows."},{"title":"Counting rows returned by a SELECT statement","source":"$sql = \"SELECT COUNT(*) FROM fruit WHERE calories > 100\";\nif ($res = $conn->query($sql)) {\n\n    \/* Check the number of rows that match the SELECT statement *\/\n  if ($res->fetchColumn() > 0) {\n\n        \/* Issue the real SELECT statement and work with the results *\/\n         $sql = \"SELECT name FROM fruit WHERE calories > 100\";\n       foreach ($conn->query($sql) as $row) {\n           print \"Name: \" .  $row['NAME'] . \"\\n\";\n         }\n    }\n    \/* No rows matched -- do something else *\/\n  else {\n      print \"No rows matched the query.\";\n    }\n}\n\n$res = null;\n$conn = null;","output":"apple\nbanana\norange\npear"}],"phar::addemptydir":[{"title":"A Phar::addEmptyDir() example","source":"try {\n    $a = new Phar('\/path\/to\/phar.phar');\n\n    $a->addEmptyDir('\/full\/path\/to\/file');\n    \/\/ demonstrates how this file is stored\n    $b = $a['full\/path\/to\/file']->isDir();\n} catch (Exception $e) {\n    \/\/ handle errors here\n}","output":null}],"phar::addfile":[{"title":"A Phar::addFile() example","source":"try {\n    $a = new Phar('\/path\/to\/phar.phar');\n\n    $a->addFile('\/full\/path\/to\/file');\n    \/\/ demonstrates how this file is stored\n    $b = $a['full\/path\/to\/file']->getContent();\n\n    $a->addFile('\/full\/path\/to\/file', 'my\/file.txt');\n    $c = $a['my\/file.txt']->getContent();\n\n    \/\/ demonstrate URL usage\n    $a->addFile('http:\/\/www.example.com', 'example.html');\n} catch (Exception $e) {\n    \/\/ handle errors here\n}","output":null},{"title":"A PharData::addFile() example","source":"try {\n    $a = new PharData('\/path\/to\/my.tar');\n\n    $a->addFile('\/full\/path\/to\/file');\n    \/\/ demonstrates how this file is stored\n    $b = $a['full\/path\/to\/file']->getContent();\n\n    $a->addFile('\/full\/path\/to\/file', 'my\/file.txt');\n    $c = $a['my\/file.txt']->getContent();\n\n    \/\/ demonstrate URL usage\n    $a->addFile('http:\/\/www.example.com', 'example.html');\n} catch (Exception $e) {\n    \/\/ handle errors here\n}","output":null}],"phar::addfromstring":[{"title":"A Phar::addFromString() example","source":"try {\n    $a = new Phar('\/path\/to\/phar.phar');\n\n    $a->addFromString('path\/to\/file.txt', 'my simple file');\n    $b = $a['path\/to\/file.txt']->getContent();\n\n    \/\/ to add contents from a stream handle for large files, use offsetSet()\n    $c = fopen('\/path\/to\/hugefile.bin');\n    $a['largefile.bin'] = $c;\n    fclose($c);\n} catch (Exception $e) {\n    \/\/ handle errors here\n}","output":null}],"phar::apiversion":[{"title":"A Phar::apiVersion() example","source":"echo Phar::apiVersion();","output":"1.1.1"}],"phar::buildfromdirectory":[{"title":"A Phar::buildFromDirectory() example","source":"\/\/ create with alias \"project.phar\"\n$phar = new Phar('project.phar', 0, 'project.phar');\n\/\/ add all files in the project\n$phar->buildFromDirectory(dirname(__FILE__) . '\/project');\n$phar->setStub($phar->createDefaultStub('cli\/index.php', 'www\/index.php'));\n\n$phar2 = new Phar('project2.phar', 0, 'project2.phar');\n\/\/ add all files in the project, only include php files\n$phar2->buildFromDirectory(dirname(__FILE__) . '\/project', '\/\\.php$\/');\n$phar2->setStub($phar->createDefaultStub('cli\/index.php', 'www\/index.php'));","output":null},{"title":"A PharData::buildFromDirectory() example","source":"$phar = new PharData('project.tar');\n\/\/ add all files in the project\n$phar->buildFromDirectory(dirname(__FILE__) . '\/project');\n\n$phar2 = new PharData('project2.zip');\n\/\/ add all files in the project, only include php files\n$phar2->buildFromDirectory(dirname(__FILE__) . '\/project', '\/\\.php$\/');","output":null}],"phar::buildfromiterator":[{"title":"A Phar::buildFromIterator() with SplFileInfo","source":"\/\/ create with alias \"project.phar\"\n$phar = new Phar('project.phar', 0, 'project.phar');\n$phar->buildFromIterator(\n    new RecursiveIteratorIterator(\n     new RecursiveDirectoryIterator('\/path\/to\/project')),\n    '\/path\/to\/project');\n$phar->setStub($phar->createDefaultStub('cli\/index.php', 'www\/index.php'));","output":null},{"title":"A Phar::buildFromIterator() with other iterators","source":"\/\/ create with alias \"project.phar\"\n$phar = new Phar('project.phar', 0, 'project.phar');\n$phar->buildFromIterator(\n    new ArrayIterator(\n     array(\n        'internal\/file.php' => dirname(__FILE__) . '\/somefile.php',\n        'another\/file.jpg' => fopen('\/path\/to\/bigfile.jpg', 'rb'),\n     )));\n$phar->setStub($phar->createDefaultStub('cli\/index.php', 'www\/index.php'));","output":null}],"phar::cancompress":[{"title":"A Phar::canCompress() example","source":"if (Phar::canCompress()) {\n    echo file_get_contents('phar:\/\/compressedphar.phar\/internal\/file.txt');\n} else {\n    echo 'no compression available';\n}","output":null}],"phar::canwrite":[{"title":"A Phar::canWrite() example","source":"if (Phar::canWrite()) {\n    file_put_contents('phar:\/\/myphar.phar\/file.txt', 'hi there');\n}","output":null}],"phar::compress":[{"title":"A Phar::compress() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\n$p1 = $p->compress(Phar::GZ); \/\/ copies to \/path\/to\/my.phar.gz\n$p2 = $p->compress(Phar::BZ2); \/\/ copies to \/path\/to\/my.phar.bz2\n$p3 = $p2->compress(Phar::NONE); \/\/ exception: \/path\/to\/my.phar already exists","output":null}],"phar::compressallfilesbzip2":[{"title":"A Phar::compressAllFilesBZIP2() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressedBZIP2());\n    var_dump($file->isCompressedGZ());\n}\n$p->compressAllFilesBZIP2();\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressedBZIP2());\n    var_dump($file->isCompressedGZ());\n}","output":"string(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(10) \"myfile.txt\"\nbool(true)\nbool(true)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(true)\nbool(true)\nbool(false)"}],"phar::compressallfilesgz":[{"title":"A Phar::compressAllFilesGZ() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressedBZIP2());\n    var_dump($file->isCompressedGZ());\n}\n$p->compressAllFilesGZ();\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressedBZIP2());\n    var_dump($file->isCompressedGZ());\n}","output":"string(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(10) \"myfile.txt\"\nbool(true)\nbool(false)\nbool(true)\nstring(11) \"myfile2.txt\"\nbool(true)\nbool(false)\nbool(true)"}],"phar::compressfiles":[{"title":"A Phar::compressFiles() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}\n$p->compressFiles(Phar::GZ);\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}","output":"string(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(10) \"myfile.txt\"\nint(4096)\nbool(false)\nbool(true)\nstring(11) \"myfile2.txt\"\nint(4096)\nbool(false)\nbool(true)"}],"phar::__construct":[{"title":"A Phar::__construct() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::KEY_AS_FILENAME,\n                  'my.phar');\n} catch (UnexpectedValueException $e) {\n    die('Could not open my.phar');\n} catch (BadMethodCallException $e) {\n    echo 'technically, this cannot happen';\n}\n\/\/ this works now\necho file_get_contents('phar:\/\/my.phar\/example.txt');\n\/\/ and works as if we had typed\necho file_get_contents('phar:\/\/\/path\/to\/my.phar\/example.txt');","output":null}],"phar::converttodata":[{"title":"A Phar::convertToData() example","source":"try {\n    $tarphar = new Phar('myphar.phar.tar');\n    \/\/ note that myphar.phar.tar is *not* unlinked\n    \/\/ convert it to the non-executable tar file format\n    \/\/ creates myphar.tar\n    $tar = $tarphar->convertToData();\n    \/\/ convert to non-executable zip format, creates myphar.zip\n    $zip = $tarphar->convertToData(Phar::ZIP);\n    \/\/ create myphar.tbz\n    $tgz = $tarphar->convertToData(Phar::TAR, Phar::BZ2, '.tbz');\n    \/\/ creates myphar.phar.tgz\n    $phar = $tarphar->convertToData(Phar::PHAR); \/\/ throws exception\n} catch (Exception $e) {\n    \/\/ handle the error here\n}","output":null}],"phar::converttoexecutable":[{"title":"A Phar::convertToExecutable() example","source":"try {\n    $tarphar = new Phar('myphar.phar.tar');\n    \/\/ convert it to the phar file format\n    \/\/ note that myphar.phar.tar is *not* unlinked\n    $phar = $tarphar->convertToExecutable(Phar::PHAR); \/\/ creates myphar.phar\n    $phar->setStub($phar->createDefaultStub('cli.php', 'web\/index.php'));\n    \/\/ creates myphar.phar.tgz\n    $compressed = $phar->convertToExecutable(Phar::TAR, Phar::GZ, '.phar.tgz');\n} catch (Exception $e) {\n    \/\/ handle the error here\n}","output":null}],"phar::copy":[{"title":"A Phar::copy() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    $phar['a'] = 'hi';\n    $phar->copy('a', 'b');\n    echo $phar['b']; \/\/ outputs \"hi\"\n} catch (Exception $e) {\n    \/\/ handle error\n}\n\n\/\/ the stream wrapper equivalent of the above code.\n\/\/ E_WARNINGS are triggered on error rather than exceptions.\ncopy('phar:\/\/myphar.phar\/a', 'phar\/\/myphar.phar\/c');\necho file_get_contents('phar:\/\/myphar.phar\/c'); \/\/ outputs \"hi\"","output":null}],"phar::count":[{"title":"A Phar::count() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n} catch (Exception $e) {\n    echo 'Could not create phar:', $e;\n}\necho 'The new phar has ' . $p->count() . \" entries\\n\";\n$p['file.txt'] = 'hi';\necho 'The new phar has ' . $p->count() . \" entries\\n\";","output":"The new phar has 0 entries\nThe new phar has 1 entries"}],"phar::createdefaultstub":[{"title":"A Phar::createDefaultStub() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    $phar->setStub($phar->createDefaultStub('cli.php', 'web\/index.php'));\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":null}],"phar::decompress":[{"title":"A Phar::decompress() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar.gz');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\n$p3 = $p2->decompress(); \/\/ creates \/path\/to\/my.phar","output":null}],"phar::decompressfiles":[{"title":"A Phar::decompressFiles() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\n$p->compressFiles(Phar::GZ);\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}\n$p->decompressFiles();\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}","output":"string(10) \"myfile.txt\"\nint(4096)\nbool(false)\nbool(true)\nstring(11) \"myfile2.txt\"\nint(4096)\nbool(false)\nbool(true)\nstring(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)"}],"phar::delete":[{"title":"A Phar::delete() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    $phar->delete('unlink\/me.php');\n    \/\/ this is equivalent to:\n    unlink('phar:\/\/myphar.phar\/unlink\/me.php');\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":null}],"phar::delmetadata":[{"title":"A Phar::delMetaData() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    var_dump($phar->getMetadata());\n    $phar->setMetadata(\"hi there\");\n    var_dump($phar->getMetadata());\n    $phar->delMetadata();\n    var_dump($phar->getMetadata());\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":"NULL\nstring(8) \"hi there\"\nNULL"}],"phar::extractto":[{"title":"A Phar::extractTo() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    $phar->extractTo('\/full\/path'); \/\/ extract all files\n    $phar->extractTo('\/another\/path', 'file.txt'); \/\/ extract only file.txt\n    $phar->extractTo('\/this\/path',\n        array('file1.txt', 'file2.txt')); \/\/ extract 2 files only\n    $phar->extractTo('\/third\/path', null, true); \/\/ extract all files, and overwrite\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":null}],"phar::getmetadata":[{"title":"A Phar::getMetadata() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['file.php'] = '<?php echo \"hello\";';\n    $p->setMetadata(array('bootstrap' => 'file.php'));\n    var_dump($p->getMetadata());\n} catch (Exception $e) {\n    echo 'Could not modify phar:', $e;\n}","output":"array(1) {\n  [\"bootstrap\"]=>\n  string(8) \"file.php\"\n}"}],"phar::getstub":[{"title":"A Phar::getStub() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\necho $p->getStub();\necho \"==NEXT==\\n\";\n$p->setStub(\"<?php\nfunction __autoload($class)\n{\n    include 'phar:\/\/' . str_replace('_', '\/', $class);\n}\nPhar::mapPhar('myphar.phar');\ninclude 'phar:\/\/myphar.phar\/startup.php';\n__HALT_COMPILER(); ?>\");\necho $p->getStub();","output":"<?php __HALT_COMPILER(); ?>\n==NEXT==\n<?php\nfunction __autoload($class)\n{\n    include 'phar:\/\/' . str_replace('_', '\/', $class);\n}\nPhar::mapPhar('myphar.phar');\ninclude 'phar:\/\/myphar.phar\/startup.php';\n__HALT_COMPILER(); ?>"}],"phar::hasmetadata":[{"title":"A Phar::hasMetadata() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    var_dump($phar->hasMetadata());\n    $phar->setMetadata(array('thing' => 'hi'));\n    var_dump($phar->hasMetadata());\n    $phar->delMetadata();\n    var_dump($phar->hasMetadata());\n} catch (Exception $e) {\n    \/\/ handle error\n}","output":"bool(false)\nbool(true)\nbool(false)"}],"phar::interceptfilefuncs":[{"title":"A Phar::interceptFileFuncs() example","source":"Phar::interceptFileFuncs();\ninclude 'phar:\/\/' . __FILE__ . '\/file.php';","output":null},{"title":"A Phar::interceptFileFuncs() example","source":"echo file_get_contents('file2.txt');","output":null}],"phar::isbuffering":[{"title":"A Phar::isBuffering() example","source":"$p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n$p2 = new Phar('existingphar.phar');\n$p['file1.txt'] = 'hi';\nvar_dump($p->isBuffering());\nvar_dump($p2->isBuffering());\n?>\n=2=\n<?php\n$p->startBuffering();\nvar_dump($p->isBuffering());\nvar_dump($p2->isBuffering());\n$p->stopBuffering();\n?>\n=3=\n<?php\nvar_dump($p->isBuffering());\nvar_dump($p2->isBuffering());","output":"bool(false)\nbool(false)\n=2=\nbool(true)\nbool(false)\n=3=\nbool(false)\nbool(false)"}],"phar::iscompressed":[{"title":"A Phar::isCompressed() example","source":"try {\n    $phar1 = new Phar('myphar.zip.phar');\n    var_dump($phar1->isCompressed());\n    $phar2 = new Phar('myuncompressed.tar.phar');\n    var_dump($phar2->isCompressed());\n    $phar2->compress(Phar::GZ);\n    var_dump($phar2->isCompressed() == Phar::GZ);\n} catch (Exception $e) {\n}","output":"bool(false)\nbool(false)\nbool(true)"}],"phar::loadphar":[{"title":"A Phar::loadPhar() example","source":"try {\n    Phar::loadPhar('\/path\/to\/phar.phar', 'my.phar');\n    echo file_get_contents('phar:\/\/my.phar\/file.txt');\n} catch (PharException $e) {\n    echo $e;\n}","output":null}],"phar::mapphar":[{"title":"A Phar::mapPhar() example","source":"function __autoload($class)\n{\n    include 'phar:\/\/me.phar\/' . str_replace('_', '\/', $class) . '.php';\n}\ntry {\n    Phar::mapPhar('me.phar');\n    include 'phar:\/\/me.phar\/startup.php';\n} catch (PharException $e) {\n    echo $e->getMessage();\n    die('Cannot initialize Phar');\n}\n__HALT_COMPILER();","output":null}],"phar::mount":[{"title":"A Phar::mount() example","source":"$configuration = simplexml_load_string(file_get_contents(\n    Phar::running(false) . '\/config.xml'));","output":null}],"phar::mungserver":[{"title":"A Phar::mungServer() example","source":"\/\/ example stub\nPhar::mungServer(array('REQUEST_URI'));\nPhar::webPhar();\n__HALT_COMPILER();","output":null}],"phar::offsetexists":[{"title":"A Phar::offsetExists() example","source":"$p = new Phar(dirname(__FILE__) . '\/my.phar', 0, 'my.phar');\n$p['firstfile.txt'] = 'first file';\n$p['secondfile.txt'] = 'second file';\n\/\/ the next set of lines call offsetExists() indirectly\nvar_dump(isset($p['firstfile.txt']));\nvar_dump(isset($p['nothere.txt']));","output":"bool(true)\nbool(false)"}],"phar::offsetget":[{"title":"Phar::offsetGet() example","source":"$p = new Phar(dirname(__FILE__) . '\/myphar.phar', 0, 'myphar.phar');\n$p['exists.txt'] = \"file exists\\n\";\ntry {\n    \/\/ automatically calls offsetGet()\n    echo $p['exists.txt'];\n    echo $p['doesnotexist.txt'];\n} catch (BadMethodCallException $e) {\n    echo $e;\n}","output":"file exists\nEntry doesnotexist.txt does not exist"}],"phar::offsetset":[{"title":"A Phar::offsetSet() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\ntry {\n    \/\/ calls offsetSet\n    $p['file.txt'] = 'Hi there';\n} catch (Exception $e) {\n    echo 'Could not modify file.txt:', $e;\n}","output":null}],"phar::offsetunset":[{"title":"A Phar::offsetUnset() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\ntry {\n    \/\/ deletes file.txt from my.phar by calling offsetUnset\n    unset($p['file.txt']);\n} catch (Exception $e) {\n    echo 'Could not delete file.txt: ', $e;\n}","output":null}],"phar::running":[{"title":"A Phar::running() example","source":"$a = Phar::running(); \/\/ $a is \"phar:\/\/\/path\/to\/my.phar\"\n$b = Phar::running(false); \/\/ $b is \"\/path\/to\/my.phar\"","output":null}],"phar::setalias":[{"title":"A Phar::setAlias() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    $phar->setAlias('myp.phar');\n} catch (Exception $e) {\n    \/\/ handle error\n}","output":null}],"phar::setdefaultstub":[{"title":"A Phar::setDefaultStub() example","source":"try {\n    $phar = new Phar('myphar.phar');\n    $phar->setDefaultStub('cli.php', 'web\/index.php');\n    \/\/ this is the same as:\n    \/\/ $phar->setStub($phar->createDefaultStub('cli.php', 'web\/index.php'));\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":null}],"phar::setmetadata":[{"title":"A Phar::setMetadata() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['file.php'] = '<?php echo \"hello\"';\n    $p->setMetadata(array('bootstrap' => 'file.php'));\n    var_dump($p->getMetadata());\n} catch (Exception $e) {\n    echo 'Could not create and\/or modify phar:', $e;\n}","output":"array(1) {\n  [\"bootstrap\"]=>\n  string(8) \"file.php\"\n}"},{"title":"A Phar::setMetadata() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['file.php'] = '<?php echo \"hello\"';\n    $p->setMetadata(array('bootstrap' => 'file.php'));\n    var_dump($p->getMetadata());\n} catch (Exception $e) {\n    echo 'Could not create and\/or modify phar:', $e;\n}","output":"array(1) {\n  [\"bootstrap\"]=>\n  string(8) \"file.php\"\n}"}],"phar::setstub":[{"title":"A Phar::setStub() example","source":"try {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['a.php'] = '<?php var_dump(\"Hello\");';\n    $p->setStub('<?php var_dump(\"First\"); Phar::mapPhar(\"brandnewphar.phar\"); __HALT_COMPILER(); ?>');\n    include 'phar:\/\/brandnewphar.phar\/a.php';\n    var_dump($p->getStub());\n    $p['b.php'] = '<?php var_dump(\"World\");';\n    $p->setStub('<?php var_dump(\"Second\"); Phar::mapPhar(\"brandnewphar.phar\"); __HALT_COMPILER(); ?>');\n    include 'phar:\/\/brandnewphar.phar\/b.php';\n    var_dump($p->getStub());\n} catch (Exception $e) {\n    echo 'Write operations failed on brandnewphar.phar: ', $e;\n}","output":"string(5) \"Hello\"\nstring(82) \"<?php var_dump(\"First\"); Phar::mapPhar(\"brandnewphar.phar\"); __HALT_COMPILER(); ?>\"\nstring(5) \"World\"\nstring(83) \"<?php var_dump(\"Second\"); Phar::mapPhar(\"brandnewphar.phar\"); __HALT_COMPILER(); ?>\""}],"phar::startbuffering":[{"title":"A Phar::startBuffering() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n} catch (Exception $e) {\n    echo 'Could not create phar:', $e;\n}\necho 'The new phar has ' . $p->count() . \" entries\\n\";\n$p->startBuffering();\n$p['file.txt'] = 'hi';\n$p['file2.txt'] = 'there';\n$p['file2.txt']->setCompressedGZ();\n$p['file3.txt'] = 'babyface';\n$p['file3.txt']->setMetadata(42);\n$p->setStub(\"<?php\nfunction __autoload($class)\n{\n    include 'phar:\/\/myphar.phar\/' . str_replace('_', '\/', $class) . '.php';\n}\nPhar::mapPhar('myphar.phar');\ninclude 'phar:\/\/myphar.phar\/startup.php';\n__HALT_COMPILER();\");\n$p->stopBuffering();","output":null}],"phar::stopbuffering":[{"title":"A Phar::stopBuffering() example","source":"$p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n$p['file1.txt'] = 'hi';\n$p->startBuffering();\nvar_dump($p->getStub());\n$p->setStub(\"<?php\nfunction __autoload(\\$class)\n{\n    include 'phar:\/\/brandnewphar.phar\/' . str_replace('_', '\/', \\$class) . '.php';\n}\nPhar::mapPhar('brandnewphar.phar');\ninclude 'phar:\/\/brandnewphar.phar\/startup.php';\n__HALT_COMPILER();\");\n$p->stopBuffering();\nvar_dump($p->getStub());","output":"string(24) \"<?php __HALT_COMPILER();\"\nstring(195) \"<?php\nfunction __autoload($class)\n{\n    include 'phar:\/\/' . str_replace('_', '\/', $class);\n}\nPhar::mapPhar('brandnewphar.phar');\ninclude 'phar:\/\/brandnewphar.phar\/startup.php';\n__HALT_COMPILER();\""}],"phar::uncompressallfiles":[{"title":"A Phar::uncompressAllFiles() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $p['myfile2.txt'] = 'hi';\n    $p->compressAllFilesGZ();\n    foreach ($p as $file) {\n        var_dump($file->getFileName());\n        var_dump($file->isCompressed());\n        var_dump($file->isCompressedBZIP2());\n        var_dump($file->isCompressedGZ());\n    }\n    $p->uncompressAllFiles();\n    foreach ($p as $file) {\n        var_dump($file->getFileName());\n        var_dump($file->isCompressed());\n        var_dump($file->isCompressedBZIP2());\n        var_dump($file->isCompressedGZ());\n    }\n} catch (Exception $e) {\n    echo 'Write operations failed on my.phar: ', $e;\n}","output":"string(10) \"myfile.txt\"\nbool(true)\nbool(false)\nbool(true)\nstring(11) \"myfile2.txt\"\nbool(true)\nbool(false)\nbool(true)\nstring(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)"}],"phar::unlinkarchive":[{"title":"A Phar::unlinkArchive() example","source":"\/\/ simple usage\nPhar::unlinkArchive('\/path\/to\/my.phar');\n\n\/\/ more common example:\n$p = new Phar('my.phar');\n$fp = fopen('phar:\/\/my.phar\/file.txt', 'r');\n\/\/ this creates 'my.phar.gz'\n$gp = $p->compress(Phar::GZ);\n\/\/ remove all references to the archive\nunset($p);\nfclose($fp);\n\/\/ now remove all traces of the archive\nPhar::unlinkArchive('my.phar');","output":null}],"phar::webphar":[{"title":"A Phar::webPhar() example","source":"\/\/ creating the phar archive:\ntry {\n    $phar = new Phar('myphar.phar');\n    $phar['index.php'] = '<?php echo \"Hello World\"; ?>';\n    $phar['index.phps'] = '<?php echo \"Hello World\"; ?>';\n    $phar->setStub('<?php\nPhar::webPhar();\n__HALT_COMPILER(); ?>');\n} catch (Exception $e) {\n    \/\/ handle error here\n}","output":null}],"phardata::addemptydir":[{"title":"A PharData::addEmptyDir() example","source":"try {\n    $a = new PharData('\/path\/to\/my.tar');\n\n    $a->addEmptyDir('\/full\/path\/to\/file');\n    \/\/ demonstrates how this file is stored\n    $b = $a['full\/path\/to\/file']->isDir();\n} catch (Exception $e) {\n    \/\/ handle errors here\n}","output":null}],"phardata::addfromstring":[{"title":"A PharData::addFromString() example","source":"try {\n    $a = new PharData('\/path\/to\/my.tar');\n\n    $a->addFromString('path\/to\/file.txt', 'my simple file');\n    $b = $a['path\/to\/file.txt']->getContent();\n\n    \/\/ to add contents from a stream handle for large files, use offsetSet()\n    $c = fopen('\/path\/to\/hugefile.bin');\n    $a['largefile.bin'] = $c;\n    fclose($c);\n} catch (Exception $e) {\n    \/\/ handle errors here\n}","output":null}],"phardata::buildfromiterator":[{"title":"A PharData::buildFromIterator() with SplFileInfo","source":"$phar = new PharData('project.tar');\n$phar->buildFromIterator(\n    new RecursiveIteratorIterator(\n     new RecursiveDirectoryIterator('\/path\/to\/project')),\n    '\/path\/to\/project');","output":null},{"title":"A PharData::buildFromIterator() with other iterators","source":"$phar = new PharData('project.tar');\n$phar->buildFromIterator(\n    new ArrayIterator(\n     array(\n        'internal\/file.php' => dirname(__FILE__) . '\/somefile.php',\n        'another\/file.jpg' => fopen('\/path\/to\/bigfile.jpg', 'rb'),\n     )));","output":null}],"phardata::compress":[{"title":"A PharData::compress() example","source":"$p = new PharData('\/path\/to\/my.tar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\n$p1 = $p->compress(Phar::GZ); \/\/ copies to \/path\/to\/my.tar.gz\n$p2 = $p->compress(Phar::BZ2); \/\/ copies to \/path\/to\/my.tar.bz2\n$p3 = $p2->compress(Phar::NONE); \/\/ exception: \/path\/to\/my.tar already exists","output":null}],"phardata::compressfiles":[{"title":"A PharData::compressFiles() example","source":"$p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}\n$p->compressFiles(Phar::GZ);\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}","output":"string(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(10) \"myfile.txt\"\nint(4096)\nbool(false)\nbool(true)\nstring(11) \"myfile2.txt\"\nint(4096)\nbool(false)\nbool(true)"}],"phardata::__construct":[{"title":"A PharData::__construct() example","source":"try {\n    $p = new PharData('\/path\/to\/my.tar', Phar::CURRENT_AS_FILEINFO | Phar::KEY_AS_FILENAME);\n} catch (UnexpectedValueException $e) {\n    die('Could not open my.tar');\n} catch (BadMethodCallException $e) {\n    echo 'technically, this cannot happen';\n}\necho file_get_contents('phar:\/\/\/path\/to\/my.tar\/example.txt');","output":null}],"phardata::converttodata":[{"title":"A PharData::convertToData() example","source":"try {\n    $tarphar = new PharData('myphar.tar');\n    \/\/ note that myphar.tar is *not* unlinked\n    \/\/ convert it to the non-executable tar file format\n    \/\/ creates myphar.zip\n    $zip = $tarphar->convertToData(Phar::ZIP);\n    \/\/ create myphar.tbz\n    $tgz = $zip->convertToData(Phar::TAR, Phar::BZ2, '.tbz');\n    \/\/ creates myphar.phar.tgz\n    $phar = $tarphar->convertToData(Phar::PHAR); \/\/ throws exception\n} catch (Exception $e) {\n    \/\/ handle the error here\n}","output":null}],"phardata::converttoexecutable":[{"title":"A PharData::convertToExecutable() example","source":"try {\n    $tarphar = new PharData('myphar.tar');\n    \/\/ convert it to the phar file format\n    \/\/ note that myphar.tar is *not* unlinked\n    $phar = $tarphar->convertToExecutable(Phar::PHAR); \/\/ creates myphar.phar\n    $phar->setStub($phar->createDefaultStub('cli.php', 'web\/index.php'));\n    \/\/ creates myphar.phar.tgz\n    $compressed = $tarphar->convertToExecutable(Phar::TAR, Phar::GZ, '.phar.tgz');\n} catch (Exception $e) {\n    \/\/ handle the error here\n}","output":null}],"phardata::copy":[{"title":"A PharData::copy() example","source":"try {\n    $phar = new PharData('myphar.tar');\n    $phar['a'] = 'hi';\n    $phar->copy('a', 'b');\n    echo $phar['b']; \/\/ outputs \"phar:\/\/myphar.tar\/b\"\n} catch (Exception $e) {\n    \/\/ handle error\n}\n\n\/\/ the stream wrapper equivalent of the above code.\n\/\/ E_WARNINGS are triggered on error rather than exceptions.\ncopy('phar:\/\/myphar.tar\/a', 'phar\/\/myphar.tar\/c');\necho file_get_contents('phar:\/\/myphar.tar\/c'); \/\/ outputs \"hi\"","output":null}],"phardata::decompress":[{"title":"A PharData::decompress() example","source":"$p = new PharData('\/path\/to\/my.tar.gz');\n$p->decompress(); \/\/ creates \/path\/to\/my.tar","output":null}],"phardata::decompressfiles":[{"title":"A PharData::decompressFiles() example","source":"$p = new PharData('\/path\/to\/my.zip');\n$p['myfile.txt'] = 'hi';\n$p['myfile2.txt'] = 'hi';\n$p->compressFiles(Phar::GZ);\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}\n$p->decompressFiles();\nforeach ($p as $file) {\n    var_dump($file->getFileName());\n    var_dump($file->isCompressed());\n    var_dump($file->isCompressed(Phar::BZ2));\n    var_dump($file->isCompressed(Phar::GZ));\n}","output":"string(10) \"myfile.txt\"\nint(4096)\nbool(false)\nbool(true)\nstring(11) \"myfile2.txt\"\nint(4096)\nbool(false)\nbool(true)\nstring(10) \"myfile.txt\"\nbool(false)\nbool(false)\nbool(false)\nstring(11) \"myfile2.txt\"\nbool(false)\nbool(false)\nbool(false)"}],"phardata::delete":[{"title":"A PharData::delete() example","source":"try {\n    $phar = new PharData('myphar.zip');\n    $phar->delete('unlink\/me.php');\n    \/\/ this is equivalent to:\n    unlink('phar:\/\/myphar.phar\/unlink\/me.php');\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":null}],"phardata::delmetadata":[{"title":"A PharData::delMetaData() example","source":"try {\n    $phar = new PharData('myphar.zip');\n    var_dump($phar->getMetadata());\n    $phar->setMetadata(\"hi there\");\n    var_dump($phar->getMetadata());\n    $phar->delMetadata();\n    var_dump($phar->getMetadata());\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":"NULL\nstring(8) \"hi there\"\nNULL"}],"phardata::extractto":[{"title":"A PharData::extractTo() example","source":"try {\n    $phar = new PharData('myphar.tar');\n    $phar->extractTo('\/full\/path'); \/\/ extract all files\n    $phar->extractTo('\/another\/path', 'file.txt'); \/\/ extract only file.txt\n    $phar->extractTo('\/this\/path',\n        array('file1.txt', 'file2.txt')); \/\/ extract 2 files only\n    $phar->extractTo('\/third\/path', null, true); \/\/ extract all files, and overwrite\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":null}],"phardata::offsetset":[{"title":"A PharData::offsetSet() example","source":"$p = new PharData('\/path\/to\/my.tar');\ntry {\n    \/\/ calls offsetSet\n    $p['file.txt'] = 'Hi there';\n} catch (Exception $e) {\n    echo 'Could not modify file.txt:', $e;\n}","output":null}],"phardata::offsetunset":[{"title":"A PharData::offsetUnset() example","source":"$p = new PharData('\/path\/to\/my.zip');\ntry {\n    \/\/ deletes file.txt from my.zip by calling offsetUnset\n    unset($p['file.txt']);\n} catch (Exception $e) {\n    echo 'Could not delete file.txt: ', $e;\n}","output":null}],"pharfileinfo::chmod":[{"title":"A PharFileInfo::chmod() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar('brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['file.sh'] = '#!\/usr\/local\/lib\/php\n    <?php echo \"hi\"; ?>';\n    \/\/ set executable bit\n    $p['file.sh']->chmod(0555);\n    var_dump($p['file.sh']->isExecutable());\n} catch (Exception $e) {\n    echo 'Could not create\/modify phar: ', $e;\n}","output":"bool(true)"}],"pharfileinfo::compress":[{"title":"A PharFileInfo::compress() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    var_dump($file->isCompressed(Phar::BZ2));\n    $p['myfile.txt']->compress(Phar::BZ2);\n    var_dump($file->isCompressed(Phar::BZ2));\n} catch (Exception $e) {\n    echo 'Create\/modify operations on my.phar failed: ', $e;\n}","output":"bool(false)\nbool(true)"}],"pharfileinfo::__construct":[{"title":"A PharFileInfo::__construct() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['testfile.txt'] = \"hi\\nthere\\ndude\";\n    $file = $p['testfile.txt'];\n    foreach ($file as $line => $text) {\n        echo \"line number $line: $text\";\n    }\n    \/\/ this also works\n    $file = new PharFileInfo('phar:\/\/\/path\/to\/my.phar\/testfile.txt');\n    foreach ($file as $line => $text) {\n        echo \"line number $line: $text\";\n    }\n} catch (Exception $e) {\n    echo 'Phar operations failed: ', $e;\n}","output":"line number 1: hi\nline number 2: there\nline number 3: dude\nline number 1: hi\nline number 2: there\nline number 3: dude"}],"pharfileinfo::decompress":[{"title":"A PharFileInfo::decompress() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    $file->compress(Phar::GZ);\n    var_dump($file->isCompressed());\n    $p['myfile.txt']->decompress();\n    var_dump($file->isCompressed());\n} catch (Exception $e) {\n    echo 'Create\/modify failed for my.phar: ', $e;\n}","output":"int(4096)\nbool(false)"}],"pharfileinfo::delmetadata":[{"title":"A PharFileInfo::delMetaData() example","source":"try {\n    $a = new Phar('myphar.phar');\n    $a['hi'] = 'hi';\n    var_dump($a['hi']->delMetadata());\n    $a['hi']->setMetadata('there');\n    var_dump($a['hi']->delMetadata());\n    var_dump($a['hi']->delMetadata());\n} catch (Exception $e) {\n    \/\/ handle errors\n}","output":"bool(false)\nbool(true)\nbool(false)"}],"pharfileinfo::getcompressedsize":[{"title":"A PharFileInfo::getCompressedSize() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    echo $file->getCompressedSize();\n} catch (Exception $e) {\n    echo 'Write operations failed on my.phar: ', $e;\n}","output":2}],"pharfileinfo::getcrc32":[{"title":"A PharFileInfo::getCRC32() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    echo $file->getCRC32();\n} catch (Exception $e) {\n    echo 'Write operations on my.phar.phar failed: ', $e;\n}","output":3633523372}],"pharfileinfo::getmetadata":[{"title":"A PharFileInfo::getMetadata() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['file.txt'] = 'hello';\n    $p['file.txt']->setMetadata(array('user' => 'bill', 'mime-type' => 'text\/plain'));\n    var_dump($p['file.txt']->getMetadata());\n} catch (Exception $e) {\n    echo 'Could not create\/modify brandnewphar.phar: ', $e;\n}","output":"array(2) {\n  [\"user\"]=>\n  string(4) \"bill\"\n  [\"mime-type\"]=>\n  string(10) \"text\/plain\"\n}"}],"pharfileinfo::getpharflags":[{"title":"A PharFileInfo::getPharFlags() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    var_dump($file->getPharFlags());\n} catch (Exception $e) {\n    echo 'Could not create\/modify my.phar: ', $e;\n}","output":"int(0)"}],"pharfileinfo::iscompressed":[{"title":"A PharFileInfo::isCompressed() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $p['myfile2.txt'] = 'hi';\n    $p['myfile2.txt']->setCompressedGZ();\n    $file = $p['myfile.txt'];\n    $file2 = $p['myfile2.txt'];\n    var_dump($file->isCompressed());\n    var_dump($file2->isCompressed());\n} catch (Exception $e) {\n    echo 'Create\/modify on phar my.phar failed: ', $e;\n}","output":"bool(false)\nbool(true)"}],"pharfileinfo::iscompressedbzip2":[{"title":"A PharFileInfo::isCompressedBZIP2() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $p['myfile2.txt'] = 'hi';\n    $p['myfile3.txt'] = 'hi';\n    $p['myfile2.txt']->setCompressedGZ();\n    $p['myfile3.txt']->setCompressedBZIP2();\n    $file = $p['myfile.txt'];\n    $file2 = $p['myfile2.txt'];\n    $file3 = $p['myfile3.txt'];\n    var_dump($file->isCompressedBZIP2());\n    var_dump($file2->isCompressedBZIP2());\n    var_dump($file3->isCompressedBZIP2());\n} catch (Exception $e) {\n    echo 'Create\/modify on phar my.phar failed: ', $e;\n}","output":"bool(false)\nbool(false)\nbool(true)"}],"pharfileinfo::iscompressedgz":[{"title":"A PharFileInfo::isCompressedGZ() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $p['myfile2.txt'] = 'hi';\n    $p['myfile3.txt'] = 'hi';\n    $p['myfile2.txt']->setCompressedGZ();\n    $p['myfile3.txt']->setCompressedBZIP2();\n    $file = $p['myfile.txt'];\n    $file2 = $p['myfile2.txt'];\n    $file3 = $p['myfile3.txt'];\n    var_dump($file->isCompressedGZ());\n    var_dump($file2->isCompressedGZ());\n    var_dump($file3->isCompressedGZ());\n} catch (Exception $e) {\n    echo 'Create\/modify on phar my.phar failed: ', $e;\n}","output":"bool(false)\nbool(true)\nbool(false)"}],"pharfileinfo::iscrcchecked":[{"title":"A PharFileInfo::isCRCChecked() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    var_dump($file->isCRCChecked());\n} catch (Exception $e) {\n    echo 'Create\/modify operations failed on my.phar: ', $e;\n}","output":"bool(true)"}],"pharfileinfo::setcompressedbzip2":[{"title":"A PharFileInfo::setCompressedBZIP2() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    var_dump($file->isCompressedBZIP2());\n    $p['myfile.txt']->setCompressedBZIP2();\n    var_dump($file->isCompressedBZIP2());\n} catch (Exception $e) {\n    echo 'Create\/modify operations on my.phar failed: ', $e;\n}","output":"bool(false)\nbool(true)"}],"pharfileinfo::setcompressedgz":[{"title":"A PharFileInfo::setCompressedGZ() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    var_dump($file->isCompressedGZ());\n    $p['myfile.txt']->setCompressedGZ();\n    var_dump($file->isCompressedGZ());\n} catch (Exception $e) {\n    echo 'Create\/modify operations on my.phar failed: ', $e;\n}","output":"bool(false)\nbool(true)"}],"pharfileinfo::setmetadata":[{"title":"A PharFileInfo::setMetadata() example","source":"\/\/ make sure it doesn't exist\n@unlink('brandnewphar.phar');\ntry {\n    $p = new Phar(dirname(__FILE__) . '\/brandnewphar.phar', 0, 'brandnewphar.phar');\n    $p['file.txt'] = 'hello';\n    $p['file.txt']->setMetadata(array('user' => 'bill', 'mime-type' => 'text\/plain'));\n    var_dump($p['file.txt']->getMetaData());\n} catch (Exception $e) {\n    echo 'Could not create\/modify phar: ', $e;\n}","output":"array(2) {\n  [\"user\"]=>\n  string(4) \"bill\"\n  [\"mime-type\"]=>\n  string(10) \"text\/plain\"\n}"}],"pharfileinfo::setuncompressed":[{"title":"A PharFileInfo::setUncompressed() example","source":"try {\n    $p = new Phar('\/path\/to\/my.phar', 0, 'my.phar');\n    $p['myfile.txt'] = 'hi';\n    $file = $p['myfile.txt'];\n    $file->setCompressedGZ();\n    var_dump($file->isCompressed());\n    $p['myfile.txt']->setUncompressed();\n    var_dump($file->isCompressed());\n} catch (Exception $e) {\n    echo 'Create\/modify failed for my.phar: ', $e;\n}","output":"bool(true)\nbool(false)"}],"pool::collect":[{"title":"A basic example of Pool::collect()","source":"$pool = new Pool(4);\n\nfor ($i = 0; $i < 15; ++$i) {\n    $pool->submit(new class extends Threaded {});\n}\n\nwhile ($pool->collect()); \/\/ blocks until all tasks have finished executing\n\n$pool->shutdown();","output":null}],"pool::__construct":[{"title":"Creating Pools","source":"class MyWorker extends Worker {\n    \n    public function __construct(Something $something) {\n        $this->something = $something;\n    }\n    \n    public function run() {\n        \/** ... **\/\n    }\n}\n\n$pool = new Pool(8, \\MyWorker::class, [new Something()]);\n\nvar_dump($pool);","output":"object(Pool)#1 (6) {\n  [\"size\":protected]=>\n  int(8)\n  [\"class\":protected]=>\n  string(8) \"MyWorker\"\n  [\"workers\":protected]=>\n  NULL\n  [\"work\":protected]=>\n  NULL\n  [\"ctor\":protected]=>\n  array(1) {\n    [0]=>\n    object(Something)#2 (0) {\n    }\n  }\n  [\"last\":protected]=>\n  int(0)\n}"}],"pool::shutdown":[{"title":"Shutting down a pool","source":"class Task extends Threaded\n{\n    public function run()\n    {\n        usleep(500000);\n    }\n}\n\n$pool = new Pool(4);\n\nfor ($i = 0; $i < 10; ++$i) {\n    $pool->submit(new Task());\n}\n\n$pool->shutdown(); \/\/ blocks until all submitted tasks have finished executing","output":null}],"pool::submit":[{"title":"Submitting Tasks","source":"class MyWork extends Threaded {\n    \n    public function run() {\n        \/* ... *\/\n    }\n}\n\nclass MyWorker extends Worker {\n    \n    public function __construct(Something $something) {\n        $this->something = $something;\n    }\n    \n    public function run() {\n        \/** ... **\/\n    }\n}\n\n$pool = new Pool(8, \\MyWorker::class, [new Something()]);\n$pool->submit(new MyWork());\nvar_dump($pool);","output":"object(Pool)#1 (6) {\n  [\"size\":protected]=>\n  int(8)\n  [\"class\":protected]=>\n  string(8) \"MyWorker\"\n  [\"workers\":protected]=>\n  array(1) {\n    [0]=>\n    object(MyWorker)#4 (1) {\n      [\"something\"]=>\n      object(Something)#5 (0) {\n      }\n    }\n  }\n  [\"work\":protected]=>\n  array(1) {\n    [0]=>\n    object(MyWork)#3 (1) {\n      [\"worker\"]=>\n      object(MyWorker)#5 (1) {\n        [\"something\"]=>\n        object(Something)#6 (0) {\n        }\n      }\n    }\n  }\n  [\"ctor\":protected]=>\n  array(1) {\n    [0]=>\n    object(Something)#2 (0) {\n    }\n  }\n  [\"last\":protected]=>\n  int(1)\n}"}],"pool::submitto":[{"title":"Submitting tasks to a specific worker","source":"class Task extends Threaded {\n    public function run() {\n        var_dump(Thread::getCurrentThreadID());\n    }\n}\n\n$pool = new Pool(2);\n\n$pool->submit(new Task());\n\nfor ($i = 0; $i < 5; ++$i) {\n    $pool->submitTo(0, new Task()); \/\/ stack all tasks onto the first worker\n}\n\n$pool->submitTo(1, new Task()); \/\/ cannot stack the task onto the second worker due to it not existing yet\n\n$pool->shutdown();","output":"int(4475011072)\nint(4475011072)\nint(4475011072)\nint(4475011072)\nint(4475011072)\nint(4475011072)\n\nFatal error: Uncaught Exception: The selected worker (1) does not exist in %s:%d"}],"quickhashinthash::add":[{"title":"QuickHashIntHash::add() example","source":"echo \"without dupe checking\\n\";\n$hash = new QuickHashIntHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, 22 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, 12 ) );\n\necho \"\\nwith dupe checking\\n\";\n$hash = new QuickHashIntHash( 1024, QuickHashIntHash::CHECK_FOR_DUPES );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, 78 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, 9 ) );\n\necho \"\\ndefault value\\n\";\nvar_dump( $hash->add( 5 ) );\nvar_dump( $hash->get( 5 ) );","output":"without dupe checking\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nint(22)\nbool(true)\n\nwith dupe checking\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nint(78)\nbool(false)\n\ndefault value\nbool(true)\nint(1)"}],"quickhashinthash::__construct":[{"title":"QuickHashIntHash::__construct() example","source":"var_dump( new QuickHashIntHash( 1024 ) );\nvar_dump( new QuickHashIntHash( 1024, QuickHashIntHash::CHECK_FOR_DUPES ) );\nvar_dump(\n    new QuickHashIntHash(\n        1024,\n        QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC | QuickHashIntHash::HASHER_JENKINS2 \n    )\n);","output":null}],"quickhashinthash::delete":[{"title":"QuickHashIntHash::delete() example","source":"$hash = new QuickHashIntHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, 5 ) );\nvar_dump( $hash->delete( 4 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->delete( 4 ) );","output":"bool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)"}],"quickhashinthash::exists":[{"title":"QuickHashIntHash::exists() example","source":"\/\/generate 200000 elements\n$array = range( 0, 199999 );\n$existingEntries = array_rand( array_flip( $array ), 180000 );\n$testForEntries = array_rand( array_flip( $array ), 1000 );\n$foundCount = 0;\n\necho \"Creating hash: \", microtime( true ), \"\\n\";\n$hash = new QuickHashIntHash( 100000 );\necho \"Adding elements: \", microtime( true ), \"\\n\";\nforeach( $existingEntries as $key )\n{\n     $hash->add( $key, 56 );\n}\n\necho \"Doing 1000 tests: \", microtime( true ), \"\\n\";\nforeach( $testForEntries as $key )\n{\n     $foundCount += $hash->exists( $key );\n}\necho \"Done, $foundCount found: \", microtime( true ), \"\\n\";","output":"Creating hash: 1263588703.0748\nAdding elements: 1263588703.0757\nDoing 1000 tests: 1263588703.7851\nDone, 898 found: 1263588703.7897"}],"quickhashinthash::get":[{"title":"QuickHashIntHash::get() example","source":"$hash = new QuickHashIntHash( 8 );\nvar_dump( $hash->get( 1 ) );\n\nvar_dump( $hash->add( 2 ) );\nvar_dump( $hash->get( 2 ) );\n\nvar_dump( $hash->add( 3, 5 ) );\nvar_dump( $hash->get( 3 ) );","output":"bool(false)\nbool(true)\nint(1)\nbool(true)\nint(5)"}],"quickhashinthash::getsize":[{"title":"QuickHashIntHash::getSize() example","source":"$hash = new QuickHashIntHash( 8 );\nvar_dump( $hash->add( 2 ) );\nvar_dump( $hash->add( 3, 5 ) );\nvar_dump( $hash->getSize() );","output":"bool(true)\nbool(true)\nint(2)"}],"quickhashinthash::loadfromfile":[{"title":"QuickHash IntHash file format","source":"This factory method creates a hash from a file\n QuickHashIntHash::getSize\n QuickHashIntHash::loadFromString\n QuickHashIntHash\n PHP Manual\n\n \n  QuickHashIntHash::loadFromFile\n  (PECL quickhash >= Unknown)QuickHashIntHash::loadFromFile — This factory method creates a hash from a file\n\n \n\n \n  Description\n  \n   public static QuickHashIntHash QuickHashIntHash::loadFromFile\n    ( string $filename\n   [, int $options\n  ] )\n\n  \n   This factory method creates a new hash from a definition file on disk. The\n   file format consists of a signature 'QH\\0x11\\0', the number of elements as\n   a 32 bit signed integer in system Endianness, followed by 32 bit signed\n   integers packed together in the Endianness that the system that the code\n   runs on uses. For each hash element there are two 32 bit signed integers\n   stored.  The first of each element is the key, and the second is the value\n   belonging to the key. An example could be:\n  \n  \n   \n    Example #1 QuickHash IntHash file format\n    00000000  51 48 11 00 02 00 00 00  01 00 00 00 01 00 00 00  |QH..............|\n00000010  03 00 00 00 09 00 00 00                           |........|\n00000018\n\n   \n  \n  \n   \n    Example #2 QuickHash IntHash file format\n    header signature ('QH'; key type: 1; value type: 1; filler: \\0x00)\n00000000  51 48 11 00\n\nnumber of elements:\n00000004  02 00 00 00\n\ndata string:\n00000000  01 00 00 00 01 00 00 00  03 00 00 00 09 00 00 00\n\nkey\/value 1 (key = 1, value = 1)\n01 00 00 00  01 00 00 00\n\nkey\/value 2 (key = 3, value = 9)\n03 00 00 00  09 00 00 00\n\n   \n  \n\n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the file to read the hash from.\n      \n     \n\n    \n    \n     \noptions\n\n     \n\n      \n       The same options that the class' constructor takes; except that the size\n       option is ignored. It is automatically calculated to be the same as the\n       number of entries in the hash, rounded up to the nearest power of two\n       with a maximum limit of 4194304.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a new QuickHashIntHash.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 QuickHashIntHash::loadFromFile() example\n    \n\n<?php\n$file = dirname( __FILE__ ) . \"\/simple.hash\";\n$hash = QuickHashIntHash::loadFromFile(\n    $file,\n    QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nKey   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset\n\n    \n   \n  \n \n\n\n\n\n QuickHashIntHash::getSize\n QuickHashIntHash::loadFromString\n QuickHashIntHash\n PHP Manual","output":null},{"title":"QuickHash IntHash file format","source":"This factory method creates a hash from a file\n QuickHashIntHash::getSize\n QuickHashIntHash::loadFromString\n QuickHashIntHash\n PHP Manual\n\n \n  QuickHashIntHash::loadFromFile\n  (PECL quickhash >= Unknown)QuickHashIntHash::loadFromFile — This factory method creates a hash from a file\n\n \n\n \n  Description\n  \n   public static QuickHashIntHash QuickHashIntHash::loadFromFile\n    ( string $filename\n   [, int $options\n  ] )\n\n  \n   This factory method creates a new hash from a definition file on disk. The\n   file format consists of a signature 'QH\\0x11\\0', the number of elements as\n   a 32 bit signed integer in system Endianness, followed by 32 bit signed\n   integers packed together in the Endianness that the system that the code\n   runs on uses. For each hash element there are two 32 bit signed integers\n   stored.  The first of each element is the key, and the second is the value\n   belonging to the key. An example could be:\n  \n  \n   \n    Example #1 QuickHash IntHash file format\n    00000000  51 48 11 00 02 00 00 00  01 00 00 00 01 00 00 00  |QH..............|\n00000010  03 00 00 00 09 00 00 00                           |........|\n00000018\n\n   \n  \n  \n   \n    Example #2 QuickHash IntHash file format\n    header signature ('QH'; key type: 1; value type: 1; filler: \\0x00)\n00000000  51 48 11 00\n\nnumber of elements:\n00000004  02 00 00 00\n\ndata string:\n00000000  01 00 00 00 01 00 00 00  03 00 00 00 09 00 00 00\n\nkey\/value 1 (key = 1, value = 1)\n01 00 00 00  01 00 00 00\n\nkey\/value 2 (key = 3, value = 9)\n03 00 00 00  09 00 00 00\n\n   \n  \n\n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the file to read the hash from.\n      \n     \n\n    \n    \n     \noptions\n\n     \n\n      \n       The same options that the class' constructor takes; except that the size\n       option is ignored. It is automatically calculated to be the same as the\n       number of entries in the hash, rounded up to the nearest power of two\n       with a maximum limit of 4194304.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a new QuickHashIntHash.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 QuickHashIntHash::loadFromFile() example\n    \n\n<?php\n$file = dirname( __FILE__ ) . \"\/simple.hash\";\n$hash = QuickHashIntHash::loadFromFile(\n    $file,\n    QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nKey   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset\n\n    \n   \n  \n \n\n\n\n\n QuickHashIntHash::getSize\n QuickHashIntHash::loadFromString\n QuickHashIntHash\n PHP Manual","output":null},{"title":"QuickHashIntHash::loadFromFile() example","source":"$file = dirname( __FILE__ ) . \"\/simple.hash\";\n$hash = QuickHashIntHash::loadFromFile(\n    $file,\n    QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}","output":"Key   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset"}],"quickhashinthash::loadfromstring":[{"title":"QuickHashIntHash::loadFromString() example","source":"$contents = file_get_contents( dirname( __FILE__ ) . \"\/simple.hash\" );\n$hash = QuickHashIntHash::loadFromString(\n    $contents,\n    QuickHashIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}","output":"Key   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset"}],"quickhashinthash::savetofile":[{"title":"QuickHashIntHash::saveToFile() example","source":"$hash = new QuickHashIntHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, 43 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, 52 ) );\n\n$hash->saveToFile( '\/tmp\/test.hash' );","output":null}],"quickhashinthash::savetostring":[{"title":"QuickHashIntHash::saveToString() example","source":"$hash = new QuickHashIntHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, 34 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, 55 ) );\n\nvar_dump( $hash->saveToString() );","output":null}],"quickhashinthash::set":[{"title":"QuickHashIntHash::set() example","source":"$hash = new QuickHashIntHash( 1024 );\n\necho \"Set->Add\\n\";\nvar_dump( $hash->get( 46692 ) );\nvar_dump( $hash->set( 46692, 16091 ) );\nvar_dump( $hash->get( 46692 ) );\n\necho \"Set->Update\\n\";\nvar_dump( $hash->set( 46692, 29906 ) );\nvar_dump( $hash->get( 46692 ) );","output":"bool(false)\nint(2)\nint(16091)\nSet->Update\nint(1)\nint(29906)"}],"quickhashinthash::update":[{"title":"QuickHashIntHash::update() example","source":"$hash = new QuickHashIntHash( 1024 );\n\nvar_dump( $hash->add( 141421, 173205 ) );\nvar_dump( $hash->update( 141421, 223606 ) );\nvar_dump( $hash->get( 141421 ) );","output":"bool(true)\nbool(true)\nint(223606)"}],"quickhashintset::add":[{"title":"QuickHashIntSet::add() example","source":"echo \"without dupe checking\\n\";\n$set = new QuickHashIntSet( 1024 );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\n\necho \"\\nwith dupe checking\\n\";\n$set = new QuickHashIntSet( 1024, QuickHashIntSet::CHECK_FOR_DUPES );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );","output":"without dupe checking\nbool(false)\nbool(true)\nbool(true)\nbool(true)\n\nwith dupe checking\nbool(false)\nbool(true)\nbool(true)\nbool(false)"}],"quickhashintset::__construct":[{"title":"QuickHashIntSet::__construct() example","source":"var_dump( new QuickHashIntSet( 1024 ) );\nvar_dump( new QuickHashIntSet( 1024, QuickHashIntSet::CHECK_FOR_DUPES ) );\nvar_dump(\n    new QuickHashIntSet(\n        1024,\n        QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC | QuickHashIntSet::HASHER_JENKINS2 \n    )\n);","output":null}],"quickhashintset::delete":[{"title":"QuickHashIntSet::delete() example","source":"$set = new QuickHashIntSet( 1024 );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\nvar_dump( $set->delete( 4 ) );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->delete( 4 ) );","output":"bool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)"}],"quickhashintset::exists":[{"title":"QuickHashIntSet::exists() example","source":"\/\/generate 200000 elements\n$array = range( 0, 199999 );\n$existingEntries = array_rand( array_flip( $array ), 180000 );\n$testForEntries = array_rand( array_flip( $array ), 1000 );\n$foundCount = 0;\n\necho \"Creating set: \", microtime( true ), \"\\n\";\n$set = new QuickHashIntSet( 100000 );\necho \"Adding elements: \", microtime( true ), \"\\n\";\nforeach( $existingEntries as $key )\n{\n     $set->add( $key );\n}\n\necho \"Doing 1000 tests: \", microtime( true ), \"\\n\";\nforeach( $testForEntries as $key )\n{\n     $foundCount += $set->exists( $key );\n}\necho \"Done, $foundCount found: \", microtime( true ), \"\\n\";","output":"Creating set: 1263588703.0748\nAdding elements: 1263588703.0757\nDoing 1000 tests: 1263588703.7851\nDone, 898 found: 1263588703.7897"}],"quickhashintset::getsize":[{"title":"QuickHashIntSet::getSize() example","source":"$set = new QuickHashIntSet( 8 );\nvar_dump( $set->add( 2 ) );\nvar_dump( $set->add( 3 ) );\nvar_dump( $set->getSize() );","output":"bool(true)\nbool(true)\nint(2)"}],"quickhashintset::loadfromfile":[{"title":"QuickHashIntSet::loadFromFile() example","source":"$file = dirname( __FILE__ ) . \"\/simple.set\";\n$set = QuickHashIntSet::loadFromFile(\n    $file,\n    QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $set->exists( $key ) ? 'set' : 'unset'\n    );\n}","output":"Key   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset"}],"quickhashintset::loadfromstring":[{"title":"QuickHashIntSet::loadFromString() example","source":"$contents = file_get_contents( dirname( __FILE__ ) . \"\/simple.set\" );\n$set = QuickHashIntSet::loadFromString(\n    $contents,\n    QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $set->exists( $key ) ? 'set' : 'unset'\n    );\n}","output":"Key   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset"}],"quickhashintset::savetofile":[{"title":"QuickHashIntSet::saveToFile() example","source":"$set = new QuickHashIntSet( 1024 );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\n\n$set->saveToFile( '\/tmp\/test.set' );","output":null}],"quickhashintset::savetostring":[{"title":"QuickHashIntSet::saveToString() example","source":"$set = new QuickHashIntSet( 1024 );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\nvar_dump( $set->exists( 4 ) );\nvar_dump( $set->add( 4 ) );\n\nvar_dump( $set->saveToString() );","output":null}],"quickhashintstringhash::add":[{"title":"QuickHashIntStringHash::add() example","source":"echo \"without dupe checking\\n\";\n$hash = new QuickHashIntStringHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, \"twenty two\" ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, \"twelve\" ) );\n\necho \"\\nwith dupe checking\\n\";\n$hash = new QuickHashIntStringHash( 1024, QuickHashIntStringHash::CHECK_FOR_DUPES );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, \"seventy eight\" ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->get( 4 ) );\nvar_dump( $hash->add( 4, \"nine\" ) );","output":"without dupe checking\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nstring(10) \"twenty two\"\nbool(true)\n\nwith dupe checking\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nstring(13) \"seventy eight\"\nbool(false)"}],"quickhashintstringhash::__construct":[{"title":"QuickHashIntStringHash::__construct() example","source":"var_dump( new QuickHashIntStringHash( 1024 ) );\nvar_dump( new QuickHashIntStringHash( 1024, QuickHashIntStringHash::CHECK_FOR_DUPES ) );\nvar_dump(\n    new QuickHashIntStringHash(\n        1024,\n        QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC | QuickHashIntStringHash::HASHER_JENKINS2 \n    )\n);","output":null}],"quickhashintstringhash::delete":[{"title":"QuickHashIntStringHash::delete() example","source":"$hash = new QuickHashIntStringHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, \"five\" ) );\nvar_dump( $hash->delete( 4 ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->delete( 4 ) );","output":"bool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)"}],"quickhashintstringhash::get":[{"title":"QuickHashIntStringHash::get() example","source":"$hash = new QuickHashIntStringHash( 8 );\nvar_dump( $hash->get( 1 ) );\n\nvar_dump( $hash->add( 2, \"two\" ) );\nvar_dump( $hash->get( 2 ) );\n\nvar_dump( $hash->add( 3, 5 ) );\nvar_dump( $hash->get( 3 ) );","output":"bool(false)\nbool(true)\nstring(3) \"two\"\nbool(true)\nstring(1) \"5\""}],"quickhashintstringhash::getsize":[{"title":"QuickHashIntStringHash::getSize() example","source":"$hash = new QuickHashIntStringHash( 8 );\nvar_dump( $hash->add( 2, \"two\" ) );\nvar_dump( $hash->add( 3, 5 ) );\nvar_dump( $hash->getSize() );","output":"bool(true)\nbool(true)\nint(2)"}],"quickhashintstringhash::loadfromfile":[{"title":"QuickHash IntString file format","source":"This factory method creates a hash from a file\n QuickHashIntStringHash::getSize\n QuickHashIntStringHash::loadFromString\n QuickHashIntStringHash\n PHP Manual\n\n \n  QuickHashIntStringHash::loadFromFile\n  (PECL quickhash >= Unknown)QuickHashIntStringHash::loadFromFile — This factory method creates a hash from a file\n\n \n\n \n  Description\n  \n   public static QuickHashIntStringHash QuickHashIntStringHash::loadFromFile\n    ( string $filename\n   [, int $size = 0\n   [, int $options = 0\n  ]] )\n\n  \n   This factory method creates a new hash from a definition file on disk. The\n   file format consists of a signature 'QH\\0x12\\0', the number of elements as\n   a 32 bit signed integer in system Endianness, an unsigned 32 bit integer\n   containing the number of element data to follow in characters. This element\n   data contains all the strings. After the header and the strings, the\n   elements follow in pairs of two unsigned 32 bit integers where the first\n   one is the key, and the second one the index in the element data\n   string. An example could be:\n  \n  \n   \n    Example #1 QuickHash IntString file format\n    00000000  51 48 12 00 02 00 00 00  09 00 00 00 4f 4e 45 00  |QH..........ONE.|\n00000010  4e 49 4e 45 00 01 00 00  00 00 00 00 00 03 00 00  |NINE............|\n00000020  00 04 00 00 00                                    |.....|\n00000025\n\n   \n  \n  \n   \n    Example #2 QuickHash IntString file format\n    header signature ('QH'; key type: 1; value type: 2; filler: \\0x00)\n00000000  51 48 12 00\n\nnumber of elements:\n00000004  02 00 00 00\n\nlength of string values (9 characters):\n00000008  09 00 00 00\n\nstring values:\n0000000C  4f 4e 45 00 4e 49 4e 45  00\n\ndata string:\n00000015  01 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00\n\nkey\/value 1 (key = 1, string index = 0 (\"ONE\")):\n01 00 00 00  00 00 00 00\n\nkey\/value 2 (key = 3, string index = 4 (\"NINE\")):\n03 00 00 00  04 00 00 00\n\n   \n  \n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the file to read the hash from.\n      \n     \n\n    \n    \n     \nsize\n\n     \n\n      \n       The amount of bucket lists to configure. The number you pass in will be\n       automatically rounded up to the next power of two. It is also\n       automatically limited from 4 to 4194304.\n      \n     \n\n    \n    \n     \noptions\n\n     \n\n      \n       The same options that the class' constructor takes; except that the size\n       option is ignored. It is automatically calculated to be the same as the\n       number of entries in the hash, rounded up to the nearest power of two\n       with a maximum limit of 4194304.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a new QuickHashIntStringHash.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 QuickHashIntStringHash::loadFromFile() example\n    \n\n<?php\n$file = dirname( __FILE__ ) . \"\/simple.string.hash\";\n$hash = QuickHashIntStringHash::loadFromFile(\n    $file,\n    QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nKey   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset\n\n    \n   \n  \n \n\n\n\n\n QuickHashIntStringHash::getSize\n QuickHashIntStringHash::loadFromString\n QuickHashIntStringHash\n PHP Manual","output":null},{"title":"QuickHash IntString file format","source":"This factory method creates a hash from a file\n QuickHashIntStringHash::getSize\n QuickHashIntStringHash::loadFromString\n QuickHashIntStringHash\n PHP Manual\n\n \n  QuickHashIntStringHash::loadFromFile\n  (PECL quickhash >= Unknown)QuickHashIntStringHash::loadFromFile — This factory method creates a hash from a file\n\n \n\n \n  Description\n  \n   public static QuickHashIntStringHash QuickHashIntStringHash::loadFromFile\n    ( string $filename\n   [, int $size = 0\n   [, int $options = 0\n  ]] )\n\n  \n   This factory method creates a new hash from a definition file on disk. The\n   file format consists of a signature 'QH\\0x12\\0', the number of elements as\n   a 32 bit signed integer in system Endianness, an unsigned 32 bit integer\n   containing the number of element data to follow in characters. This element\n   data contains all the strings. After the header and the strings, the\n   elements follow in pairs of two unsigned 32 bit integers where the first\n   one is the key, and the second one the index in the element data\n   string. An example could be:\n  \n  \n   \n    Example #1 QuickHash IntString file format\n    00000000  51 48 12 00 02 00 00 00  09 00 00 00 4f 4e 45 00  |QH..........ONE.|\n00000010  4e 49 4e 45 00 01 00 00  00 00 00 00 00 03 00 00  |NINE............|\n00000020  00 04 00 00 00                                    |.....|\n00000025\n\n   \n  \n  \n   \n    Example #2 QuickHash IntString file format\n    header signature ('QH'; key type: 1; value type: 2; filler: \\0x00)\n00000000  51 48 12 00\n\nnumber of elements:\n00000004  02 00 00 00\n\nlength of string values (9 characters):\n00000008  09 00 00 00\n\nstring values:\n0000000C  4f 4e 45 00 4e 49 4e 45  00\n\ndata string:\n00000015  01 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00\n\nkey\/value 1 (key = 1, string index = 0 (\"ONE\")):\n01 00 00 00  00 00 00 00\n\nkey\/value 2 (key = 3, string index = 4 (\"NINE\")):\n03 00 00 00  04 00 00 00\n\n   \n  \n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the file to read the hash from.\n      \n     \n\n    \n    \n     \nsize\n\n     \n\n      \n       The amount of bucket lists to configure. The number you pass in will be\n       automatically rounded up to the next power of two. It is also\n       automatically limited from 4 to 4194304.\n      \n     \n\n    \n    \n     \noptions\n\n     \n\n      \n       The same options that the class' constructor takes; except that the size\n       option is ignored. It is automatically calculated to be the same as the\n       number of entries in the hash, rounded up to the nearest power of two\n       with a maximum limit of 4194304.\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a new QuickHashIntStringHash.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 QuickHashIntStringHash::loadFromFile() example\n    \n\n<?php\n$file = dirname( __FILE__ ) . \"\/simple.string.hash\";\n$hash = QuickHashIntStringHash::loadFromFile(\n    $file,\n    QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\nKey   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset\n\n    \n   \n  \n \n\n\n\n\n QuickHashIntStringHash::getSize\n QuickHashIntStringHash::loadFromString\n QuickHashIntStringHash\n PHP Manual","output":null},{"title":"QuickHashIntStringHash::loadFromFile() example","source":"$file = dirname( __FILE__ ) . \"\/simple.string.hash\";\n$hash = QuickHashIntStringHash::loadFromFile(\n    $file,\n    QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}","output":"Key   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset"}],"quickhashintstringhash::loadfromstring":[{"title":"QuickHashIntStringHash::loadFromString() example","source":"$contents = file_get_contents( dirname( __FILE__ ) . \"\/simple.hash\" );\n$hash = QuickHashIntStringHash::loadFromString(\n    $contents,\n    QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    printf( \"Key %3d (%2x) is %s\\n\",\n        $key, $key, \n        $hash->exists( $key ) ? 'set' : 'unset'\n    );\n}","output":"Key   0 ( 0) is unset\nKey   1 ( 1) is set\nKey   2 ( 2) is set\nKey   3 ( 3) is set\nKey   4 ( 4) is unset\nKey   5 ( 5) is set\nKey   6 ( 6) is unset\nKey   7 ( 7) is set\nKey   8 ( 8) is unset\nKey   9 ( 9) is unset\nKey  10 ( a) is unset\nKey  11 ( b) is set\nKey  12 ( c) is unset\nKey  13 ( d) is set\nKey  14 ( e) is unset\nKey  15 ( f) is unset"}],"quickhashintstringhash::savetofile":[{"title":"QuickHashIntStringHash::saveToFile() example","source":"$hash = new QuickHashIntStringHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, \"fourty three\" ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, \"fifty two\" ) );\n\n$hash->saveToFile( '\/tmp\/test.string.hash' );","output":null}],"quickhashintstringhash::savetostring":[{"title":"QuickHashIntStringHash::saveToString() example","source":"$hash = new QuickHashIntStringHash( 1024 );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 4, \"thirty four\" ) );\nvar_dump( $hash->exists( 4 ) );\nvar_dump( $hash->add( 5, \"fifty five\" ) );\n\nvar_dump( $hash->saveToString() );","output":null}],"quickhashintstringhash::set":[{"title":"QuickHashIntStringHash::set() example","source":"$hash = new QuickHashIntStringHash( 1024 );\n\necho \"Set->Add\\n\";\nvar_dump( $hash->get( 46692 ) );\nvar_dump( $hash->set( 46692, \"sixteen thousand ninety one\" ) );\nvar_dump( $hash->get( 46692 ) );\n\necho \"Set->Update\\n\";\nvar_dump( $hash->set( 46692, \"twenty nine thousand nine hundred six\" ) );\nvar_dump( $hash->get( 46692 ) );","output":"Set->Add\nbool(false)\nint(2)\nstring(27) \"sixteen thousand ninety one\"\nSet->Update\nint(1)\nstring(37) \"twenty nine thousand nine hundred six\""}],"quickhashintstringhash::update":[{"title":"QuickHashIntStringHash::update() example","source":"$hash->add( 161803398, \"--\" );\n$hash->add( 314159265, \"a lot\" );\n\necho $hash->get( 161803398 ), \"\\n\";\necho $hash->get( 314159265 ), \"\\n\";\n\nvar_dump( $hash->update( 314159265, \"a lot plus one\" ) );\nvar_dump( $hash->update( 314159999, \"a lot plus one\" ) );\n\necho $hash->get( 161803398 ), \"\\n\";\necho $hash->get( 314159265 ), \"\\n\";","output":"--\na lot\nbool(true)\nbool(false)\n--\na lot plus one"}],"quickhashstringinthash::add":[{"title":"QuickHashStringIntHash::add() example","source":"echo \"without dupe checking\\n\";\n$hash = new QuickHashStringIntHash( 1024 );\nvar_dump( $hash );\nvar_dump( $hash->exists( \"four\" ) );\nvar_dump( $hash->get( \"four\" ) );\nvar_dump( $hash->add( \"four\", 22 ) );\nvar_dump( $hash->exists( \"four\" ) );\nvar_dump( $hash->get( \"four\" ) );\nvar_dump( $hash->add( \"four\", 12 ) );\n\necho \"\\nwith dupe checking\\n\";\n$hash = new QuickHashStringIntHash( 1024, QuickHashStringIntHash::CHECK_FOR_DUPES );\nvar_dump( $hash );\nvar_dump( $hash->exists( \"four\" ) );\nvar_dump( $hash->get( \"four\" ) );\nvar_dump( $hash->add( \"four\", 78 ) );\nvar_dump( $hash->exists( \"four\" ) );\nvar_dump( $hash->get( \"four\" ) );\nvar_dump( $hash->add( \"four\", 9 ) );","output":"without dupe checking\nobject(QuickHashStringIntHash)#1 (0) {\n}\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nint(22)\nbool(true)\n\nwith dupe checking\nobject(QuickHashStringIntHash)#2 (0) {\n}\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nint(78)\nbool(false)"}],"quickhashstringinthash::__construct":[{"title":"QuickHashStringIntHash::__construct() example","source":"var_dump( new QuickHashStringIntHash( 1024 ) );\nvar_dump( new QuickHashStringIntHash( 1024, QuickHashStringIntHash::CHECK_FOR_DUPES ) );","output":null}],"quickhashstringinthash::delete":[{"title":"QuickHashStringIntHash::delete() example","source":"$hash = new QuickHashStringIntHash( 1024 );\nvar_dump( $hash->exists( 'four' ) );\nvar_dump( $hash->add( 'four', 5 ) );\nvar_dump( $hash->get( 'four' ) );\nvar_dump( $hash->delete( 'four' ) );\nvar_dump( $hash->exists( 'four' ) );\nvar_dump( $hash->get( 'four' ) );\nvar_dump( $hash->delete( 'four' ) );","output":"bool(false)\nbool(true)\nint(5)\nbool(true)\nbool(false)\nbool(false)\nbool(false)"}],"quickhashstringinthash::get":[{"title":"QuickHashStringIntHash::get() example","source":"$hash = new QuickHashStringIntHash( 8 );\nvar_dump( $hash->get( \"one\" ) );\n\nvar_dump( $hash->add( \"two\", 2 ) );\nvar_dump( $hash->get( \"two\" ) );","output":"bool(false)\nbool(true)\nint(2)"}],"quickhashstringinthash::getsize":[{"title":"QuickHashStringIntHash::getSize() example","source":"$hash = new QuickHashStringIntHash( 8 );\nvar_dump( $hash->add( \"two\", 2 ) );\nvar_dump( $hash->add( \"three\", 5 ) );\nvar_dump( $hash->getSize() );","output":"bool(true)\nbool(true)\nint(2)"}],"quickhashstringinthash::loadfromfile":[{"title":"QuickHash StringIntHash file format","source":"This factory method creates a hash from a file\n QuickHashStringIntHash::getSize\n QuickHashStringIntHash::loadFromString\n QuickHashStringIntHash\n PHP Manual\n\n \n  QuickHashStringIntHash::loadFromFile\n  (No version information available, might only be in Git)QuickHashStringIntHash::loadFromFile — This factory method creates a hash from a file\n\n \n\n \n  Description\n  \n   public static QuickHashStringIntHash QuickHashStringIntHash::loadFromFile\n    ( string $filename\n   [, int $size = 0\n   [, int $options = 0\n  ]] )\n\n  \n   This factory method creates a new hash from a definition file on disk. The\n   file format consists of a signature 'QH\\0x21\\0', the number of elements as\n   a 32 bit signed integer in system Endianness, an unsigned 32 bit integer\n   containing the number of element data to follow in characters. This element\n   data contains all the strings. The follows another signed 32 bit integer\n   containing the number of bucket lists.  After the header and the strings,\n   the elements follow. They are ordered by bucket list so that the keys don't\n   have to be hashed in order to restore the hash. For each bucket list, the\n   following information is stored (all as 32 bit integers): the bucket list\n   index, the number of elements in that list, and then in pairs of two\n   unsigned 32 bit integers the elements, where the first one is the index\n   into the string list containing the keys, and the second one the value.  An\n   example could be:\n  \n  \n   \n    Example #1 QuickHash StringIntHash file format\n    00000000  51 48 21 00 02 00 00 00  09 00 00 00 40 00 00 00  |QH!.........@...|\n00000010  4f 4e 45 00 4e 49 4e 45  00 07 00 00 00 01 00 00  |ONE.NINE........|\n00000020  00 00 00 00 00 01 00 00  00 2f 00 00 00 01 00 00  |.........\/......|\n00000030  00 04 00 00 00 03 00 00  00                       |.........|\n00000039\n\n   \n  \n  \n   \n    Example #2 QuickHash IntHash file format\n    header signature ('QH'; key type: 2; value type: 1; filler: \\0x00)\n00000000  51 48 21 00\n\nnumber of elements:\n00000004  02 00 00 00\n\nlength of string values (9 characters):\n00000008  09 00 00 00\n\nnumber of hash bucket lists (this is configured for hashes as argument to the\nconstructor normally, 64 in this case):\n0000000C  40 00 00 00\n\nstring values:\n00000010  4f 4e 45 00 4e 49 4e 45  00\n\nbucket lists:\n  bucket list 1 (with key 7, and 1 element):\n    header:\n    07 00 00 00 01 00 00 00\n    elements (key index: 0 ('ONE'), value = 0):\n    00 00 00 00 01 00 00 00\n  bucket list 2 (with key 0x2f, and 1 element):\n    header:\n    2f 00 00 00 01 00 00 00\n    elements (key index: 4 ('NINE'), value = 3):\n    04 00 00 00 03 00 00 00\n\n   \n  \n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the file to read the hash from.\n      \n     \n\n    \n    \n     \nsize\n\n     \n\n      \n       The amount of bucket lists to configure. The number you pass in will be\n       automatically rounded up to the next power of two. It is also\n       automatically limited from 4 to 4194304.\n      \n     \n\n    \n    \n     \noptions\n\n     \n\n      \n       The same options that the class' constructor takes; except that the size\n       option is ignored. It is read from the file format (unlike the\n       QuickHashIntHash and QuickHashIntStringHash classes, where it is\n       automatically calculated from the number of entries in the hash.)\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a new QuickHashStringIntHash.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 QuickHashStringIntHash::loadFromFile() example\n    \n\n<?php\n$file = dirname( __FILE__ ) . \"\/simple.hash.string\";\n$hash = QuickHashStringIntHash::loadFromFile(\n    $file,\n    QuickHashStringIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    $i = 48712 + $key * 1631;\n    $k = base_convert( $i, 10, 36 );\n    echo $k, ' => ', $hash->get( $k ), \"\\n\";\n}\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n11l4 => 48712\n12uf => 50343\n143q => 51974\n15d1 => 53605\n16mc => 55236\n17vn => 56867\n194y => 58498\n1ae9 => 60129\n1bnk => 61760\n1cwv => 63391\n1e66 => 65022\n1ffh => 66653\n1gos => 68284\n1hy3 => 69915\n1j7e => 71546\n1kgp => 73177\n\n    \n   \n  \n \n\n\n\n\n QuickHashStringIntHash::getSize\n QuickHashStringIntHash::loadFromString\n QuickHashStringIntHash\n PHP Manual","output":null},{"title":"QuickHash IntHash file format","source":"This factory method creates a hash from a file\n QuickHashStringIntHash::getSize\n QuickHashStringIntHash::loadFromString\n QuickHashStringIntHash\n PHP Manual\n\n \n  QuickHashStringIntHash::loadFromFile\n  (No version information available, might only be in Git)QuickHashStringIntHash::loadFromFile — This factory method creates a hash from a file\n\n \n\n \n  Description\n  \n   public static QuickHashStringIntHash QuickHashStringIntHash::loadFromFile\n    ( string $filename\n   [, int $size = 0\n   [, int $options = 0\n  ]] )\n\n  \n   This factory method creates a new hash from a definition file on disk. The\n   file format consists of a signature 'QH\\0x21\\0', the number of elements as\n   a 32 bit signed integer in system Endianness, an unsigned 32 bit integer\n   containing the number of element data to follow in characters. This element\n   data contains all the strings. The follows another signed 32 bit integer\n   containing the number of bucket lists.  After the header and the strings,\n   the elements follow. They are ordered by bucket list so that the keys don't\n   have to be hashed in order to restore the hash. For each bucket list, the\n   following information is stored (all as 32 bit integers): the bucket list\n   index, the number of elements in that list, and then in pairs of two\n   unsigned 32 bit integers the elements, where the first one is the index\n   into the string list containing the keys, and the second one the value.  An\n   example could be:\n  \n  \n   \n    Example #1 QuickHash StringIntHash file format\n    00000000  51 48 21 00 02 00 00 00  09 00 00 00 40 00 00 00  |QH!.........@...|\n00000010  4f 4e 45 00 4e 49 4e 45  00 07 00 00 00 01 00 00  |ONE.NINE........|\n00000020  00 00 00 00 00 01 00 00  00 2f 00 00 00 01 00 00  |.........\/......|\n00000030  00 04 00 00 00 03 00 00  00                       |.........|\n00000039\n\n   \n  \n  \n   \n    Example #2 QuickHash IntHash file format\n    header signature ('QH'; key type: 2; value type: 1; filler: \\0x00)\n00000000  51 48 21 00\n\nnumber of elements:\n00000004  02 00 00 00\n\nlength of string values (9 characters):\n00000008  09 00 00 00\n\nnumber of hash bucket lists (this is configured for hashes as argument to the\nconstructor normally, 64 in this case):\n0000000C  40 00 00 00\n\nstring values:\n00000010  4f 4e 45 00 4e 49 4e 45  00\n\nbucket lists:\n  bucket list 1 (with key 7, and 1 element):\n    header:\n    07 00 00 00 01 00 00 00\n    elements (key index: 0 ('ONE'), value = 0):\n    00 00 00 00 01 00 00 00\n  bucket list 2 (with key 0x2f, and 1 element):\n    header:\n    2f 00 00 00 01 00 00 00\n    elements (key index: 4 ('NINE'), value = 3):\n    04 00 00 00 03 00 00 00\n\n   \n  \n \n\n\n \n  Parameters\n  \n   \nfilename\n\n     \n\n      \n       The filename of the file to read the hash from.\n      \n     \n\n    \n    \n     \nsize\n\n     \n\n      \n       The amount of bucket lists to configure. The number you pass in will be\n       automatically rounded up to the next power of two. It is also\n       automatically limited from 4 to 4194304.\n      \n     \n\n    \n    \n     \noptions\n\n     \n\n      \n       The same options that the class' constructor takes; except that the size\n       option is ignored. It is read from the file format (unlike the\n       QuickHashIntHash and QuickHashIntStringHash classes, where it is\n       automatically calculated from the number of entries in the hash.)\n      \n     \n\n    \n   \n\n\n \n  Return Values\n  \n   Returns a new QuickHashStringIntHash.\n  \n \n\n\n \n  Examples\n  \n   \n    Example #3 QuickHashStringIntHash::loadFromFile() example\n    \n\n<?php\n$file = dirname( __FILE__ ) . \"\/simple.hash.string\";\n$hash = QuickHashStringIntHash::loadFromFile(\n    $file,\n    QuickHashStringIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    $i = 48712 + $key * 1631;\n    $k = base_convert( $i, 10, 36 );\n    echo $k, ' => ', $hash->get( $k ), \"\\n\";\n}\n?>\n\n\n    \n\n    The above example will output\nsomething similar to:\n    \n\n11l4 => 48712\n12uf => 50343\n143q => 51974\n15d1 => 53605\n16mc => 55236\n17vn => 56867\n194y => 58498\n1ae9 => 60129\n1bnk => 61760\n1cwv => 63391\n1e66 => 65022\n1ffh => 66653\n1gos => 68284\n1hy3 => 69915\n1j7e => 71546\n1kgp => 73177\n\n    \n   \n  \n \n\n\n\n\n QuickHashStringIntHash::getSize\n QuickHashStringIntHash::loadFromString\n QuickHashStringIntHash\n PHP Manual","output":null},{"title":"QuickHashStringIntHash::loadFromFile() example","source":"$file = dirname( __FILE__ ) . \"\/simple.hash.string\";\n$hash = QuickHashStringIntHash::loadFromFile(\n    $file,\n    QuickHashStringIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    $i = 48712 + $key * 1631;\n    $k = base_convert( $i, 10, 36 );\n    echo $k, ' => ', $hash->get( $k ), \"\\n\";\n}","output":"11l4 => 48712\n12uf => 50343\n143q => 51974\n15d1 => 53605\n16mc => 55236\n17vn => 56867\n194y => 58498\n1ae9 => 60129\n1bnk => 61760\n1cwv => 63391\n1e66 => 65022\n1ffh => 66653\n1gos => 68284\n1hy3 => 69915\n1j7e => 71546\n1kgp => 73177"}],"quickhashstringinthash::loadfromstring":[{"title":"QuickHashStringIntHash::loadFromString() example","source":"$contents = file_get_contents( dirname( __FILE__ ) . \"\/simple.hash.string\" );\n$hash = QuickHashStringIntHash::loadFromString(\n    $contents,\n    QuickHashStringIntHash::DO_NOT_USE_ZEND_ALLOC\n);\nforeach( range( 0, 0x0f ) as $key )\n{\n    $i = 48712 + $key * 1631;\n    $k = base_convert( $i, 10, 36 );\n    echo $k, ' => ', $hash->get( $k ), \"\\n\";\n}","output":"11l4 => 48712\n12uf => 50343\n143q => 51974\n15d1 => 53605\n16mc => 55236\n17vn => 56867\n194y => 58498\n1ae9 => 60129\n1bnk => 61760\n1cwv => 63391\n1e66 => 65022\n1ffh => 66653\n1gos => 68284\n1hy3 => 69915\n1j7e => 71546\n1kgp => 73177"}],"quickhashstringinthash::savetofile":[{"title":"QuickHashStringIntHash::saveToFile() example","source":"$hash = new QuickHashStringIntHash( 1024 );\nvar_dump( $hash->add( \"fourty three\", 42 ) );\nvar_dump( $hash->add( \"fifty two\", 52 ) );\n\n$hash->saveToFile( '\/tmp\/test.hash.string' );","output":null}],"quickhashstringinthash::savetostring":[{"title":"QuickHashStringIntHash::saveToString() example","source":"$hash = new QuickHashStringIntHash( 1024 );\nvar_dump( $hash->add( \"fourty three\", 42 ) );\nvar_dump( $hash->add( \"fifty two\", 52 ) );\n\nvar_dump( $hash->saveToString() );","output":null}],"quickhashstringinthash::set":[{"title":"QuickHashStringIntHash::set() example","source":"$hash = new QuickHashStringIntHash( 1024 );\n\necho \"Set->Add\\n\";\nvar_dump( $hash->get( \"fourty six thousand six hundred ninety two\" ) );\nvar_dump( $hash->set( \"fourty six thousand six hundred ninety two\", 16091 ) );\nvar_dump( $hash->get( \"fourty six thousand six hundred ninety two\" ) );\n\necho \"Set->Update\\n\";\nvar_dump( $hash->set( \"fourty six thousand six hundred ninety two\", 29906 ) );\nvar_dump( $hash->get( \"fourty six thousand six hundred ninety two\" ) );","output":"Set->Add\nbool(false)\nint(2)\nint(16091)\nSet->Update\nint(1)\nint(29906)"}],"quickhashstringinthash::update":[{"title":"QuickHashStringIntHash::update() example","source":"$hash = new QuickHashStringIntHash( 1024 );\n\n$hash->add( 'six', 314159265 );\n$hash->add( \"a lot\", 314159265 );\n\necho $hash->get( 'six' ), \"\\n\";\necho $hash->get( 'a lot' ), \"\\n\";\n\nvar_dump( $hash->update( 'a lot', 314159266 ) ); \nvar_dump( $hash->update( \"a lot plus one\", 314159999 ) );\n\necho $hash->get( 'six' ), \"\\n\";\necho $hash->get( 'a lot' ), \"\\n\";","output":"314159265\n314159265\nbool(true)\nbool(false)\n314159265\n314159266"}],"rararchive::close":[{"title":"Object oriented style","source":"$rar_arch = RarArchive::open('latest_winrar.rar');\necho $rar_arch.\"\\n\";\n$rar_arch->close();\necho $rar_arch.\"\\n\";","output":"RAR Archive \"D:\\php_rar\\trunk\\tests\\latest_winrar.rar\"\nRAR Archive \"D:\\php_rar\\trunk\\tests\\latest_winrar.rar\" (closed)"},{"title":"Procedural style","source":"$rar_arch = rar_open('latest_winrar.rar');\necho $rar_arch.\"\\n\";\nrar_close($rar_arch);\necho $rar_arch.\"\\n\";","output":null}],"rararchive::getcomment":[{"title":"Object oriented style","source":"$rar_arch = RarArchive::open('commented.rar'); \necho $rar_arch->getComment();","output":"This is the comment of the file commented.rar."},{"title":"Procedural style","source":"$rar_arch = rar_open('commented.rar'); \necho rar_comment_get($rar_arch);","output":null}],"rararchive::getentries":[{"title":"Object oriented style","source":"$rar_arch = RarArchive::open('solid.rar');\nif ($rar_arch === FALSE)\n    die(\"Could not open RAR archive.\");\n\n$rar_entries = $rar_arch->getEntries();\nif ($rar_entries === FALSE)\n    die(\"Could not retrieve entries.\");\n\necho \"Found \" . count($rar_entries) . \" entries.\\n\";\n\nforeach ($rar_entries as $e) {\n    echo $e;\n    echo \"\\n\";\n}\n$rar_arch->close();","output":"Found 2 entries.\nRarEntry for file \"tese.txt\" (23b93a7a)\nRarEntry for file \"unrardll.txt\" (2ed64b6e)"},{"title":"Procedural style","source":"$rar_arch = rar_open('solid.rar');\nif ($rar_arch === FALSE)\n    die(\"Could not open RAR archive.\");\n\n$rar_entries = rar_list($rar_arch);\nif ($rar_entries === FALSE)\n    die(\"Could retrieve entries.\");\n\necho \"Found \" . count($rar_entries) . \" entries.\\n\";\n\nforeach ($rar_entries as $e) {\n    echo $e;\n    echo \"\\n\";\n}\nrar_close($rar_arch);","output":null}],"rararchive::getentry":[{"title":"Object oriented style","source":"$rar_arch = RarArchive::open('solid.rar');\nif ($rar_arch === FALSE)\n    die(\"Could not open RAR archive.\");\n$rar_entry = $rar_arch->getEntry('tese.txt');\nif ($rar_entry === FALSE)\n    die(\"Could not get such entry\");\necho get_class($rar_entry).\"\\n\";\necho $rar_entry;\n$rar_arch->close();","output":"RarEntry\nRarEntry for file \"tese.txt\" (23b93a7a)"},{"title":"Procedural style","source":"$rar_arch = rar_open('solid.rar');\nif ($rar_arch === FALSE)\n    die(\"Could not open RAR archive.\");\n$rar_entry = rar_entry_get($rar_arch, 'tese.txt');\nif ($rar_entry === FALSE)\n    die(\"Could not get such entry\");\necho get_class($rar_entry).\"\\n\";\necho $rar_entry;\nrar_close($rar_arch);","output":null}],"rararchive::isbroken":[{"title":"Object oriented style","source":"function retnull() { return null; }\n$file = dirname(__FILE__) . \"\/multi_broken.part1.rar\";\n\/* Third argument is used to omit notice *\/\n$arch = RarArchive::open($file, null, 'retnull');\nvar_dump($arch->isBroken());","output":"bool(true)"},{"title":"Procedural style","source":"function retnull() { return null; }\n$file = dirname(__FILE__) . \"\/multi_broken.part1.rar\";\n\/* Third argument is used to omit notice *\/\n$arch = rar_open($file, null, 'retnull');\nvar_dump(rar_broken_is($arch));","output":null}],"rararchive::issolid":[{"title":"Object oriented style","source":"$arch1 = RarArchive::open(\"store_method.rar\");\n$arch2 = RarArchive::open(\"solid.rar\");\necho \"$arch1: \" . ($arch1->isSolid()?'yes':'no') .\"\\n\";\necho \"$arch2: \" . ($arch2->isSolid()?'yes':'no') . \"\\n\";","output":"RAR Archive \"C:\\php_rar\\trunk\\tests\\store_method.rar\": no\nRAR Archive \"C:\\php_rar\\trunk\\tests\\solid.rar\": yes"},{"title":"Procedural style","source":"$arch1 = rar_open(\"store_method.rar\");\n$arch2 = rar_open(\"solid.rar\");\necho \"$arch1: \" . (rar_solid_is($arch1)?'yes':'no') .\"\\n\";\necho \"$arch2: \" . (rar_solid_is($arch2)?'yes':'no') . \"\\n\";","output":null}],"rararchive::open":[{"title":"Object oriented style","source":"$rar_arch = RarArchive::open('encrypted_headers.rar', 'samplepassword');\nif ($rar_arch === FALSE)\n    die(\"Failed opening file\");\n    \n$entries = $rar_arch->getEntries();\nif ($entries === FALSE)\n    die(\"Failed fetching entries\");\n\necho \"Found \" . count($entries) . \" files.\\n\";\n\nif (empty($entries))\n    die(\"No valid entries found.\");\n    \n$stream = reset($entries)->getStream();\nif ($stream === FALSE)\n    die(\"Failed opening first file\");\n\n$rar_arch->close();\n\necho \"Content of first one follows:\\n\";\necho stream_get_contents($stream);\n\nfclose($stream);","output":"Found 2 files.\nContent of first one follows:\nEncrypted file 1 contents."},{"title":"Procedural style","source":"$rar_arch = rar_open('encrypted_headers.rar', 'samplepassword');\nif ($rar_arch === FALSE)\n    die(\"Failed opening file\");\n    \n$entries = rar_list($rar_arch);\nif ($entries === FALSE)\n    die(\"Failed fetching entries\");\n\necho \"Found \" . count($entries) . \" files.\\n\";\n\nif (empty($entries))\n    die(\"No valid entries found.\");\n    \n$stream = reset($entries)->getStream();\nif ($stream === FALSE)\n    die(\"Failed opening first file\");\n\nrar_close($rar_arch);\n\necho \"Content of first one follows:\\n\";\necho stream_get_contents($stream);\n\nfclose($stream);","output":null},{"title":"Volume Callback","source":"\/* In this example, there's a volume named multi_broken.part1.rar\n * whose next volume is named multi.part2.rar *\/\nfunction resolve($vol) {\n    if (preg_match('\/_broken\/', $vol))\n        return str_replace('_broken', '', $vol);\n    else\n        return null;\n}\n$rar_file1 = rar_open(dirname(__FILE__).'\/multi_broken.part1.rar', null, 'resolve');\n$entry = $rar_file1->getEntry('file2.txt');\n$entry->extract(null, dirname(__FILE__) . \"\/temp_file2.txt\");","output":null}],"rararchive::setallowbroken":[{"title":"Object oriented style","source":"function retnull() { return null; }\n$file = dirname(__FILE__) . \"\/multi_broken.part1.rar\";\n\/* Third argument omits \"volume not found\" message *\/\n$a = RarArchive::open($file, null, 'retnull');\n$a->setAllowBroken(true);\nforeach ($a->getEntries() as $e) {\n    echo \"$e\\n\";\n}\nvar_dump(count($a));","output":"RarEntry for file \"file1.txt\" (52b28202)\nint(1)"},{"title":"Procedural style","source":"function retnull() { return null; }\n$file = dirname(__FILE__) . \"\/multi_broken.part1.rar\";\n\/* Third argument omits \"volume not found\" message *\/\n$a = rar_open($file, null, 'retnull');\nrar_allow_broken_set($a, true);\nforeach (rar_list($a) as $e) {\n    echo \"$e\\n\";\n}\nvar_dump(count($a));","output":null}],"rararchive::__tostring":[{"title":"RarArchive::__toString() example","source":"$rar_arch = RarArchive::open('latest_winrar.rar');\necho $rar_arch.\"\\n\";\n$rar_arch->close();\necho $rar_arch.\"\\n\";","output":"RAR Archive \"D:\\php_rar\\trunk\\tests\\latest_winrar.rar\"\nRAR Archive \"D:\\php_rar\\trunk\\tests\\latest_winrar.rar\" (closed)"}],"rarentry::extract":[{"title":"RarEntry::extract() example","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\n$entry->extract('\/dir\/to'); \/\/ create \/dir\/to\/Dir\/file.txt\n$entry->extract(false, '\/dir\/to\/new_name.txt'); \/\/ create \/dir\/to\/new_name.txt","output":null},{"title":"How to extract all files in archive:","source":"\/* example by Erik Jenssen aka erix *\/\n\n$filename = \"foobar.rar\";\n$filepath = \"\/home\/foo\/bar\/\";\n\n$rar_file = rar_open($filepath.$filename);\n$list = rar_list($rar_file);\nforeach($list as $file) {\n    $entry = rar_entry_get($rar_file, $file);\n    $entry->extract(\".\"); \/\/ extract to the current dir\n}\nrar_close($rar_file);","output":null}],"rarentry::getattr":[{"title":"RarEntry::getAttr() example","source":"$rar_file = rar_open('example.rar') or die(\"Can't open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'dir\/in\/the\/archive') or die(\"Can't find such entry\");\n\n$host_os = $entry->getHostOs();\n$attr = $entry->getAttr();\n\nswitch($host_os) {\n    case RAR_HOST_MSDOS:\n    case RAR_HOST_OS2:\n    case RAR_HOST_WIN32:\n    case RAR_HOST_MACOS:\n        printf(\"%c%c%c%c%c%c\\n\",\n                ($attr & 0x08) ? 'V' : '.',\n                ($attr & 0x10) ? 'D' : '.',\n                ($attr & 0x01) ? 'R' : '.',\n                ($attr & 0x02) ? 'H' : '.',\n                ($attr & 0x04) ? 'S' : '.',\n                ($attr & 0x20) ? 'A' : '.');\n        break;\n    case RAR_HOST_UNIX:\n    case RAR_HOST_BEOS:\n        switch ($attr & 0xF000)\n        {\n            case 0x4000:\n                printf(\"d\");\n                break;\n            case 0xA000:\n                printf(\"l\");\n                break;\n            default:\n                printf(\"-\");\n                break;\n        }\n        printf(\"%c%c%c%c%c%c%c%c%c\\n\",\n                ($attr & 0x0100) ? 'r' : '-',\n                ($attr & 0x0080) ? 'w' : '-',\n                ($attr & 0x0040) ? (($attr & 0x0800) ? 's':'x'):(($attr & 0x0800) ? 'S':'-'),\n                ($attr & 0x0020) ? 'r' : '-',\n                ($attr & 0x0010) ? 'w' : '-',\n                ($attr & 0x0008) ? (($attr & 0x0400) ? 's':'x'):(($attr & 0x0400) ? 'S':'-'),\n                ($attr & 0x0004) ? 'r' : '-',\n                ($attr & 0x0002) ? 'w' : '-',\n                ($attr & 0x0001) ? 'x' : '-');\n        break;\n}\n\nrar_close($rar_file);","output":null}],"rarentry::gethostos":[{"title":"RarEntry::getHostOs() example (version >= 2.0.0)","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\nswitch ($entry->getHostOs()) {\n    case RarEntry::HOST_MSDOS:\n        echo \"MS-DOS\\n\";\n        break;\n    case RarEntry::HOST_OS2:\n        echo \"OS2\\n\";\n        break;\n    case RarEntry::HOST_WIN32:\n        echo \"Win32\\n\";\n        break;\n    case RarEntry::HOST_MACOS:\n        echo \"MacOS\\n\";\n        break;\n    case RarEntry::HOST_UNIX:\n        echo \"Unix\/Linux\\n\";\n        break;\n    case RarEntry::HOST_BEOS:\n        echo \"BeOS\\n\";\n        break;\n}","output":null},{"title":"RarEntry::getHostOs() example (version <= 1.0.0)","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\nswitch ($entry->getHostOs()) {\n    case RAR_HOST_MSDOS:\n        echo \"MS-DOS\\n\";\n        break;\n    case RAR_HOST_OS2:\n        echo \"OS2\\n\";\n        break;\n    case RAR_HOST_WIN32:\n        echo \"Win32\\n\";\n        break;\n    case RAR_HOST_MACOS:\n        echo \"MacOS\\n\";\n        break;\n    case RAR_HOST_UNIX:\n        echo \"Unix\/Linux\\n\";\n        break;\n    case RAR_HOST_BEOS:\n        echo \"BeOS\\n\";\n        break;\n}","output":null}],"rarentry::getmethod":[{"title":"RarEntry::getMethod() example","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\necho \"Method number: \" . $entry->getMethod();","output":null}],"rarentry::getname":[{"title":"RarEntry::getName() example","source":"\/\/this example is safe even in pages not encoded in UTF-8\n\/\/for those encoded in UTF-8, the call to mb_convert_encoding is unnecessary\n\n$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\necho \"Entry name: \" . mb_convert_encoding(\n    htmlentities(\n        $entry->getName(),\n        ENT_COMPAT,\n        \"UTF-8\"\n    ),\n    \"HTML-ENTITIES\",\n    \"UTF-8\"\n);","output":null}],"rarentry::getpackedsize":[{"title":"RarEntry::getPackedSize() example","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\necho \"Packed size of \" . $entry->getName() . \" = \" . $entry->getPackedSize() . \" bytes\";","output":null}],"rarentry::getstream":[{"title":"RarEntry::getStream() example","source":"$rar_file = rar_open('example.rar');\nif ($rar_file === false)\n    die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt');\nif ($entry === false)\n    die(\"Failed to find such entry\");\n\n$stream = $entry->getStream();\nif ($stream === false)\n    die(\"Failed to obtain stream.\");\n\nrar_close($rar_file); \/\/stream is independent from file\n\nwhile (!feof($stream)) {\n    $buff = fread($stream, 8192);\n    if ($buff !== false)\n        echo $buff;\n    else\n        break; \/\/fread error\n}\n\nfclose($stream);","output":null}],"rarentry::getunpackedsize":[{"title":"RarEntry::getUnpackedSize() example","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\necho \"Unpacked size of \" . $entry->getName() . \" = \" . $entry->getPackedSize() . \" bytes\";","output":null}],"rarentry::getversion":[{"title":"RarEntry::getVersion() example","source":"$rar_file = rar_open('example.rar') or die(\"Failed to open Rar archive\");\n\n$entry = rar_entry_get($rar_file, 'Dir\/file.txt') or die(\"Failed to find such entry\");\n\necho \"Rar version required for unpacking: \" . $entry->getVersion();","output":null}],"rarexception::isusingexceptions":[{"title":"RarException::isUsingExceptions() example","source":"\/\/The default is not to use exceptions\nvar_dump(RarException::isUsingExceptions());","output":"bool(false)"}],"rarexception::setusingexceptions":[{"title":"RarException::setUsingExceptions() example","source":"var_dump(RarException::isUsingExceptions());\n$arch = RarArchive::open(\"does_not_exist.rar\");\nvar_dump($arch);\n\nRarException::setUsingExceptions(true);\nvar_dump(RarException::isUsingExceptions());\n$arch = RarArchive::open(\"does_not_exist.rar\");\nvar_dump($arch); \/\/not reached","output":"bool(false)\n\nWarning: RarArchive::open(): Failed to open does_not_exist.rar: ERAR_EOPEN (file open error) in C:\\php_rar\\trunk\\tests\\test.php on line 3\nbool(false)\nbool(true)\n\nFatal error: Uncaught exception 'RarException' with message 'unRAR internal error: Failed to open does_not_exist.rar: ERAR_EOPEN (file open error)' in C:\\php_rar\\trunk\\tests\\test.php:8\nStack trace:\n#0 C:\\php_rar\\trunk\\tests\\test.php(8): RarArchive::open('does_not_exist....')\n#1 {main}\n  thrown in C:\\php_rar\\trunk\\tests\\test.php on line 8"}],"recursivearrayiterator::getchildren":[{"title":"RecursiveArrayIterator::getChildren() example","source":"$fruits = array(\"a\" => \"lemon\", \"b\" => \"orange\", array(\"a\" => \"apple\", \"p\" => \"pear\"));\n\n$iterator = new RecursiveArrayIterator($fruits);\n\nwhile ($iterator->valid()) {\n\n    if ($iterator->hasChildren()) {\n        \/\/ print all children\n        foreach ($iterator->getChildren() as $key => $value) {\n            echo $key . ' : ' . $value . \"\\n\";\n        }\n    } else {\n        echo \"No children.\\n\";\n    }\n\n    $iterator->next();\n}","output":"No children.\nNo children.\na : apple\np : pear"}],"recursivearrayiterator::haschildren":[{"title":"RecursiveArrayIterator::hasChildren() example","source":"$fruits = array(\"a\" => \"lemon\", \"b\" => \"orange\", array(\"a\" => \"apple\", \"p\" => \"pear\"));\n\n$iterator = new RecursiveArrayIterator($fruits);\n\nwhile ($iterator->valid()) {\n\n    \/\/ Check if there are children\n    if ($iterator->hasChildren()) {\n        \/\/ print all children\n        foreach ($iterator->getChildren() as $key => $value) {\n            echo $key . ' : ' . $value . \"\\n\";\n        }\n    } else {\n        echo \"No children.\\n\";\n    }\n\n    $iterator->next();\n}","output":"No children.\nNo children.\na : apple\np : pear"}],"recursivecallbackfilteriterator::haschildren":[{"title":"RecursiveCallbackFilterIterator::hasChildren() basic usage","source":"$dir = new RecursiveDirectoryIterator(__DIR__);\n\n\/\/ Recursively iterate over XML files\n$files = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {\n    \/\/ Allow recursion into directories\n    if ($iterator->hasChildren()) {\n        return TRUE;\n    }\n    \/\/ Check for XML file\n    if (!strcasecmp($current->getExtension(), 'xml')) {\n        return TRUE;\n    }\n    return FALSE;\n});","output":null}],"recursivedirectoryiterator::__construct":[{"title":"RecursiveDirectoryIterator example","source":"$directory = '\/tmp';\n\n$it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory));\n\n$it->rewind();\nwhile($it->valid()) {\n\n    if (!$it->isDot()) {\n        echo 'SubPathName: ' . $it->getSubPathName() . \"\\n\";\n        echo 'SubPath:     ' . $it->getSubPath() . \"\\n\";\n        echo 'Key:         ' . $it->key() . \"\\n\\n\";\n    }\n\n    $it->next();\n}","output":"SubPathName: fruit\/apple.xml\nSubPath:     fruit\nKey:         \/tmp\/fruit\/apple.xml\n\nSubPathName: stuff.xml\nSubPath:     \nKey:         \/tmp\/stuff.xml\n\nSubPathName: veggies\/carrot.xml\nSubPath:     veggies\nKey:         \/tmp\/veggies\/carrot.xml"}],"recursivefilteriterator::__construct":[{"title":"Basic RecursiveFilterIterator() example","source":"class TestsOnlyFilter extends RecursiveFilterIterator {\n    public function accept() {\n        \/\/ Accept the current item if we can recurse into it\n        \/\/ or it is a value starting with \"test\"\n        return $this->hasChildren() || (strpos($this->current(), \"test\") !== FALSE);\n    }\n}\n\n$array    = array(\"test1\", array(\"taste2\", \"test3\", \"test4\"), \"test5\");\n$iterator = new RecursiveArrayIterator($array);\n$filter   = new TestsOnlyFilter($iterator);\n\nforeach(new RecursiveIteratorIterator($filter) as $key => $value)\n{\n    echo $value . \"\\n\";\n}","output":"test1\ntest3\ntest4\ntest5"},{"title":"RecursiveFilterIterator() example","source":"class StartsWithFilter extends RecursiveFilterIterator {\n\n    protected $word;\n\n    public function __construct(RecursiveIterator $rit, $word) {\n        $this->word = $word;\n        parent::__construct($rit);\n    }\n\n    public function accept() {\n        return $this->hasChildren() OR strpos($this->current(), $this->word) === 0;\n    }\n    \n    public function getChildren() {\n        return new self($this->getInnerIterator()->getChildren(), $this->word);\n    }\n}\n\n$array    = array(\"test1\", array(\"taste2\", \"test3\", \"test4\"), \"test5\");\n$iterator = new RecursiveArrayIterator($array);\n$filter   = new StartsWithFilter($iterator, \"test\");\n\nforeach(new RecursiveIteratorIterator($filter) as $key => $value)\n{\n    echo $value . \"\\n\";\n}","output":"test1\ntest3\ntest4\ntest5"}],"recursiveiteratoriterator::__construct":[{"title":"Iterating a RecursiveIteratorIterator","source":"$array = array(\n    array(\n        array(\n            array(\n                'leaf-0-0-0-0',\n                'leaf-0-0-0-1'\n            ),\n            'leaf-0-0-0'\n        ),\n        array(\n            array(\n                'leaf-0-1-0-0',\n                'leaf-0-1-0-1'\n            ),\n            'leaf-0-1-0'\n        ),\n        'leaf-0-0'\n    )\n);\n\n$iterator = new RecursiveIteratorIterator(\n    new RecursiveArrayIterator($array),\n    $mode\n);\nforeach ($iterator as $key => $leaf) {\n    echo \"$key => $leaf\", PHP_EOL;\n}","output":"0 => leaf-0-0-0-0\n1 => leaf-0-0-0-1\n0 => leaf-0-0-0\n0 => leaf-0-1-0-0\n1 => leaf-0-1-0-1\n0 => leaf-0-1-0\n0 => leaf-0-0"}],"recursiveregexiterator::getchildren":[{"title":"RecursiveRegexIterator::getChildren() example","source":"$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));\n$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '\/^test\/',\n    RecursiveRegexIterator::ALL_MATCHES);\n\nforeach ($rRegexIterator as $key1 => $value1) {\n\n    if ($rRegexIterator->hasChildren()) {\n\n        \/\/ print all children\n        echo \"Children: \";\n        foreach ($rRegexIterator->getChildren() as $key => $value) {\n            echo $value . \" \";\n        }\n        echo \"\\n\";\n    } else {\n        echo \"No children\\n\";\n    }\n\n}","output":"No children\nChildren: test4 test5"}],"recursiveregexiterator::haschildren":[{"title":"RecursiveRegexIterator::hasChildren() example","source":"$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));\n$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '\/^test\/',\n    RecursiveRegexIterator::ALL_MATCHES);\n\nforeach ($rRegexIterator as $value) {\n    var_dump($rRegexIterator->hasChildren());\n}","output":"bool(false)\nbool(true)"}],"reflection::getmodifiernames":[{"title":"Reflection::getModifierNames() example","source":"class Testing\n{\n    final public static function foo()\n    {\n        return;\n    }\n\n    public function bar()\n    {\n        return;\n    }\n}\n\n$foo = new ReflectionMethod('Testing', 'foo');\n\necho \"Modifiers for method foo():\\n\";\necho $foo->getModifiers() . \"\\n\";\necho implode(' ', Reflection::getModifierNames($foo->getModifiers())) . \"\\n\";\n\n$bar = new ReflectionMethod('Testing', 'bar');\n\necho \"Modifiers for method bar():\\n\";\necho $bar->getModifiers() . \"\\n\";\necho implode(' ', Reflection::getModifierNames($bar->getModifiers()));","output":"Modifiers for method foo():\n261\nfinal public static\nModifiers for method bar():\n65792\npublic"}],"reflectionclass::__construct":[{"title":"Basic usage ReflectionClass","source":"Reflection::export(new ReflectionClass('Exception'));","output":"Class [ <internal:Core> class Exception ] {\n\n  - Constants [0] {\n  }\n\n  - Static properties [0] {\n  }\n\n  - Static methods [0] {\n  }\n\n  - Properties [7] {\n    Property [ <default> protected $message ]\n    Property [ <default> private $string ]\n    Property [ <default> protected $code ]\n    Property [ <default> protected $file ]\n    Property [ <default> protected $line ]\n    Property [ <default> private $trace ]\n    Property [ <default> private $previous ]\n  }\n\n  - Methods [10] {\n    Method [ <internal:Core> final private method __clone ] {\n    }\n\n    Method [ <internal:Core, ctor> public method __construct ] {\n\n      - Parameters [3] {\n        Parameter #0 [ <optional> $message ]\n        Parameter #1 [ <optional> $code ]\n        Parameter #2 [ <optional> $previous ]\n      }\n    }\n\n    Method [ <internal:Core> final public method getMessage ] {\n    }\n\n    Method [ <internal:Core> final public method getCode ] {\n    }\n\n    Method [ <internal:Core> final public method getFile ] {\n    }\n\n    Method [ <internal:Core> final public method getLine ] {\n    }\n\n    Method [ <internal:Core> final public method getTrace ] {\n    }\n\n    Method [ <internal:Core> final public method getPrevious ] {\n    }\n\n    Method [ <internal:Core> final public method getTraceAsString ] {\n    }\n\n    Method [ <internal:Core> public method __toString ] {\n    }\n  }\n}"}],"reflectionclass::export":[{"title":"Basic usage of ReflectionClass::export()","source":"class Apple {\n    public $var1;\n    public $var2 = 'Orange';\n\n    public function type() {\n        return 'Apple';\n    }\n}\nReflectionClass::export('Apple');","output":"Class [ <user> class Apple ] {\n  @@ php shell code 1-8\n\n  - Constants [0] {\n  }\n\n  - Static properties [0] {\n  }\n\n  - Static methods [0] {\n  }\n\n  - Properties [2] {\n    Property [ <default> public $var1 ]\n    Property [ <default> public $var2 ]\n  }\n\n  - Methods [1] {\n    Method [ <user> public method type ] {\n      @@ php shell code 5 - 7\n    }\n  }\n}"}],"reflectionclass::getconstructor":[{"title":"Basic usage of ReflectionClass::getConstructor()","source":"$class = new ReflectionClass('ReflectionClass');\n$constructor = $class->getConstructor();\nvar_dump($constructor);","output":"object(ReflectionMethod)#2 (2) {\n  [\"name\"]=>\n  string(11) \"__construct\"\n  [\"class\"]=>\n  string(15) \"ReflectionClass\"\n}"}],"reflectionclass::getdefaultproperties":[{"title":"ReflectionClass::getDefaultProperties() example","source":"class Bar {\n    protected $inheritedProperty = 'inheritedDefault';\n}\n\nclass Foo extends Bar {\n    public $property = 'propertyDefault';\n    private $privateProperty = 'privatePropertyDefault';\n    public static $staticProperty = 'staticProperty';\n    public $defaultlessProperty;\n}\n\n$reflectionClass = new ReflectionClass('Foo');\nvar_dump($reflectionClass->getDefaultProperties());","output":"array(5) {\n   [\"staticProperty\"]=>\n   string(14) \"staticProperty\"\n   [\"property\"]=>\n   string(15) \"propertyDefault\"\n   [\"privateProperty\"]=>\n   string(22) \"privatePropertyDefault\"\n   [\"defaultlessProperty\"]=>\n   NULL\n   [\"inheritedProperty\"]=>\n   string(16) \"inheritedDefault\"\n}"}],"reflectionclass::getdoccomment":[{"title":"ReflectionClass::getDocComment() example","source":"\/** \n* A test class\n*\n* @param  foo bar\n* @return baz\n*\/\nclass TestClass { }\n\n$rc = new ReflectionClass('TestClass');\nvar_dump($rc->getDocComment())","output":"string(55) \"\/** \n* A test class\n*\n* @param  foo bar\n* @return baz\n*\/\""}],"reflectionclass::getendline":[{"title":"ReflectionClass::getEndLine() example","source":"\/\/ Test Class\nclass TestClass { }\n\n$rc = new ReflectionClass('TestClass');\n\necho $rc->getEndLine();","output":3}],"reflectionclass::getextension":[{"title":"Basic usage of ReflectionClass::getExtension()","source":"$class = new ReflectionClass('ReflectionClass');\n$extension = $class->getExtension();\nvar_dump($extension);","output":"object(ReflectionExtension)#2 (1) {\n  [\"name\"]=>\n  string(10) \"Reflection\"\n}"}],"reflectionclass::getextensionname":[{"title":"Basic usage of ReflectionClass::getExtensionName()","source":"$class = new ReflectionClass('ReflectionClass');\n$extension = $class->getExtensionName();\nvar_dump($extension);","output":"string(10) \"Reflection\""}],"reflectionclass::getinterfacenames":[{"title":"ReflectionClass::getInterfaceNames() example","source":"interface Foo { }\n\ninterface Bar { }\n\nclass Baz implements Foo, Bar { }\n\n$rc1 = new ReflectionClass(\"Baz\");\n\nprint_r($rc1->getInterfaceNames());","output":"Array\n(\n    [0] => Foo\n    [1] => Bar\n)"}],"reflectionclass::getinterfaces":[{"title":"ReflectionClass::getInterfaces() example","source":"interface Foo { }\n\ninterface Bar { }\n\nclass Baz implements Foo, Bar { }\n\n$rc1 = new ReflectionClass(\"Baz\");\n\nprint_r($rc1->getInterfaces());","output":"Array\n(\n    [Foo] => ReflectionClass Object\n        (\n            [name] => Foo\n        )\n\n    [Bar] => ReflectionClass Object\n        (\n            [name] => Bar\n        )\n\n)"}],"reflectionclass::getmethod":[{"title":"Basic usage of ReflectionClass::getMethod()","source":"$class = new ReflectionClass('ReflectionClass');\n$method = $class->getMethod('getMethod');\nvar_dump($method);","output":"object(ReflectionMethod)#2 (2) {\n  [\"name\"]=>\n  string(9) \"getMethod\"\n  [\"class\"]=>\n  string(15) \"ReflectionClass\"\n}"}],"reflectionclass::getmethods":[{"title":"Basic usage of ReflectionClass::getMethods()","source":"class Apple {\n    public function firstMethod() { }\n    final protected function secondMethod() { }\n    private static function thirdMethod() { }\n}\n\n$class = new ReflectionClass('Apple');\n$methods = $class->getMethods();\nvar_dump($methods);","output":"array(3) {\n  [0]=>\n  &object(ReflectionMethod)#2 (2) {\n    [\"name\"]=>\n    string(11) \"firstMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n  [1]=>\n  &object(ReflectionMethod)#3 (2) {\n    [\"name\"]=>\n    string(12) \"secondMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n  [2]=>\n  &object(ReflectionMethod)#4 (2) {\n    [\"name\"]=>\n    string(11) \"thirdMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n}"},{"title":"Filtering results from ReflectionClass::getMethods()","source":"class Apple {\n    public function firstMethod() { }\n    final protected function secondMethod() { }\n    private static function thirdMethod() { }\n}\n\n$class = new ReflectionClass('Apple');\n$methods = $class->getMethods(ReflectionMethod::IS_STATIC | ReflectionMethod::IS_FINAL);\nvar_dump($methods);","output":"array(2) {\n  [0]=>\n  &object(ReflectionMethod)#2 (2) {\n    [\"name\"]=>\n    string(12) \"secondMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n  [1]=>\n  &object(ReflectionMethod)#3 (2) {\n    [\"name\"]=>\n    string(11) \"thirdMethod\"\n    [\"class\"]=>\n    string(5) \"Apple\"\n  }\n}"}],"reflectionclass::getname":[{"title":"ReflectionClass::getName() example","source":"namespace A\\B;\n\nclass Foo { }\n\n$function = new \\ReflectionClass('stdClass');\n\nvar_dump($function->inNamespace());\nvar_dump($function->getName());\nvar_dump($function->getNamespaceName());\nvar_dump($function->getShortName());\n\n$function = new \\ReflectionClass('A\\\\B\\\\Foo');\n\nvar_dump($function->inNamespace());\nvar_dump($function->getName());\nvar_dump($function->getNamespaceName());\nvar_dump($function->getShortName());","output":"bool(false)\nstring(8) \"stdClass\"\nstring(0) \"\"\nstring(8) \"stdClass\"\n\nbool(true)\nstring(7) \"A\\B\\Foo\"\nstring(3) \"A\\B\"\nstring(3) \"Foo\""}],"reflectionclass::getnamespacename":[{"title":"ReflectionClass::getNamespaceName() example","source":"namespace A\\B;\n\nclass Foo { }\n\n$class = new \\ReflectionClass('stdClass');\n\nvar_dump($class->inNamespace());\nvar_dump($class->getName());\nvar_dump($class->getNamespaceName());\nvar_dump($class->getShortName());\n\n$class = new \\ReflectionClass('A\\\\B\\\\Foo');\n\nvar_dump($class->inNamespace());\nvar_dump($class->getName());\nvar_dump($class->getNamespaceName());\nvar_dump($class->getShortName());","output":"bool(false)\nstring(8) \"stdClass\"\nstring(0) \"\"\nstring(8) \"stdClass\"\n\nbool(true)\nstring(7) \"A\\B\\Foo\"\nstring(3) \"A\\B\"\nstring(3) \"Foo\""}],"reflectionclass::getproperties":[{"title":"ReflectionClass::getProperties() filtering example","source":"class Foo {\n    public    $foo  = 1;\n    protected $bar  = 2;\n    private   $baz  = 3;\n}\n\n$foo = new Foo();\n\n$reflect = new ReflectionClass($foo);\n$props   = $reflect->getProperties(ReflectionProperty::IS_PUBLIC | ReflectionProperty::IS_PROTECTED);\n\nforeach ($props as $prop) {\n    print $prop->getName() . \"\\n\";\n}\n\nvar_dump($props);","output":"foo\nbar\narray(2) {\n  [0]=>\n  object(ReflectionProperty)#3 (2) {\n    [\"name\"]=>\n    string(3) \"foo\"\n    [\"class\"]=>\n    string(3) \"Foo\"\n  }\n  [1]=>\n  object(ReflectionProperty)#4 (2) {\n    [\"name\"]=>\n    string(3) \"bar\"\n    [\"class\"]=>\n    string(3) \"Foo\"\n  }\n}"}],"reflectionclass::getproperty":[{"title":"Basic usage of ReflectionClass::getProperty()","source":"$class = new ReflectionClass('ReflectionClass');\n$property = $class->getProperty('name');\nvar_dump($property);","output":"object(ReflectionProperty)#2 (2) {\n  [\"name\"]=>\n  string(4) \"name\"\n  [\"class\"]=>\n  string(15) \"ReflectionClass\"\n}"}],"reflectionclass::getshortname":[{"title":"ReflectionClass::getShortName() example","source":"namespace A\\B;\n\nclass Foo { }\n\n$function = new \\ReflectionClass('stdClass');\n\nvar_dump($function->inNamespace());\nvar_dump($function->getName());\nvar_dump($function->getNamespaceName());\nvar_dump($function->getShortName());\n\n$function = new \\ReflectionClass('A\\\\B\\\\Foo');\n\nvar_dump($function->inNamespace());\nvar_dump($function->getName());\nvar_dump($function->getNamespaceName());\nvar_dump($function->getShortName());","output":"bool(false)\nstring(8) \"stdClass\"\nstring(0) \"\"\nstring(8) \"stdClass\"\n\nbool(true)\nstring(7) \"A\\B\\Foo\"\nstring(3) \"A\\B\"\nstring(3) \"Foo\""}],"reflectionclass::getstaticpropertyvalue":[{"title":"Basic usage of ReflectionClass::getStaticPropertyValue()","source":"class Apple {\n    public static $color = 'Red';\n}\n\n$class = new ReflectionClass('Apple');\nvar_dump($class->getStaticPropertyValue('color'));","output":"string(3) \"Red\""}],"reflectionclass::hasconstant":[{"title":"ReflectionClass::hasConstant() example","source":"class Foo {\n    const c1 = 1;\n}\n\n$class = new ReflectionClass(\"Foo\");\n\nvar_dump($class->hasConstant(\"c1\"));\nvar_dump($class->hasConstant(\"c2\"));","output":"bool(true)\nbool(false)"}],"reflectionclass::hasmethod":[{"title":"ReflectionClass::hasMethod() example","source":"Class C {\n    public function publicFoo() {\n        return true;\n    }\n\n    protected function protectedFoo() {\n        return true;\n    }\n\n    private function privateFoo() {\n        return true;\n    }\n\n    static function staticFoo() {\n        return true;\n    }\n}\n\n$rc = new ReflectionClass(\"C\");\n\nvar_dump($rc->hasMethod('publicFoo'));\n\nvar_dump($rc->hasMethod('protectedFoo'));\n\nvar_dump($rc->hasMethod('privateFoo'));\n\nvar_dump($rc->hasMethod('staticFoo'));\n\n\/\/ C should not have method bar\nvar_dump($rc->hasMethod('bar'));\n\n\/\/ Method names are case insensitive\nvar_dump($rc->hasMethod('PUBLICfOO'));","output":"bool(true)\nbool(true)\nbool(true)\nbool(true)\nbool(false)\nbool(true)"}],"reflectionclass::hasproperty":[{"title":"ReflectionClass::hasProperty() example","source":"class Foo {\n    public    $p1;\n    protected $p2;\n    private   $p3;\n\n}\n\n$obj = new ReflectionObject(new Foo());\n\nvar_dump($obj->hasProperty(\"p1\"));\nvar_dump($obj->hasProperty(\"p2\"));\nvar_dump($obj->hasProperty(\"p3\"));\nvar_dump($obj->hasProperty(\"p4\"));","output":"bool(true)\nbool(true)\nbool(true)\nbool(false)"}],"reflectionclass::innamespace":[{"title":"ReflectionClass::inNamespace() example","source":"namespace A\\B;\n\nclass Foo { }\n\n$function = new \\ReflectionClass('stdClass');\n\nvar_dump($function->inNamespace());\nvar_dump($function->getName());\nvar_dump($function->getNamespaceName());\nvar_dump($function->getShortName());\n\n$function = new \\ReflectionClass('A\\\\B\\\\Foo');\n\nvar_dump($function->inNamespace());\nvar_dump($function->getName());\nvar_dump($function->getNamespaceName());\nvar_dump($function->getShortName());","output":"bool(false)\nstring(8) \"stdClass\"\nstring(0) \"\"\nstring(8) \"stdClass\"\n\nbool(true)\nstring(7) \"A\\B\\Foo\"\nstring(3) \"A\\B\"\nstring(3) \"Foo\""}],"reflectionclass::isabstract":[{"title":"ReflectionClass::isAbstract() example","source":"class          TestClass { }\nabstract class TestAbstractClass { }\n\n$testClass     = new ReflectionClass('TestClass');\n$abstractClass = new ReflectionClass('TestAbstractClass');\n\nvar_dump($testClass->isAbstract());\nvar_dump($abstractClass->isAbstract());","output":"bool(false)\nbool(true)"}],"reflectionclass::isanonymous":[{"title":"ReflectionClass::isAnonymous() example","source":"class TestClass {}\n$anonClass = new class {};\n\n$normalClass = new ReflectionClass('TestClass');\n$anonClass  = new ReflectionClass($anonClass);\n\nvar_dump($normalClass->isAnonymous());\nvar_dump($anonClass->isAnonymous());","output":"bool(false)\nbool(true)"}],"reflectionclass::iscloneable":[{"title":"Basic usage of ReflectionClass::isCloneable()","source":"class NotCloneable {\n    public $var1;\n    \n    private function __clone() {\n    }\n}\n\nclass Cloneable {\n    public $var1;\n}\n\n$notCloneable = new ReflectionClass('NotCloneable');\n$cloneable = new ReflectionClass('Cloneable');\n\nvar_dump($notCloneable->isCloneable());\nvar_dump($cloneable->isCloneable());","output":"bool(false)\nbool(true)"}],"reflectionclass::isfinal":[{"title":"ReflectionClass::isFinal() example","source":"class       TestClass { }\nfinal class TestFinalClass { }\n\n$normalClass = new ReflectionClass('TestClass');\n$finalClass  = new ReflectionClass('TestFinalClass');\n\nvar_dump($normalClass->isFinal());\nvar_dump($finalClass->isFinal());","output":"bool(false)\nbool(true)"}],"reflectionclass::isinstance":[{"title":"ReflectionClass::isInstance() related examples","source":"\/\/ Example usage\n$class = new ReflectionClass('Foo');\n\nif ($class->isInstance($arg)) {\n    echo \"Yes\";\n}\n\n\/\/ Equivalent to\nif ($arg instanceof Foo) {\n    echo \"Yes\";\n}\n\n\/\/ Equivalent to\nif (is_a($arg, 'Foo')) {\n    echo \"Yes\";\n}","output":"Yes\nYes\nYes"}],"reflectionclass::isinstantiable":[{"title":"ReflectionClass::isInstantiable() example","source":"class C { }\n\ninterface iface {\n    function f1();\n}\n\nclass ifaceImpl implements iface {\n    function f1() {}\n}\n\nabstract class abstractClass {\n    function f1() { }\n    abstract function f2();\n}\n\nclass D extends abstractClass {\n    function f2() { }\n}\n\nclass privateConstructor {\n    private function __construct() { }\n}\n\n$classes = array(\n    \"C\",\n    \"iface\",\n    \"ifaceImpl\",\n    \"abstractClass\",\n    \"D\",\n    \"privateConstructor\",\n);\n\nforeach($classes  as $class ) {\n    $reflectionClass = new ReflectionClass($class);\n    echo \"Is $class instantiable?  \";\n    var_dump($reflectionClass->IsInstantiable()); \n}","output":"Is C instantiable?  bool(true)\nIs iface instantiable?  bool(false)\nIs ifaceImpl instantiable?  bool(true)\nIs abstractClass instantiable?  bool(false)\nIs D instantiable?  bool(true)\nIs privateConstructor instantiable?  bool(false)"}],"reflectionclass::isinterface":[{"title":"Basic usage of ReflectionClass::isInterface()","source":"interface SomeInterface {\n    public function interfaceMethod();\n}\n\n$class = new ReflectionClass('SomeInterface');\nvar_dump($class->isInterface());","output":"bool(true)"}],"reflectionclass::isinternal":[{"title":"Basic usage of ReflectionClass::isInternal()","source":"$internalclass = new ReflectionClass('ReflectionClass');\n\nclass Apple {}\n$userclass = new ReflectionClass('Apple');\n\nvar_dump($internalclass->isInternal());\nvar_dump($userclass->isInternal());","output":"bool(true)\nbool(false)"}],"reflectionclass::isiterateable":[{"title":"ReflectionClass::isIterateable() example","source":"class IteratorClass implements Iterator {\n    public function __construct() { }\n    public function key() { }\n    public function current() { }\n    function next() { }\n    function valid() { }\n    function rewind() { }\n}\nclass DerivedClass extends IteratorClass { }\nclass NonIterator { }\n\nfunction dump_iterateable($class) {\n    $reflection = new ReflectionClass($class);\n    var_dump($reflection->isIterateable());\n}\n\n$classes = array(\"ArrayObject\", \"IteratorClass\", \"DerivedClass\", \"NonIterator\");\n\nforeach ($classes as $class) {\n    echo \"Is $class iterateable? \";\n    dump_iterateable($class);\n}","output":"Is ArrayObject iterateable? bool(true)\nIs IteratorClass iterateable? bool(true)\nIs DerivedClass iterateable? bool(true)\nIs NonIterator iterateable? bool(false)"}],"reflectionclass::newinstanceargs":[{"title":"Basic usage of ReflectionClass::newInstanceArgs()","source":"$class = new ReflectionClass('ReflectionFunction');\n$instance = $class->newInstanceArgs(array('substr'));\nvar_dump($instance);","output":"object(ReflectionFunction)#2 (1) {\n  [\"name\"]=>\n  string(6) \"substr\"\n}"}],"reflectionclass::__tostring":[{"title":"ReflectionClass::__toString() example","source":"$reflectionClass = new ReflectionClass('Exception');\necho $reflectionClass->__toString();","output":"Class [ <internal:Core> class Exception ] {\n\n  - Constants [0] {\n  }\n\n  - Static properties [0] {\n  }\n\n  - Static methods [0] {\n  }\n\n  - Properties [7] {\n    Property [ <default> protected $message ]\n    Property [ <default> private $string ]\n    Property [ <default> protected $code ]\n    Property [ <default> protected $file ]\n    Property [ <default> protected $line ]\n    Property [ <default> private $trace ]\n    Property [ <default> private $previous ]\n  }\n\n  - Methods [10] {\n    Method [ <internal:Core> final private method __clone ] {\n    }\n\n    Method [ <internal:Core, ctor> public method __construct ] {\n\n      - Parameters [3] {\n        Parameter #0 [ <optional> $message ]\n        Parameter #1 [ <optional> $code ]\n        Parameter #2 [ <optional> $previous ]\n      }\n    }\n\n    Method [ <internal:Core> final public method getMessage ] {\n    }\n\n    Method [ <internal:Core> final public method getCode ] {\n    }\n\n    Method [ <internal:Core> final public method getFile ] {\n    }\n\n    Method [ <internal:Core> final public method getLine ] {\n    }\n\n    Method [ <internal:Core> final public method getTrace ] {\n    }\n\n    Method [ <internal:Core> final public method getPrevious ] {\n    }\n\n    Method [ <internal:Core> final public method getTraceAsString ] {\n    }\n\n    Method [ <internal:Core> public method __toString ] {\n    }\n  }\n}"}],"reflectionextension::__construct":[{"title":"ReflectionExtension example","source":"$ext = new ReflectionExtension('Reflection');\n\nprintf('Extension: %s (version: %s)', $ext->getName(), $ext->getVersion());","output":"Extension: Reflection (version: $Revision: 330543 $)"}],"reflectionextension::getclasses":[{"title":"ReflectionExtension::getClasses() example","source":"$ext = new ReflectionExtension('XMLWriter');\nvar_dump($ext->getClasses());","output":"array(1) {\n  [\"XMLWriter\"]=>\n  &object(ReflectionClass)#2 (1) {\n    [\"name\"]=>\n    string(9) \"XMLWriter\"\n  }\n}"}],"reflectionextension::getclassnames":[{"title":"ReflectionExtension::getClassNames() example","source":"$ext = new ReflectionExtension('XMLWriter');\nvar_dump($ext->getClassNames());","output":"array(1) {\n  [0]=>\n  string(9) \"XMLWriter\"\n}"}],"reflectionextension::getconstants":[{"title":"ReflectionExtension::getConstants() example","source":"$ext = new ReflectionExtension('DOM');\n\nprint_r($ext->getConstants());","output":"Array\n(\n    [XML_ELEMENT_NODE] => 1\n    [XML_ATTRIBUTE_NODE] => 2\n    [XML_TEXT_NODE] => 3\n    [XML_CDATA_SECTION_NODE] => 4\n    [XML_ENTITY_REF_NODE] => 5\n    [XML_ENTITY_NODE] => 6\n    [XML_PI_NODE] => 7\n    [XML_COMMENT_NODE] => 8\n    [XML_DOCUMENT_NODE] => 9\n    [XML_DOCUMENT_TYPE_NODE] => 10\n    [XML_DOCUMENT_FRAG_NODE] => 11\n    [XML_NOTATION_NODE] => 12\n    [XML_HTML_DOCUMENT_NODE] => 13\n    [XML_DTD_NODE] => 14\n    [XML_ELEMENT_DECL_NODE] => 15\n    [XML_ATTRIBUTE_DECL_NODE] => 16\n    [XML_ENTITY_DECL_NODE] => 17\n    [XML_NAMESPACE_DECL_NODE] => 18\n    [XML_LOCAL_NAMESPACE] => 18\n    [XML_ATTRIBUTE_CDATA] => 1\n    [XML_ATTRIBUTE_ID] => 2\n    [XML_ATTRIBUTE_IDREF] => 3\n    [XML_ATTRIBUTE_IDREFS] => 4\n    [XML_ATTRIBUTE_ENTITY] => 6\n    [XML_ATTRIBUTE_NMTOKEN] => 7\n    [XML_ATTRIBUTE_NMTOKENS] => 8\n    [XML_ATTRIBUTE_ENUMERATION] => 9\n    [XML_ATTRIBUTE_NOTATION] => 10\n    [DOM_PHP_ERR] => 0\n    [DOM_INDEX_SIZE_ERR] => 1\n    [DOMSTRING_SIZE_ERR] => 2\n    [DOM_HIERARCHY_REQUEST_ERR] => 3\n    [DOM_WRONG_DOCUMENT_ERR] => 4\n    [DOM_INVALID_CHARACTER_ERR] => 5\n    [DOM_NO_DATA_ALLOWED_ERR] => 6\n    [DOM_NO_MODIFICATION_ALLOWED_ERR] => 7\n    [DOM_NOT_FOUND_ERR] => 8\n    [DOM_NOT_SUPPORTED_ERR] => 9\n    [DOM_INUSE_ATTRIBUTE_ERR] => 10\n    [DOM_INVALID_STATE_ERR] => 11\n    [DOM_SYNTAX_ERR] => 12\n    [DOM_INVALID_MODIFICATION_ERR] => 13\n    [DOM_NAMESPACE_ERR] => 14\n    [DOM_INVALID_ACCESS_ERR] => 15\n    [DOM_VALIDATION_ERR] => 16\n)"}],"reflectionextension::getdependencies":[{"title":"ReflectionExtension::getDependencies() example","source":"$dom = new ReflectionExtension('dom');\n\nprint_r($dom->getDependencies());","output":"Array\n(\n    [libxml] => Required\n    [domxml] => Conflicts\n)"}],"reflectionextension::getfunctions":[{"title":"ReflectionExtension::getFunctions() example","source":"$dom = new ReflectionExtension('SimpleXML');\n\nprint_r($dom->getFunctions());","output":"Array\n(\n    [simplexml_load_file] => ReflectionFunction Object\n        (\n            [name] => simplexml_load_file\n        )\n\n    [simplexml_load_string] => ReflectionFunction Object\n        (\n            [name] => simplexml_load_string\n        )\n\n    [simplexml_import_dom] => ReflectionFunction Object\n        (\n            [name] => simplexml_import_dom\n        )\n\n)"}],"reflectionextension::getinientries":[{"title":"ReflectionExtension::getINIEntries() example","source":"$ext = new ReflectionExtension('mysql');\n\nprint_r($ext->getINIEntries());","output":"Array\n(\n    [mysql.allow_persistent] => 1\n    [mysql.max_persistent] => -1\n    [mysql.max_links] => -1\n    [mysql.default_host] => \n    [mysql.default_user] => \n    [mysql.default_password] => \n    [mysql.default_port] => \n    [mysql.default_socket] => \n    [mysql.connect_timeout] => 60\n    [mysql.trace_mode] => \n    [mysql.allow_local_infile] => 1\n    [mysql.cache_size] => 2000\n)"}],"reflectionextension::getname":[{"title":"ReflectionExtension::getName() example","source":"$ext = new ReflectionExtension('mysqli');\nvar_dump($ext->getName());","output":"string(6) \"mysqli\""}],"reflectionextension::getversion":[{"title":"ReflectionExtension::getVersion() example","source":"$ext = new ReflectionExtension('mysqli');\nvar_dump($ext->getVersion());","output":"string(3) \"0.1\""}],"reflectionextension::info":[{"title":"ReflectionExtension::info() example","source":"$ext = new ReflectionExtension('mysqli');\n$ext->info();","output":"mysqli\n\nMysqlI Support => enabled\nClient API library version => mysqlnd 5.0.5-dev - 081106 - $Revision: 315808 $\nActive Persistent Links => 0\nInactive Persistent Links => 0\nActive Links => 0\nPersistent cache => enabled\nput_hits => 0\nput_misses => 0\nget_hits => 0\nget_misses => 0\nsize => 2000\nfree_items => 2000\nreferences => 2\n\nDirective => Local Value => Master Value\nmysqli.max_links => Unlimited => Unlimited\nmysqli.max_persistent => Unlimited => Unlimited\nmysqli.allow_persistent => On => On\nmysqli.default_host => no value => no value\nmysqli.default_user => no value => no value\nmysqli.default_pw => no value => no value\nmysqli.default_port => 3306 => 3306\nmysqli.default_socket => no value => no value\nmysqli.reconnect => Off => Off\nmysqli.allow_local_infile => On => On\nmysqli.cache_size => 2000 => 2000"}],"reflectionfunction::__construct":[{"title":"ReflectionFunction::__construct() example","source":"\/**\n * A simple counter\n *\n * @return    int\n *\/\nfunction counter1()\n{\n    static $c = 0;\n    return ++$c;\n}\n\n\/**\n * Another simple counter\n *\n * @return    int\n *\/\n$counter2 = function()\n{\n    static $d = 0;\n    return ++$d;\n\n};\n\nfunction dumpReflectionFunction($func)\n{\n    \/\/ Print out basic information\n    printf(\n        \"\\n\\n===> The %s function '%s'\\n\".\n        \"     declared in %s\\n\".\n        \"     lines %d to %d\\n\",\n        $func->isInternal() ? 'internal' : 'user-defined',\n        $func->getName(),\n        $func->getFileName(),\n        $func->getStartLine(),\n        $func->getEndline()\n    );\n\n    \/\/ Print documentation comment\n    printf(\"---> Documentation:\\n %s\\n\", var_export($func->getDocComment(), 1));\n\n    \/\/ Print static variables if existant\n    if ($statics = $func->getStaticVariables())\n    {\n        printf(\"---> Static variables: %s\\n\", var_export($statics, 1));\n    }\n}\n\n\/\/ Create an instance of the ReflectionFunction class\ndumpReflectionFunction(new ReflectionFunction('counter1'));\ndumpReflectionFunction(new ReflectionFunction($counter2));","output":"===> The user-defined function 'counter1'\n     declared in Z:\\reflectcounter.php\n     lines 7 to 11\n---> Documentation:\n '\/**\n * A simple counter\n *\n * @return    int\n *\/'\n---> Static variables: array (\n  'c' => 0,\n)\n\n\n===> The user-defined function '{closure}'\n     declared in Z:\\reflectcounter.php\n     lines 18 to 23\n---> Documentation:\n '\/**\n * Another simple counter\n *\n * @return    int\n *\/'\n---> Static variables: array (\n  'd' => 0,\n)"}],"reflectionfunction::invoke":[{"title":"ReflectionFunction::invoke() example","source":"function title($title, $name)\n{\n    return sprintf(\"%s. %s\\r\\n\", $title, $name);\n}\n\n$function = new ReflectionFunction('title');\n\necho $function->invoke('Dr', 'Phil');","output":"Dr. Phil"}],"reflectionfunction::invokeargs":[{"title":"ReflectionFunction::invokeArgs() example","source":"function title($title, $name)\n{\n    return sprintf(\"%s. %s\\r\\n\", $title, $name);\n}\n\n$function = new ReflectionFunction('title');\n\necho $function->invokeArgs(array('Dr', 'Phil'));","output":"Dr. Phil"},{"title":"ReflectionFunction::invokeArgs() with references example","source":"function get_false_conditions(array $conditions, array &$false_conditions)\n{\n    foreach ($conditions as $condition) {\n        if (!$condition) {\n            $false_conditions[] = $condition;\n        }\n    }\n}\n\n$function_ref     = new ReflectionFunction('get_false_conditions');\n\n$conditions       = array(true, false, -1, 0, 1);\n$false_conditions = array();\n\n$function_ref->invokeArgs(array($conditions, &$false_conditions));\n\nvar_dump($false_conditions);","output":"array(2) {\n  [0]=>\n  bool(false)\n  [1]=>\n  int(0)\n}"}],"reflectionfunction::__tostring":[{"title":"ReflectionFunction::__toString() example","source":"function title($title, $name)\n{\n    return sprintf(\"%s. %s\\r\\n\", $title, $name);\n}\n\necho new ReflectionFunction('title');","output":"Function [ <user> function title ] {\n  @@ Command line code 1 - 1\n\n  - Parameters [2] {\n    Parameter #0 [ <required> $title ]\n    Parameter #1 [ <required> $name ]\n  }\n}"}],"reflectionfunctionabstract::getreturntype":[{"title":"ReflectionFunctionAbstract::getReturnType() example","source":"function to_int($param) : int {\n    return (int) $param;\n}\n\n$reflection1 = new ReflectionFunction('to_int');\necho $reflection1->getReturnType();","output":"int"},{"title":"Usage on built-in functions","source":"$reflection2 = new ReflectionFunction('array_merge');\n\nvar_dump($reflection2->getReturnType());","output":"null"}],"reflectionfunctionabstract::hasreturntype":[{"title":"ReflectionFunctionAbstract::hasReturnType() example","source":"function to_int($param) : int {\n    return (int) $param;\n}\n\n$reflection1 = new ReflectionFunction('to_int');\nvar_dump($reflection1->hasReturnType());","output":"bool(true)"},{"title":"Usage on built-in functions","source":"$reflection2 = new ReflectionFunction('array_merge');\n\nvar_dump($reflection2->hasReturnType());","output":"bool(false)"}],"reflectionfunctionabstract::isclosure":[{"title":"ReflectionFunctionAbstract::isClosure() example","source":"\/\/ Non-closure\n$function1 = 'str_replace';\n$reflection1 = new ReflectionFunction($function1);\nvar_dump($reflection1->isClosure());\n\n\/\/ Closure\n$function2 = function () {};\n$reflection2 = new ReflectionFunction($function2);\nvar_dump($reflection2->isClosure());","output":"bool(false)\nbool(true)"}],"reflectionfunctionabstract::isdeprecated":[{"title":"ReflectionFunctionAbstract::isDeprecated() example","source":"$rf = new ReflectionFunction('ereg');\nvar_dump($rf->isDeprecated());","output":"bool(true)"}],"reflectiongenerator::__construct":[{"title":"ReflectionGenerator::__construct() example","source":"function gen()\n{\n    yield 1;\n}\n\n$gen = gen();\n\n$reflectionGen = new ReflectionGenerator($gen);\n\necho <<< output\n{$reflectionGen->getFunction()->name}\nLine: {$reflectionGen->getExecutingLine()}\nFile: {$reflectionGen->getExecutingFile()}\noutput;","output":"gen\nLine: 5\nFile: \/path\/to\/file\/example.php"}],"reflectiongenerator::getexecutingfile":[{"title":"ReflectionGenerator::getExecutingFile() example","source":"class GenExample\n{\n    public function gen()\n    {\n        yield 1;\n    }\n}\n\n$gen = (new GenExample)->gen();\n\n$reflectionGen = new ReflectionGenerator($gen);\n\necho \"File: {$reflectionGen->getExecutingFile()}\";","output":"File: \/path\/to\/file\/example.php"}],"reflectiongenerator::getexecutinggenerator":[{"title":"ReflectionGenerator::getExecutingGenerator() example","source":"class GenExample\n{\n    public function gen()\n    {\n        yield 1;\n    }\n}\n\n$gen = (new GenExample)->gen();\n\n$reflectionGen = new ReflectionGenerator($gen);\n\n$gen2 = $reflectionGen->getExecutingGenerator();\n\nvar_dump($gen2 === $gen);\nvar_dump($gen2->current());","output":"bool(true)\nint(1);"}],"reflectiongenerator::getexecutingline":[{"title":"ReflectionGenerator::getExecutingLine() example","source":"class GenExample\n{\n    public function gen()\n    {\n        yield 1;\n    }\n}\n\n$gen = (new GenExample)->gen();\n\n$reflectionGen = new ReflectionGenerator($gen);\n\necho \"Line: {$reflectionGen->getExecutingLine()}\";","output":"Line: 7"}],"reflectiongenerator::getfunction":[{"title":"ReflectionGenerator::getFunction() example","source":"function gen()\n{\n    yield 1;\n}\n\n$gen = gen();\n\n$reflectionGen = new ReflectionGenerator($gen);\n\nvar_dump($reflectionGen->getFunction());","output":"object(ReflectionFunction)#3 (1) {\n  [\"name\"]=>\n  string(3) \"gen\"\n}"}],"reflectiongenerator::getthis":[{"title":"ReflectionGenerator::getThis() example","source":"class GenExample\n{\n    public function gen()\n    {\n        yield 1;\n    }\n}\n\n$gen = (new GenExample)->gen();\n\n$reflectionGen = new ReflectionGenerator($gen);\n\nvar_dump($reflectionGen->getThis());","output":"object(GenExample)#3 (0) {\n}"}],"reflectiongenerator::gettrace":[{"title":"ReflectionGenerator::getTrace() example","source":"function foo() {\n    yield 1;\n}\n\nfunction bar()\n{\n    yield from foo();\n}\n\nfunction baz()\n{\n    yield from bar();\n}\n\n$gen = baz();\n$gen->valid(); \/\/ start the generator\n\nvar_dump((new ReflectionGenerator($gen))->getTrace());","output":"array(2) {\n  [0]=>\n  array(4) {\n    [\"file\"]=>\n    string(18) \"example.php\"\n    [\"line\"]=>\n    int(8)\n    [\"function\"]=>\n    string(3) \"foo\"\n    [\"args\"]=>\n    array(0) {\n    }\n  }\n  [1]=>\n  array(4) {\n    [\"file\"]=>\n    string(18) \"example.php\"\n    [\"line\"]=>\n    int(12)\n    [\"function\"]=>\n    string(3) \"bar\"\n    [\"args\"]=>\n    array(0) {\n    }\n  }\n}"}],"reflectionmethod::getdeclaringclass":[{"title":"ReflectionMethod::getDeclaringClass() example","source":"class HelloWorld {\n\n    protected function sayHelloTo($name) {\n        return 'Hello ' . $name;\n    }\n\n}\n\n$reflectionMethod = new ReflectionMethod(new HelloWorld(), 'sayHelloTo');\nvar_dump($reflectionMethod->getDeclaringClass());","output":"object(ReflectionClass)#2 (1) {\n  [\"name\"]=>\n  string(10) \"HelloWorld\"\n}"}],"reflectionmethod::getmodifiers":[{"title":"ReflectionMethod::getModifiers() example","source":"class Testing\n{\n    final public static function foo()\n    {\n        return;\n    }\n    public function bar()\n    {\n        return;\n    }\n}\n\n$foo = new ReflectionMethod('Testing', 'foo');\n\necho \"Modifiers for method foo():\\n\";\necho $foo->getModifiers() . \"\\n\";\necho implode(' ', Reflection::getModifierNames($foo->getModifiers())) . \"\\n\";\n\n$bar = new ReflectionMethod('Testing', 'bar');\n\necho \"Modifiers for method bar():\\n\";\necho $bar->getModifiers() . \"\\n\";\necho implode(' ', Reflection::getModifierNames($bar->getModifiers()));","output":"Modifiers for method foo():\n261\nfinal public static\nModifiers for method bar():\n65792\npublic"}],"reflectionmethod::getprototype":[{"title":"ReflectionMethod::getPrototype() example","source":"class Hello {\n\n    public function sayHelloTo($name) {\n        return 'Hello ' . $name;\n    }\n\n}\nclass HelloWorld extends Hello {\n\n    public function sayHelloTo($name) {\n        return 'Hello world: ' . $name;\n    }\n\n}\n\n$reflectionMethod = new ReflectionMethod('HelloWorld', 'sayHelloTo');\nvar_dump($reflectionMethod->getPrototype());","output":"object(ReflectionMethod)#2 (2) {\n  [\"name\"]=>\n  string(10) \"sayHelloTo\"\n  [\"class\"]=>\n  string(5) \"Hello\"\n}"}],"reflectionmethod::invoke":[{"title":"ReflectionMethod::invoke() example","source":"class HelloWorld {\n\n    public function sayHelloTo($name) {\n        return 'Hello ' . $name;\n    }\n\n}\n\n$reflectionMethod = new ReflectionMethod('HelloWorld', 'sayHelloTo');\necho $reflectionMethod->invoke(new HelloWorld(), 'Mike');","output":"Hello Mike"}],"reflectionmethod::invokeargs":[{"title":"ReflectionMethod::invokeArgs() example","source":"class HelloWorld {\n\n    public function sayHelloTo($name) {\n        return 'Hello ' . $name;\n    }\n\n}\n\n$reflectionMethod = new ReflectionMethod('HelloWorld', 'sayHelloTo');\necho $reflectionMethod->invokeArgs(new HelloWorld(), array('Mike'));","output":"Hello Mike"}],"reflectionmethod::__tostring":[{"title":"ReflectionMethod::__toString() example","source":"class HelloWorld {\n\n    public function sayHelloTo($name) {\n        return 'Hello ' . $name;\n    }\n\n}\n\n$reflectionMethod = new ReflectionMethod(new HelloWorld(), 'sayHelloTo');\necho $reflectionMethod;","output":"Method [ <user> public method sayHelloTo ] {\n  @@ \/var\/www\/examples\/reflection.php 16 - 18\n\n  - Parameters [1] {\n    Parameter #0 [ <required> $name ]\n  }\n}"}],"reflectionparameter::__construct":[{"title":"Using the ReflectionParameter class","source":"function foo($a, $b, $c) { }\nfunction bar(Exception $a, &$b, $c) { }\nfunction baz(ReflectionFunction $a, $b = 1, $c = null) { }\nfunction abc() { }\n\n$reflect = new ReflectionFunction('foo');\n\necho $reflect;\n\nforeach ($reflect->getParameters() as $i => $param) {\n    printf(\n        \"-- Parameter #%d: %s {\\n\".\n        \"   Class: %s\\n\".\n        \"   Allows NULL: %s\\n\".\n        \"   Passed to by reference: %s\\n\".\n        \"   Is optional?: %s\\n\".\n        \"}\\n\",\n        $i, \/\/ $param->getPosition() can be used from PHP 5.2.3\n        $param->getName(),\n        var_export($param->getClass(), 1),\n        var_export($param->allowsNull(), 1),\n        var_export($param->isPassedByReference(), 1),\n        $param->isOptional() ? 'yes' : 'no'\n    );\n}","output":"Function [ <user> function foo ] {\n  @@ \/Users\/philip\/cvs\/phpdoc\/a 2 - 2\n\n  - Parameters [3] {\n    Parameter #0 [ <required> $a ]\n    Parameter #1 [ <required> $b ]\n    Parameter #2 [ <required> $c ]\n  }\n}\n-- Parameter #0: a {\n   Class: NULL\n   Allows NULL: true\n   Passed to by reference: false\n   Is optional?: no\n}\n-- Parameter #1: b {\n   Class: NULL\n   Allows NULL: true\n   Passed to by reference: false\n   Is optional?: no\n}\n-- Parameter #2: c {\n   Class: NULL\n   Allows NULL: true\n   Passed to by reference: false\n   Is optional?: no\n}"}],"reflectionparameter::getclass":[{"title":"Using the ReflectionParameter class","source":"function foo(Exception $a) { }\n\n$functionReflection = new ReflectionFunction('foo');\n$parameters = $functionReflection->getParameters();\n$aParameter = $parameters[0];\n\necho $aParameter->getClass()->name;","output":"Exception"}],"reflectionparameter::getdeclaringclass":[{"title":"Getting the class that declared the method","source":"class Foo\n{\n    public function bar(\\DateTime $datetime)\n    {\n    }\n}\n\nclass Baz extends Foo\n{\n}\n\n$param = new \\ReflectionParameter(['Baz', 'bar'], 0); \n\nvar_dump($param->getDeclaringClass());","output":"object(ReflectionClass)#2 (1) {\n  [\"name\"]=>\n  string(3) \"Foo\"\n}"}],"reflectionparameter::getdefaultvalue":[{"title":"Getting","source":"function foo($test, $bar = 'baz')\n{\n    echo $test . $bar;\n}\n\n$function = new ReflectionFunction('foo');\n\nforeach ($function->getParameters() as $param) {\n    echo 'Name: ' . $param->getName() . PHP_EOL;\n    if ($param->isOptional()) {\n        echo 'Default value: ' . $param->getDefaultValue() . PHP_EOL;\n    }\n    echo PHP_EOL;\n}","output":"Name: test\n\nName: bar\nDefault value: baz"}],"reflectionparameter::gettype":[{"title":"ReflectionParameter::getType() example","source":"function someFunction(int $param, $param2) {}\n\n$reflectionFunc = new ReflectionFunction('someFunction');\n$reflectionParams = $reflectionFunc->getParameters();\n$reflectionType1 = $reflectionParams[0]->getType();\n$reflectionType2 = $reflectionParams[1]->getType();\n\necho $reflectionType1;\nvar_dump($reflectionType2);","output":"int\nnull"}],"reflectionparameter::hastype":[{"title":"ReflectionParameter::hasType() example","source":"function someFunction(string $param, $param2 = null) {}\n\n$reflectionFunc = new ReflectionFunction('someFunction');\n$reflectionParams = $reflectionFunc->getParameters();\n\nvar_dump($reflectionParams[0]->hasType());\nvar_dump($reflectionParams[1]->hasType());","output":"bool(true)\nbool(false)"}],"reflectionproperty::__construct":[{"title":"ReflectionProperty::__construct() example","source":"class Str\n{\n    public $length  = 5;\n}\n\n\/\/ Create an instance of the ReflectionProperty class\n$prop = new ReflectionProperty('Str', 'length');\n\n\/\/ Print out basic information\nprintf(\n    \"===> The%s%s%s%s property '%s' (which was %s)\\n\" .\n    \"     having the modifiers %s\\n\",\n        $prop->isPublic() ? ' public' : '',\n        $prop->isPrivate() ? ' private' : '',\n        $prop->isProtected() ? ' protected' : '',\n        $prop->isStatic() ? ' static' : '',\n        $prop->getName(),\n        $prop->isDefault() ? 'declared at compile-time' : 'created at run-time',\n        var_export(Reflection::getModifierNames($prop->getModifiers()), 1)\n);\n\n\/\/ Create an instance of Str\n$obj= new Str();\n\n\/\/ Get current value\nprintf(\"---> Value is: \");\nvar_dump($prop->getValue($obj));\n\n\/\/ Change value\n$prop->setValue($obj, 10);\nprintf(\"---> Setting value to 10, new value is: \");\nvar_dump($prop->getValue($obj));\n\n\/\/ Dump object\nvar_dump($obj);","output":"===> The public property 'length' (which was declared at compile-time)\n     having the modifiers array (\n  0 => 'public',\n)\n---> Value is: int(5)\n---> Setting value to 10, new value is: int(10)\nobject(Str)#2 (1) {\n  [\"length\"]=>\n  int(10)\n}"},{"title":"Getting value from private and protected properties using ReflectionProperty class","source":"class Foo {\n    public $x = 1;\n    protected $y = 2;\n    private $z = 3;\n}\n\n$obj = new Foo;\n\n$prop = new ReflectionProperty('Foo', 'y');\n$prop->setAccessible(true); \/* As of PHP 5.3.0 *\/\nvar_dump($prop->getValue($obj)); \/\/ int(2)\n\n$prop = new ReflectionProperty('Foo', 'z');\n$prop->setAccessible(true); \/* As of PHP 5.3.0 *\/\nvar_dump($prop->getValue($obj)); \/\/ int(2)","output":"int(2)\nint(3)"}],"reflectionproperty::getdoccomment":[{"title":"ReflectionProperty::getDocComment() example","source":"class Str\n{\n    \/**\n     * @var int  The length of the string\n     *\/\n    public $length = 5;\n}\n\n$prop = new ReflectionProperty('Str', 'length');\n\nvar_dump($prop->getDocComment());","output":"string(53) \"\/**\n     * @var int  The length of the string\n     *\/\""}],"reflectionproperty::getvalue":[{"title":"ReflectionProperty::getValue() example","source":"class Foo {\n    public static $staticProperty = 'foobar';\n    \n    public $property = 'barfoo';\n    protected $privateProperty = 'foofoo';\n}\n\n$reflectionClass = new ReflectionClass('Foo');\n\nvar_dump($reflectionClass->getProperty('staticProperty')->getValue());\nvar_dump($reflectionClass->getProperty('property')->getValue(new Foo));\n\n$reflectionProperty = $reflectionClass->getProperty('privateProperty');\n$reflectionProperty->setAccessible(true);\nvar_dump($reflectionProperty->getValue(new Foo));","output":"string(6) \"foobar\"\nstring(6) \"barfoo\"\nstring(6) \"foofoo\""}],"reflectionproperty::isdefault":[{"title":"ReflectionClass::isDefault() example","source":"class Foo {\n    public $bar;\n}\n\n$o = new Foo();\n$o->bar = 42;\n$o->baz = 42;\n\n$ro = new ReflectionObject($o);\nvar_dump($ro->getProperty('bar')->isDefault());\nvar_dump($ro->getProperty('baz')->isDefault());","output":"bool(true)\nbool(false)"}],"reflectiontype::allowsnull":[{"title":"ReflectionType::allowsNull() example","source":"function someFunction(string $param, StdClass $param2 = null) {}\n\n$reflectionFunc = new ReflectionFunction('someFunction');\n$reflectionParams = $reflectionFunc->getParameters();\n\nvar_dump($reflectionParams[0]->getType()->allowsNull());\nvar_dump($reflectionParams[1]->getType()->allowsNull());","output":"bool(false)\nbool(true)"}],"reflectiontype::isbuiltin":[{"title":"ReflectionType::isBuiltin() example","source":"class SomeClass {}\n\nfunction someFunction(string $param, SomeClass $param2, StdClass $param3) {}\n\n$reflectionFunc = new ReflectionFunction('someFunction');\n$reflectionParams = $reflectionFunc->getParameters();\n\nvar_dump($reflectionParams[0]->getType()->isBuiltin());\nvar_dump($reflectionParams[1]->getType()->isBuiltin());\nvar_dump($reflectionParams[2]->getType()->isBuiltin());","output":"bool(true)\nbool(false)\nbool(false)"}],"reflectiontype::__tostring":[{"title":"ReflectionType::__toString() example","source":"function someFunction(string $param) {}\n\n$reflectionFunc = new ReflectionFunction('someFunction');\n$reflectionParam = $reflectionFunc->getParameters()[0];\n\necho $reflectionParam->getType();","output":"string"}],"regexiterator::accept":[{"title":"RegexIterator::accept() example","source":"$names = new ArrayIterator(array('Ann', 'Bob', 'Charlie', 'David'));\n$filter = new RegexIterator($names, '\/^[B-D]\/');\nforeach ($filter as $name) {\n    echo $name . PHP_EOL;\n}","output":"Bob\nCharlie\nDavid"}],"regexiterator::getflags":[{"title":"RegexIterator::getFlags() example","source":"$test = array ('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');\n\n$arrayIterator = new ArrayIterator($test);\n$regexIterator = new RegexIterator($arrayIterator, '\/^test\/');\n$regexIterator->setFlags(RegexIterator::USE_KEY);\n\nif ($regexIterator->getFlags() & RegexIterator::USE_KEY) {\n    echo 'Filtering based on the array keys.';\n} else {\n    echo 'Filtering based on the array values.';\n}","output":"Filtering based on the array keys."}],"regexiterator::getmode":[{"title":"RegexIterator::getMode() example","source":"$test = array ('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');\n\n$arrayIterator = new ArrayIterator($test);\n$regexIterator = new RegexIterator($arrayIterator, '\/^[a-z]+\/', RegexIterator::GET_MATCH);\n\n$mode = $regexIterator->getMode();\nif ($mode & RegexIterator::GET_MATCH) {\n    echo 'Getting the match for each item.';\n} elseif ($mode & RegexIterator::ALL_MATCHES) {\n    echo 'Getting all matches for each item.';\n} elseif ($mode & RegexIterator::MATCH) {\n    echo 'Getting each item if it matches.';\n} elseif ($mode & RegexIterator::SPLIT) {\n    echo 'Getting split pieces of each.';\n}","output":"Getting the match for each item."}],"regexiterator::getpregflags":[{"title":"RegexIterator::getPregFlags() example","source":"$test = array ('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');\n\n$arrayIterator = new ArrayIterator($test);\n$regexIterator = new RegexIterator($arrayIterator, '\/\\s\/', RegexIterator::SPLIT);\n$regexIterator->setPregFlags(PREG_SPLIT_NO_EMPTY | PREG_SPLIT_OFFSET_CAPTURE);\n\nif ($regexIterator->getPregFlags() & PREG_SPLIT_NO_EMPTY) {\n    echo 'Ignoring empty pieces';\n} else {\n    echo 'Not ignoring empty pieces';\n}","output":"Ignoring empty pieces"}],"regexiterator::setflags":[{"title":"RegexIterator::setFlags() example","source":"$test = array ('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');\n\n$arrayIterator = new ArrayIterator($test);\n$regexIterator = new RegexIterator($arrayIterator, '\/^test\/');\n$regexIterator->setFlags(RegexIterator::USE_KEY);\n\nforeach ($regexIterator as $key => $value) {\n    echo $key . ' => ' . $value . \"\\n\";\n}","output":"teststr2 => another test"}],"regexiterator::setmode":[{"title":"RegexIterator::setMode() example","source":"$test = array ('str1' => 'test 1', 'test str2' => 'another test', 'str3' => 'test 123');\n\n$arrayIterator = new ArrayIterator($test);\n\/\/ Filter everything that starts with 'test ' followed by one or more numbers.\n$regexIterator = new RegexIterator($arrayIterator, '\/^test (\\d+)\/');\n\/\/ Operation mode: Replace actual value with the matches\n$regexIterator->setMode(RegexIterator::GET_MATCH);\n\nforeach ($regexIterator as $key => $value) {\n    \/\/ print out the matched number(s)\n    echo $key . ' => ' . $value[1] . PHP_EOL;\n}","output":"str1 => 1\nstr3 => 123"}],"regexiterator::setpregflags":[{"title":"RegexIterator::setPregFlags() example","source":"$test = array ('test 1', 'another test', 'test 123');\n\n$arrayIterator = new ArrayIterator($test);\n$regexIterator = new RegexIterator($arrayIterator, '\/^test\/', RegexIterator::GET_MATCH);\n\n$regexIterator->setPregFlags(PREG_OFFSET_CAPTURE);\n\nforeach ($regexIterator as $key => $value) {\n    var_dump($value);\n}","output":"array(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(4) \"test\"\n    [1]=>\n    int(0)\n  }\n}\narray(1) {\n  [0]=>\n  array(2) {\n    [0]=>\n    string(4) \"test\"\n    [1]=>\n    int(0)\n  }\n}"}],"resourcebundle::count":[{"title":"resourcebundle_count() example","source":"$r = resourcebundle_create( 'es', \"\/usr\/share\/data\/myapp\");\necho resourcebundle_count($r);","output":null},{"title":"OO example","source":"$r = new ResourceBundle( 'es', \"\/usr\/share\/data\/myapp\");\necho $r->count();","output":42}],"resourcebundle::create":[{"title":"resourcebundle_create() example","source":"$r = resourcebundle_create( 'es', \"\/usr\/share\/data\/myapp\");\necho $r['teststring'];","output":null},{"title":"ResourceBundle::create() example","source":"$r = ResourceBundle::create( 'es', \"\/usr\/share\/data\/myapp\");\necho $r['teststring'];","output":null}],"resourcebundle::get":[{"title":"resourcebundle_get() example","source":"$r = resourcebundle_create( 'es', \"\/usr\/share\/data\/myapp\");\necho resourcebundle_get($r, 'somestring');","output":null},{"title":"OO example","source":"$r = new ResourceBundle( 'es', \"\/usr\/share\/data\/myapp\");\necho $r->get('somestring');","output":"?Hola, mundo!"}],"resourcebundle::geterrorcode":[{"title":"resourcebundle_get_error_code() example","source":"$r = resourcebundle_create( 'es', \"\/usr\/share\/data\/myapp\");\necho $r['somestring'];\nif(intl_is_failure(resourcebundle_get_error_code($r))) {\n    report_error(\"Bundle error\");\n}","output":null},{"title":"OO example","source":"$r = new ResourceBundle( 'es', \"\/usr\/share\/data\/myapp\");\necho $r['somestring'];\nif(intl_is_failure(ResourceBundle::getErrorCode($r))) {\n    report_error(\"Bundle error\");\n}","output":null}],"resourcebundle::geterrormessage":[{"title":"resourcebundle_get_error_message() example","source":"$r = resourcebundle_create( 'es', \"\/usr\/share\/data\/myapp\");\necho $r['somestring'];\nif(intl_is_failure(resourcebundle_get_error_code($r))) {\n    report_error(\"Bundle error: \".resourcebundle_get_error_message($r));\n}","output":null},{"title":"OO example","source":"$r = new ResourceBundle( 'es', \"\/usr\/share\/data\/myapp\");\necho $r['somestring'];\nif(intl_is_failure(ResourceBundle::getErrorCode($r))) {\n    report_error(\"Bundle error: \".ResourceBundle::getErrorMessage($r));\n}","output":null}],"resourcebundle::getlocales":[{"title":"resourcebundle_locales() example","source":"$bundle = \"\/user\/share\/data\/myapp\";\necho join(PHP_EOL, resourcebundle_locales($bundle));","output":"es\nroot"},{"title":"OO example","source":"$bundle = \"\/usr\/share\/data\/myapp\";\n$r = new ResourceBundle( 'es', $bundle);\necho join(\"\\n\", $r->getLocales($bundle));","output":"es\nroot"}],"rrdgraph::setoptions":[{"title":"RRDGraph::setOptions() example","source":"$graphObj->setOptions(array(\n    \"--start\" => \"920804400\",\n    \"--end\" => 920808000,\n    \"--vertical-label\" => \"m\/s\",\n    \"DEF:myspeed=$rrdFile:speed:AVERAGE\",\n    \"CDEF:realspeed=myspeed,1000,*\",\n    \"LINE2:realspeed#FF0000\"\n));","output":null},{"title":"Set multiple color options","source":"$graphObj->setOptions(array(\n    \"--start\" => \"920804400\",\n    \"--end\" => 920808000,\n    \"--vertical-label\" => \"m\/s\",\n    \"--color=BACK#00000000\",\n    \"--color=GRID#00000000\",\n    \"--color=MGRID#00000000\",\n    \"DEF:myspeed=$rrdFile:speed:AVERAGE\",\n    \"CDEF:realspeed=myspeed,1000,*\",\n    \"LINE2:realspeed#FF0000\"\n));","output":null}],"rrdupdater::update":[{"title":"RRDUpdater::update() examples","source":"$updator = new RRDUpdater(\"speed.rrd\");\n\/\/updates the data source \"speed\" with value \"12411\"\n\/\/for time defined by timestamp \"920807700\"\n$updator->update(array(\"speed\" => \"12411\"), \"920807700\");","output":null}],"runkit_sandbox_parent::__construct":[{"title":"Working with variables in a sandbox","source":"$sandbox = new Runkit_Sandbox();\n$sandbox['parent_access'] = true;","output":null},{"title":"Accessing parental variables","source":"$php = new Runkit_Sandbox();\n$php['parent_access'] = true;\n$php['parent_read'] = true;\n\n$test = \"Global\";\n\n$php->eval('$PARENT = new Runkit_Sandbox_Parent;');\n\n$php['parent_scope'] = 0;\none();\n\n$php['parent_scope'] = 1;\none();\n\n$php['parent_scope'] = 2;\none();\n\n$php['parent_scope'] = 3;\none();\n\n$php['parent_scope'] = 4;\none();\n\n$php['parent_scope'] = 5;\none();\n\nfunction one() {\n    $test = \"one()\";\n    two();\n}\n\nfunction two() {\n    $test = \"two()\";\n    three();\n}\n\nfunction three() {\n    $test = \"three()\";\n    $GLOBALS['php']->eval('var_dump($PARENT->test);');\n}","output":null}],"samconnection::commit":[{"title":"Committing the current unit of work","source":"if (!$conn->commit()) {\n    \/\/ The commit failed!\n    echo \"Commit failed ($conn->errno) $conn->error\";\n  }","output":null}],"samconnection::connect":[{"title":"Creating a connection to a Messaging Server using the IBM MQSeries protocol (WMQ)","source":"$conn->connect(SAM_WMQ, array(SAM_HOST => 'Myhost.myco.com', SAM_PORT => 1506, SAM_BROKER => 'MyBroker'));","output":null},{"title":"Creating a connection with application transaction control and default host and port values","source":"$conn->connect(SAM_WMQ, array(SAM_BROKER => 'MyBroker', SAM_TRANSACTIONS => SAM_MANUAL));","output":null},{"title":"Creating a connection to a Messaging Server using the IBM WebSphere Platform Messaging protocol (WPM)","source":"$conn->connect(SAM_WPM, array(SAM_ENDPOINTS => 'localhost:7278:BootstrapBasicMessaging',\n                              SAM_BUS => 'Bus1', SAM_TARGETCHAIN => 'InboundBasicMessaging'));","output":null}],"samconnection::disconnect":[{"title":"Disconnecting from a Messaging Server","source":"$conn->disconnect();","output":null}],"samconnection::isconnected":[{"title":"Checking whether there us a connection to a Messaging Server","source":"if ($conn->isConnected()) {\n  echo 'Connection is active.';\n} else {\n  echo 'No active connection!';\n}","output":null}],"samconnection::peek":[{"title":"Retrieve the next message from a queue without removing it","source":"$msg = $conn->peek('queue:\/\/receive\/test');\n\nif (!$msg) {\n  \/\/ The peek failed!\n  echo \"Peek failed ($conn->errno) $conn->error\";\n}","output":null},{"title":"Retrieve a specific message from a queue without removing it from the queue","source":"$msg = $conn->peek('queue:\/\/receive\/test', array(SAM_MESSAGEID => $messageId));","output":null}],"samconnection::peekall":[{"title":"Retrieve all messages in a queue without removing them","source":"$msgArray = $conn->peekAll('queue:\/\/receive\/test');\nif ($msgArray) {\n   foreach ( $msgArray as $key => $msg) {\n       echo \"Message $key: body = $msg->body\\n\";\n   }\n} else {\n   echo \"PeekAll failed ($conn->errno) $conn->error\";\n}","output":null},{"title":"Retrieve all messages from a queue with a matching correlation id","source":"$msgArray = $conn->peekAll('queue:\/\/receive\/test', array(SAM_CORRELID => $correlId ));\n   if ($msgArray) {\n\n      foreach ( $msgArray as $key => $msg) {\n            echo \"Message $key: body = $msg->body\\n\";\n         }\n   } else {\n      echo \"PeekAll failed ($conn->errno) $conn->error\";\n   }","output":null}],"samconnection::receive":[{"title":"Receiving a message from a queue","source":"$msg = $conn->receive('queue:\/\/receive\/test');\n\nif (!$msg) {\n  \/\/ The receive failed!\n  echo \"Receive failed ($conn->errno) $conn->error\";\n}","output":null},{"title":"Receiving a message from a queue with options","source":"$msg = $conn->receive('queue:\/\/receive\/test', array(SAM_CORRELID => $token, SAM_WAIT => 10000));","output":null},{"title":"Receiving a message from a subscription","source":"$msg = $conn->receive($subscriptionName);\n\nif (!$msg) {\n  \/\/ The receive failed!\n  echo \"Receive failed ($conn->errno) $conn->error\";\n}","output":null}],"samconnection::remove":[{"title":"Removing a message from a queue by message id","source":"if (!$conn->remove('queue:\/\/receive\/test', array(SAM_MESSAGEID => $messageId))) {\n  \/\/ The remove failed!\n  echo \"Remove failed ($conn->errno) $conn->error\";\n}","output":null}],"samconnection::rollback":[{"title":"Cancelling an in-flight unit of work","source":"if (!$conn->rollback()) {\n  \/\/ The rollback failed!\n  echo \"Rollback failed ($conn->errno) $conn->error\";\n}","output":null}],"samconnection::send":[{"title":"Send a message to a queue","source":"$msg = new SAMMessage('This is a simple text message');\n$correlId = $conn->send('queue:\/\/send\/test', $msg);\nif (!$correlId) {\n    \/\/ The send failed!\n    echo \"Send failed ($conn->errno) $conn->error\";\n}","output":null},{"title":"Publish a message to a topic","source":"$msg = new SAMMessage('This is a simple text item');\nif (!$conn->send('topic:\/\/test', $msg)) {\n    \/\/ The Send failed!\n    echo \"Send failed ($conn->errno) $conn->error\";\n}","output":null},{"title":"Send a request and receive a response","source":"$msg = new SAMMessage('This is a simple text message');\n$msg->header->SAM_REPLY_TO = 'queue:\/\/receive\/test';\n$correlid = $conn->send('queue:\/\/send\/test', $msg);\n\nif (!$correlid) {\n    \/\/ The Send failed!\n    echo \"Send failed ($conn->errno) $conn->error\";\n} else {\n    $resp = $conn->receive('queue:\/\/receive\/test', array(SAM_CORRELID => $correlid));\n}","output":null}],"samconnection::setdebug":[{"title":"Turn on debugging output","source":"$conn->setdebug(TRUE);","output":null},{"title":"Turn off debugging output","source":"$conn->setdebug(FALSE);","output":null}],"samconnection::subscribe":[{"title":"Subscribe to a topic","source":"$subid = $conn->subscribe('topic:\/\/A');\nif (!$subid) {\n  \/\/ The subscribe failed!\n  echo \"Subscribe failed ($conn->errno) $conn->error\";\n}","output":null}],"samconnection::unsubscribe":[{"title":"Delete a subscription","source":"if (!$conn->unsubscribe($subid)) {\n    \/\/ The unsubscribe failed!\n    echo \"Unsubscribe failed ($conn->errno) $conn->error\";\n}","output":null}],"sca::getservice":[{"title":"An SCA::getService() example","source":"include 'SCA\/SCA.php';\n$service = SCA::getService('EmailService.wsdl', 'binding.soap', array('location' => 'http:\/\/example.org'));\n$service->send(...);","output":null}],"sdo_das_datafactory::addpropertytotype":[{"title":"A SDO_DAS_DataFactory::addPropertyToType() example","source":"$df->addPropertyToType('PersonNS', 'PersonType',\n    'addressline', 'commonj.sdo', 'String', array('many'=>true));","output":null}],"sdo_das_datafactory::addtype":[{"title":"A SDO_DAS_DataFactory::addType() example","source":"$df->addType('CompanyNS', 'CompanyType');","output":null}],"sdo_das_relational::executepreparedquery":[{"title":"Retrieving a data object using executePreparedQuery()","source":"require_once 'SDO\/DAS\/Relational.php';\nrequire_once 'company_metadata.inc.php';\n\n\/**************************************************************\n * Construct the DAS with the metadata\n ***************************************************************\/\n$das = new SDO_DAS_Relational ($database_metadata,'company',$SDO_reference_metadata);\n\n\/**************************************************************\n * Get a database connection\n ***************************************************************\/\n$dbh = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);\n\n\/**************************************************************\n * Issue a query to obtain a company object - possibly more if they exist\n * Use a prepared query with a placeholder.\n ***************************************************************\/\n$name = 'Acme';\n$pdo_stmt = $dbh->prepare('select name, id from company where name=?');\n$root = $das->executePreparedQuery(\n    $dbh, \n    $pdo_stmt,\n    array($name), \n    array('company.name', 'company.id'));\n\n\/**************************************************************\n * Echo name and id \n ***************************************************************\/\nforeach ($root['company'] as $company) {\n    echo \"Company obtained from the database has name = \" . \n    $company['name'] . \" and id \" . $company['id'] . \"\\n\";\n}","output":null}],"seekableiterator::seek":[{"title":"SeekableIterator::seek() example","source":"$array = array(\"apple\", \"banana\", \"cherry\", \"damson\", \"elderberry\");\n$iterator = new ArrayIterator($array);\n$iterator->seek(3);\necho $iterator->current();","output":"damson"}],"simplexmlelement::addattribute":[{"title":"Add attributes and children to a SimpleXML element","source":"include 'example.php';\n \n$sxe = new SimpleXMLElement($xmlstr);\n$sxe->addAttribute('type', 'documentary');\n\n$movie = $sxe->addChild('movie');\n$movie->addChild('title', 'PHP2: More Parser Stories');\n$movie->addChild('plot', 'This is all about the people who make it work.');\n\n$characters = $movie->addChild('characters');\n$character  = $characters->addChild('character');\n$character->addChild('name', 'Mr. Parser');\n$character->addChild('actor', 'John Doe');\n\n$rating = $movie->addChild('rating', '5');\n$rating->addAttribute('type', 'stars');\n \necho $sxe->asXML();","output":"<?xml version=\"1.0\" standalone=\"yes\"?>\n<movies type=\"documentary\">\n <movie>\n  <title>PHP: Behind the Parser<\/title>\n  <characters>\n   <character>\n    <name>Ms. Coder<\/name>\n    <actor>Onlivia Actora<\/actor>\n   <\/character>\n   <character>\n    <name>Mr. Coder<\/name>\n    <actor>El Act&#xD3;r<\/actor>\n   <\/character>\n  <\/characters>\n  <plot>\n   So, this language. It's like, a programming language. Or is it a\n   scripting language? All is revealed in this thrilling horror spoof\n   of a documentary.\n  <\/plot>\n  <great-lines>\n   <line>PHP solves all my web problems<\/line>\n  <\/great-lines>\n  <rating type=\"thumbs\">7<\/rating>\n  <rating type=\"stars\">5<\/rating>\n <\/movie>\n <movie>\n  <title>PHP2: More Parser Stories<\/title>\n  <plot>This is all about the people who make it work.<\/plot>\n  <characters>\n   <character>\n    <name>Mr. Parser<\/name>\n    <actor>John Doe<\/actor>\n   <\/character>\n  <\/characters>\n  <rating type=\"stars\">5<\/rating>\n <\/movie>\n<\/movies>"}],"simplexmlelement::addchild":[{"title":"Add attributes and children to a SimpleXML element","source":"include 'example.php';\n\n$sxe = new SimpleXMLElement($xmlstr);\n$sxe->addAttribute('type', 'documentary');\n\n$movie = $sxe->addChild('movie');\n$movie->addChild('title', 'PHP2: More Parser Stories');\n$movie->addChild('plot', 'This is all about the people who make it work.');\n\n$characters = $movie->addChild('characters');\n$character  = $characters->addChild('character');\n$character->addChild('name', 'Mr. Parser');\n$character->addChild('actor', 'John Doe');\n\n$rating = $movie->addChild('rating', '5');\n$rating->addAttribute('type', 'stars');\n \necho $sxe->asXML();","output":"<?xml version=\"1.0\" standalone=\"yes\"?>\n<movies type=\"documentary\">\n <movie>\n  <title>PHP: Behind the Parser<\/title>\n  <characters>\n   <character>\n    <name>Ms. Coder<\/name>\n    <actor>Onlivia Actora<\/actor>\n   <\/character>\n   <character>\n    <name>Mr. Coder<\/name>\n    <actor>El Act&#xD3;r<\/actor>\n   <\/character>\n  <\/characters>\n  <plot>\n   So, this language. It's like, a programming language. Or is it a\n   scripting language? All is revealed in this thrilling horror spoof\n   of a documentary.\n  <\/plot>\n  <great-lines>\n   <line>PHP solves all my web problems<\/line>\n  <\/great-lines>\n  <rating type=\"thumbs\">7<\/rating>\n  <rating type=\"stars\">5<\/rating>\n <\/movie>\n <movie>\n  <title>PHP2: More Parser Stories<\/title>\n  <plot>This is all about the people who make it work.<\/plot>\n  <characters>\n   <character>\n    <name>Mr. Parser<\/name>\n    <actor>John Doe<\/actor>\n   <\/character>\n  <\/characters>\n  <rating type=\"stars\">5<\/rating>\n <\/movie>\n<\/movies>"}],"simplexmlelement::asxml":[{"title":"Get XML","source":"$string = <<<XML\n<a>\n <b>\n  <c>text<\/c>\n  <c>stuff<\/c>\n <\/b>\n <d>\n  <c>code<\/c>\n <\/d>\n<\/a>\nXML;\n\n$xml = new SimpleXMLElement($string);\n\necho $xml->asXML();","output":"<?xml version=\"1.0\"?>\n<a>\n <b>\n  <c>text<\/c>\n  <c>stuff<\/c>\n <\/b>\n <d>\n  <c>code<\/c>\n <\/d>\n<\/a>"},{"title":"Using asXML() on SimpleXMLElement::xpath() results","source":"\/\/ Continued from example XML above.\n\n\/* Search for <a><b><c> *\/\n$result = $xml->xpath('\/a\/b\/c');\n\nwhile(list( , $node) = each($result)) {\n    echo $node->asXML();\n}","output":"<c>text<\/c><c>stuff<\/c>"}],"simplexmlelement::attributes":[{"title":"Interpret an XML string","source":"$string = <<<XML\n<a>\n <foo name=\"one\" game=\"lonely\">1<\/foo>\n<\/a>\nXML;\n\n$xml = simplexml_load_string($string);\nforeach($xml->foo[0]->attributes() as $a => $b) {\n    echo $a,'=\"',$b,\"\\\"\\n\";\n}","output":"name=\"one\"\ngame=\"lonely\""}],"simplexmlelement::children":[{"title":"Traversing a children() pseudo-array","source":"$xml = new SimpleXMLElement(\n'<person>\n <child role=\"son\">\n  <child role=\"daughter\"\/>\n <\/child>\n <child role=\"daughter\">\n  <child role=\"son\">\n   <child role=\"son\"\/>\n  <\/child>\n <\/child>\n<\/person>');\n\nforeach ($xml->children() as $second_gen) {\n    echo ' The person begot a ' . $second_gen['role'];\n\n    foreach ($second_gen->children() as $third_gen) {\n        echo ' who begot a ' . $third_gen['role'] . ';';\n\n        foreach ($third_gen->children() as $fourth_gen) {\n            echo ' and that ' . $third_gen['role'] .\n                ' begot a ' . $fourth_gen['role'];\n        }\n    }\n}","output":"The person begot a son who begot a daughter; The person\nbegot a daughter who begot a son; and that son begot a son"},{"title":"Using namespaces","source":"$xml = '<example xmlns:foo=\"my.foo.urn\">\n  <foo:a>Apple<\/foo:a>\n  <foo:b>Banana<\/foo:b>\n  <c>Cherry<\/c>\n<\/example>';\n\n$sxe = new SimpleXMLElement($xml);\n\n$kids = $sxe->children('foo');\nvar_dump(count($kids));\n\n$kids = $sxe->children('foo', TRUE);\nvar_dump(count($kids));\n\n$kids = $sxe->children('my.foo.urn');\nvar_dump(count($kids));\n\n$kids = $sxe->children('my.foo.urn', TRUE);\nvar_dump(count($kids));\n\n$kids = $sxe->children();\nvar_dump(count($kids));","output":"int(0)\nint(2)\nint(2)\nint(0)\nint(1)"}],"simplexmlelement::count":[{"title":"Counting the number of children","source":"$xml = <<<EOF\n<people>\n <person name=\"Person 1\">\n  <child\/>\n  <child\/>\n  <child\/>\n <\/person>\n <person name=\"Person 2\">\n  <child\/>\n  <child\/>\n  <child\/>\n  <child\/>\n  <child\/>\n <\/person>\n<\/people>\nEOF;\n\n$elem = new SimpleXMLElement($xml);\n\nforeach ($elem as $person) {\n    printf(\"%s has got %d children.\\n\", $person['name'], $person->count());\n}","output":"Person 1 has got 3 children.\nPerson 2 has got 5 children."}],"simplexmlelement::getdocnamespaces":[{"title":"Get document namespaces","source":"$xml = <<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<people xmlns:p=\"http:\/\/example.org\/ns\">\n    <p:person id=\"1\">John Doe<\/p:person>\n    <p:person id=\"2\">Susie Q. Public<\/p:person>\n<\/people>\nXML;\n \n$sxe = new SimpleXMLElement($xml);\n\n$namespaces = $sxe->getDocNamespaces();\nvar_dump($namespaces);","output":"array(1) {\n   [\"p\"]=>\n   string(21) \"http:\/\/example.org\/ns\"\n}"},{"title":"Working with multiple namespaces","source":"$xml = <<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<people xmlns:p=\"http:\/\/example.org\/ns\" xmlns:t=\"http:\/\/example.org\/test\">\n    <p:person t:id=\"1\">John Doe<\/p:person>\n    <p:person t:id=\"2\" a:addr=\"123 Street\" xmlns:a=\"http:\/\/example.org\/addr\">\n        Susie Q. Public\n    <\/p:person>\n<\/people>\nXML;\n \n$sxe = new SimpleXMLElement($xml);\n\n$namespaces = $sxe->getDocNamespaces(TRUE);\nvar_dump($namespaces);","output":"array(3) {\n  [\"p\"]=>\n  string(21) \"http:\/\/example.org\/ns\"\n  [\"t\"]=>\n  string(23) \"http:\/\/example.org\/test\"\n  [\"a\"]=>\n  string(23) \"http:\/\/example.org\/addr\"\n}"}],"simplexmlelement::getname":[{"title":"Get XML element names","source":"include 'example.php';\n$sxe = new SimpleXMLElement($xmlstr);\n\necho $sxe->getName() . \"\\n\";\n\nforeach ($sxe->children() as $child)\n{\n    echo $child->getName() . \"\\n\";\n}","output":"movies\nmovie"}],"simplexmlelement::getnamespaces":[{"title":"Get document namespaces in use","source":"$xml = <<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<people xmlns:p=\"http:\/\/example.org\/ns\" xmlns:t=\"http:\/\/example.org\/test\">\n    <p:person id=\"1\">John Doe<\/p:person>\n    <p:person id=\"2\">Susie Q. Public<\/p:person>\n<\/people>\nXML;\n \n$sxe = new SimpleXMLElement($xml);\n\n$namespaces = $sxe->getNamespaces(true);\nvar_dump($namespaces);","output":"array(1) {\n  [\"p\"]=>\n  string(21) \"http:\/\/example.org\/ns\"\n}"}],"simplexmlelement::registerxpathnamespace":[{"title":"Setting a namespace prefix to use in an XPath query","source":"$xml = <<<EOD\n<book xmlns:chap=\"http:\/\/example.org\/chapter-title\">\n    <title>My Book<\/title>\n    <chapter id=\"1\">\n        <chap:title>Chapter 1<\/chap:title>\n        <para>Donec velit. Nullam eget tellus vitae tortor gravida scelerisque. \n            In orci lorem, cursus imperdiet, ultricies non, hendrerit et, orci. \n            Nulla facilisi. Nullam velit nisl, laoreet id, condimentum ut, \n            ultricies id, mauris.<\/para>\n    <\/chapter>\n    <chapter id=\"2\">\n        <chap:title>Chapter 2<\/chap:title>\n        <para>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin \n            gravida. Phasellus tincidunt massa vel urna. Proin adipiscing quam \n            vitae odio. Sed dictum. Ut tincidunt lorem ac lorem. Duis eros \n            tellus, pharetra id, faucibus eu, dapibus dictum, odio.<\/para>\n    <\/chapter>\n<\/book>\nEOD;\n\n$sxe = new SimpleXMLElement($xml);\n\n$sxe->registerXPathNamespace('c', 'http:\/\/example.org\/chapter-title');\n$result = $sxe->xpath('\/\/c:title');\n\nforeach ($result as $title) {\n  echo $title . \"\\n\";\n}","output":"Chapter 1\nChapter 2"}],"simplexmlelement::__tostring":[{"title":"Get string content","source":"$xml = new SimpleXMLElement('<a>1 <b>2 <\/b>3<\/a>');\necho $xml;","output":"1 3"}],"simplexmlelement::xpath":[{"title":"Xpath","source":"$string = <<<XML\n<a>\n <b>\n  <c>text<\/c>\n  <c>stuff<\/c>\n <\/b>\n <d>\n  <c>code<\/c>\n <\/d>\n<\/a>\nXML;\n\n$xml = new SimpleXMLElement($string);\n\n\/* Search for <a><b><c> *\/\n$result = $xml->xpath('\/a\/b\/c');\n\nwhile(list( , $node) = each($result)) {\n    echo '\/a\/b\/c: ',$node,\"\\n\";\n}\n\n\/* Relative paths also work... *\/\n$result = $xml->xpath('b\/c');\n\nwhile(list( , $node) = each($result)) {\n    echo 'b\/c: ',$node,\"\\n\";\n}","output":"\/a\/b\/c: text\n\/a\/b\/c: stuff\nb\/c: text\nb\/c: stuff"}],"simplexmliterator::current":[{"title":"Return the current element","source":"$xmlIterator = new SimpleXMLIterator('<books><book>PHP basics<\/book><book>XML basics<\/book><\/books>');\nvar_dump($xmlIterator->current());\n\n$xmlIterator->rewind(); \/\/ rewind to first element\nvar_dump($xmlIterator->current());","output":"NULL\nobject(SimpleXMLIterator)#2 (1) {\n  [0]=>\n  string(10) \"PHP basics\"\n}"}],"simplexmliterator::getchildren":[{"title":"Return the sub-elements of the current element","source":"$xml = <<<XML\n<books>\n    <book>\n        <title>PHP Basics<\/title>\n        <author>Jim Smith<\/author>\n    <\/book>\n    <book>XML basics<\/book>\n<\/books>\nXML;\n\n$xmlIterator = new SimpleXMLIterator($xml);\nfor( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {\n    foreach($xmlIterator->getChildren() as $name => $data) {\n    echo \"The $name is '$data' from the class \" . get_class($data) . \"\\n\";\n    }\n}","output":"The title is 'PHP Basics' from the class SimpleXMLIterator\nThe author is 'Jim Smith' from the class SimpleXMLIterator"}],"simplexmliterator::haschildren":[{"title":"Check whether the current element has sub-elements","source":"$xml = <<<XML\n<books>\n    <book>\n        <title>PHP Basics<\/title>\n        <author>Jim Smith<\/author>\n    <\/book>\n    <book>XML basics<\/book>\n<\/books>\nXML;\n\n$xmlIterator = new SimpleXMLIterator( $xml );\nfor( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {\n    if($xmlIterator->hasChildren()) {\n        var_dump($xmlIterator->current());\n    }\n}","output":"object(SimpleXMLIterator)#2 (2) {\n  [\"title\"]=>\n  string(10) \"PHP Basics\"\n  [\"author\"]=>\n  string(9) \"Jim Smith\"\n}"}],"simplexmliterator::key":[{"title":"Get the current XML tag key","source":"$xmlIterator = new SimpleXMLIterator('<books><book>PHP basics<\/book><book>XML basics<\/book><\/books>');\n\necho var_dump($xmlIterator->key());\n$xmlIterator->rewind(); \/\/ rewind to the first element\necho var_dump($xmlIterator->key());","output":"bool(false)\nstring(4) \"book\""}],"simplexmliterator::next":[{"title":"Move to the next element","source":"$xmlIterator = new SimpleXMLIterator('<books><book>PHP Basics<\/book><book>XML basics<\/book><\/books>');\n$xmlIterator->rewind(); \/\/ rewind to the first element\n$xmlIterator->next();\n\nvar_dump($xmlIterator->current());","output":"object(SimpleXMLIterator)#2 (1) {\n  [0]=>\n  string(10) \"XML basics\"\n}"}],"simplexmliterator::rewind":[{"title":"Rewind to the first element","source":"$xmlIterator = new SimpleXMLIterator('<books><book>PHP Basics<\/book><book>XML Basics<\/book><\/books>');\n$xmlIterator->rewind();\n\nvar_dump($xmlIterator->current());","output":"object(SimpleXMLIterator)#2 (1) {\n  [0]=>\n  string(10) \"PHP Basics\"\n}"}],"simplexmliterator::valid":[{"title":"Check whether the current element is valid","source":"$xmlIterator = new SimpleXMLIterator('<books><book>SQL Basics<\/book><\/books>');\n\n$xmlIterator->rewind(); \/\/ rewind to the first element\necho var_dump($xmlIterator->valid()); \/\/ bool(true)\n\n$xmlIterator->next(); \/\/ advance to the next element\necho var_dump($xmlIterator->valid()); \/\/ bool(false) because there is only one element","output":null}],"snmp::close":[{"title":"SNMP::close() example","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  # ...\n  # get, walk, etc goes here\n  # ...\n  $session->close();","output":null}],"snmp::get":[{"title":"Single SNMP object","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $sysdescr = $session->get(\"sysDescr.0\");\n  echo \"$sysdescr\\n\";\n  $sysdescr = $session->get(array(\"sysDescr.0\"));\n  print_r($sysdescr);","output":"STRING: Test server\nArray\n(\n    [SNMPv2-MIB::sysDescr.0] => STRING: Test server\n)"},{"title":"Multiple SNMP objects","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $results = $session->get(array(\"sysDescr.0\", \"sysName.0\"));\n  print_r($results);\n  $session->close();","output":"Array\n(\n    [SNMPv2-MIB::sysDescr.0] => STRING: Test server\n    [SNMPv2-MIB::sysName.0] => STRING: myhost.nodomain\n)"}],"snmp::geterrno":[{"title":"SNMP::getErrno() example","source":"$session = new SNMP(SNMP::VERSION_2c, '127.0.0.1', 'boguscommunity');\nvar_dump(@$session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->getErrno() == SNMP::ERRNO_TIMEOUT);","output":"bool(false)\nbool(true)"}],"snmp::geterror":[{"title":"SNMP::getError() example","source":"$session = new SNMP(SNMP::VERSION_2c, '127.0.0.1', 'boguscommunity');\nvar_dump(@$session->get('.1.3.6.1.2.1.1.1.0'));\nvar_dump($session->getError());","output":"bool(false)\nstring(26) \"No response from 127.0.0.1\""}],"snmp::getnext":[{"title":"Single SNMP object","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $nsysdescr = $session->getnext(\"sysDescr.0\");\n  echo \"$nsysdescr\\n\";\n  $nsysdescr = $session->getnext(array(\"sysDescr.0\"));\n  print_r($nsysdescr);","output":"OID: NET-SNMP-MIB::netSnmpAgentOIDs.8\nArray\n(\n    [SNMPv2-MIB::sysObjectID.0] => OID: NET-SNMP-MIB::netSnmpAgentOIDs.8\n)"},{"title":"Miltiple SNMP objects","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $results = $session->getnext(array(\"sysDescr.0\", \"sysName.0\"));\n  print_r($results);\n  $session->close();","output":"Array\n(\n    [SNMPv2-MIB::sysObjectID.0] => OID: NET-SNMP-MIB::netSnmpAgentOIDs.8\n    [SNMPv2-MIB::sysLocation.0] => STRING: Nowhere\n)"}],"snmp::set":[{"title":"Set single SNMP object id","source":"$session = new SNMP(SNMP::VERSION_2C, \"127.0.0.1\", \"private\");\n  $session->set('SNMPv2-MIB::sysContact.0', 's', \"Nobody\");","output":null},{"title":"Set multiple values using single SNMP::set() call","source":"$session = new SNMP(SNMP::VERSION_2C, \"127.0.0.1\", \"private\");\n  $session->set(array('SNMPv2-MIB::sysContact.0', 'SNMPv2-MIB::sysLocation.0'), array('s', 's'), array(\"Nobody\", \"Nowhere\"));\n\/\/ or\n  $session->set(array('SNMPv2-MIB::sysContact.0', 'SNMPv2-MIB::sysLocation.0'), 's', array(\"Nobody\", \"Nowhere\"));","output":null},{"title":"Using SNMP::set() for setting BITS SNMP object id","source":"$session = new SNMP(SNMP::VERSION_2C, \"127.0.0.1\", \"private\");\n  $session->set('FOO-MIB::bar.42', 'b', '0 1 2 3 4');\n\/\/ or\n  $session->set('FOO-MIB::bar.42', 'x', 'F0');","output":null}],"snmp::setsecurity":[{"title":"SNMP::setSecurity() example","source":"$session = new SNMP(SNMP::VERSION_3, $hostname, $rwuser, $timeout, $retries);\n  $session->setSecurity('authPriv', 'MD5', $auth_pass, 'AES', $priv_pass, '', 'aeeeff');","output":null}],"snmp::walk":[{"title":"SNMP::walk() example","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $fulltree = $session->walk(\".\");\n  print_r($fulltree);\n  $session->close();","output":"Array\n(\n    [SNMPv2-MIB::sysDescr.0] => STRING: Test server\n    [SNMPv2-MIB::sysObjectID.0] => OID: NET-SNMP-MIB::netSnmpAgentOIDs.8\n    [DISMAN-EVENT-MIB::sysUpTimeInstance] => Timeticks: (1150681750) 133 days, 4:20:17.50\n    [SNMPv2-MIB::sysContact.0] => STRING: Nobody\n    [SNMPv2-MIB::sysName.0] => STRING: server.localdomain\n    ...\n)"},{"title":"suffix_as_key example","source":"$session = new SNMP(SNMP::VERSION_1, \"127.0.0.1\", \"public\");\n  $session->valueretrieval = SNMP_VALUE_PLAIN;\n  $ifDescr = $session->walk(\".1.3.6.1.2.1.2.2.1.2\", TRUE);\n  $session->valueretrieval = SNMP_VALUE_LIBRARY;\n  $ifType = $session->walk(\".1.3.6.1.2.1.2.2.1.3\", TRUE);\n  print_r($ifDescr);\n  print_r($ifType);\n  $result = array();\n  foreach($ifDescr as $i => $n) {\n    $result[$n] = $ifType[$i];\n  }\n  print_r($result);","output":"Array\n(\n    [1] => igb0\n    [2] => igb1\n    [3] => ipfw0\n    [4] => lo0\n    [5] => lagg0\n)\nArray\n(\n    [1] => INTEGER: ieee8023adLag(161)\n    [2] => INTEGER: ieee8023adLag(161)\n    [3] => INTEGER: ethernetCsmacd(6)\n    [4] => INTEGER: softwareLoopback(24)\n    [5] => INTEGER: ethernetCsmacd(6)\n)\nArray\n(\n    [igb0] => INTEGER: ieee8023adLag(161)\n    [igb1] => INTEGER: ieee8023adLag(161)\n    [ipfw0] => INTEGER: ethernetCsmacd(6)\n    [lo0] => INTEGER: softwareLoopback(24)\n    [lagg0] => INTEGER: ethernetCsmacd(6)\n)"}],"soapclient::soapclient":[{"title":"SoapClient::SoapClient() example","source":"$client = new SoapClient(\"some.wsdl\");\n\n$client = new SoapClient(\"some.wsdl\", array('soap_version'   => SOAP_1_2));\n\n$client = new SoapClient(\"some.wsdl\", array('login'          => \"some_name\",\n                                            'password'       => \"some_password\"));\n\n$client = new SoapClient(\"some.wsdl\", array('proxy_host'     => \"localhost\",\n                                            'proxy_port'     => 8080));\n\n$client = new SoapClient(\"some.wsdl\", array('proxy_host'     => \"localhost\",\n                                            'proxy_port'     => 8080,\n                                            'proxy_login'    => \"some_name\",\n                                            'proxy_password' => \"some_password\"));\n\n$client = new SoapClient(\"some.wsdl\", array('local_cert'     => \"cert_key.pem\"));\n\n$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\"));\n\n$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\",\n                                     'style'    => SOAP_DOCUMENT,\n                                     'use'      => SOAP_LITERAL));\n\n$client = new SoapClient(\"some.wsdl\", \n  array('compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP));\n\n$client = new SoapClient(\"some.wsdl\", array('encoding'=>'ISO-8859-1'));\n\nclass MyBook {\n    public $title;\n    public $author;\n}\n\n$client = new SoapClient(\"books.wsdl\", array('classmap' => array('book' => \"MyBook\")));","output":null}],"soapclient::__dorequest":[{"title":"SoapClient::__doRequest() example","source":"function Add($x,$y) {\n  return $x+$y;\n}\n\nclass LocalSoapClient extends SoapClient {\n\n  function __construct($wsdl, $options) {\n    parent::__construct($wsdl, $options);\n    $this->server = new SoapServer($wsdl, $options);\n    $this->server->addFunction('Add');\n  }\n\n  function __doRequest($request, $location, $action, $version, $one_way = 0) {\n    ob_start();\n    $this->server->handle($request);\n    $response = ob_get_contents();\n    ob_end_clean();\n    return $response;\n  }\n\n}\n\n$x = new LocalSoapClient(NULL,array('location'=>'test:\/\/', \n                                   'uri'=>'http:\/\/testuri.org')); \nvar_dump($x->Add(3,4));","output":null}],"soapclient::__getfunctions":[{"title":"SoapClient::__getFunctions() example","source":"$client = new SoapClient('http:\/\/soap.amazon.com\/schemas3\/AmazonWebServices.wsdl');\nvar_dump($client->__getFunctions());","output":"array(26) {\n  [0]=>\n  string(70) \"ProductInfo KeywordSearchRequest(KeywordRequest $KeywordSearchRequest)\"\n  [1]=>\n  string(79) \"ProductInfo TextStreamSearchRequest(TextStreamRequest $TextStreamSearchRequest)\"\n  [2]=>\n  string(64) \"ProductInfo PowerSearchRequest(PowerRequest $PowerSearchRequest)\"\n...\n  [23]=>\n  string(107) \"ShoppingCart RemoveShoppingCartItemsRequest(RemoveShoppingCartItemsRequest $RemoveShoppingCartItemsRequest)\"\n  [24]=>\n  string(107) \"ShoppingCart ModifyShoppingCartItemsRequest(ModifyShoppingCartItemsRequest $ModifyShoppingCartItemsRequest)\"\n  [25]=>\n  string(118) \"GetTransactionDetailsResponse GetTransactionDetailsRequest(GetTransactionDetailsRequest $GetTransactionDetailsRequest)\"\n}"}],"soapclient::__getlastrequest":[{"title":"SoapClient::__getLastRequest() example","source":"$client = new SoapClient(\"some.wsdl\", array('trace' => 1));\n$result = $client->SomeFunction();\necho \"REQUEST:\\n\" . $client->__getLastRequest() . \"\\n\";","output":null}],"soapclient::__getlastrequestheaders":[{"title":"SoapClient::__getLastRequestHeaders() example","source":"$client = SoapClient(\"some.wsdl\", array('trace' => 1));\n$result = $client->SomeFunction();\necho \"REQUEST HEADERS:\\n\" . $client->__getLastRequestHeaders() . \"\\n\";","output":null}],"soapclient::__getlastresponse":[{"title":"SoapClient::__getLastResponse() example","source":"$client = SoapClient(\"some.wsdl\", array('trace' => 1));\n$result = $client->SomeFunction();\necho \"Response:\\n\" . $client->__getLastResponse() . \"\\n\";","output":null}],"soapclient::__getlastresponseheaders":[{"title":"SoapClient::__getLastResponse() example","source":"$client = SoapClient(\"some.wsdl\", array('trace' => 1));\n$result = $client->SomeFunction();\necho \"RESPONSE HEADERS:\\n\" . $client->__getLastResponseHeaders() . \"\\n\";","output":null}],"soapclient::__gettypes":[{"title":"SoapClient::__getTypes() example","source":"$client = new SoapClient('http:\/\/soap.amazon.com\/schemas3\/AmazonWebServices.wsdl');\nvar_dump($client->__getTypes());","output":"array(88) {\n  [0]=>\n  string(30) \"ProductLine ProductLineArray[]\"\n  [1]=>\n  string(85) \"struct ProductLine {\n string Mode;\n string RelevanceRank;\n ProductInfo ProductInfo;\n}\"\n  [2]=>\n  string(105) \"struct ProductInfo {\n string TotalResults;\n string TotalPages;\n string ListName;\n DetailsArray Details;\n}\"\n...\n  [85]=>\n  string(32) \"ShortSummary ShortSummaryArray[]\"\n  [86]=>\n  string(121) \"struct GetTransactionDetailsRequest {\n string tag;\n string devtag;\n string key;\n OrderIdArray OrderIds;\n string locale;\n}\"\n  [87]=>\n  string(75) \"struct GetTransactionDetailsResponse {\n ShortSummaryArray ShortSummaries;\n}\"\n}"}],"soapclient::__setlocation":[{"title":"SoapClient::__setLocation() example","source":"$client = new SoapClient('http:\/\/example.com\/webservice.php?wsdl');\n\n$client->__setLocation('http:\/\/www.somethirdparty.com');\n\n$old_location = $client->__setLocation(); \/\/ unsets the location option\n\necho $old_location;","output":"http:\/\/www.somethirdparty.com"}],"soapclient::__setsoapheaders":[{"title":"SoapClient::__setSoapHeaders() example","source":"$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\"));\n$header = new SoapHeader('http:\/\/soapinterop.org\/echoheader\/', \n                            'echoMeStringRequest',\n                            'hello world');\n\n$client->__setSoapHeaders($header);\n\n$client->__soapCall(\"echoVoid\", null);","output":null},{"title":"Set Multiple Headers","source":"$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\"));\n$headers = array();\n\n$headers[] = new SoapHeader('http:\/\/soapinterop.org\/echoheader\/', \n                            'echoMeStringRequest',\n                            'hello world');\n\n$headers[] = new SoapHeader('http:\/\/soapinterop.org\/echoheader\/', \n                            'echoMeStringRequest',\n                            'hello world again');\n\n$client->__setSoapHeaders($headers);\n\n$client->__soapCall(\"echoVoid\", null);","output":null}],"soapclient::__soapcall":[{"title":"SoapClient::__soapCall() example","source":"$client = new SoapClient(\"some.wsdl\");\n$client->SomeFunction($a, $b, $c);\n\n$client->__soapCall(\"SomeFunction\", array($a, $b, $c));\n$client->__soapCall(\"SomeFunction\", array($a, $b, $c), NULL,\n                    new SoapHeader(), $output_headers);\n\n\n$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\"));\n$client->SomeFunction($a, $b, $c);\n$client->__soapCall(\"SomeFunction\", array($a, $b, $c));\n$client->__soapCall(\"SomeFunction\", array($a, $b, $c),\n                    array('soapaction' => 'some_action',\n                          'uri'        => 'some_uri'));","output":null}],"soapfault::soapfault":[{"title":"Some examples","source":"function test($x)\n{\n    return new SoapFault(\"Server\", \"Some error message\");\n}\n\n$server = new SoapServer(null, array('uri' => \"http:\/\/test-uri\/\"));\n$server->addFunction(\"test\");\n$server->handle();","output":null},{"title":"Some examples","source":"function test($x)\n{\n    throw new SoapFault(\"Server\", \"Some error message\");\n}\n\n$server = new SoapServer(null, array('uri' => \"http:\/\/test-uri\/\"));\n$server->addFunction(\"test\");\n$server->handle();","output":null}],"soapheader::soapheader":[{"title":"SoapHeader::SoapHeader() example","source":"$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\"));\n$client->__soapCall(\"echoVoid\", null, null,\n                new SoapHeader('http:\/\/soapinterop.org\/echoheader\/',\n                               'echoMeStringRequest',\n                               'hello world'));","output":null}],"soapparam::soapparam":[{"title":"SoapParam::SoapParam() example","source":"$client = new SoapClient(null,array('location' => \"http:\/\/localhost\/soap.php\",\n                                    'uri'      => \"http:\/\/test-uri\/\"));\n$client->SomeFunction(new SoapParam($a, \"a\"),\n                      new SoapParam($b, \"b\"),\n                      new SoapParam($c, \"c\"));","output":null}],"soapserver::addfunction":[{"title":"SoapServer::addFunction() example","source":"function echoString($inputString)\n{\n    return $inputString;\n}\n\n$server->addFunction(\"echoString\");\n\nfunction echoTwoStrings($inputString1, $inputString2)\n{\n    return array(\"outputString1\" => $inputString1,\n                 \"outputString2\" => $inputString2);\n}\n$server->addFunction(array(\"echoString\", \"echoTwoStrings\"));\n\n$server->addFunction(SOAP_FUNCTIONS_ALL);","output":null}],"soapserver::getfunctions":[{"title":"SoapServer::getFunctions() example","source":"$server = new SoapServer(NULL, array(\"uri\" => \"http:\/\/test-uri\"));\n$server->addFunction(SOAP_FUNCTIONS_ALL);\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  $server->handle();\n} else {\n  echo \"This SOAP server can handle following functions: \";\n  $functions = $server->getFunctions();\n  foreach($functions as $func) {\n    echo $func . \"\\n\";\n  }\n}","output":null}],"soapserver::handle":[{"title":"SoapServer::handle() example","source":"function test($x)\n{\n    return $x;\n}\n\n$server = new SoapServer(null, array('uri' => \"http:\/\/test-uri\/\"));\n$server->addFunction(\"test\");\n$server->handle();","output":null}],"soapserver::setpersistence":[{"title":"SoapServer::setPersistence() example","source":"class MyFirstPersistentSoapServer {\n     private $resource; \/\/ (Such as PDO, mysqli, etc..)\n     public $myvar1;\n     public $myvar2;\n\n     public function __construct() {\n         $this->__wakeup(); \/\/ We're calling our wakeup to handle starting our resource\n     }\n\n     public function __wakeup() {\n         $this->resource = CodeToStartOurResourceUp();\n     }\n\n     public function __sleep() {\n         \/\/ We make sure to leave out $resource here, so our session data remains persistent\n         \/\/ Failure to do so will result in the failure during the unserialization of data\n         \/\/ on the next request; thus, our SoapObject would not be persistent across requests.\n         return array('myvar1','myvar2');\n     }\n }\n\n try {\n     session_start();\n     $server = new SoapServer(null, array('uri' => $_SERVER['REQUEST_URI']));\n     $server->setClass('MyFirstPersistentSoapServer');\n     \/\/ setPersistence MUST be called after setClass, because setClass's\n     \/\/ behavior sets SESSION_PERSISTENCE_REQUEST upon enacting the method.\n     $server->setPersistence(SOAP_PERSISTENCE_SESSION);\n     $server->handle();\n } catch(SoapFault $e) {\n     error_log(\"SOAP ERROR: \". $e->getMessage());\n }","output":null}],"soapserver::soapserver":[{"title":"SoapServer::SoapServer() example","source":"$server = new SoapServer(\"some.wsdl\");\n\n$server = new SoapServer(\"some.wsdl\", array('soap_version' => SOAP_1_2));\n\n$server = new SoapServer(\"some.wsdl\", array('actor' => \"http:\/\/example.org\/ts-tests\/C\"));\n\n$server = new SoapServer(\"some.wsdl\", array('encoding'=>'ISO-8859-1'));\n\n$server = new SoapServer(null, array('uri' => \"http:\/\/test-uri\/\"));\n\nclass MyBook {\n    public $title;\n    public $author;\n}\n\n$server = new SoapServer(\"books.wsdl\", array('classmap' => array('book' => \"MyBook\")));","output":null}],"soapvar::soapvar":[{"title":"SoapVar::SoapVar() example","source":"class SOAPStruct {\n    function SOAPStruct($s, $i, $f) \n    {\n        $this->varString = $s;\n        $this->varInt = $i;\n        $this->varFloat = $f;\n    }\n}\n$client = new SoapClient(null, array('location' => \"http:\/\/localhost\/soap.php\",\n                                     'uri'      => \"http:\/\/test-uri\/\"));\n$struct = new SOAPStruct('arg', 34, 325.325);\n$soapstruct = new SoapVar($struct, SOAP_ENC_OBJECT, \"SOAPStruct\", \"http:\/\/soapinterop.org\/xsd\");\n$client->echoStruct(new SoapParam($soapstruct, \"inputStruct\"));","output":null}],"solrclient::adddocument":[{"title":"SolrClient::addDocument() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$doc = new SolrInputDocument();\n\n$doc->addField('id', 334455);\n$doc->addField('cat', 'Software');\n$doc->addField('cat', 'Lucene');\n\n$updateResponse = $client->addDocument($doc);\n\n\/\/ you will have to commit changes to be written if you didn't use $commitWithin\n$client->commit();\n\nprint_r($updateResponse->getResponse());","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 1\n        )\n\n)"},{"title":"SolrClient::addDocument() example 2","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$doc = new SolrInputDocument();\n\n$doc->addField('id', 334455);\n$doc->addField('cat', 'Software');\n$doc->addField('cat', 'Lucene');\n\n\/\/ No need to call commit() because $commitWithin is passed, so Solr Server will auto commit within 10 seconds\n$updateResponse = $client->addDocument($doc, false, 10000);\n\nprint_r($updateResponse->getResponse());","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 1\n        )\n\n)"}],"solrclient::adddocuments":[{"title":"SolrClient::addDocuments() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$doc = new SolrInputDocument();\n\n$doc->addField('id', 334455);\n$doc->addField('cat', 'Software');\n$doc->addField('cat', 'Lucene');\n\n$doc2 = clone $doc;\n\n$doc2->deleteField('id');\n$doc2->addField('id', 334456);\n\n$docs = array($doc, $doc2);\n\n$updateResponse = $client->addDocuments($docs);\n\n\/\/ no changes will be written to disk unless $commitWithin is passed or SolrClient::commit is called\n\nprint_r($updateResponse->getResponse());","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 2\n        )\n\n)"}],"solrclient::__construct":[{"title":"SolrClient::__construct() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n    'path'     => SOLR_PATH_TO_SOLR,\n    'wt'       => 'xml',\n);\n\n$client = new SolrClient($options);\n\n$doc = new SolrInputDocument();\n\n$doc->addField('id', 334455);\n$doc->addField('cat', 'Software');\n$doc->addField('cat', 'Lucene');\n\n$updateResponse = $client->addDocument($doc);","output":null}],"solrclient::deletebyquery":[{"title":"SolrQuery::deleteByQuery() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n\/\/This will erase the entire index\n$client->deleteByQuery(\"*:*\");\n$client->commit();","output":null}],"solrclient::getbyid":[{"title":"SolrClient::getById() example","source":"include \"bootstrap.php\";\n\n$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n    'path'     => SOLR_SERVER_PATH\n);\n\n$client = new SolrClient($options);\n$response = $client->getById('GB18030TEST');\nprint_r($response->getResponse());","output":"SolrObject Object\n(\n    [doc] => SolrObject Object\n        (\n            [id] => GB18030TEST\n            [name] => Array\n                (\n                    [0] => Test with some GB18030 encoded characters\n                )\n\n            [features] => Array\n                (\n                    [0] => No accents here\n                    [1] => 这是一个功能\n                    [2] => This is a feature (translated)\n                    [3] => 这份文件是很有光泽\n                    [4] => This document is very shiny (translated)\n                )\n\n            [price] => Array\n                (\n                    [0] => 0\n                )\n\n            [inStock] => Array\n                (\n                    [0] => 1\n                )\n\n            [_version_] => 1510294336239042560\n        )\n\n)"}],"solrclient::getbyids":[{"title":"SolrClient::getByIds() example","source":"include \"bootstrap.php\";\n\n$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n    'path'     => SOLR_SERVER_PATH\n);\n\n$client = new SolrClient($options);\n$response = $client->getByIds(['GB18030TEST', '6H500F0']);\n\nprint_r($response->getResponse());","output":"SolrObject Object\n(\n    [response] => SolrObject Object\n        (\n            [numFound] => 2\n            [start] => 0\n            [docs] => Array\n                (\n                    [0] => SolrObject Object\n                        (\n                            [id] => GB18030TEST\n                            [name] => Array\n                                (\n                                    [0] => Test with some GB18030 encoded characters\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => No accents here\n                                    [1] => 这是一个功能\n                                    [2] => This is a feature (translated)\n                                    [3] => 这份文件是很有光泽\n                                    [4] => This document is very shiny (translated)\n                                )\n\n                            [price] => Array\n                                (\n                                    [0] => 0\n                                )\n\n                            [inStock] => Array\n                                (\n                                    [0] => 1\n                                )\n\n                            [_version_] => 1510294336239042560\n                        )\n\n                    [1] => SolrObject Object\n                        (\n                            [id] => 6H500F0\n                            [name] => Array\n                                (\n                                    [0] => Maxtor DiamondMax 11 - hard drive - 500 GB - SATA-300\n                                )\n\n                            [manu] => Array\n                                (\n                                    [0] => Maxtor Corp.\n                                )\n\n                            [manu_id_s] => maxtor\n                            [cat] => Array\n                                (\n                                    [0] => electronics\n                                    [1] => hard drive\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => SATA 3.0Gb\/s, NCQ\n                                    [1] => 8.5ms seek\n                                    [2] => 16MB cache\n                                )\n\n                            [price] => Array\n                                (\n                                    [0] => 350\n                                )\n\n                            [popularity] => Array\n                                (\n                                    [0] => 6\n                                )\n\n                            [inStock] => Array\n                                (\n                                    [0] => 1\n                                )\n\n                            [store] => Array\n                                (\n                                    [0] => 45.17614,-93.87341\n                                )\n\n                            [manufacturedate_dt] => 2006-02-13T15:26:37Z\n                            [_version_] => 1510294336449806336\n                        )\n\n                )\n\n        )\n\n)"}],"solrclient::ping":[{"title":"SolrClient::ping() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$pingresponse = $client->ping();","output":null}],"solrclient::query":[{"title":"SolrClient::query() example","source":"$options = array\n(\n    'hostname' => 'localhost',\n    'login'    => 'username',\n    'password' => 'password',\n    'port'     => '8983',\n);\n\n$client = new SolrClient($options);\n\n$query = new SolrQuery();\n\n$query->setQuery('lucene');\n\n$query->setStart(0);\n\n$query->setRows(50);\n\n$query->addField('cat')->addField('features')->addField('id')->addField('timestamp');\n\n$query_response = $client->query($query);\n\n$response = $query_response->getResponse();\n\nprint_r($response);","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 3\n            [params] => SolrObject Object\n                (\n                    [fl] => cat,features,id,timestamp\n                    [indent] => on\n                    [start] => 0\n                    [q] => lucene\n                    [wt] => xml\n                    [version] => 2.2\n                    [rows] => 50\n                )\n\n        )\n\n    [response] => SolrObject Object\n        (\n            [numFound] => 1\n            [start] => 0\n            [docs] => Array\n                (\n                    [0] => SolrObject Object\n                        (\n                            [id] => SOLR1000\n                            [cat] => Array\n                                (\n                                    [0] => software\n                                    [1] => search\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => Advanced Full-Text Search Capabilities using Lucene\n                                    [1] => Optimized for High Volume Web Traffic\n                                    [2] => Standards Based Open Interfaces - XML and HTTP\n                                    [3] => Comprehensive HTML Administration Interfaces\n                                    [4] => Scalability - Efficient Replication to other Solr Search Servers\n                                    [5] => Flexible and Adaptable with XML configuration and Schema\n                                    [6] => Good unicode support: héllo (hello with an accent over the e)\n                                )\n\n                        )\n\n                )\n\n        )\n\n)"}],"solrclient::request":[{"title":"SolrClient::request() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$update_response = $client->request(\"<commit\/>\");\n\n$response = $update_response->getResponse();\n\nprint_r($response);","output":"..."}],"solrclient::setresponsewriter":[{"title":"SolrClient::setResponseWriter() example","source":"\/\/ This is my custom class for objects\nclass SolrClass\n{\n   public $_properties = array();\n\n   public function __get($property_name) {\n      \n      if (property_exists($this, $property_name)) {\n      \n          return $this->$property_name;\n      \n      } else if (isset($_properties[$property_name])) {\n      \n          return $_properties[$property_name];\n      }\n      \n      return null;\n   }\n}\n\n$options = array\n(\n  'hostname' => 'localhost',\n  'port' => 8983,\n  'path' => '\/solr\/core1'\n);\n\n$client = new SolrClient($options);\n\n$client->setResponseWriter(\"json\");\n\n\/\/$response = $client->ping();\n\n$query = new SolrQuery();\n\n$query->setQuery(\"*:*\");\n\n$query->set(\"objectClassName\", \"SolrClass\");\n\n$query->set(\"objectPropertiesStorageMode\", 1); \/\/ 0 for independent properties, 1 for combined\n\ntry\n{\n\n$response = $client->query($query);\n\n$resp = $response->getResponse();\n\nprint_r($response);\n\nprint_r($resp);\n\n} catch (Exception $e) {\n\nprint_r($e);\n\n}","output":null}],"solrcollapsefunction::sethint":[{"title":"SolrCollapseFunction::setHint() example","source":"\/* ... *\/","output":"..."}],"solrcollapsefunction::setmax":[{"title":"SolrCollapseFunction::setMax() example","source":"$func = new SolrCollapseFunction('field_name');\n\n$func->setMax('sum(cscore(),field(some_field))');\n\n$query = new SolrQuery('*:*');\n\n$query->collapse($func);","output":null}],"solrdismaxquery::addbigramphrasefield":[{"title":"SolrDisMaxQuery::addBigramPhraseField() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery\n    ->addBigramPhraseField('cat', 2, 5.1)\n    ->addBigramPhraseField('feature', 4.5)\n;\necho $dismaxQuery;","output":"q=lucene&defType=edismax&pf2=cat~5.1^2 feature^4.5"}],"solrdismaxquery::addboostquery":[{"title":"SolrDisMaxQuery::addBoostQuery() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery\n    ->addBoostQuery('cat', 'clothing', 2)\n    ->addBoostQuery('cat', 'electronics', 5.1)\n;\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&bq=cat:clothing^2 cat:electronics^5.1"}],"solrdismaxquery::addphrasefield":[{"title":"SolrDisMaxQuery::addPhraseField() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery\n    ->addPhraseField('cat', 3, 1)\n    ->addPhraseField('third', 4, 2)\n    ->addPhraseField('source', 55)\n;\necho $dismaxQuery;","output":"q=lucene&defType=edismax&pf=cat~1^3 third~2^4 source^55"}],"solrdismaxquery::addqueryfield":[{"title":"SolrDisMaxQuery::addQueryField() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery\n    ->addQueryField(\"location\", 4)\n    ->addQueryField(\"price\")\n    ->addQueryField(\"sku\")\n    ->addQueryField(\"title\",3.4)\n;\necho $dismaxQuery;","output":"q=lucene&defType=edismax&qf=location^4 price sku title^3.4"}],"solrdismaxquery::addtrigramphrasefield":[{"title":"SolrDisMaxQuery::addTrigramPhraseField() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery\n->addTrigramPhraseField('cat', 2, 5.1)\n->addTrigramPhraseField('feature', 4.5)\n;\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=%s&pf3=cat~5.1^2 feature^4.5"}],"solrdismaxquery::adduserfield":[{"title":"SolrDisMaxQuery::addUserField() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery\n->addUserField('cat')\n->addUserField('text')\n->addUserField('*_dt');\n\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&uf=cat text *_dt"}],"solrdismaxquery::__construct":[{"title":"SolrDisMaxQuery::__construct() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\necho $dismaxQuery;","output":"q=lucene&defType=edismax"}],"solrdismaxquery::removebigramphrasefield":[{"title":"SolrDisMaxQuery::removeBigramPhraseField() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery\n    ->addBigramPhraseField('cat', 2, 5.1)\n    ->addBigramPhraseField('feature', 4.5)\n;\necho $dismaxQuery.PHP_EOL;\n\n\/\/ remove cat from pf2\n$dismaxQuery\n    ->removeBigramPhraseField('cat');\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&pf2=cat~5.1^2 feature^4.5\nq=lucene&defType=edismax&pf2=feature^4.5"}],"solrdismaxquery::removeboostquery":[{"title":"SolrDisMaxQuery::removeBoostQuery() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery\n    ->addBoostQuery('cat', 'electronics', 5.1)\n    ->addBoostQuery('cat', 'hard drive')\n;\necho $dismaxQuery.PHP_EOL;\n\/\/ now remove a query part with field 'cat'\n$dismaxQuery\n->removeBoostQuery('cat');\necho $dismaxQuery . PHP_EOL;","output":"q=lucene&defType=edismax&bq=cat:electronics^5.1 cat:hard drive\nq=lucene&defType=edismax&bq=cat:hard drive"}],"solrdismaxquery::removephrasefield":[{"title":"SolrDisMaxQuery::removePhraseField() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery\n    ->addPhraseField('first', 3, 1)\n    ->addPhraseField('second', 4, 1)\n    ->addPhraseField('cat', 55);\necho $dismaxQuery . PHP_EOL;\necho $dismaxQuery->removePhraseField('second');","output":"q=lucene&defType=edismax&pf=first~1^3 second~1^4 cat^55\nq=lucene&defType=edismax&pf=first~1^3 cat^55"}],"solrdismaxquery::removequeryfield":[{"title":"SolrDisMaxQuery::removeQueryField() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery\n    ->addQueryField('first', 3)\n    ->addQueryField('second', 0.2)\n    ->addQueryField('cat');\necho $dismaxQuery . PHP_EOL;\n\/\/ remove field 'second'\necho $dismaxQuery->removeQueryField('second');","output":"q=lucene&defType=edismax&qf=first^3 second^0.2 cat\nq=lucene&defType=edismax&qf=first^3 cat"}],"solrdismaxquery::removetrigramphrasefield":[{"title":"SolrDisMaxQuery::removeTrigramPhraseField() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery\n->addTrigramPhraseField('cat', 2, 5.1)\n->addTrigramPhraseField('feature', 4.5)\n;\necho $dismaxQuery.PHP_EOL;\n\/\/ reverse\n$dismaxQuery\n->removeTrigramPhraseField('cat');\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=%s&pf3=cat~5.1^2 feature^4.5\nq=lucene&defType=%s&pf3=feature^4.5"}],"solrdismaxquery::removeuserfield":[{"title":"SolrDisMaxQuery::removeUserField() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery\n->addUserField('cat')\n->addUserField('text')\n->addUserField('*_dt')\n;\necho $dismaxQuery.PHP_EOL;\n\n\/\/ remove field named 'text'\n$dismaxQuery\n->removeUserField('text');\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=%s&uf=cat text *_dt\nq=lucene&defType=%s&uf=cat *_dt"}],"solrdismaxquery::setbigramphrasefields":[{"title":"SolrDisMaxQuery::setBigramPhraseFields() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery->setBigramPhraseFields(\"cat~5.1^2 feature^4.5\");\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&pf2=cat~5.1^2 feature^4.5"}],"solrdismaxquery::setbigramphraseslop":[{"title":"SolrDisMaxQuery::setBigramPhraseSlop() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n\n$dismaxQuery->setBigramPhraseSlop(5);\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&ps2=5"}],"solrdismaxquery::setboostfunction":[{"title":"SolrDisMaxQuery::setBoostFunction() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n\n$boostRecentDocsFunction = \"recip(ms(NOW,mydatefield),3.16e-11,1,1)\";\n$dismaxQuery->setBoostFunction($boostRecentDocsFunction);\n\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&bf=recip(ms(NOW,mydatefield),3.16e-11,1,1)"}],"solrdismaxquery::setboostquery":[{"title":"SolrDisMaxQuery::setBoostQuery() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n\n$dismaxQuery->setBoostQuery('cat:electronics manu:local^2');\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&bq=cat:electronics manu:local^2"}],"solrdismaxquery::setminimummatch":[{"title":"SolrDisMaxQuery::setMinimumMatch() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n\/\/ 75% of the query clauses must match\n$dismaxQuery->setMinimumMatch(\"75%\");\necho $dismaxQuery . PHP_EOL;","output":"q=lucene&defType=edismax&mm=75%"}],"solrdismaxquery::setphrasefields":[{"title":"SolrDisMaxQuery::setPhraseFields() example","source":"$dismaxQuery = new SolrDisMaxQuery(\"lucene\");\n$dismaxQuery->setPhraseFields(\"cat~5.1^2 feature^4.5\");\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&pf=cat~5.1^2 feature^4.5"}],"solrdismaxquery::setphraseslop":[{"title":"SolrDisMaxQuery::setPhraseSlop() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n\n$dismaxQuery->setPhraseSlop(4);\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&ps=4"}],"solrdismaxquery::setqueryalt":[{"title":"SolrDisMaxQuery::setQueryAlt() example","source":"$dismaxQuery = new DisMaxQuery();\n$dismaxQuery->setQueryAlt('*:*');","output":"defType=edismax&q.alt=*:*&q="}],"solrdismaxquery::setqueryphraseslop":[{"title":"SolrDisMaxQuery::setQueryPhraseSlop() example","source":"$dismaxQuery = new SolrDisMaxQuery();\n$dismaxQuery->setQueryPhraseSlop(3);\necho $dismaxQuery;","output":"defType=edismax&qs=3"}],"solrdismaxquery::settiebreaker":[{"title":"SolrDisMaxQuery::setTieBreaker() example","source":"$dismaxQuery = new SolrDisMaxQuery();\n$dismaxQuery->setTieBreaker(0.1);\n\necho $dismaxQuery;","output":"defType=edismax&tie=0.1"}],"solrdismaxquery::settrigramphrasefields":[{"title":"SolrDisMaxQuery::setTrigramPhraseFields() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery->setTrigramPhraseFields('cat~5.1^2 feature^4.5');\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&pf3=cat~5.1^2 feature^4.5"}],"solrdismaxquery::settrigramphraseslop":[{"title":"SolrDisMaxQuery::setTrigramPhraseSlop() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery->setTrigramPhraseSlop(2);\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&ps3=2"}],"solrdismaxquery::setuserfields":[{"title":"SolrDisMaxQuery::setUserFields() example","source":"$dismaxQuery = new SolrDisMaxQuery('lucene');\n$dismaxQuery->setUserFields('field1 field2 *_txt');\necho $dismaxQuery.PHP_EOL;","output":"q=lucene&defType=edismax&uf=field1 field2 *_txt"}],"solrdismaxquery::usedismaxqueryparser":[{"title":"SolrDisMaxQuery::useDisMaxQueryParser() example","source":"$dismaxQuery = new SolrDisMaxQuery();\n$dismaxQuery->useDisMaxQueryParser();\necho $dismaxQuery;","output":"defType=dismax"}],"solrdismaxquery::useedismaxqueryparser":[{"title":"SolrDisMaxQuery::useEDisMaxQueryParser() example","source":"$dismaxQuery = new SolrDisMaxQuery();\n$dismaxQuery->useEDisMaxQueryParser();\necho $dismaxQuery;","output":"defType=edismax"}],"solrdocument::toarray":[{"title":"SolrDocument::toArray() example","source":"$doc = new SolrDocument();\n\n$doc->addField('id', 1123);\n\n$doc->features = \"PHP Client Side\";\n$doc->features = \"Fast development cycles\";\n\n$doc['cat'] = 'Software';\n$doc['cat'] = 'Custom Search';\n$doc->cat   = 'Information Technology';\n\nprint_r($doc->toArray());","output":"Array\n(\n    [document_boost] => 0\n    [field_count] => 3\n    [fields] => Array\n        (\n            [0] => SolrDocumentField Object\n                (\n                    [name] => id\n                    [boost] => 0\n                    [values] => Array\n                        (\n                            [0] => 1123\n                        )\n\n                )\n\n            [1] => SolrDocumentField Object\n                (\n                    [name] => features\n                    [boost] => 0\n                    [values] => Array\n                        (\n                            [0] => PHP Client Side\n                            [1] => Fast development cycles\n                        )\n\n                )\n\n            [2] => SolrDocumentField Object\n                (\n                    [name] => cat\n                    [boost] => 0\n                    [values] => Array\n                        (\n                            [0] => Software\n                            [1] => Custom Search\n                            [2] => Information Technology\n                        )\n\n                )\n\n        )\n\n)"}],"solrinputdocument::addchilddocument":[{"title":"SolrInputDocument::addChildDocument() example","source":"include \"bootstrap.php\";\n\n$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n    'path'     => SOLR_SERVER_STORE_PATH,\n);\n\n$client = new SolrClient($options);\n\n$product = new SolrInputDocument();\n\n$product->addField('id', 'P-BLACK');\n$product->addField('cat', 'tshirt');\n$product->addField('cat', 'polo');\n$product->addField('content_type', 'product');\n\n$small = new SolrInputDocument();\n$small->addField('id', 'TS-BLK-S');\n$small->addField('content_type', 'sku');\n$small->addField('size', 'S');\n$small->addField('inventory', 100);\n\n$medium = new SolrInputDocument();\n$medium->addField('id', 'TS-BLK-M');\n$medium->addField('content_type', 'sku');\n$medium->addField('size', 'M');\n$medium->addField('inventory', 200);\n\n$large = new SolrInputDocument();\n$large->addField('id', 'TS-BLK-L');\n$large->addField('content_type', 'sku');\n$large->addField('size', 'L');\n$large->addField('inventory', 300);\n\n\/\/ add child documents \n$product->addChildDocument($small);\n$product->addChildDocument($medium);\n$product->addChildDocument($large);\n\n\/\/ add product document block to the index\n$updateResponse = $client->addDocument(\n        $product,\n        true, \/\/ overwrite if the document exists\n        10000 \/\/ commit within 10 seconds\n);\n\nprint_r($updateResponse->getResponse());","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 5\n        )\n)"}],"solrinputdocument::addchilddocuments":[{"title":"SolrInputDocument::addChildDocuments() example","source":"include \"bootstrap.php\";\n\n$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n    'path'     => SOLR_SERVER_STORE_PATH,\n);\n\n$client = new SolrClient($options);\n\n$product = new SolrInputDocument();\n\n$product->addField('id', 'P-BLACK');\n$product->addField('cat', 'tshirt');\n$product->addField('cat', 'polo');\n$product->addField('content_type', 'product');\n\n$small = new SolrInputDocument();\n$small->addField('id', 'TS-BLK-S');\n$small->addField('content_type', 'sku');\n$small->addField('size', 'S');\n$small->addField('inventory', 100);\n\n$medium = new SolrInputDocument();\n$medium->addField('id', 'TS-BLK-M');\n$medium->addField('content_type', 'sku');\n$medium->addField('size', 'M');\n$medium->addField('inventory', 200);\n\n$large = new SolrInputDocument();\n$large->addField('id', 'TS-BLK-L');\n$large->addField('content_type', 'sku');\n$large->addField('size', 'L');\n$large->addField('inventory', 300);\n\n\/\/ add child documents \n$skus = [$small, $medium, $large];\n$product->addChildDocuments($skus);\n\n\/\/ add the product document block to the index\n$updateResponse = $client->addDocument(\n        $product,\n        true, \/\/ overwrite if the document exists\n        10000 \/\/ commit within 10 seconds\n);\n\nprint_r($updateResponse->getResponse());","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 5\n        )\n)"}],"solrobject::__construct":[{"title":"SolrObject::__construct() example","source":"\/* ... *\/","output":"..."}],"solrobject::offsetunset":[{"title":"SolrObject::offsetUnset() example","source":"\/* ... *\/","output":"..."}],"solrparams::setparam":[{"title":"SolrParams::setParam() example","source":"$param = new SolrParams();\n\n$param->setParam('q', 'solr')->setParam('rows', 2);","output":null}],"solrquery::addfacetfield":[{"title":"SolrQuery::addFacetField() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$query = new SolrQuery();\n\n$query->setQuery($query);\n\n$query->addField('price')->addField('color');\n\n$query->setFacet(true);\n\n$query->addFacetField('price')->addFacetField('color');\n\n$query_response = $client->query($query);\n\n$response = $query_response->getResponse();\n\nprint_r($response['facet_counts']['facet_fields']);","output":"SolrObject Object\n(\n    [color] => SolrObject Object\n        (\n            [blue] => 20\n            [green] => 100\n        )\n\n)"}],"solrquery::addfacetquery":[{"title":"SolrQuery::addFacetField() example","source":"$options = array\n(\n        'hostname' => SOLR_SERVER_HOSTNAME,\n        'login'    => SOLR_SERVER_USERNAME,\n        'password' => SOLR_SERVER_PASSWORD,\n        'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$query = new SolrQuery('*:*');\n\n$query->setFacet(true);\n\n$query->addFacetQuery('price:[* TO 500]')->addFacetQuery('price:[500 TO *]');\n\n$query_response = $client->query($query);\n\n$response = $query_response->getResponse();\n\nprint_r($response->facet_counts->facet_queries);","output":"SolrObject Object\n(\n    [price:[* TO 500]] => 14\n    [price:[500 TO *]] => 2\n)"}],"solrquery::addfilterquery":[{"title":"SolrQuery::addFilterQuery() example","source":"$options = array\n(\n    'hostname' => SOLR_SERVER_HOSTNAME,\n    'login'    => SOLR_SERVER_USERNAME,\n    'password' => SOLR_SERVER_PASSWORD,\n    'port'     => SOLR_SERVER_PORT,\n);\n\n$client = new SolrClient($options);\n\n$query = new SolrQuery();\n\n$query->setQuery('*:*');\n\n$query->addFilterQuery('color:blue,green');\n\n$query_response = $client->query($query);\n\n$response = $query_response->getResponse();\n\nprint_r($response['facet_counts']['facet_fields']);","output":"&fq=color:blue,green"}],"solrquery::addgroupsortfield":[{"title":"SolrQuery::addGroupSortField() example","source":"$solrQuery = new SolrQuery('*:*');\n$solrQuery\n    ->setGroup(true)\n    ->addGroupSortField('price', SolrQuery::ORDER_ASC);\n    \necho $solrQuery;","output":"q=*:*&group=true&group.sort=price asc"}],"solrquery::collapse":[{"title":"SolrQuery::collapse() example","source":"include \"bootstrap.php\";\n\n$options = array\n(\n        'hostname' => SOLR_SERVER_HOSTNAME,\n        'login'    => SOLR_SERVER_USERNAME,\n        'password' => SOLR_SERVER_PASSWORD,\n        'port'     => SOLR_SERVER_PORT,\n        'path'     => SOLR_SERVER_PATH\n);\n\n$client = new SolrClient($options);\n\n$query = new SolrQuery('*:*');\n\n$collapseFunction = new SolrCollapseFunction('manu_id_s');\n\n$collapseFunction\n->setSize(2)\n->setNullPolicy(SolrCollapseFunction::NULLPOLICY_IGNORE);\n\n$query\n->collapse($collapseFunction)\n->setRows(4);\n\n$queryResponse = $client->query($query);\n\n$response = $queryResponse->getResponse();\n\nprint_r($response);","output":"SolrObject Object\n(\n    [responseHeader] => SolrObject Object\n        (\n            [status] => 0\n            [QTime] => 1\n            [params] => SolrObject Object\n                (\n                    [q] => *:*\n                    [indent] => on\n                    [fq] => {!collapse field=manu_id_s size=2 nullPolicy=ignore}\n                    [rows] => 4\n                    [version] => 2.2\n                    [wt] => xml\n                )\n\n        )\n\n    [response] => SolrObject Object\n        (\n            [numFound] => 14\n            [start] => 0\n            [docs] => Array\n                (\n                    [0] => SolrObject Object\n                        (\n                            [id] => SP2514N\n                            [name] => Array\n                                (\n                                    [0] => Samsung SpinPoint P120 SP2514N - hard drive - 250 GB - ATA-133\n                                )\n\n                            [manu] => Array\n                                (\n                                    [0] => Samsung Electronics Co. Ltd.\n                                )\n\n                            [manu_id_s] => samsung\n                            [cat] => Array\n                                (\n                                    [0] => electronics\n                                    [1] => hard drive\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => 7200RPM, 8MB cache, IDE Ultra ATA-133\n                                    [1] => NoiseGuard, SilentSeek technology, Fluid Dynamic Bearing (FDB) motor\n                                )\n\n                            [price] => Array\n                                (\n                                    [0] => 92\n                                )\n\n                            [popularity] => Array\n                                (\n                                    [0] => 6\n                                )\n\n                            [inStock] => Array\n                                (\n                                    [0] => 1\n                                )\n\n                            [manufacturedate_dt] => 2006-02-13T15:26:37Z\n                            [store] => Array\n                                (\n                                    [0] => 35.0752,-97.032\n                                )\n\n                            [_version_] => 1510294336412057600\n                        )\n\n                    [1] => SolrObject Object\n                        (\n                            [id] => 6H500F0\n                            [name] => Array\n                                (\n                                    [0] => Maxtor DiamondMax 11 - hard drive - 500 GB - SATA-300\n                                )\n\n                            [manu] => Array\n                                (\n                                    [0] => Maxtor Corp.\n                                )\n\n                            [manu_id_s] => maxtor\n                            [cat] => Array\n                                (\n                                    [0] => electronics\n                                    [1] => hard drive\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => SATA 3.0Gb\/s, NCQ\n                                    [1] => 8.5ms seek\n                                    [2] => 16MB cache\n                                )\n\n                            [price] => Array\n                                (\n                                    [0] => 350\n                                )\n\n                            [popularity] => Array\n                                (\n                                    [0] => 6\n                                )\n\n                            [inStock] => Array\n                                (\n                                    [0] => 1\n                                )\n\n                            [store] => Array\n                                (\n                                    [0] => 45.17614,-93.87341\n                                )\n\n                            [manufacturedate_dt] => 2006-02-13T15:26:37Z\n                            [_version_] => 1510294336449806336\n                        )\n\n                    [2] => SolrObject Object\n                        (\n                            [id] => F8V7067-APL-KIT\n                            [name] => Array\n                                (\n                                    [0] => Belkin Mobile Power Cord for iPod w\/ Dock\n                                )\n\n                            [manu] => Array\n                                (\n                                    [0] => Belkin\n                                )\n\n                            [manu_id_s] => belkin\n                            [cat] => Array\n                                (\n                                    [0] => electronics\n                                    [1] => connector\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => car power adapter, white\n                                )\n\n                            [weight] => Array\n                                (\n                                    [0] => 4\n                                )\n\n                            [price] => Array\n                                (\n                                    [0] => 19.95\n                                )\n\n                            [popularity] => Array\n                                (\n                                    [0] => 1\n                                )\n\n                            [inStock] => Array\n                                (\n                                    [0] => \n                                )\n\n                            [store] => Array\n                                (\n                                    [0] => 45.18014,-93.87741\n                                )\n\n                            [manufacturedate_dt] => 2005-08-01T16:30:25Z\n                            [_version_] => 1510294336458194944\n                        )\n\n                    [3] => SolrObject Object\n                        (\n                            [id] => MA147LL\/A\n                            [name] => Array\n                                (\n                                    [0] => Apple 60 GB iPod with Video Playback Black\n                                )\n\n                            [manu] => Array\n                                (\n                                    [0] => Apple Computer Inc.\n                                )\n\n                            [manu_id_s] => apple\n                            [cat] => Array\n                                (\n                                    [0] => electronics\n                                    [1] => music\n                                )\n\n                            [features] => Array\n                                (\n                                    [0] => iTunes, Podcasts, Audiobooks\n                                    [1] => Stores up to 15,000 songs, 25,000 photos, or 150 hours of video\n                                    [2] => 2.5-inch, 320x240 color TFT LCD display with LED backlight\n                                    [3] => Up to 20 hours of battery life\n                                    [4] => Plays AAC, MP3, WAV, AIFF, Audible, Apple Lossless, H.264 video\n                                    [5] => Notes, Calendar, Phone book, Hold button, Date display, Photo wallet, Built-in games, JPEG photo playback, Upgradeable firmware, USB 2.0 compatibility, Playback speed control, Rechargeable capability, Battery level indication\n                                )\n\n                            [includes] => Array\n                                (\n                                    [0] => earbud headphones, USB cable\n                                )\n\n                            [weight] => Array\n                                (\n                                    [0] => 5.5\n                                )\n\n                            [price] => Array\n                                (\n                                    [0] => 399\n                                )\n\n                            [popularity] => Array\n                                (\n                                    [0] => 10\n                                )\n\n                            [inStock] => Array\n                                (\n                                    [0] => 1\n                                )\n\n                            [store] => Array\n                                (\n                                    [0] => 37.7752,-100.0232\n                                )\n\n                            [manufacturedate_dt] => 2005-10-12T08:00:00Z\n                            [_version_] => 1510294336562003968\n                        )\n\n                )\n\n        )\n\n)"}],"solrquery::setexpand":[{"title":"SolrQuery::setExpand() example","source":"$query = new SolrQuery('lucene');\n\n$query\n    ->setExpand(true)\n    ->setExpandRows(50)\n    ->setExpandQuery('text:product')\n    ->addExpandFilterQuery('manu:apple')\n    ->addExpandFilterQuery('inStock:true')\n    ->addExpandSortField('score', SolrQuery::ORDER_DESC)\n    ->addExpandSortField('title', SolrQuery::ORDER_ASC);\n\necho $query.PHP_EOL;","output":"q=lucene&expand=true&expand.rows=50&expand.q=text:product&expand.fq=manu:apple&expand.fq=inStock:true&expand.sort=score desc,title asc"}],"splenum::getconstlist":[{"title":"SplEnum::getConstList() example","source":"$bool = new SplBool;\nvar_dump($bool->getConstList(true));","output":"array(3) {\n  [\"__default\"]=>\n  bool(false)\n  [\"false\"]=>\n  bool(false)\n  [\"true\"]=>\n  bool(true)\n}"}],"splfileinfo::__construct":[{"title":"SplFileInfo::__construct() example","source":"$info = new SplFileInfo('example.php');\nif ($info->isFile()) {\n    echo $info->getRealPath();\n}","output":null}],"splfileinfo::getbasename":[{"title":"SplFileInfo::getBasename() example","source":"$info = new SplFileInfo('file.txt');\nvar_dump($info->getBasename());\n\n$info = new SplFileInfo('\/path\/to\/file.txt');\nvar_dump($info->getBasename());\n\n$info = new SplFileInfo('\/path\/to\/file.txt');\nvar_dump($info->getBasename('.txt'));","output":"string(8) \"file.txt\"\nstring(8) \"file.txt\"\nstring(4) \"file\""}],"splfileinfo::getctime":[{"title":"SplFileInfo::getCTime() example","source":"$info = new SplFileInfo(__FILE__);\necho 'Last changed at ' . date('g:i a', $info->getCTime());","output":"Last changed at 1:49 pm"}],"splfileinfo::getextension":[{"title":"SplFileInfo::getExtension() example","source":"$info = new SplFileInfo('foo.txt');\nvar_dump($info->getExtension());\n\n$info = new SplFileInfo('photo.jpg');\nvar_dump($info->getExtension());\n\n$info = new SplFileInfo('something.tar.gz');\nvar_dump($info->getExtension());","output":"string(3) \"txt\"\nstring(3) \"jpg\"\nstring(2) \"gz\""},{"title":null,"source":"$extension = pathinfo($info->getFilename(), PATHINFO_EXTENSION);","output":null}],"splfileinfo::getfilename":[{"title":"SplFileInfo::getFilename() example","source":"$info = new SplFileInfo('foo.txt');\nvar_dump($info->getFilename());\n\n$info = new SplFileInfo('\/path\/to\/foo.txt');\nvar_dump($info->getFilename());\n\n$info = new SplFileInfo('http:\/\/www.php.net\/');\nvar_dump($info->getFilename());\n\n$info = new SplFileInfo('http:\/\/www.php.net\/svn.php');\nvar_dump($info->getFilename());","output":"string(7) \"foo.txt\"\nstring(7) \"foo.txt\"\nstring(0) \"\"\nstring(7) \"svn.php\""}],"splfileinfo::getgroup":[{"title":"SplFileInfo::getGroup() example","source":"$info = new SplFileInfo(__FILE__);\nprint_r(posix_getgrgid($info->getGroup()));","output":null}],"splfileinfo::getlinktarget":[{"title":"SplFileInfo::getLinkTarget() example","source":"$info = new SplFileInfo('\/Users\/bbieber\/workspace');\nif ($info->isLink()) {\n    var_dump($info->getLinkTarget());\n    var_dump($info->getRealPath());\n}","output":"string(19) \"Documents\/workspace\"\nstring(34) \"\/Users\/bbieber\/Documents\/workspace\""}],"splfileinfo::getowner":[{"title":"SplFileInfo::getOwner() example","source":"$info = new SplFileInfo('file.txt');\nprint_r(posix_getpwuid($info->getOwner()));","output":null}],"splfileinfo::getpath":[{"title":"SplFileInfo::getPath() example","source":"$info = new SplFileInfo('\/usr\/bin\/php');\nvar_dump($info->getPath());\n\n\n$info = new SplFileInfo('\/usr\/');\nvar_dump($info->getPath());","output":"string(8) \"\/usr\/bin\"\nstring(4) \"\/usr\""}],"splfileinfo::getpathinfo":[{"title":"SplFileInfo::getPathInfo() example","source":"$info = new SplFileInfo('\/usr\/bin\/php');\n$parent_info = $info->getPathInfo();\nvar_dump($parent_info->getRealPath());","output":"string(8) \"\/usr\/bin\""}],"splfileinfo::getpathname":[{"title":"SplFileInfo::getPathname() example","source":"$info = new SplFileInfo('\/usr\/bin\/php');\nvar_dump($info->getPathname());","output":"string(12) \"\/usr\/bin\/php\""}],"splfileinfo::getperms":[{"title":"SplFileInfo::getPerms() example","source":"$info = new SplFileInfo('\/tmp');\necho substr(sprintf('%o', $info->getPerms()), -4);\n\n$info = new SplFileInfo(__FILE__);\necho substr(sprintf('%o', $info->getPerms()), -4);","output":"1777\n0644"}],"splfileinfo::getrealpath":[{"title":"SplFileInfo::getRealPath() example","source":"$info = new SplFileInfo('\/..\/\/.\/..\/..\/'.__FILE__);\nvar_dump($info->getRealPath());\n\n$info = new SplFileInfo('\/tmp');\nvar_dump($info->getRealPath());\n\n$info = new SplFileInfo('\/I\/Do\/Not\/Exist');\nvar_dump($info->getRealPath());\n\n$info = new SplFileInfo('php:\/\/output');\nvar_dump($info->getRealPath());\n\n$info = new SplFileInfo(\"\");\nvar_dump($info->getRealPath());","output":"string(28) \"\/private\/tmp\/phptempfile.php\" \nstring(12) \"\/private\/tmp\"\nbool(false)\nbool(false)\nstring(12) \"\/private\/tmp\""}],"splfileinfo::gettype":[{"title":"SplFileInfo::getType() example","source":"$info = new SplFileInfo(__FILE__);\necho $info->getType().PHP_EOL;\n\n$info = new SplFileInfo(dirname(__FILE__));\necho $info->getType();","output":"file\ndir"}],"splfileinfo::isdir":[{"title":"SplFileInfo::isDir() example","source":"$d = new SplFileInfo(dirname(__FILE__));\nvar_dump($d->isDir());\n\n$d = new SplFileInfo(__FILE__);\nvar_dump($d->isDir());","output":"bool(true)\nbool(false)"}],"splfileinfo::isexecutable":[{"title":"SplFileInfo::isExecutable() example","source":"$info = new SplFileInfo('\/usr\/bin\/php');\nvar_dump($info->isExecutable()); \n\n$info = new SplFileInfo('\/usr\/bin');\nvar_dump($info->isExecutable());\n\n$info = new SplFileInfo('foo');\nvar_dump($info->isExecutable());","output":"bool(true)\nbool(true)\nbool(false)"}],"splfileinfo::isfile":[{"title":"SplFileInfo::isFile() example","source":"$info = new SplFileInfo(__FILE__);\nvar_dump($info->isFile());\n\n$info = new SplFileInfo(dirname(__FILE__));\nvar_dump($info->isFile());","output":"bool(true)\nbool(false)"}],"splfileinfo::islink":[{"title":"SplFileInfo::isLink() example","source":"$info = new SplFileInfo('\/path\/to\/symlink');\nif ($info->isLink()) {\n    echo 'The real path is '.$info->getRealPath();\n}","output":null}],"splfileinfo::isreadable":[{"title":"SplFileInfo::isReadable() example","source":"$info = new SplFileInfo(__FILE__);\nvar_dump($info->isReadable());\n\n$info = new SplFileInfo('foo');\nvar_dump($info->isReadable());","output":"bool(true)\nbool(false)"}],"splfileinfo::openfile":[{"title":"SplFileInfo::openFile() example","source":"$fileinfo = new SplFileInfo('\/tmp\/foo.txt');\n\nif ($fileinfo->isWritable()) {\n\n    $fileobj = $fileinfo->openFile('a');\n\n    $fileobj->fwrite(\"appended this sample text\");\n}","output":null}],"splfileinfo::setfileclass":[{"title":"SplFileInfo::setFileClass() example","source":"\/\/ Create a class extending SplFileObject\nclass MyFoo extends SplFileObject {}\n\n$info = new SplFileInfo(__FILE__);\n\/\/ Set the class to use\n$info->setFileClass('MyFoo');\nvar_dump($info->openFile());","output":"object(MyFoo)#2 (0) { }"}],"splfileinfo::setinfoclass":[{"title":"SplFileInfo::setFileClass() example","source":"\/\/ Define a class which extends SplFileInfo\nclass MyFoo extends SplFileInfo {}\n\n$info = new SplFileInfo('foo');\n\/\/ Set the class name to use\n$info->setInfoClass('MyFoo');\nvar_dump($info->getFileInfo());","output":"object(MyFoo)#2 (0) { }"}],"splfileinfo::__tostring":[{"title":"SplFileInfo::__toString() example","source":"$info = new SplFileInfo('foo');\nvar_dump($info->__toString());\necho $info.PHP_EOL;\n\n$info = new SplFileInfo('\/usr\/bin\/php');\nvar_dump($info->__toString());\necho $info.PHP_EOL;","output":"string(3) \"foo\"\nfoo\nstring(12) \"\/usr\/bin\/php\"\n\/usr\/bin\/php"}],"splfileobject::current":[{"title":"SplFileObject::current() example","source":"$file = new SplFileObject(__FILE__);\nforeach ($file as $k => $line) {\n   echo ($file->key() + 1) . ': ' . $file->current();\n}","output":"1: <?php\n2: $file = new SplFileObject(__FILE__);\n3: foreach ($file as $line) {\n4:     echo ($file->key() + 1) . ': ' . $file->current();\n5: }\n6: ?>"}],"splfileobject::eof":[{"title":"SplFileObject::eof() example","source":"$file = new SplFileObject(\"fruits.txt\");\nwhile ( ! $file->eof()) {\n    echo $file->fgets();\n}","output":"apple\nbanana\ncherry\ndate\nelderberry"}],"splfileobject::fflush":[{"title":"SplFileObject::fflush() example","source":"$file = new SplFileObject('misc.txt', 'r+');\n$file->rewind();\n$file->fwrite(\"Foo\");\n$file->fflush();\n$file->ftruncate($file->ftell());","output":null}],"splfileobject::fgetc":[{"title":"SplFileObject::fgetc() example","source":"$file = new SplFileObject('file.txt');\nwhile (false !== ($char = $file->fgetc())) {\n    echo \"$char\\n\";\n}","output":null}],"splfileobject::fgetcsv":[{"title":"SplFileObject::fgetcsv() example","source":"$file = new SplFileObject(\"data.csv\");\nwhile (!$file->eof()) {\n    var_dump($file->fgetcsv());\n}","output":null},{"title":"SplFileObject::READ_CSV example","source":"$file = new SplFileObject(\"animals.csv\");\n$file->setFlags(SplFileObject::READ_CSV);\nforeach ($file as $row) {\n    list($animal, $class, $legs) = $row;\n    printf(\"A %s is a %s with %d legs\\n\", $animal, $class, $legs);\n}","output":"A crocodile is a reptile with 4 legs\nA dolphin is a mammal with 0 legs\nA duck is a bird with 2 legs\nA koala is a mammal with 4 legs\nA salmon is a fish with 0 legs"}],"splfileobject::fgets":[{"title":"SplFileObject::fgets() example","source":"$file = new SplFileObject(\"file.txt\");\nwhile (!$file->eof()) {\n    echo $file->fgets();\n}","output":null}],"splfileobject::fgetss":[{"title":"SplFileObject::fgetss() example","source":"$str = <<<EOD\n<html><body>\n <p>Welcome! Today is the <?php echo(date('jS')); ?> of <?= date('F'); ?>.<\/p>\n<\/body><\/html>\nText outside of the HTML block.\nEOD;\nfile_put_contents(\"sample.php\", $str);\n\n$file = new SplFileObject(\"sample.php\");\nwhile (!$file->eof()) {\n    echo $file->fgetss();\n}","output":"Welcome! Today is the  of .\n\nText outside of the HTML block."}],"splfileobject::flock":[{"title":"SplFileObject::flock() example","source":"$file = new SplFileObject(\"\/tmp\/lock.txt\", \"w\");\nif ($file->flock(LOCK_EX)) { \/\/ do an exclusive lock\n    $file->ftruncate(0);     \/\/ truncate file\n    $file->fwrite(\"Write something here\\n\");\n    $file->flock(LOCK_UN);   \/\/ release the lock    \n} else {\n    echo \"Couldn't get the lock!\";\n}","output":null}],"splfileobject::fpassthru":[{"title":"SplFileObject::fpassthru() example","source":"\/\/ Open the file in binary mode\n$file = new SplFileObject(\".\/img\/ok.png\", \"rb\");\n\n\/\/ Send the right headers\nheader(\"Content-Type: image\/png\");\nheader(\"Content-Length: \" . $file->getSize());\n\n\/\/ Dump the picture and end script\n$file->fpassthru();\nexit;","output":null}],"splfileobject::fputcsv":[{"title":"SplFileObject::fputcsv() example","source":"$list = array (\n    array('aaa', 'bbb', 'ccc', 'dddd'),\n    array('123', '456', '789'),\n    array('\"aaa\"', '\"bbb\"')\n);\n\n$file = new SplFileObject('file.csv', 'w');\n\nforeach ($list as $fields) {\n    $file->fputcsv($fields);\n}","output":"aaa,bbb,ccc,dddd\n123,456,789\n\"\"\"aaa\"\"\",\"\"\"bbb\"\"\""}],"splfileobject::fread":[{"title":"SplFileObject::fread() example","source":"\/\/ Get contents of a file into a string\n$filename = \"\/usr\/local\/something.txt\";\n$file = new SplFileObject($filename, \"r\");\n$contents = $file->fread($file->getSize());","output":null}],"splfileobject::fscanf":[{"title":"SplFileObject::fscanf() example","source":"$file = new SplFileObject(\"misc.txt\");\nwhile ($userinfo = $file->fscanf(\"%s %s %s\")) {\n    list ($name, $profession, $countrycode) = $userinfo;\n    \/\/ Do something with $name $profession $countrycode\n}","output":null}],"splfileobject::fseek":[{"title":"SplFileObject::fseek() example","source":"$file = new SplFileObject(\"somefile.txt\");\n\n\/\/ Read first line\n$data = $file->fgets();\n\n\/\/ Move back to the beginning of the file\n\/\/ Same as $file->rewind();\n$file->fseek(0);","output":null}],"splfileobject::fstat":[{"title":"SplFileObject::fstat() example","source":"$file = new SplFileObject(\"\/etc\/passwd\");\n$stat = $file->fstat();\n\n\/\/ Print only the associative part\nprint_r(array_slice($stat, 13));","output":"Array\n(\n    [dev] => 771\n    [ino] => 488704\n    [mode] => 33188\n    [nlink] => 1\n    [uid] => 0\n    [gid] => 0\n    [rdev] => 0\n    [size] => 1114\n    [atime] => 1061067181\n    [mtime] => 1056136526\n    [ctime] => 1056136526\n    [blksize] => 4096\n    [blocks] => 8\n)"}],"splfileobject::ftell":[{"title":"SplFileObject::ftell() example","source":"$file = new SplFileObject(\"\/etc\/passwd\");\n\n\/\/ Read first line\n$data = $file->fgets();\n\n\/\/ Where are we?\necho $file->ftell();","output":null}],"splfileobject::ftruncate":[{"title":"SplFileObject::ftruncate() example","source":"\/\/ Create file containing \"Hello World!\"\n$file = new SplFileObject(\"\/tmp\/ftruncate\", \"w+\");\n$file->fwrite(\"Hello World!\");\n\n\/\/ Truncate to 5 bytes\n$file->ftruncate(5);\n\n\/\/ Rewind and read data\n$file->rewind();\necho $file->fgets();","output":"Hello"}],"splfileobject::fwrite":[{"title":"SplFileObject::fwrite() example","source":"$file = new SplFileObject(\"fwrite.txt\", \"w\");\n$written = $file->fwrite(\"12345\");\necho \"Wrote $written bytes to file\";","output":"Wrote 5 bytes to file"}],"splfileobject::getcsvcontrol":[{"title":"SplFileObject::getCsvControl() example","source":"$file = new SplFileObject(\"data.txt\");\nprint_r($file->getCsvControl());","output":"Array\n(\n    [0] => ,\n    [1] => \"\n    [2] => \\\n)"}],"splfileobject::getflags":[{"title":"SplFileObject::getFlags() example","source":"$file = new SplFileObject(__FILE__, \"r\");\n\nif ($file->getFlags() & SplFileObject::SKIP_EMPTY) {\n    echo \"Skipping empty lines\\n\";\n} else {\n    echo \"Not skipping empty lines\\n\";\n}\n\n$file->setFlags(SplFileObject::SKIP_EMPTY);\n\nif ($file->getFlags() & SplFileObject::SKIP_EMPTY) {\n    echo \"Skipping empty lines\\n\";\n} else {\n    echo \"Not skipping empty lines\\n\";\n}","output":"Not skipping empty lines\nSkipping empty lines"}],"splfileobject::getmaxlinelen":[{"title":"SplFileObject::getMaxLineLen() example","source":"$file = new SplFileObject(\"file.txt\");\nvar_dump($file->getMaxLineLen());\n\n$file->setMaxLineLen(20);\nvar_dump($file->getMaxLineLen());","output":"int(0)\nint(20)"}],"splfileobject::key":[{"title":"SplFileObject::key() example","source":"$file = new SplFileObject(\"lipsum.txt\");\nforeach ($file as $line) {\n    echo $file->key() . \". \" . $line;\n}","output":"0. Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n1. Duis nec sapien felis, ac sodales nisl. \n2. Lorem ipsum dolor sit amet, consectetur adipiscing elit."},{"title":"SplFileObject::key() example with SplFileObject::setMaxLineLen()","source":"$file = new SplFileObject(\"lipsum.txt\");\n$file->setMaxLineLen(20);\nforeach ($file as $line) {\n    echo $file->key() . \". \" . $line . \"\\n\";\n}","output":"0. Lorem ipsum dolor s\n1. it amet, consectetu\n2. r adipiscing elit. \n3. \n\n4. Duis nec sapien fel\n5. is, ac sodales nisl\n6. . \n\n7. Lorem ipsum dolor s\n8. it amet, consectetu\n9. r adipiscing elit."}],"splfileobject::next":[{"title":"SplFileObject::next() example","source":"\/\/ Read through file line by line\n$file = new SplFileObject(\"misc.txt\");\nwhile (!$file->eof()) {\n    echo $file->current();\n    $file->next();\n}","output":null}],"splfileobject::rewind":[{"title":"SplFileObject::rewind() example","source":"$file = new SplFileObject(\"misc.txt\");\n\n\/\/ Loop over whole file\nforeach ($file as $line) { }\n\n\/\/ Rewind to first line\n$file->rewind();\n\n\/\/ Output first line\necho $file->current();","output":null}],"splfileobject::seek":[{"title":"SplFileObject::seek() example","source":"$file = new SplFileObject(__FILE__);\n$file->seek(2);\necho $file->current();","output":"$file->seek(2);"}],"splfileobject::setcsvcontrol":[{"title":"SplFileObject::setCsvControl() example","source":"$file = new SplFileObject(\"data.csv\");\n$file->setFlags(SplFileObject::READ_CSV);\n$file->setCsvControl('|');\nforeach ($file as $row) {\n    list ($fruit, $quantity) = $row;\n    \/\/ Do something with values\n}","output":null}],"splfileobject::setflags":[{"title":"SplFileObject::setFlags() example","source":"$file = new SplFileObject(\"data.csv\");\n$file->setFlags(SplFileObject::READ_CSV);\nforeach ($file as $fields) {\n    var_dump($fields);\n}","output":null}],"splfileobject::setmaxlinelen":[{"title":"SplFileObject::setMaxLineLen() example","source":"$file = new SplFileObject(\"lipsum.txt\");\n$file->setMaxLineLen(20);\nforeach ($file as $line) {\n    echo $line . \"\\n\";\n}","output":"Lorem ipsum dolor s\nit amet, consectetu\nr adipiscing elit.\n\nDuis nec sapien fel\nis, ac sodales nisl\n.\n\nNulla vitae magna v\nitae purus aliquet \nconsequat."}],"splfileobject::valid":[{"title":"SplFileObject::valid() example","source":"\/\/ Loop over a file, line by line\n$file = new SplFileObject(\"file.txt\");\nwhile ($file->valid()) {\n    echo $file->fgets();\n}","output":null}],"splfixedarray::count":[{"title":"SplFixedArray::count() example","source":"$array = new SplFixedArray(5);\necho $array->count() . \"\\n\";\necho count($array) . \"\\n\";","output":"5\n5"}],"splfixedarray::fromarray":[{"title":"SplFixedArray::fromArray() example","source":"$fa = SplFixedArray::fromArray(array(1 => 1, 0 => 2, 3 => 3));\n\nvar_dump($fa);\n\n$fa = SplFixedArray::fromArray(array(1 => 1, 0 => 2, 3 => 3), false);\n\nvar_dump($fa);","output":"object(SplFixedArray)#1 (4) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n  [2]=>\n  NULL\n  [3]=>\n  int(3)\n}\nobject(SplFixedArray)#2 (3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(2)\n  [2]=>\n  int(3)\n}"}],"splfixedarray::getsize":[{"title":"SplFixedArray::getSize() example","source":"$array = new SplFixedArray(5);\necho $array->getSize().\"\\n\";\n$array->setSize(10);\necho $array->getSize().\"\\n\";","output":"5\n10"}],"splfixedarray::setsize":[{"title":"SplFixedArray::setSize() example","source":"$array = new SplFixedArray(5);\n   echo $array->getSize().\"\\n\";\n   $array->setSize(10);\n   echo $array->getSize().\"\\n\";","output":"5\n10"}],"splfixedarray::toarray":[{"title":"SplFixedArray::toArray() example","source":"$fa = new SplFixedArray(3);\n$fa[0] = 0;\n$fa[2] = 2;\nvar_dump($fa->toArray());","output":"array(3) {\n  [0]=>\n  int(0)\n  [1]=>\n  NULL\n  [2]=>\n  int(2)\n}"}],"splobjectstorage::addall":[{"title":"SplObjectStorage::addAll() example","source":"$o = new StdClass;\n$a = new SplObjectStorage();\n$a[$o] = \"hello\";\n\n$b = new SplObjectStorage();\n$b->addAll($a);\necho $b[$o].\"\\n\";","output":"hello"}],"splobjectstorage::attach":[{"title":"SplObjectStorage::attach() example","source":"$o1 = new StdClass;\n$o2 = new StdClass;\n$s = new SplObjectStorage();\n$s->attach($o1); \/\/ similar to $s[$o1] = NULL;\n$s->attach($o2, \"hello\"); \/\/ similar to $s[$o2] = \"hello\";\n\nvar_dump($s[$o1]);\nvar_dump($s[$o2]);","output":"NULL\nstring(5) \"hello\""}],"splobjectstorage::contains":[{"title":"SplObjectStorage::contains() example","source":"$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s = new SplObjectStorage();\n\n$s[$o1] = \"hello\";\nvar_dump($s->contains($o1));\nvar_dump($s->contains($o2));","output":"bool(true)\nbool(false)"}],"splobjectstorage::count":[{"title":"SplObjectStorage::count() example","source":"$s = new SplObjectStorage();\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1);\n$s->attach($o2);\n$s->attach($o1);\nvar_dump($s->count());\nvar_dump(count($s));","output":"int(2)\nint(2)"}],"splobjectstorage::current":[{"title":"SplObjectStorage::current() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    $index  = $s->key();\n    $object = $s->current(); \/\/ similar to current($s)\n    $data   = $s->getInfo();\n\n    var_dump($object);\n    var_dump($data);\n    $s->next();\n}","output":"object(stdClass)#2 (0) {\n}\nstring(2) \"d1\"\nobject(stdClass)#3 (0) {\n}\nstring(2) \"d2\""}],"splobjectstorage::detach":[{"title":"SplObjectStorage::detach() example","source":"$o = new StdClass;\n$s = new SplObjectStorage();\n$s->attach($o);\nvar_dump(count($s));\n$s->detach($o);\nvar_dump(count($s));","output":"int(1)\nint(0)"}],"splobjectstorage::gethash":[{"title":"SplObjectStorage::getHash() example","source":"class OneSpecimenPerClassStorage extends SplObjectStorage {\n    public function getHash($o) {\n        return get_class($o);\n    }\n}\nclass A {}\n\n$s = new OneSpecimenPerClassStorage;\n$o1 = new stdClass;\n$o2 = new stdClass;\n$o3 = new A;\n\n$s[$o1] = 1;\n\/\/$o2 is considered equal to $o1 so the value is replaced\n$s[$o2] = 2;\n$s[$o3] = 3;\n\n\/\/these are considered equal to the objects before\n\/\/so they can be used to access the values stored under them\n$p1 = new stdClass;\n$p2 = new A;\necho $s[$p1], \"\\n\";\necho $s[$p2], \"\\n\";","output":"2\n3"}],"splobjectstorage::getinfo":[{"title":"SplObjectStorage::getInfo() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    $index  = $s->key();\n    $object = $s->current(); \/\/ similar to current($s)\n    $data   = $s->getInfo();\n\n    var_dump($object);\n    var_dump($data);\n    $s->next();\n}","output":"object(stdClass)#2 (0) {\n}\nstring(2) \"d1\"\nobject(stdClass)#3 (0) {\n}\nstring(2) \"d2\""}],"splobjectstorage::key":[{"title":"SplObjectStorage::key() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    $index  = $s->key();\n    $object = $s->current(); \/\/ similar to current($s)\n\n    var_dump($index);\n    var_dump($object);\n    $s->next();\n}","output":"int(0)\nobject(stdClass)#2 (0) {\n}\nint(1)\nobject(stdClass)#3 (0) {\n}"}],"splobjectstorage::next":[{"title":"SplObjectStorage::next() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    $index  = $s->key();\n    $object = $s->current(); \/\/ similar to current($s)\n\n    var_dump($index);\n    var_dump($object);\n    $s->next();\n}","output":"int(0)\nobject(stdClass)#2 (0) {\n}\nint(1)\nobject(stdClass)#3 (0) {\n}"}],"splobjectstorage::offsetexists":[{"title":"SplObjectStorage::offsetExists() example","source":"$s = new SplObjectStorage;\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1);\n\nvar_dump($s->offsetExists($o1)); \/\/ Similar to isset($s[$o1])\nvar_dump($s->offsetExists($o2)); \/\/ Similar to isset($s[$o2])","output":"bool(true)\nbool(false)"}],"splobjectstorage::offsetget":[{"title":"SplObjectStorage::offsetGet() example","source":"$s = new SplObjectStorage;\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s[$o1] = \"hello\";\n$s->attach($o2);\n\n\nvar_dump($s->offsetGet($o1)); \/\/ Similar to $s[$o1]\nvar_dump($s->offsetGet($o2)); \/\/ Similar to $s[$o2]","output":"string(5) \"hello\"\nNULL"}],"splobjectstorage::offsetset":[{"title":"SplObjectStorage::offsetSet() example","source":"$s = new SplObjectStorage;\n\n$o1 = new StdClass;\n\n$s->offsetSet($o1, \"hello\"); \/\/ Similar to $s[$o1] = \"hello\";\n\nvar_dump($s[$o1]);","output":"string(5) \"hello\""}],"splobjectstorage::offsetunset":[{"title":"SplObjectStorage::offsetUnset() example","source":"$o = new StdClass;\n$s = new SplObjectStorage();\n$s->attach($o);\nvar_dump(count($s));\n$s->offsetUnset($o); \/\/ Similar to unset($s[$o])\nvar_dump(count($s));","output":"int(1)\nint(0)"}],"splobjectstorage::removeall":[{"title":"SplObjectStorage::removeAll() example","source":"$o1 = new StdClass;\n$o2 = new StdClass;\n$a = new SplObjectStorage();\n$a[$o1] = \"foo\";\n\n$b = new SplObjectStorage();\n$b[$o1] = \"bar\";\n$b[$o2] = \"gee\";\n\nvar_dump(count($b));\n$b->removeAll($a);\nvar_dump(count($b));","output":"int(2)\nint(1)"}],"splobjectstorage::removeallexcept":[{"title":"SplObjectStorage::removeAllExcept() example","source":"$a = (object) 'a'; \n$b = (object) 'b'; \n$c = (object) 'c'; \n\n$foo = new SplObjectStorage;\n$foo->attach($a);\n$foo->attach($b);\n\n$bar = new SplObjectStorage;\n$bar->attach($b);\n$bar->attach($c);\n\n$foo->removeAllExcept($bar);\nvar_dump($foo->contains($a));\nvar_dump($foo->contains($b));","output":"bool(false)\nbool(true)"}],"splobjectstorage::rewind":[{"title":"SplObjectStorage::rewind() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    $index  = $s->key();\n    $object = $s->current(); \/\/ similar to current($s)\n    $data   = $s->getInfo();\n\n    var_dump($object);\n    var_dump($data);\n    $s->next();\n}","output":"int(1)\nint(0)"}],"splobjectstorage::serialize":[{"title":"SplObjectStorage::serialize() example","source":"$s = new SplObjectStorage;\n$o = new StdClass;\n$s[$o] = \"data\";\n\necho $s->serialize().\"\\n\";","output":"x:i:1;O:8:\"stdClass\":0:{},s:4:\"data\";;m:a:0:{}"}],"splobjectstorage::setinfo":[{"title":"SplObjectStorage::setInfo() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    $s->setInfo(\"new\");\n    $s->next();\n}\nvar_dump($s[$o1]);\nvar_dump($s[$o2]);","output":"string(3) \"new\"\nstring(3) \"new\""}],"splobjectstorage::unserialize":[{"title":"SplObjectStorage::unserialize() example","source":"$s1 = new SplObjectStorage;\n$s2 = new SplObjectStorage;\n$o = new StdClass;\n$s1[$o] = \"data\";\n\n$s2->unserialize($s1->serialize());\n\nvar_dump(count($s2));","output":"int(1)"}],"splobjectstorage::valid":[{"title":"SplObjectStorage::valid() example","source":"$s = new SplObjectStorage();\n\n$o1 = new StdClass;\n$o2 = new StdClass;\n\n$s->attach($o1, \"d1\");\n$s->attach($o2, \"d2\");\n\n$s->rewind();\nwhile($s->valid()) {\n    echo $s->key().\"\\n\";\n    $s->next();\n}","output":"0\n1"}],"spltempfileobject::__construct":[{"title":"SplTempFileObject() example","source":"$temp = new SplTempFileObject();\n$temp->fwrite(\"This is the first line\\n\");\n$temp->fwrite(\"And this is the second.\\n\");\necho \"Written \" . $temp->ftell() . \" bytes to temporary file.\\n\\n\";\n\n\/\/ Rewind and read what was written\n$temp->rewind();\nforeach ($temp as $line) {\n    echo $line;\n}","output":"Written 47 bytes to temporary file.\n\nThis is the first line\nAnd this is the second."}],"spoofchecker::areconfusable":[{"title":"Spoofchecker::areConfusable() example","source":"$checker = new Spoofchecker();\n\n$checker->areConfusable('google.com', 'goog1e.com'); \/\/ true\n\/\/ Lower l can be confused with digit one\n\n$checker->areConfusable('google.com', 'g00g1e.com'); \/\/ false\n\/\/ Zero (0) cannot be easily confused with \"o\" letter","output":null}],"spoofchecker::issuspicious":[{"title":"Spoofchecker::isSuspicious() example","source":"$checker = new Spoofchecker();\n\n$checker->isSuspicious('google.com'); \/\/ FALSE: only ASCII characters\n\n$checker->isSuspicious('Рaypal.com'); \/\/ TRUE\n\/\/ The first letter is from Cyrylic, not a regular latin \"P\"","output":null}],"sqlite3::changes":[{"title":"SQLite3::changes() example","source":"$db = new SQLite3('mysqlitedb.db');\n\n$query = $db->exec('UPDATE counter SET views=0 WHERE page=\"test\"');\nif ($query) {\n    echo 'Number of rows modified: ', $db->changes();\n}","output":null}],"sqlite3::close":[{"title":"SQLite3::close() example","source":"$db = new SQLite3('mysqlitedb.db');\n$db->close();","output":null}],"sqlite3::__construct":[{"title":"SQLite3::__construct() example","source":"$db = new SQLite3('mysqlitedb.db');\n\n$db->exec('CREATE TABLE foo (bar STRING)');\n$db->exec(\"INSERT INTO foo (bar) VALUES ('This is a test')\");\n\n$result = $db->query('SELECT bar FROM foo');\nvar_dump($result->fetchArray());","output":null}],"sqlite3::createcollation":[{"title":"SQLite3::createCollation() example","source":"$db = new SQLite3(\":memory:\");\n$db->exec(\"CREATE TABLE test (col1 string)\");\n$db->exec(\"INSERT INTO test VALUES ('a1')\");\n$db->exec(\"INSERT INTO test VALUES ('a10')\");\n$db->exec(\"INSERT INTO test VALUES ('a2')\");\n\n$db->createCollation('NATURAL_CMP', 'strnatcmp');\n\n$defaultSort = $db->query(\"SELECT col1 FROM test ORDER BY col1\");\n$naturalSort = $db->query(\"SELECT col1 FROM test ORDER BY col1 COLLATE NATURAL_CMP\");\n\necho \"default:\\n\";\nwhile ($row = $defaultSort->fetchArray()){\n    echo $row['col1'], \"\\n\";\n}\n\necho \"\\nnatural:\\n\";\nwhile ($row = $naturalSort->fetchArray()){\n    echo $row['col1'], \"\\n\";\n}\n\n$db->close();","output":"default:\na1\na10\na2\n\nnatural:\na1\na2\na10"}],"sqlite3::createfunction":[{"title":"SQLite3::createFunction() example","source":"function my_udf_md5($string) {\n    return md5($string);\n}\n\n$db = new SQLite3('mysqlitedb.db');\n$db->createFunction('my_udf_md5', 'my_udf_md5');\n\nvar_dump($db->querySingle('SELECT my_udf_md5(\"test\")'));","output":"string(32) \"098f6bcd4621d373cade4e832627b4f6\""}],"sqlite3::enableexceptions":[{"title":"SQLite3::enableExceptions() example","source":"$sqlite = new SQLite3(':memory:');\ntry {\n    $sqlite->exec('create table foo');\n    $sqlite->enableExceptions(true);\n    $sqlite->exec('create table bar');\n} catch (Exception $e) {\n    echo 'Caught exception: ' . $e->getMessage();\n}","output":"Warning: SQLite3::exec(): near \"foo\": syntax error in example.php on line 4\nCaught exception: near \"bar\": syntax error"}],"sqlite3::exec":[{"title":"SQLite3::exec() example","source":"$db = new SQLite3('mysqlitedb.db');\n\n$db->exec('CREATE TABLE bar (bar STRING)');","output":null}],"sqlite3::loadextension":[{"title":"SQLite3::loadExtension() example","source":"$db = new SQLite3('mysqlitedb.db');\n$db->loadExtension('libagg.so');","output":null}],"sqlite3::open":[{"title":"SQLite3::open() example","source":"\/**\n * Simple example of extending the SQLite3 class and changing the __construct\n * parameters, then using the open method to initialize the DB.\n *\/\nclass MyDB extends SQLite3\n{\n    function __construct()\n    {\n        $this->open('mysqlitedb.db');\n    }\n}\n\n$db = new MyDB();\n\n$db->exec('CREATE TABLE foo (bar STRING)');\n$db->exec(\"INSERT INTO foo (bar) VALUES ('This is a test')\");\n\n$result = $db->query('SELECT bar FROM foo');\nvar_dump($result->fetchArray());","output":null}],"sqlite3::openblob":[{"title":"SQLite3::openBlob() example","source":"$conn = new SQLite3(':memory:');\n$conn->exec('CREATE TABLE test (text text)');\n$conn->exec(\"INSERT INTO test VALUES ('Lorem ipsum')\");\n$stream = $conn->openBlob('test', 'text', 1);\necho stream_get_contents($stream);\nfclose($stream); \/\/ mandatory, otherwise the next line would fail\n$conn->close();","output":"Lorem ipsum"},{"title":"Incrementally writing a BLOB","source":"$conn = new SQLite3(':memory:');\n$conn->exec('CREATE TABLE test (text text)');\n$conn->exec(\"INSERT INTO test VALUES (zeroblob(36))\");\n$stream = $conn->openBlob('test', 'text', 1, 'main', SQLITE3_OPEN_READWRITE);\nfor ($i = 0; $i < 3; $i++) {\n    fwrite($stream,  \"Lorem ipsum\\n\");\n}\nfclose($stream);\necho $conn->querySingle(\"SELECT text FROM test\");\n$conn->close();","output":"Lorem ipsum\nLorem ipsum\nLorem ipsum"}],"sqlite3::prepare":[{"title":"SQLite3::prepare() example","source":"unlink('mysqlitedb.db');\n$db = new SQLite3('mysqlitedb.db');\n\n$db->exec('CREATE TABLE foo (id INTEGER, bar STRING)');\n$db->exec(\"INSERT INTO foo (id, bar) VALUES (1, 'This is a test')\");\n\n$stmt = $db->prepare('SELECT bar FROM foo WHERE id=:id');\n$stmt->bindValue(':id', 1, SQLITE3_INTEGER);\n\n$result = $stmt->execute();\nvar_dump($result->fetchArray());","output":null}],"sqlite3::query":[{"title":"SQLite3::query() example","source":"$db = new SQLite3('mysqlitedb.db');\n\n$results = $db->query('SELECT bar FROM foo');\nwhile ($row = $results->fetchArray()) {\n    var_dump($row);\n}","output":null}],"sqlite3::querysingle":[{"title":"SQLite3::querySingle() example","source":"$db = new SQLite3('mysqlitedb.db');\n\nvar_dump($db->querySingle('SELECT username FROM user WHERE userid=1'));\nprint_r($db->querySingle('SELECT username, email FROM user WHERE userid=1', true));","output":"string(5) \"Scott\"\nArray\n(\n    [username] => Scott\n    [email] => scott@example.com\n)"}],"sqlite3::version":[{"title":"SQLite3::version() example","source":"print_r(SQLite3::version());","output":"Array\n(\n    [versionString] => 3.5.9\n    [versionNumber] => 3005009\n)"}],"sqlite3stmt::bindvalue":[{"title":"SQLite3Stmt::bindValue() example","source":"unlink('mysqlitedb.db');\n$db = new SQLite3('mysqlitedb.db');\n\n$db->exec('CREATE TABLE foo (id INTEGER, bar STRING)');\n$db->exec(\"INSERT INTO foo (id, bar) VALUES (1, 'This is a test')\");\n\n$stmt = $db->prepare('SELECT bar FROM foo WHERE id=:id');\n$stmt->bindValue(':id', 1, SQLITE3_INTEGER);\n\n$result = $stmt->execute();\nvar_dump($result->fetchArray());","output":null}],"stomp::abort":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n\/* begin a transaction *\/\n$stomp->begin('t1');\n\n\/* send a message to the queue *\/\n$stomp->send('\/queue\/foo', 'bar', array('transaction' => 't1'));\n\n\/* rollback *\/\n$stomp->abort('t1');\n\n\/* close connection *\/\nunset($stomp);","output":null},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('tcp:\/\/localhost:61613');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\n\/* begin a transaction *\/\nstomp_begin($link, 't1');\n\n\/* send a message to the queue 'foo' *\/\nstomp_send($link, '\/queue\/foo', 'bar', array('transaction' => 't1'));\n\n\/* rollback *\/\nstomp_abort($link, 't1');\n\n\/* close connection *\/\nstomp_close($link);","output":null}],"stomp::ack":[{"title":"Object oriented style","source":"$queue  = '\/queue\/foo';\n$msg    = 'bar';\n\n\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n\/* send a message to the queue 'foo' *\/\n$stomp->send($queue, $msg);\n\n\/* subscribe to messages from the queue 'foo' *\/\n$stomp->subscribe($queue);\n\n\/* read a frame *\/\n$frame = $stomp->readFrame();\n\nif ($frame->body === $msg) {\n    \/* acknowledge that the frame was received *\/\n    $stomp->ack($frame);\n}\n\n\/* remove the subscription *\/\n$stomp->unsubscribe($queue);\n\n\/* close connection *\/\nunset($stomp);","output":null},{"title":"Procedural style","source":"$queue  = '\/queue\/foo';\n$msg    = 'bar';\n\n\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\n\/* begin a transaction *\/\nstomp_begin($link, 't1');\n\n\/* send a message to the queue 'foo' *\/\nstomp_send($link, $queue, $msg, array('transaction' => 't1'));\n\n\/* commit a transaction *\/\nstomp_commit($link, 't1');\n\n\/* subscribe to messages from the queue 'foo' *\/\nstomp_subscribe($link, $queue);\n\n\/* read a frame *\/\n$frame = stomp_read_frame($link);\n\nif ($frame['body'] === $msg) {\n    \/* acknowledge that the frame was received *\/\n    stomp_ack($link, $frame['headers']['message-id']);\n}\n\n\/* remove the subscription *\/\nstomp_unsubscribe($link, $queue);\n\n\/* close connection *\/\nstomp_close($link);","output":null}],"stomp::commit":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n\/* begin a transaction *\/\n$stomp->begin('t1');\n\n\/* send a message to the queue *\/\n$stomp->send('\/queue\/foo', 'bar', array('transaction' => 't1'));\n\n\/* commit *\/\n$stomp->commit('t1');\n\n\/* close connection *\/\nunset($stomp);","output":null},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('tcp:\/\/localhost:61613');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\n\/* begin a transaction *\/\nstomp_begin($link, 't1');\n\n\/* send a message to the queue 'foo' *\/\nstomp_send($link, '\/queue\/foo', 'bar', array('transaction' => 't1'));\n\n\/* commit *\/\nstomp_commit($link, 't1');\n\n\/* close connection *\/\nstomp_close($link);","output":null}],"stomp::__construct":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n\/* close connection *\/\nunset($stomp);","output":null},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\n\/* close connection *\/\nstomp_close($link);","output":null}],"stomp::error":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\nvar_dump($stomp->error());\n\nif (!$stomp->abort('unknown-transaction', array('receipt' => 'foo'))) {\n    var_dump($stomp->error());\n}\n\n\/* close connection *\/\nunset($stomp);","output":"bool(false)\nstring(43) \"Invalid transaction id: unknown-transaction\""},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\nvar_dump(stomp_error($link));\n\nif (!stomp_abort($link, 'unknown-transaction', array('receipt' => 'foo'))) {\n    var_dump(stomp_error($link));\n}\n\n\/* close connection *\/\nstomp_close($link);","output":"bool(false)\nstring(43) \"Invalid transaction id: unknown-transaction\""}],"stomp::getreadtimeout":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\nvar_dump($stomp->getReadTimeout());\n\n\/* close connection *\/\nunset($stomp);","output":"array(2) {\n  [\"sec\"]=>\n  int(2)\n  [\"usec\"]=>\n  int(0)\n}"},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\nvar_dump(stomp_get_read_timeout($link));\n\n\/* close connection *\/\nstomp_close($link);","output":"array(2) {\n  [\"sec\"]=>\n  int(2)\n  [\"usec\"]=>\n  int(0)\n}"}],"stomp::getsessionid":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\nvar_dump($stomp->getSessionId());\n\n\/* close connection *\/\nunset($stomp);","output":"string(35) \"ID:php.net-52873-1257291895530-4:14\""},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\nvar_dump(stomp_get_session_id($link));\n\n\/* close connection *\/\nstomp_close($link);","output":"string(35) \"ID:php.net-52873-1257291895530-4:14\""}],"stomp::readframe":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n\/* subscribe to messages from the queue 'foo' *\/\n$stomp->subscribe('\/queue\/foo');\n\n\/* read a frame *\/\nvar_dump($stomp->readFrame());\n\n\/* close connection *\/\nunset($stomp);","output":"object(StompFrame)#2 (3) {\n  [\"command\"]=>\n  string(7) \"MESSAGE\"\n  [\"headers\"]=>\n  array(5) {\n    [\"message-id\"]=>\n    string(41) \"ID:php.net-55293-1257226743606-4:2:-1:1:1\"\n    [\"destination\"]=>\n    string(10) \"\/queue\/foo\"\n    [\"timestamp\"]=>\n    string(13) \"1257226805828\"\n    [\"expires\"]=>\n    string(1) \"0\"\n    [\"priority\"]=>\n    string(1) \"0\"\n  }\n  [\"body\"]=>\n  string(3) \"bar\"\n}"},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\n\/* subscribe to messages from the queue 'foo' *\/\nstomp_subscribe($link, '\/queue\/foo');\n\n\/* read a frame *\/\n$frame = stomp_read_frame($link);\n\n\/* close connection *\/\nstomp_close($link);","output":"array(3) {\n  [\"command\"]=>\n  string(7) \"MESSAGE\"\n  [\"body\"]=>\n  string(3) \"bar\"\n  [\"headers\"]=>\n  array(6) {\n    [\"transaction\"]=>\n    string(2) \"t1\"\n    [\"message-id\"]=>\n    string(41) \"ID:php.net-55293-1257226743606-4:3:-1:1:1\"\n    [\"destination\"]=>\n    string(10) \"\/queue\/foo\"\n    [\"timestamp\"]=>\n    string(13) \"1257227037059\"\n    [\"expires\"]=>\n    string(1) \"0\"\n    [\"priority\"]=>\n    string(1) \"0\"\n  }\n}"}],"stomp::setreadtimeout":[{"title":"Object oriented style","source":"\/* connection *\/\ntry {\n    $stomp = new Stomp('tcp:\/\/localhost:61613');\n} catch(StompException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n$stomp->setReadTimeout(10);\n    \n\/* close connection *\/\nunset($stomp);","output":null},{"title":"Procedural style","source":"\/* connection *\/\n$link = stomp_connect('ssl:\/\/localhost:61612');\n\n\/* check connection *\/\nif (!$link) {\n    die('Connection failed: ' . stomp_connect_error());\n}\n\nstomp_set_read_timeout($link, 10);\n    \n\/* close connection *\/\nstomp_close($link);","output":null}],"streamwrapper::dir_readdir":[{"title":"Listing files from tar archives","source":"class streamWrapper {\n    protected $fp;\n\n    public function dir_opendir($path, $options) {\n        $url = parse_url($path);\n\n        $path = $url[\"host\"] . $url[\"path\"];\n\n        if (!is_readable($path)) {\n            trigger_error(\"$path isn't readable for me\", E_USER_NOTICE);\n            return false;\n        }\n        if (!is_file($path)) {\n            trigger_error(\"$path isn't a file\", E_USER_NOTICE);\n            return false;\n        }\n\n        $this->fp = fopen($path, \"rb\");\n        return true;\n    }\n\n    public function dir_readdir() {\n        \/\/ Extract the header for this entry\n        $header      = fread($this->fp, 512);\n        $data = unpack(\"a100filename\/a8mode\/a8uid\/a8gid\/a12size\/a12mtime\/a8checksum\/a1filetype\/a100link\/a100linkedfile\", $header);\n\n        \/\/ Trim the filename and filesize\n        $filename    = trim($data[\"filename\"]);\n\n        \/\/ No filename? We are the end of the archive\n        if (!$filename) {\n            return false;\n        }\n\n        $octal_bytes = trim($data[\"size\"]);\n        \/\/ Filesize is defined in octects\n        $bytes       = octdec($octal_bytes);\n\n        \/\/ tar rounds up filesizes up to multiple of 512 bytes (zero filled)\n        $rest        = $bytes % 512;\n        if ($rest > 0) {\n            $bytes      += 512 - $rest;\n        }\n\n        \/\/ Seek over the file\n        fseek($this->fp, $bytes, SEEK_CUR);\n\n        return $filename;\n    }\n\n    public function dir_closedir() {\n        return fclose($this->fp);\n    }\n\n    public function dir_rewinddir() {\n        return fseek($this->fp, 0, SEEK_SET);\n    }\n}\n\nstream_wrapper_register(\"tar\", \"streamWrapper\");\n$handle = opendir(\"tar:\/\/example.tar\");\nwhile (false !== ($file = readdir($handle))) {\n    var_dump($file);\n}\n\necho \"Rewinding..\\n\";\nrewind($handle);\nvar_dump(readdir($handle));\n\nclosedir($handle);","output":"string(13) \"construct.xml\"\nstring(16) \"dir-closedir.xml\"\nstring(15) \"dir-opendir.xml\"\nstring(15) \"dir-readdir.xml\"\nstring(17) \"dir-rewinddir.xml\"\nstring(9) \"mkdir.xml\"\nstring(10) \"rename.xml\"\nstring(9) \"rmdir.xml\"\nstring(15) \"stream-cast.xml\"\nstring(16) \"stream-close.xml\"\nstring(14) \"stream-eof.xml\"\nstring(16) \"stream-flush.xml\"\nstring(15) \"stream-lock.xml\"\nstring(15) \"stream-open.xml\"\nstring(15) \"stream-read.xml\"\nstring(15) \"stream-seek.xml\"\nstring(21) \"stream-set-option.xml\"\nstring(15) \"stream-stat.xml\"\nstring(15) \"stream-tell.xml\"\nstring(16) \"stream-write.xml\"\nstring(10) \"unlink.xml\"\nstring(12) \"url-stat.xml\"\nRewinding..\nstring(13) \"construct.xml\""}],"swfbitmap::__construct":[{"title":"Importing a DBL file","source":"$s = new SWFShape();\n$f = $s->addFill(new SWFBitmap(file_get_contents(\"image.dbl\")));\n$s->setRightFill($f);\n\n$s->drawLine(32, 0);\n$s->drawLine(0, 32);\n$s->drawLine(-32, 0);\n$s->drawLine(0, -32);\n\n$m = new SWFMovie();\n$m->setDimension(32, 32);\n$m->add($s);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null},{"title":"Using an alpha mask","source":"$s = new SWFShape();\n\n\/\/ .msk file generated with \"gif2mask\" utility\n$f = $s->addFill(new SWFBitmap(file_get_contents(\"alphafill.jpg\"), file_get_contents(\"alphafill.msk\")));\n$s->setRightFill($f);\n\n$s->drawLine(640, 0);\n$s->drawLine(0, 480);\n$s->drawLine(-640, 0);\n$s->drawLine(0, -480);\n\n$c = new SWFShape();\n$c->setRightFill($c->addFill(0x99, 0x99, 0x99));\n$c->drawLine(40, 0);\n$c->drawLine(0, 40);\n$c->drawLine(-40, 0);\n$c->drawLine(0, -40);\n\n$m = new SWFMovie();\n$m->setDimension(640, 480);\n$m->setBackground(0xcc, 0xcc, 0xcc);\n\n\/\/ draw checkerboard background\nfor ($y=0; $y<480; $y+=40) {\n  for ($x=0; $x<640; $x+=80) {\n    $i = $m->add($c);\n    $i->moveTo($x, $y);\n  }\n\n  $y+=40;\n\n  for ($x=40; $x<640; $x+=80) {\n    $i = $m->add($c);\n    $i->moveTo($x, $y);\n  }\n}\n\n$m->add($s);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfbutton::__construct":[{"title":"Usual interactions with buttons","source":"$f = new SWFFont(\"_serif\");\n\n$p = new SWFSprite();\n\nfunction label($string) \n{\n  global $f;\n\n  $t = new SWFTextField();\n  $t->setFont($f);\n  $t->addString($string);\n  $t->setHeight(200);\n  $t->setBounds(3200, 200);\n  return $t;\n}\n\nfunction addLabel($string) \n{\n  global $p;\n\n  $i = $p->add(label($string));\n  $p->nextFrame();\n  $p->remove($i);\n}\n\n$p->add(new SWFAction(\"stop();\"));\naddLabel(\"NO ACTION\");\naddLabel(\"SWFBUTTON_MOUSEUP\");\naddLabel(\"SWFBUTTON_MOUSEDOWN\");\naddLabel(\"SWFBUTTON_MOUSEOVER\");\naddLabel(\"SWFBUTTON_MOUSEOUT\");\naddLabel(\"SWFBUTTON_MOUSEUPOUTSIDE\");\naddLabel(\"SWFBUTTON_DRAGOVER\");\naddLabel(\"SWFBUTTON_DRAGOUT\");\n\nfunction rect($r, $g, $b) \n{\n  $s = new SWFShape();\n  $s->setRightFill($s->addFill($r, $g, $b));\n  $s->drawLine(600, 0);\n  $s->drawLine(0, 600);\n  $s->drawLine(-600, 0);\n  $s->drawLine(0, -600);\n\n  return $s;\n}\n\n$b = new SWFButton();\n$b->addShape(rect(0xff, 0, 0), SWFBUTTON_UP | SWFBUTTON_HIT);\n$b->addShape(rect(0, 0xff, 0), SWFBUTTON_OVER);\n$b->addShape(rect(0, 0, 0xff), SWFBUTTON_DOWN);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(1);\"),\n          SWFBUTTON_MOUSEUP);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(2);\"),\n      SWFBUTTON_MOUSEDOWN);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(3);\"),\n      SWFBUTTON_MOUSEOVER);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(4);\"),\n      SWFBUTTON_MOUSEOUT);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(5);\"),\n      SWFBUTTON_MOUSEUPOUTSIDE);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(6);\"),\n      SWFBUTTON_DRAGOVER);\n\n$b->addAction(new SWFAction(\"setTarget('\/label'); gotoFrame(7);\"),\n      SWFBUTTON_DRAGOUT);\n\n$m = new SWFMovie();\n$m->setDimension(4000, 3000);\n\n$i = $m->add($p);\n$i->setName(\"label\");\n$i->moveTo(400, 1900);\n\n$i = $m->add($b);\n$i->moveTo(400, 900);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null},{"title":"Drag example","source":"$s = new SWFShape();\n$s->setRightFill($s->addFill(0xff, 0, 0));\n$s->drawLine(1000,0);\n$s->drawLine(0,1000);\n$s->drawLine(-1000,0);\n$s->drawLine(0,-1000);\n\n$b = new SWFButton();\n$b->addShape($s, SWFBUTTON_HIT | SWFBUTTON_UP | SWFBUTTON_DOWN | SWFBUTTON_OVER);\n\n$b->addAction(new SWFAction(\"startDrag('\/test', 0);\"), \/\/ '0' means don't lock to mouse\n      SWFBUTTON_MOUSEDOWN);\n\n$b->addAction(new SWFAction(\"stopDrag();\"),\n      SWFBUTTON_MOUSEUP | SWFBUTTON_MOUSEUPOUTSIDE);\n\n$p = new SWFSprite();\n$p->add($b);\n$p->nextFrame();\n\n$m = new SWFMovie();\n$i = $m->add($p);\n$i->setName('test');\n$i->moveTo(1000,1000);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfdisplayitem::multcolor":[{"title":"swfdisplayitem::multcolor() example","source":"$b = new SWFBitmap(file_get_contents(\"backyard.jpg\"));\n\/\/ note use your own picture :-)\n$s = new SWFShape();\n$s->setRightFill($s->addFill($b));\n$s->drawLine($b->getWidth(), 0);\n$s->drawLine(0, $b->getHeight());\n$s->drawLine(-$b->getWidth(), 0);\n$s->drawLine(0, -$b->getHeight());\n\n$m = new SWFMovie();\n$m->setDimension($b->getWidth(), $b->getHeight());\n\n$i = $m->add($s);\n\nfor ($n=0; $n<=20; ++$n) {\n  $i->multColor(1.0-$n\/10, 1.0, 1.0);\n  $i->addColor(0xff*$n\/20, 0, 0);\n  $m->nextFrame();\n}\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfdisplayitem::rotateto":[{"title":"swfdisplayitem::rotateto() example","source":"$thetext =  \"ming!\";\n\n$f = new SWFFont(\"Bauhaus 93.fdb\");\n\n$m = new SWFMovie();\n$m->setRate(24.0);\n$m->setDimension(2400, 1600);\n$m->setBackground(0xff, 0xff, 0xff);\n\n\/\/ functions with huge numbers of arbitrary\n\/\/ arguments are always a good idea!  Really!\n\nfunction text($r, $g, $b, $a, $rot, $x, $y, $scale, $string) \n{\n  global $f, $m;\n\n  $t = new SWFText();\n  $t->setFont($f);\n  $t->setColor($r, $g, $b, $a);\n  $t->setHeight(960);\n  $t->moveTo(-($f->getWidth($string))\/2, $f->getAscent()\/2);\n  $t->addString($string);\n\n  \/\/ we can add properties just like a normal PHP var,\n  \/\/ as long as the names aren't already used.\n  \/\/ e.g., we can't set $i->scale, because that's a function\n\n  $i = $m->add($t);\n  $i->x = $x;\n  $i->y = $y;\n  $i->rot = $rot;\n  $i->s = $scale;\n  $i->rotateTo($rot);\n  $i->scale($scale, $scale);\n\n  \/\/ but the changes are local to the function, so we have to\n  \/\/ return the changed object.  kinda weird..\n\n  return $i;\n}\n\nfunction step($i) \n{\n  $oldrot = $i->rot;\n  $i->rot = 19*$i->rot\/20;\n  $i->x = (19*$i->x + 1200)\/20;\n  $i->y = (19*$i->y + 800)\/20;\n  $i->s = (19*$i->s + 1.0)\/20;\n\n  $i->rotateTo($i->rot);\n  $i->scaleTo($i->s, $i->s);\n  $i->moveTo($i->x, $i->y);\n\n  return $i;\n}\n\n\/\/ see?  it sure paid off in legibility:\n\n$i1 = text(0xff, 0x33, 0x33, 0xff, 900, 1200, 800, 0.03, $thetext);\n$i2 = text(0x00, 0x33, 0xff, 0x7f, -560, 1200, 800, 0.04, $thetext);\n$i3 = text(0xff, 0xff, 0xff, 0x9f, 180, 1200, 800, 0.001, $thetext);\n\nfor ($i=1; $i<=100; ++$i) {\n  $i1 = step($i1);\n  $i2 = step($i2);\n  $i3 = step($i3);\n\n  $m->nextFrame();\n}\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfdisplayitem::setratio":[{"title":"swfdisplayitem::setname() example","source":"$p = new SWFMorph();\n\n$g = new SWFGradient();\n$g->addEntry(0.0, 0, 0, 0);\n$g->addEntry(0.16, 0xff, 0xff, 0xff);\n$g->addEntry(0.32, 0, 0, 0);\n$g->addEntry(0.48, 0xff, 0xff, 0xff);\n$g->addEntry(0.64, 0, 0, 0);\n$g->addEntry(0.80, 0xff, 0xff, 0xff);\n$g->addEntry(1.00, 0, 0, 0);\n\n$s = $p->getShape1();\n$f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);\n$f->scaleTo(0.05);\n$s->setLeftFill($f);\n$s->movePenTo(-160, -120);\n$s->drawLine(320, 0);\n$s->drawLine(0, 240);\n$s->drawLine(-320, 0);\n$s->drawLine(0, -240);\n\n$g = new SWFGradient();\n$g->addEntry(0.0, 0, 0, 0);\n$g->addEntry(0.16, 0xff, 0, 0);\n$g->addEntry(0.32, 0, 0, 0);\n$g->addEntry(0.48, 0, 0xff, 0);\n$g->addEntry(0.64, 0, 0, 0);\n$g->addEntry(0.80, 0, 0, 0xff);\n$g->addEntry(1.00, 0, 0, 0);\n\n$s = $p->getShape2();\n$f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);\n$f->scaleTo(0.05);\n$f->skewXTo(1.0);\n$s->setLeftFill($f);\n$s->movePenTo(-160, -120);\n$s->drawLine(320, 0);\n$s->drawLine(0, 240);\n$s->drawLine(-320, 0);\n$s->drawLine(0, -240);\n\n$m = new SWFMovie();\n$m->setDimension(320, 240);\n$i = $m->add($p);\n$i->moveTo(160, 120);\n\nfor ($n=0; $n<=1.001; $n+=0.01) {\n    $i->setRatio($n);\n    $m->nextFrame();\n}\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfgradient::__construct":[{"title":"swfgradient() example","source":"$m = new SWFMovie();\n  $m->setDimension(320, 240);\n\n  $s = new SWFShape();\n\n  \/\/ first gradient- black to white\n  $g = new SWFGradient();\n  $g->addEntry(0.0, 0, 0, 0);\n  $g->addEntry(1.0, 0xff, 0xff, 0xff);\n\n  $f = $s->addFill($g, SWFFILL_LINEAR_GRADIENT);\n  $f->scaleTo(0.01);\n  $f->moveTo(160, 120);\n  $s->setRightFill($f);\n  $s->drawLine(320, 0);\n  $s->drawLine(0, 240);\n  $s->drawLine(-320, 0);\n  $s->drawLine(0, -240);\n\n  $m->add($s);\n\n  $s = new SWFShape();\n\n  \/\/ second gradient- radial gradient from red to transparent\n  $g = new SWFGradient();\n  $g->addEntry(0.0, 0xff, 0, 0, 0xff);\n  $g->addEntry(1.0, 0xff, 0, 0, 0);\n\n  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);\n  $f->scaleTo(0.005);\n  $f->moveTo(160, 120);\n  $s->setRightFill($f);\n  $s->drawLine(320, 0);\n  $s->drawLine(0, 240);\n  $s->drawLine(-320, 0);\n  $s->drawLine(0, -240);\n\n  $m->add($s);\n\n  header('Content-type: application\/x-shockwave-flash');\n  $m->output();","output":null}],"swfmorph::__construct":[{"title":"swfmorph() example","source":"$p = new SWFMorph();\n\n  $s = $p->getShape1();\n  $s->setLine(0, 0, 0, 0);\n\n  \/* Note that this is backwards from normal shapes (left instead of right).\n     I have no idea why, but this seems to work.. *\/\n\n  $s->setLeftFill($s->addFill(0xff, 0, 0));\n  $s->movePenTo(-1000,-1000);\n  $s->drawLine(2000,0);\n  $s->drawLine(0,2000);\n  $s->drawLine(-2000,0);\n  $s->drawLine(0,-2000);\n\n  $s = $p->getShape2();\n  $s->setLine(60,0,0,0);\n  $s->setLeftFill($s->addFill(0, 0, 0xff));\n  $s->movePenTo(0,-1000);\n  $s->drawLine(1000,1000);\n  $s->drawLine(-1000,1000);\n  $s->drawLine(-1000,-1000);\n  $s->drawLine(1000,-1000);\n\n  $m = new SWFMovie();\n  $m->setDimension(3000,2000);\n  $m->setBackground(0xff, 0xff, 0xff);\n\n  $i = $m->add($p);\n  $i->moveTo(1500,1000);\n\n  for ($r=0.0; $r<=1.0; $r+=0.1) {\n    $i->setRatio($r);\n    $m->nextFrame();\n  }\n\n  header('Content-type: application\/x-shockwave-flash');\n  $m->output();","output":null}],"swfmovie::output":[{"title":"Displaying your $movie in a browser","source":"header('Content-type: application\/x-shockwave-flash'); \n$movie->output();","output":null}],"swfmovie::streammp3":[{"title":"Streaming example","source":"$m = new SWFMovie();\n$m->setRate(12.0);\n$m->streamMp3(file_get_contents(\"distortobass.mp3\"));\n\/\/ use your own MP3\n\n\/\/ The file is 11.85 seconds at 12.0 fps = 142 frames\n$m->setFrames(142);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfshape::addfill":[{"title":"SWFShape::addFill() example","source":"$p = new SWFMorph();\n\n$b = new SWFBitmap(file_get_contents(\"alphafill.jpg\"));\n\/\/ use your own bitmap\n$width = $b->getWidth();\n$height = $b->getHeight();\n\n$s = $p->getShape1();\n$f = $s->addFill($b, SWFFILL_TILED_BITMAP);\n$f->moveTo(-$width\/2, -$height\/4);\n$f->scaleTo(1.0, 0.5);\n$s->setLeftFill($f);\n$s->movePenTo(-$width\/2, -$height\/4);\n$s->drawLine($width, 0);\n$s->drawLine(0, $height\/2);\n$s->drawLine(-$width, 0);\n$s->drawLine(0, -$height\/2);\n\n$s = $p->getShape2();\n$f = $s->addFill($b, SWFFILL_TILED_BITMAP);\n\n\/\/ these two have no effect!\n$f->moveTo(-$width\/4, -$height\/2);\n$f->scaleTo(0.5, 1.0);\n\n$s->setLeftFill($f);\n$s->movePenTo(-$width\/4, -$height\/2);\n$s->drawLine($width\/2, 0);\n$s->drawLine(0, $height);\n$s->drawLine(-$width\/2, 0);\n$s->drawLine(0, -$height);\n\n$m = new SWFMovie();\n$m->setDimension($width, $height);\n$i = $m->add($p);\n$i->moveTo($width\/2, $height\/2);\n\nfor ($n=0; $n<1.001; $n+=0.03) {\n    $i->setRatio($n);\n    $m->nextFrame();\n}\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfshape::__construct":[{"title":"swfshape() example","source":"$s = new SWFShape();\n$s->setLine(40, 0x7f, 0, 0);\n$s->setRightFill($s->addFill(0xff, 0, 0));\n$s->movePenTo(200, 200);\n$s->drawLineTo(6200, 200);\n$s->drawLineTo(6200, 4600);\n$s->drawCurveTo(200, 4600, 200, 200);\n\n$m = new SWFMovie();\n$m->setDimension(6400, 4800);\n$m->setRate(12.0);\n$m->add($s);\n$m->nextFrame();\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swfshape::setline":[{"title":"swfshape::setline() example","source":"$s = new SWFShape();\n$f1 = $s->addFill(0xff, 0, 0);\n$f2 = $s->addFill(0xff, 0x7f, 0);\n$f3 = $s->addFill(0xff, 0xff, 0);\n$f4 = $s->addFill(0, 0xff, 0);\n$f5 = $s->addFill(0, 0, 0xff);\n\n\/\/ bug: have to declare all line styles before you use them\n$s->setLine(40, 0x7f, 0, 0);\n$s->setLine(40, 0x7f, 0x3f, 0);\n$s->setLine(40, 0x7f, 0x7f, 0);\n$s->setLine(40, 0, 0x7f, 0);\n$s->setLine(40, 0, 0, 0x7f);\n\n$f = new SWFFont('Techno.fdb');\n\n$s->setRightFill($f1);\n$s->setLine(40, 0x7f, 0, 0);\n$s->drawGlyph($f, '!');\n$s->movePen($f->getWidth('!'), 0);\n\n$s->setRightFill($f2);\n$s->setLine(40, 0x7f, 0x3f, 0);\n$s->drawGlyph($f, '#');\n$s->movePen($f->getWidth('#'), 0);\n\n$s->setRightFill($f3);\n$s->setLine(40, 0x7f, 0x7f, 0);\n$s->drawGlyph($f, '%');\n$s->movePen($f->getWidth('%'), 0);\n\n$s->setRightFill($f4);\n$s->setLine(40, 0, 0x7f, 0);\n$s->drawGlyph($f, '*');\n$s->movePen($f->getWidth('*'), 0);\n\n$s->setRightFill($f5);\n$s->setLine(40, 0, 0, 0x7f);\n$s->drawGlyph($f, '@');\n\n$m = new SWFMovie();\n$m->setDimension(3000,2000);\n$m->setRate(12.0);\n$i = $m->add($s);\n$i->moveTo(1500-$f->getWidth(\"!#%*@\")\/2, 1000+$f->getAscent()\/2);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swftext::__construct":[{"title":"swftext() example","source":"$f = new SWFFont(\"Techno.fdb\");\n$t = new SWFText();\n$t->setFont($f);\n$t->moveTo(200, 2400);\n$t->setColor(0xff, 0xff, 0);\n$t->setHeight(1200);\n$t->addString(\"PHP generates Flash with Ming!!\");\n\n$m = new SWFMovie();\n$m->setDimension(5400, 3600);\n\n$m->add($t);\n\nheader('Content-type: application\/x-shockwave-flash');\n$m->output();","output":null}],"swish::__construct":[{"title":"A Swish::__construct() example","source":"try {\n    $swish = new Swish(\"index1 index2\");\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}\n\nforeach ($swish->indexes as $index) {\n    var_dump($index[\"name\"]);\n    var_dump($index[\"headers\"][\"Total Words\"]);\n}","output":"string(6) \"index1\"\nint(1888)\nstring(6) \"index2\"\nint(2429)"}],"swish::getmetalist":[{"title":"Basic Swish::getMetaList() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    var_dump($swish->getMetaList(\"index.swish-e\"));\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"array(1) {\n  [0]=>\n  array(3) {\n    [\"Name\"]=>\n    string(12) \"swishdefault\"\n    [\"Type\"]=>\n    int(0)\n    [\"ID\"]=>\n    int(1)\n  }\n}"}],"swish::getpropertylist":[{"title":"Basic Swish::getPropertyList() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $properties = $swish->getPropertyList(\"index.swish-e\");\n    foreach ($properties as $prop) {\n        echo $prop[\"Name\"],\"\\n\";\n    }\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"swishreccount\nswishrank\nswishfilenum\nswishdbfile\nswishdocpath\nswishtitle\nswishdocsize\nswishlastmodified"}],"swish::prepare":[{"title":"Basic Swish::prepare() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare(\"search query\");\n    $results = $search->execute();\n    echo \"Found: \", $results->hits, \" hits\\n\";\n\n    $results = $search->execute(\"new search\");\n\n    echo \"Found: \", $results->hits, \" hits\\n\";\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"Found: 2 hits\nFound: 5 hits"}],"swish::query":[{"title":"Basic Swish::query() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $results = $swish->query(\"test query\");\n\n    echo \"Found: \", $results->hits, \" hits\\n\";\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"Found: 1 hits"}],"swishresult::stem":[{"title":"Basic SwishResult::stem() example","source":"try {\n\n    $swish = new Swish(\"ext\/swish\/tests\/index.swish-e\");\n    $results = $swish->query(\"testing OR others\");\n\n    if ($result = $results->nextResult()) {\n        var_dump($result->stem(\"testing\")); \/\/the results fully depend on the stemmer used in the index\n        var_dump($result->stem(\"others\"));\n    }\n\n} catch (SwishException $e) {\n    echo \"Error: \", $e->getMessage(), \"\\n\";\n}","output":"array(1) {\n  [0]=>\n  string(4) \"test\"\n}\narray(1) {\n  [0]=>\n  string(5) \"other\"\n}"}],"swishresults::getparsedwords":[{"title":"Basic SwishResults::getParsedWords() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $results = $swish->query(\"'some characters' and numbers\");\n\n    var_dump($results->getParsedWords(\"index.swish-e\"));\n    var_dump($results->indexes[0]['parsed_words']); \/\/same result in a different way\n\n} catch (SwishException $e) {\n    echo \"Error: \", $e->getMessage(), \"\\n\";\n}","output":"array(4) {\n  [0]=>\n  string(4) \"some\"\n  [1]=>\n  string(10) \"characters\"\n  [2]=>\n  string(3) \"and\"\n  [3]=>\n  string(7) \"numbers\"\n}\narray(4) {\n  [0]=>\n  string(4) \"some\"\n  [1]=>\n  string(10) \"characters\"\n  [2]=>\n  string(3) \"and\"\n  [3]=>\n  string(7) \"numbers\"\n}"}],"swishresults::nextresult":[{"title":"Basic SwishResults::nextResult() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"lost\");\n    while($result = $results->nextResult()) {\n        \/* do something with the result object *\/\n    }\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":null}],"swishresults::seekresult":[{"title":"Basic SwishResults::seekResult() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"lost\");\n\n    var_dump($results->seekResult(0)); \/\/this will succeed\n    var_dump($results->seekResult(100)); \/\/this will fail\n\n} catch (SwishException $e) {\n    echo \"Error: \", $e->getMessage(), \"\\n\";\n}","output":"int(0)\nError: No more results"}],"swishsearch::execute":[{"title":"Basic SwishSearch::execute() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"query\");\n    echo \"First query found: \", $results->hits, \" hits\\n\";\n\n    $results = $search->execute(\"new OR query\");\n    echo \"Second query found: \", $results->hits, \" hits\\n\";\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"First query found: 2 hits\nSecond query found: 12 hits"}],"swishsearch::resetlimit":[{"title":"Basic SwishSearch::resetLimit() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"time\");\n    echo \"First query found: \", $results->hits, \" hits\\n\";\n\n    $search->setLimit(\"swishdocsize\", \"3000\", \"6000\"); \/\/limit by document size, from 3000 to 6000 bytes\n    $results = $search->execute(\"time\");\n    echo \"Second query found: \", $results->hits, \" hits\\n\";\n\n    $search->resetLimit();\n    $results = $search->execute(\"time\");\n    echo \"Third query found: \", $results->hits, \" hits\\n\";\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"First query found: 5 hits\nSecond query found: 2 hits\nThird query found: 5 hits"}],"swishsearch::setlimit":[{"title":"Basic SwishSearch::setLimit() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"time\");\n    echo \"First query found: \", $results->hits, \" hits\\n\";\n\n    $i = 0;\n    while($result = $results->nextResult()) {\n        echo \"Hit #\", ++$i, \" - \", $result->swishdocsize, \" bytes\\n\";\n    }\n\n    $search->setLimit(\"swishdocsize\", \"3000\", \"6000\"); \/\/limit by document size, from 3000 to 6000 bytes\n    $results = $search->execute(\"time\");\n    echo \"Second query found: \", $results->hits, \" hits\\n\";\n\n    $i = 0;\n    while($result = $results->nextResult()) {\n        echo \"Hit #\", ++$i, \" - \", $result->swishdocsize, \" bytes\\n\";\n    }\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"First query found: 5 hits\nHit #1 - 4261 bytes\nHit #2 - 37937 bytes\nHit #3 - 7126 bytes\nHit #4 - 15427 bytes\nHit #5 - 4768 bytes\nSecond query found: 2 hits\nHit #1 - 4261 bytes\nHit #2 - 4768 bytes"}],"swishsearch::setphrasedelimiter":[{"title":"Basic SwishSearch::setPhraseDelimiter() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute('\"every time\"'); \/\/looking for \"every time\"\n    echo \"First query found: \", $results->hits, \" hits\\n\";\n\n    $search->setPhraseDelimiter(\"'\");\n    $results = $search->execute(\"'every time'\"); \/\/the same query, but using different delimiter\n    echo \"Second query found: \", $results->hits, \" hits\\n\";\n\n    $search->setPhraseDelimiter('\"');\n    $results = $search->execute(\"'every time'\"); \/\/looking for \"every\" and \"time\"\n    echo \"Third query found: \", $results->hits, \" hits\\n\";\n\n    \/\/let's look at parsed words\n    var_dump($results->getParsedWords(\"index.swish-e\"));\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"First query found: 1 hits\nSecond query found: 1 hits\nThird query found: 2 hits\narray(2) {\n  [0]=>\n  string(5) \"every\"\n  [1]=>\n  string(4) \"time\"\n}"}],"swishsearch::setsort":[{"title":"Basic SwishSearch::setSort() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"time\");\n    echo \"First query found: \", $results->hits, \" hits\\n\";\n\n    $i = 0;\n    while($result = $results->nextResult()) {\n        echo \"Hit #\", ++$i, \" - \", $result->swishdocsize, \" bytes\\n\";\n    }\n\n    $search->setSort(\"swishdocsize desc\"); \/\/sort by document size\n    $results = $search->execute(\"time\");\n    echo \"Second query found: \", $results->hits, \" hits\\n\";\n\n    $i = 0;\n    while($result = $results->nextResult()) {\n        echo \"Hit #\", ++$i, \" - \", $result->swishdocsize, \" bytes\\n\";\n    }\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"First query found: 5 hits\nHit #1 - 4261 bytes\nHit #2 - 37937 bytes\nHit #3 - 7126 bytes\nHit #4 - 15427 bytes\nHit #5 - 4768 bytes\nSecond query found: 5 hits\nHit #1 - 37937 bytes\nHit #2 - 15427 bytes\nHit #3 - 7126 bytes\nHit #4 - 4768 bytes\nHit #5 - 4261 bytes"}],"swishsearch::setstructure":[{"title":"Basic SwishSearch::setStructure() example","source":"try {\n\n    $swish = new Swish(\"index.swish-e\");\n    $search = $swish->prepare();\n\n    $results = $search->execute(\"time\");\n    echo \"First query found: \", $results->hits, \" hits\\n\";\n\n    $search->setStructure(Swish::IN_TITLE|Swish::IN_HEAD); \/\/search in title and head\n    $results = $search->execute(\"time\");\n    echo \"Second query found: \", $results->hits, \" hits\\n\";\n\n    $search->setStructure(Swish::IN_ALL); \/\/search in whole document, the default value\n    $results = $search->execute(\"time\");\n    echo \"Third query found: \", $results->hits, \" hits\\n\";\n\n} catch (SwishException $e) {\n    echo $e->getMessage(), \"\\n\";\n}","output":"First query found: 5 hits\nSecond query found: 0 hits\nThird query found: 5 hits"}],"syncevent::__construct":[{"title":"SyncEvent::__construct() example","source":"\/\/ In a web application:\n$event = new SyncEvent(\"GetAppReport\");\n$event->fire();\n\n\/\/ In a cron job:\n$event = new SyncEvent(\"GetAppReport\");\n$event->wait();","output":null}],"syncevent::fire":[{"title":"SyncEvent::fire() example","source":"\/\/ In a web application:\n$event = new SyncEvent(\"GetAppReport\");\n$event->fire();\n\n\/\/ In a cron job:\n$event = new SyncEvent(\"GetAppReport\");\n$event->wait();","output":null}],"syncevent::reset":[{"title":"SyncEvent::reset() example","source":"\/\/ In a web application:\n$event = new SyncEvent(\"DemoApplication\", true);\n$event->wait();\n\n\/\/ In a cron job:\n$event = new SyncEvent(\"DemoApplication\", true);\n$event->reset();\n\/* ... Do some maintenance task(s) ... *\/\n$event->fire();","output":null}],"syncevent::wait":[{"title":"SyncEvent::wait() example","source":"\/\/ In a web application:\n$event = new SyncEvent(\"GetAppReport\");\n$event->fire();\n\n\/\/ In a cron job:\n$event = new SyncEvent(\"GetAppReport\");\n$event->wait();","output":null}],"syncmutex::__construct":[{"title":"SyncMutex::__construct() named mutex with lock timeout example","source":"$mutex = new SyncMutex(\"UniqueName\");\n\nif (!$mutex->lock(3000))\n{\n    echo \"Unable to lock mutex.\";\n\n    exit();\n}\n\n\/* ... *\/\n\n$mutex->unlock();","output":null},{"title":"SyncMutex::__construct() unnamed mutex example","source":"$mutex = new SyncMutex();\n\n$mutex->lock();\n\n\/* ... *\/\n\n$mutex->unlock();","output":null}],"syncmutex::lock":[{"title":"SyncMutex::lock() example","source":"$mutex = new SyncMutex(\"UniqueName\");\n\nif (!$mutex->lock(3000))\n{\n    echo \"Unable to lock mutex.\";\n\n    exit();\n}\n\n\/* ... *\/\n\n$mutex->unlock();","output":null}],"syncmutex::unlock":[{"title":"SyncMutex::unlock() example","source":"$mutex = new SyncMutex(\"UniqueName\");\n\n$mutex->lock();\n\n\/* ... *\/\n\n$mutex->unlock();","output":null}],"syncreaderwriter::__construct":[{"title":"SyncReaderWriter::__construct() example","source":"$readwrite = new SyncReaderWriter(\"FileCacheLock\");\n$readwrite->readlock();\n\/* ... *\/\n$readwrite->readunlock();\n\n$readwrite->writelock();\n\/* ... *\/\n$readwrite->writeunlock();","output":null}],"syncreaderwriter::readlock":[{"title":"SyncReaderWriter::readlock() example","source":"$readwrite = new SyncReaderWriter(\"FileCacheLock\");\n$readwrite->readlock();\n\/* ... *\/\n$readwrite->readunlock();","output":null}],"syncreaderwriter::readunlock":[{"title":"SyncReaderWriter::readunlock() example","source":"$readwrite = new SyncReaderWriter(\"FileCacheLock\");\n$readwrite->readlock();\n\/* ... *\/\n$readwrite->readunlock();","output":null}],"syncreaderwriter::writelock":[{"title":"SyncReaderWriter::writelock() example","source":"$readwrite = new SyncReaderWriter(\"FileCacheLock\");\n$readwrite->writelock();\n\/* ... *\/\n$readwrite->writeunlock();","output":null}],"syncreaderwriter::writeunlock":[{"title":"SyncReaderWriter::writeunlock() example","source":"$readwrite = new SyncReaderWriter(\"FileCacheLock\");\n$readwrite->writelock();\n\/* ... *\/\n$readwrite->writeunlock();","output":null}],"syncsemaphore::__construct":[{"title":"SyncSemaphore::__construct() example","source":"$semaphore = new SyncSemaphore(\"LimitedResource_2clients\", 2);\n\nif (!$semaphore->lock(3000))\n{\n    echo \"Unable to lock semaphore.\";\n\n    exit();\n}\n\n\/* ... *\/\n\n$semaphore->unlock();","output":null}],"syncsemaphore::lock":[{"title":"SyncSemaphore::lock() example","source":"$semaphore = new SyncSemaphore(\"LimitedResource_2clients\", 2);\n\nif (!$semaphore->lock(3000))\n{\n    echo \"Unable to lock semaphore.\";\n\n    exit();\n}\n\n\/* ... *\/\n\n$semaphore->unlock();","output":null}],"syncsemaphore::unlock":[{"title":"SyncSemaphore::unlock() example","source":"$semaphore = new SyncSemaphore(\"LimitedResource_2clients\", 2);\n\nif (!$semaphore->lock(3000))\n{\n    echo \"Unable to lock semaphore.\";\n\n    exit();\n}\n\n\/* ... *\/\n\n$semaphore->unlock();","output":null}],"syncsharedmemory::__construct":[{"title":"SyncSharedMemory::__construct() example","source":"\/\/ You will probably need to protect shared memory with other synchronization objects.\n\/\/ Shared memory goes away when the last reference to it disappears.\n$mem = new SyncSharedMemory(\"AppReportName\", 1024);\nif ($mem->first())\n{\n    \/\/ Do first time initialization work here.\n}\n\n$result = $mem->write(json_encode(array(\"name\" => \"my_report.txt\")));","output":null}],"syncsharedmemory::first":[{"title":"SyncSharedMemory::first() example","source":"$mem = new SyncSharedMemory(\"AppReportName\", 1024);\nif ($mem->first())\n{\n    \/\/ Do first time initialization work here.\n}\n\nvar_dump($mem->first());\n\n$mem2 = new SyncSharedMemory(\"AppReportName\", 1024);\n\nvar_dump($mem2->first());","output":"bool(true)\nbool(false)"}],"syncsharedmemory::read":[{"title":"SyncSharedMemory::__construct() example","source":"\/\/ You will probably need to protect shared memory with other synchronization objects.\n\/\/ Shared memory goes away when the last reference to it disappears.\n$mem = new SyncSharedMemory(\"AppReportName\", 1024);\nif ($mem->first())\n{\n    \/\/ Do first time initialization work here.\n}\n\n$result = $mem->write(\"report.txt\");\n\n$result = $mem->read(3, -4);\nvar_dump($result);","output":"string(3) \"ort\""}],"syncsharedmemory::size":[{"title":"SyncSharedMemory::size() example","source":"$mem = new SyncSharedMemory(\"AppReportName\", 1024);\nvar_dump($mem->size());","output":"int(1024)"}],"syncsharedmemory::write":[{"title":"SyncSharedMemory::write() example","source":"\/\/ You will probably need to protect shared memory with other synchronization objects.\n\/\/ Shared memory goes away when the last reference to it disappears.\n$mem = new SyncSharedMemory(\"AppReportName\", 1024);\nif ($mem->first())\n{\n    \/\/ Do first time initialization work here.\n}\n\n$result = $mem->write(\"report.txt\");\nvar_dump($result);\n\n$result = $mem->write(\"report.txt\", -3);\nvar_dump($result);","output":"int(10)\nint(3)"}],"thread::getcreatorid":[{"title":"Return the identity of the Thread or Process that created the referenced Thread","source":"class My extends Thread {\n    public function run() {\n        printf(\"%s created by Thread #%lu\\n\", __CLASS__, $this->getCreatorId());\n    }\n}\n$my = new My();\n$my->start();","output":"My created by Thread #123456778899"}],"thread::getcurrentthread":[{"title":"Return the currently executing Thread","source":"class My extends Thread {\n    public function run() {\n        var_dump(Thread::getCurrentThread());\n    }\n}\n$my = new My();\n$my->start();","output":"object(My)#2 (0) {\n}"}],"thread::getcurrentthreadid":[{"title":"Return the identity of the currently executing Thread","source":"class My extends Thread {\n    public function run() {\n        printf(\"%s is Thread #%lu\\n\", __CLASS__, Thread::getCurrentThreadId());\n    }\n}\n$my = new My();\n$my->start();","output":"My is Thread #123456778899"}],"thread::getthreadid":[{"title":"Return the identity of the referenced Thread","source":"class My extends Thread {\n    public function run() {\n        printf(\"%s is Thread #%lu\\n\", __CLASS__, $this->getThreadId());\n    }\n}\n$my = new My();\n$my->start();","output":"My is Thread #123456778899"}],"thread::globally":[{"title":"Execute in the global scope","source":"class My extends Thread {\n    public function run() {\n        global $std;\n        \n        Thread::globally(function(){\n            $std = new stdClass;\n        });\n        \n        var_dump($std);\n    }\n}\n$my = new My();\n$my->start();","output":"object(stdClass)#3 (0) {\n}"}],"thread::isjoined":[{"title":"Detect the state of the referenced Thread","source":"class My extends Thread {\n    public function run() {\n        $this->synchronized(function($thread){\n            if (!$thread->done)\n                $thread->wait();\n        }, $this);\n    }\n}\n$my = new My();\n$my->start();\nvar_dump($my->isJoined());\n$my->synchronized(function($thread){\n    $thread->done = true;\n    $thread->notify();\n}, $my);","output":"bool(false)"}],"threaded::isrunning":[{"title":"Detect the state of the referenced object","source":"class My extends Thread {\n    public function run() {\n        $this->synchronized(function($thread){\n            if (!$thread->done)\n                $thread->wait();\n        }, $this);\n    }\n}\n$my = new My();\n$my->start();\nvar_dump($my->isRunning());\n$my->synchronized(function($thread){\n    $thread->done = true;\n    $thread->notify();\n}, $my);","output":"bool(true)"}],"thread::isstarted":[{"title":"Tell if the referenced Thread was started","source":"$worker = new Worker();\n$worker->start();\nvar_dump($worker->isStarted());","output":"bool(true)"}],"thread::join":[{"title":"Join with the referenced Thread","source":"class My extends Thread {\n    public function run() {\n        \/* ... *\/\n    }\n}\n$my = new My();\n$my->start();\n\/* ... *\/\nvar_dump($my->join());\n\/* ... *\/","output":"bool(true)"}],"thread::kill":[{"title":"Kill the referenced Thread","source":"class T extends Thread {\n    public function run() {\n        $stdin = fopen(\"php:\/\/stdin\", \"r\");\n        while(($line = fgets($stdin))) {\n            echo $line;\n        }\n    }\n}\n\n$t = new T();\n$t->start();\n\nvar_dump($t->kill());","output":"bool(true)"}],"thread::start":[{"title":"Starting Threads","source":"class My extends Thread {\n    public function run() {\n        \/** ... **\/\n    }\n}\n$my = new My();\nvar_dump($my->start());","output":"bool(true)"}],"threaded::chunk":[{"title":"Fetch a chunk of the property table","source":"$safe = new Threaded();\n\nwhile (count($safe) < 10) {\n    $safe[] = count($safe);\n}\n\nvar_dump($safe->chunk(5));","output":"array(5) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(1)\n  [2]=>\n  int(2)\n  [3]=>\n  int(3)\n  [4]=>\n  int(4)\n}"}],"threaded::count":[{"title":"Counting the properties of an object","source":"$safe = new Threaded();\n\nwhile (count($safe) < 10) {\n    $safe[] = count($safe);\n}\n\nvar_dump(count($safe));","output":"int(10)"}],"threaded::extend":[{"title":"Runtime inheritance","source":"class My {}\n\nThreaded::extend(My::class);\n\n$my = new My();\n\nvar_dump($my instanceof Threaded);","output":"bool(true)"}],"threaded::from":[{"title":"Thread safe objects from closures","source":"$pool = new Pool(4);\n$pool->submit(Collectable::from(function(){\n    echo \"Hello World\";\n    $this->setGarbage();\n}));\n\/* ... *\/\n$pool->shutdown();","output":"Hello World"}],"threaded::getterminationinfo":[{"title":"Detecting fatal errors in Threads","source":"class My extends Thread {\n    public function run() {\n        @not_found();\n    }\n}\n\n$my = new My();\n$my->start();\n$my->join();\n\nvar_dump($my->isTerminated(), $my->getTerminationInfo());","output":"bool(true)\narray(4) {\n  [\"scope\"]=>\n  string(2) \"My\"\n  [\"function\"]=>\n  string(3) \"run\"\n  [\"file\"]=>\n  string(29) \"\/usr\/src\/pthreads\/sandbox.php\"\n  [\"line\"]=>\n  int(4)\n}"}],"threaded::isterminated":[{"title":"Detect the state of the referenced object","source":"class My extends Thread {\n    public function run() {\n        i_do_not_exist();\n    }\n}\n$my = new My();\n$my->start();\n$my->join();\nvar_dump($my->isTerminated());","output":"bool(true)"}],"threaded::iswaiting":[{"title":"Detect the state of the referenced object","source":"class My extends Thread {\n    public function run() {\n        $this->synchronized(function($thread){\n            if (!$this->done)\n                $thread->wait();\n        }, $this);\n    }\n    \n    protected $done;\n}\n$my = new My();\n$my->start();\n$my->synchronized(function($thread){\n    var_dump(\n        $thread->isWaiting());\n    $thread->done = true;\n    $thread->notify();\n}, $my);","output":"bool(true)"}],"threaded::lock":[{"title":"Locking Object Properties","source":"class My extends Thread {\n    public function run() {\n        var_dump($this->lock());\n        \/** nobody can read or write **\/\n        var_dump($this->unlock());\n        \/** reading \/ writing resumed for all other contexts *\/\n    }\n}\n$my = new My();\n$my->start();","output":"bool(true)\nbool(true)"}],"threaded::merge":[{"title":"Merging into the property table of a threaded object","source":"$array = [];\n\nwhile (count($array) < 10)\n    $array[] = count($array);\n\n$stdClass = new stdClass();\n$stdClass->foo = \"foo\";\n$stdClass->bar = \"bar\";\n$stdClass->baz = \"baz\";\n\n$safe = new Threaded();\n$safe->merge($array);\n\n$safe->foo = \"bar\";\n$safe->merge($stdClass, false);\n\nvar_dump($safe);","output":"object(Threaded)#2 (13) {\n  [\"0\"]=>\n  int(0)\n  [\"1\"]=>\n  int(1)\n  [\"2\"]=>\n  int(2)\n  [\"3\"]=>\n  int(3)\n  [\"4\"]=>\n  int(4)\n  [\"5\"]=>\n  int(5)\n  [\"6\"]=>\n  int(6)\n  [\"7\"]=>\n  int(7)\n  [\"8\"]=>\n  int(8)\n  [\"9\"]=>\n  int(9)\n  [\"foo\"]=>\n  string(3) \"bar\"\n  [\"bar\"]=>\n  string(3) \"bar\"\n  [\"baz\"]=>\n  string(3) \"baz\"\n}"}],"threaded::notify":[{"title":"Notifications and Waiting","source":"class My extends Thread {\n    public function run() {\n        \/** cause this thread to wait **\/\n        $this->synchronized(function($thread){\n            if (!$thread->done)\n                $thread->wait();\n        }, $this);\n    }\n}\n$my = new My();\n$my->start();\n\/** send notification to the waiting thread **\/\n$my->synchronized(function($thread){\n    $thread->done = true;\n    $thread->notify();\n}, $my);\nvar_dump($my->join());","output":"bool(true)"}],"threaded::pop":[{"title":"Popping the last item from the property table of a threaded object","source":"$safe = new Threaded();\n\nwhile (count($safe) < 10)\n    $safe[] = count($safe);\n\nvar_dump($safe->pop());","output":"int(9)"}],"threaded::shift":[{"title":"Shifting the first item from the property table of a threaded object","source":"$safe = new Threaded();\n\nwhile (count($safe) < 10)\n    $safe[] = count($safe);\n\nvar_dump($safe->shift());","output":"int(0)"}],"threaded::synchronized":[{"title":"Synchronizing","source":"class My extends Thread {\n    public function run() {\n        $this->synchronized(function($thread){\n            if (!$thread->done)\n                $thread->wait();\n        }, $this);\n    }\n}\n$my = new My();\n$my->start();\n$my->synchronized(function($thread){\n    $thread->done = true;\n    $thread->notify();\n}, $my);\nvar_dump($my->join());","output":"bool(true)"}],"threaded::unlock":[{"title":"Locking the property table of a threaded object","source":"class My extends Thread {\n    public function run() {\n        var_dump($this->lock());\n        \/** nobody can read or write **\/\n        var_dump($this->unlock());\n        \/** reading \/ writing resumed for all other contexts *\/\n    }\n}\n$my = new My();\n$my->start();","output":"bool(true)\nbool(true)"}],"threaded::wait":[{"title":"Notifications and Waiting","source":"class My extends Thread {\n    public function run() {\n        \/** cause this thread to wait **\/\n        $this->synchronized(function($thread){\n            if (!$thread->done)\n                $thread->wait();\n        }, $this);\n    }\n}\n$my = new My();\n$my->start();\n\/** send notification to the waiting thread **\/\n$my->synchronized(function($thread){\n    $thread->done = true;\n    $thread->notify();\n}, $my);\nvar_dump($my->join());","output":"bool(true)"}],"tidy::body":[{"title":"tidy::getBody() example","source":"$html = '\n<html>\n  <head>\n    <title>test<\/title>\n  <\/head>\n  <body>\n    <p>paragraph<\/p>\n  <\/body>\n<\/html>';\n\n$tidy = tidy_parse_string($html);\n\n$body = $tidy->Body();\necho $body->value;","output":"<body>\n<p>paragraph<\/p>\n<\/body>"}],"tidy::cleanrepair":[{"title":"tidy::cleanrepair() example","source":"$html = '<p>test<\/I>';\n\n$tidy = tidy_parse_string($html);\n$tidy->cleanRepair();\n\necho $tidy;","output":"<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2\/\/EN\">\n<html>\n<head>\n<title><\/title>\n<\/head>\n<body>\n<p>test<\/p>\n<\/body>\n<\/html>"}],"tidy::__construct":[{"title":"tidy::__construct() example","source":"$html = <<< HTML\n\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\"\n\"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-strict.dtd\">\n\n<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head><title>title<\/title><\/head>\n<body>\n<p>paragraph <bt \/>\ntext<\/p>\n<\/body><\/html>\n\nHTML;\n\n$tidy = new tidy();\n$tidy->ParseString($html);\n\n$tidy->cleanRepair();\n\nif ($tidy->errorBuffer) {\n    echo \"The following errors were detected:\\n\";\n    echo $tidy->errorBuffer;\n}","output":"The following errors were detected:\nline 8 column 14 - Error: <bt> is not recognized!\nline 8 column 14 - Warning: discarding unexpected <bt>"}],"tidy::diagnose":[{"title":"tidy::diagnose() example","source":"$html = <<< HTML\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\"\n\"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-strict.dtd\">\n\n<p>paragraph<\/p>\nHTML;\n\n$tidy = tidy_parse_string($html);\n$tidy->cleanRepair();\n\n\/\/ note the difference between the two outputs\necho $tidy->errorBuffer . \"\\n\";\n\n$tidy->diagnose();\necho $tidy->errorBuffer;","output":"line 4 column 1 - Warning: <p> isn't allowed in <head> elements\nline 4 column 1 - Warning: inserting missing 'title' element\nline 4 column 1 - Warning: <p> isn't allowed in <head> elements\nline 4 column 1 - Warning: inserting missing 'title' element\nInfo: Doctype given is \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\"\nInfo: Document content looks like XHTML 1.0 Strict\n2 warnings, 0 errors were found!"}],"tidy::getconfig":[{"title":"tidy::getConfig() example","source":"$html = '<p>test<\/p>';\n$config = array('indent' => TRUE,\n                'output-xhtml' => TRUE,\n                'wrap' => 200);\n\n$tidy = tidy_parse_string($html, $config);\n\nprint_r($tidy->getConfig());","output":"Array\n(\n    [indent-spaces] => 2\n    [wrap] => 200\n    [tab-size] => 8\n    [char-encoding] => 1\n    [input-encoding] => 3\n    [output-encoding] => 1\n    [newline] => 1\n    [doctype-mode] => 1\n    [doctype] =>\n    [repeated-attributes] => 1\n    [alt-text] =>\n    [slide-style] =>\n    [error-file] =>\n    [output-file] =>\n    [write-back] =>\n    [markup] => 1\n    [show-warnings] => 1\n    [quiet] =>\n    [indent] => 1\n    [hide-endtags] =>\n    [input-xml] =>\n    [output-xml] => 1\n    [output-xhtml] => 1\n    [output-html] =>\n    [add-xml-decl] =>\n    [uppercase-tags] =>\n    [uppercase-attributes] =>\n    [bare] =>\n    [clean] =>\n    [logical-emphasis] =>\n    [drop-proprietary-attributes] =>\n    [drop-font-tags] =>\n    [drop-empty-paras] => 1\n    [fix-bad-comments] => 1\n    [break-before-br] =>\n    [split] =>\n    [numeric-entities] =>\n    [quote-marks] =>\n    [quote-nbsp] => 1\n    [quote-ampersand] => 1\n    [wrap-attributes] =>\n    [wrap-script-literals] =>\n    [wrap-sections] => 1\n    [wrap-asp] => 1\n    [wrap-jste] => 1\n    [wrap-php] => 1\n    [fix-backslash] => 1\n    [indent-attributes] =>\n    [assume-xml-procins] =>\n    [add-xml-space] =>\n    [enclose-text] =>\n    [enclose-block-text] =>\n    [keep-time] =>\n    [word-2000] =>\n    [tidy-mark] =>\n    [gnu-emacs] =>\n    [gnu-emacs-file] =>\n    [literal-attributes] =>\n    [show-body-only] =>\n    [fix-uri] => 1\n    [lower-literals] => 1\n    [hide-comments] =>\n    [indent-cdata] =>\n    [force-output] => 1\n    [show-errors] => 6\n    [ascii-chars] => 1\n    [join-classes] =>\n    [join-styles] => 1\n    [escape-cdata] =>\n    [language] =>\n    [ncr] => 1\n    [output-bom] => 2\n    [replace-color] =>\n    [css-prefix] =>\n    [new-inline-tags] =>\n    [new-blocklevel-tags] =>\n    [new-empty-tags] =>\n    [new-pre-tags] =>\n    [accessibility-check] => 0\n    [vertical-space] =>\n    [punctuation-wrap] =>\n    [merge-divs] => 1\n)"}],"tidy::getopt":[{"title":"tidy_getopt() example","source":"$html ='<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2\/\/EN\">\n<html><head><title>Title<\/title><\/head>\n<body>\n\n<p><img src=\"img.png\"><\/p>\n\n<\/body><\/html>';\n\n$config = array('accessibility-check' => 3,\n                'alt-text' => 'some text');\n\n$tidy = new tidy();\n$tidy->parseString($html, $config);\n\n\nvar_dump($tidy->getOpt('accessibility-check')); \/\/integer\nvar_dump($tidy->getOpt('lower-literals')); \/\/boolean\nvar_dump($tidy->getOpt('alt-text')); \/\/string","output":"int(3)\nbool(true)\nstring(9) \"some text\""}],"tidy::getoptdoc":[{"title":"Print all options along with their documentation and default value","source":"$tidy = new tidy;\n$config = $tidy->getConfig();\n\nksort($config);\n\nforeach ($config as $opt => $val) {\n\n    if (!$doc = $tidy->getOptDoc($opt))\n        $doc = 'no documentation available!';\n\n    $val = ($tidy->getOpt($opt) === true)  ? 'true'  : $val;\n    $val = ($tidy->getOpt($opt) === false) ? 'false' : $val;\n\n    echo \"<p><b>$opt<\/b> (default: '$val')<br \/>\".\n         \"$doc<\/p><hr \/>\\n\";\n}","output":null}],"tidy::getstatus":[{"title":"tidy::getStatus() example","source":"$html = '<p>paragraph<\/i>';\n$tidy = new tidy();\n$tidy->parseString($html);\n\n$tidy2 = new tidy();\n$html2 = '<bogus>test<\/bogus>';\n$tidy2->parseString($html2);\n\necho $tidy->getStatus(); \/\/1\n\necho $tidy2->getStatus(); \/\/2","output":null}],"tidy::head":[{"title":"tidy::head() example","source":"$html = '\n<html>\n  <head>\n    <title>test<\/title>\n  <\/head>\n  <body>\n    <p>paragraph<\/p>\n  <\/body>\n<\/html>';\n\n$tidy = tidy_parse_string($html);\n\n$head = $tidy->head();\necho $head->value;","output":"<head>\n<title>test<\/title>\n<\/head>"}],"tidy::html":[{"title":"tidy::html() example","source":"$html = '\n<html>\n  <head>\n    <title>test<\/title>\n  <\/head>\n  <body>\n    <p>paragraph<\/p>\n  <\/body>\n<\/html>';\n\n$tidy = tidy_parse_string($html);\n\n$html = $tidy->html();\necho $html->value;","output":"<html>\n<head>\n<title>test<\/title>\n<\/head>\n<body>\n<p>paragraph<\/p>\n<\/body>\n<\/html>"}],"tidy::parsefile":[{"title":"tidy::parseFile() example","source":"$tidy = new tidy();\n$tidy->parseFile('file.html');\n\n$tidy->cleanRepair();\n\nif(!empty($tidy->errorBuffer)) {\n    echo \"The following errors or warnings occurred:\\n\";\n    echo $tidy->errorBuffer;\n}","output":null}],"tidy::parsestring":[{"title":"tidy::parseString() example","source":"ob_start();\n?>\n\n<html>\n  <head>\n   <title>test<\/title>\n  <\/head>\n  <body>\n   <p>error<br>another line<\/i>\n  <\/body>\n<\/html>\n\n<?php\n\n$buffer = ob_get_clean();\n$config = array('indent' => TRUE,\n                'output-xhtml' => TRUE,\n                'wrap' => 200);\n\n$tidy = tidy_parse_string($buffer, $config, 'UTF8');\n\n$tidy->cleanRepair();\necho $tidy;","output":"<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\"\n    \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-strict.dtd\">\n<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n  <head>\n    <title>\n      test\n    <\/title>\n  <\/head>\n  <body>\n    <p>\n      error<br \/>\n      another line\n    <\/p>\n  <\/body>\n<\/html>"}],"tidy_get_error_buffer":[{"title":"tidy_get_error_buffer() example","source":"$html = '<p>paragraph<\/p>';\n\n$tidy = tidy_parse_string($html);\n\necho tidy_get_error_buffer($tidy);\n\/* or in OO: *\/\necho $tidy->errorBuffer;","output":"line 1 column 1 - Warning: missing <!DOCTYPE> declaration\nline 1 column 1 - Warning: inserting missing 'title' element"}],"tidy::repairfile":[{"title":"tidy::repairFile() example","source":"$file = 'file.html';\n\n$tidy = new tidy();\n$repaired = $tidy->repairfile($file);\nrename($file, $file . '.bak');\n\nfile_put_contents($file, $repaired);","output":null}],"tidy::repairstring":[{"title":"tidy::repairString() example","source":"ob_start();\n?>\n\n<html>\n  <head>\n    <title>test<\/title>\n  <\/head>\n  <body>\n    <p>error<\/i>\n  <\/body>\n<\/html>\n\n<?php\n\n$buffer = ob_get_clean();\n$tidy = new tidy();\n$clean = $tidy->repairString($buffer);\n\necho $clean;","output":"<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 3.2\/\/EN\">\n<html>\n<head>\n<title>test<\/title>\n<\/head>\n<body>\n<p>error<\/p>\n<\/body>\n<\/html>"}],"tidy::root":[{"title":"tidy::root() example","source":"$html = <<< HTML\n<html><body>\n\n<p>paragraph<\/p>\n<br\/>\n\n<\/body><\/html>\nHTML;\n\n$tidy = tidy_parse_string($html);\ndump_nodes($tidy->root(), 1);\n\n\nfunction dump_nodes($node, $indent) {\n\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            echo str_repeat('.', $indent*2) . ($child->name ? $child->name : '\"'.$child->value.'\"'). \"\\n\";\n\n            dump_nodes($child, $indent+1);\n        }\n    }\n}","output":"..html\n....head\n......title\n....body\n......p\n........\"paragraph\"\n......br"}],"tidynode::getparent":[{"title":"tidyNode::hasChildren() example","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n <\/head>\n <body>\n Hello World\n <\/body>\n<\/html>\n\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\n$node = $tidy->html()->child[0]->child[0];\n\nvar_dump($node->getparent()->name);","output":"string(4) \"head\""}],"tidynode::haschildren":[{"title":"tidyNode::hasChildren() example","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\n\/\/ the head tag\nvar_dump($tidy->html()->child[0]->hasChildren());\n\n\/\/ the php inside the head tag\nvar_dump($tidy->html()->child[0]->child[0]->hasChildren());","output":"bool(true)\nbool(false)"}],"tidynode::hassiblings":[{"title":"tidyNode::hasSiblings() example","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\n\/\/ the html tag\nvar_dump($tidy->html()->hasSiblings());\n\n\/\/ the head tag\nvar_dump($tidy->html()->child[0]->hasSiblings());","output":"bool(false)\nbool(true)"}],"tidynode::isasp":[{"title":"Extract ASP code from a mixed HTML document","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\nget_nodes($tidy->html());\n\nfunction get_nodes($node) {\n\n    \/\/ check if the current node is of requested type\n    if($node->isAsp()) {\n        echo \"\\n\\n# asp node #\" . ++$GLOBALS['num'] . \"\\n\";\n        echo $node->value;\n    }\n\n    \/\/ check if the current node has childrens\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            get_nodes($child);\n        }\n    }\n}","output":"# asp node #1\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>"}],"tidynode::iscomment":[{"title":"Extract comments from a mixed HTML document","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\nget_nodes($tidy->html());\n\nfunction get_nodes($node) {\n\n    \/\/ check if the current node is of requested type\n    if($node->isComment()) {\n        echo \"\\n\\n# comment node #\" . ++$GLOBALS['num'] . \"\\n\";\n        echo $node->value;\n    }\n\n    \/\/ check if the current node has childrens\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            get_nodes($child);\n        }\n    }\n}","output":"# jste node #1\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>"}],"tidynode::ishtml":[{"title":"Extract HTML code from a mixed HTML document","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\nget_nodes($tidy->html());\n\nfunction get_nodes($node) {\n    \/\/ check if the current node is of requested type\n    if($node->isHtml()) {\n        echo \"\\n\\n# html node #\" . ++$GLOBALS['num'] . \"\\n\";\n        echo $node->value;\n    }\n\n    \/\/ check if the current node has childrens\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            get_nodes($child);\n        }\n    }\n}","output":"# html node #1\n<html>\n<head>\n<?php echo '<title>title<\/title>'; ?><# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<title><\/title>\n<\/head>\n<body>\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?><%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%><!-- Comments -->\nHello WorldOutside HTML\n<\/body>\n<\/html>\n\n# html node #2\n<head>\n<?php echo '<title>title<\/title>'; ?><# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<title><\/title>\n<\/head>\n\n\n# html node #3\n<?php echo '<title>title<\/title>'; ?>\n\n# html node #4\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n\n# html node #5\n<title><\/title>\n\n\n# html node #6\n<body>\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?><%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%><!-- Comments -->\nHello WorldOutside HTML\n<\/body>\n\n\n# html node #7\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n# html node #8\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n# html node #9\n<!-- Comments -->\n\n\n# html node #10\nHello World\n\n# html node #11\nOutside HTML"}],"tidynode::isjste":[{"title":"Extract JSTE code from a mixed HTML document","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\nget_nodes($tidy->html());\n\nfunction get_nodes($node) {\n\n    \/\/ check if the current node is of requested type\n    if($node->isJste()) {\n        echo \"\\n\\n# jste node #\" . ++$GLOBALS['num'] . \"\\n\";\n        echo $node->value;\n    }\n\n    \/\/ check if the current node has childrens\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            get_nodes($child);\n        }\n    }\n}","output":"# jste node #1\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>"}],"tidynode::isphp":[{"title":"Extract PHP code from a mixed HTML document","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\nget_nodes($tidy->html());\n\nfunction get_nodes($node) {\n\n    \/\/ check if the current node is of requested type\n    if($node->isPhp()) {\n        echo \"\\n\\n# php node #\" . ++$GLOBALS['num'] . \"\\n\";\n        echo $node->value;\n    }\n\n    \/\/ check if the current node has childrens\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            get_nodes($child);\n        }\n    }\n}","output":"# php node #1\n<?php echo '<title>title<\/title>'; ?>\n\n# php node #2\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>"}],"tidynode::istext":[{"title":"Extract text from a mixed HTML document","source":"$html = <<< HTML\n<html><head>\n<?php echo '<title>title<\/title>'; ?>\n<# \n  \/* JSTE code *\/\n  alert('Hello World'); \n#>\n<\/head>\n<body>\n\n<?php\n  \/\/ PHP code\n  echo 'hello world!';\n?>\n\n<%\n  \/* ASP code *\/\n  response.write(\"Hello World!\")\n%>\n\n<!-- Comments -->\nHello World\n<\/body><\/html>\nOutside HTML\nHTML;\n\n\n$tidy = tidy_parse_string($html);\n$num = 0;\n\nget_nodes($tidy->html());\n\nfunction get_nodes($node) {\n\n    \/\/ check if the current node is of requested type\n    if($node->isText()) {\n        echo \"\\n\\n# text node #\" . ++$GLOBALS['num'] . \"\\n\";\n        echo $node->value;\n    }\n\n    \/\/ check if the current node has childrens\n    if($node->hasChildren()) {\n        foreach($node->child as $child) {\n            get_nodes($child);\n        }\n    }\n}","output":"# text node #1\nHello World\n\n# text node #2\nOutside HTML"}],"tokyotyrant::add":[{"title":"TokyoTyrant::add() example","source":"$tt = new TokyoTyrant(\"localhost\", TokyoTyrant::RDBDEF_PORT);\n\/* Adds integer 3 to key and creates a new key *\/\n$tt->add(\"test\", 3);\n\n\/* String value is converted to double *\/\necho $tt->add(\"test\", \"3.5\", TokyoTyrant::RDBREC_DBL);","output":6.5}],"tokyotyrant::connect":[{"title":"TokyoTyrant::connect() example","source":"$tt = new TokyoTyrant();\n$tt->connect(\"localhost\", TokyoTyrant::RDBDEF_PORT)->put(\"test\", \"value\");","output":null}],"tokyotyrant::connecturi":[{"title":"TokyoTyrant::connectUri() example","source":"$tt = new TokyoTyrant();\n$tt->connectUri(\"tcp:\/\/localhost:1978\/\")->put(\"test\", \"hi\");","output":null}],"tokyotyrant::copy":[{"title":"TokyoTyrant::copy() example","source":"$tt = new TokyoTyrant(\"localhost\", 1978);\n$tt->copy(\"\/tmp\/foobar.tct\");","output":null}],"tokyotyrant::ext":[{"title":"TokyoTyrant::ext() example","source":"$tt = new TokyoTyrant(\"localhost\", 1978);\necho $tt->ext(\"somefunc\", TokyoTyrant::RDBXO_LCKREC, \"some_key\", \"some_value\");","output":null}],"tokyotyrant::fwmkeys":[{"title":"TokyoTyrant::fwmKeys() example","source":"$tt = new TokyoTyrant(\"localhost\");\n\n\/* Create 20 macthing keys *\/\nfor ($i = 0; $i < 20; $i++) {\n    $tt->put(\"key_\" . $i, \"value_\" . $i);\n}\n\n\/* Create 20 non-macthing keys *\/\nfor ($i = 0; $i < 20; $i++) {\n    $tt->put(\"something_\" . $i, \"data_\" . $i);\n}\n\n\/* Get five matching keys *\/\nvar_dump($tt->fwmKeys(\"key_\", 5));","output":"array(5) {\n  [0]=>\n  string(5) \"key_5\"\n  [1]=>\n  string(6) \"key_14\"\n  [2]=>\n  string(5) \"key_6\"\n  [3]=>\n  string(6) \"key_15\"\n  [4]=>\n  string(5) \"key_7\"\n}"}],"tokyotyrant::get":[{"title":"TokyoTyrant::get() example","source":"$tt = new TokyoTyrant(\"localhost\", 1978);\n$tt->put(\"key1\", \"value1\");\n$tt->put(\"key2\", \"value2\");\nvar_dump($tt->get(array(\"key1\", \"key2\")));\nvar_dump($tt->get(\"key1\"));","output":"array(2) {\n  [\"key1\"]=>\n  string(6) \"value1\"\n  [\"key2\"]=>\n  string(6) \"value2\"\n}\nstring(6) \"value1\""}],"tokyotyrant::getiterator":[{"title":"TokyoTyrant::getIterator() example","source":"$tt = new TokyoTyrant(\"localhost\");\n$it = $tt->getIterator();\n\nforeach ($it as $k => $v) {\n\n}","output":null}],"tokyotyrant::num":[{"title":"TokyoTyrant::num() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n\/* Echo the number of records *\/\necho $tt->num();","output":1234}],"tokyotyrant::out":[{"title":"TokyoTyrant::out() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n$tt->put(\"test1\", \"value1\");\n$tt->put(\"test2\", \"value2\");\n\n$tt->out(array(\"test1\", \"test2\"));","output":null}],"tokyotyrant::put":[{"title":"TokyoTyrant::put() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n\/* Put single key-value pair *\/\n$tt->put(\"key\", \"value\");\n\n\/* Put key-value pairs, new value overwrites the old *\/\n$tt->put(array(\"key1\" => \"value1\", \"key\" => \"value2\"));\n\n\/* Get back one key *\/\necho $tt->get(\"key\");","output":"value2"}],"tokyotyrant::putcat":[{"title":"TokyoTyrant::putCat() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n\/* Create a new key *\/\n$tt->put(\"key\", \"value\");\n\n\/* Concatenate single key-value pair *\/\n$tt->putCat(\"key\", \" has more data\");\n\n\/* Echo the key *\/\necho $tt->get(\"key\");","output":"value has more data"}],"tokyotyrant::putkeep":[{"title":"tokyotyrant::putKeep() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n\/* Create a new key *\/\n$tt->put(\"key\", \"value\");\n\ntry {\n    $tt->putKeep(\"key\", \"new value\");\n} catch (TokyoTyrantException $e) {\n    if ($e->getCode() === TokyoTyrant::TTE_KEEP) {\n        echo \"Existing record! Not modified\\n\";\n    } else {\n        echo \"Error: \" , $e->getMessage() , \"\\n\"; \n    }\n}\necho $tt->get(\"key\");","output":"Existing record! Not modified\nvalue"}],"tokyotyrant::putnr":[{"title":"TokyoTyrant::putNr() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n\/* Put single key-value pair *\/\n$tt->putNr(\"key\", \"value\");\n\n\/* Put key-value pairs *\/\n$tt->putNr(array(\"key1\" => \"value1\", \"key2\" => \"value2\"));\n\n\/* Get back one key *\/\necho $tt->get(\"key1\");","output":"value1"}],"tokyotyrant::putshl":[{"title":"TokyoTyrant::putShl() example","source":"\/* Connect to a database on default port *\/\n$tt = new TokyoTyrant(\"localhost\");\n\n\/* Create a new key *\/\n$tt->put(\"key\", \"just a long piece of data\");\n\n\/* Concatenate and shift to left *\/\n$tt->putShl(\"key\", \" and string\", 15);\n\n\/* Echo the key *\/\necho $tt->get(\"key\");","output":"data and string"}],"tokyotyrant::setmaster":[{"title":"TokyoTyrant::setMaster() example","source":"\/* Connect to a database *\/\n$tt = new TokyoTyrant(\"tokyotyrant.example.com\");\n\n\/* Disable the replication *\/\n$tt->setMaster(NULL, 0, 0);","output":null}],"tokyotyrant::size":[{"title":"TokyoTyrant::size() example","source":"$tt = new TokyoTyrant(\"localhost\");\n\n$tt->put(\"test_key\", \"12345\");\n\necho $tt->size(\"test_key\");","output":5}],"tokyotyrant::stat":[{"title":"TokyoTyrant::stat() example","source":"$tt = new TokyoTyrant(\"localhost\");\n\nvar_dump($tt->stat());","output":"array(19) {\n  [\"version\"]=>\n  string(6) \"1.1.28\"\n  [\"libver\"]=>\n  string(3) \"311\"\n  [\"protver\"]=>\n  string(4) \"0.91\"\n  [\"os\"]=>\n  string(5) \"Linux\"\n  [\"time\"]=>\n  string(17) \"1247358357.665630\"\n  [\"pid\"]=>\n  string(5) \"14348\"\n  [\"sid\"]=>\n  string(8) \"59025947\"\n  [\"type\"]=>\n  string(9) \"on-memory\"\n  [\"path\"]=>\n  string(1) \"*\"\n  [\"rnum\"]=>\n  string(1) \"4\"\n  [\"size\"]=>\n  string(6) \"262856\"\n  [\"bigend\"]=>\n  string(1) \"0\"\n  [\"fd\"]=>\n  string(1) \"5\"\n  [\"loadavg\"]=>\n  string(8) \"0.000000\"\n  [\"memsize\"]=>\n  string(8) \"77328384\"\n  [\"memrss\"]=>\n  string(7) \"1183744\"\n  [\"ru_real\"]=>\n  string(13) \"162776.042152\"\n  [\"ru_user\"]=>\n  string(8) \"0.476029\"\n  [\"ru_sys\"]=>\n  string(8) \"8.652540\"\n}"}],"tokyotyrant::vanish":[{"title":"TokyoTyrant::vanish() example","source":"$tt = new TokyoTyrant(\"localhost\");\n$tt->vanish();","output":null}],"tokyotyrantiterator::__construct":[{"title":"TokyoTyrantIterator::__construct() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Passing null to put generates a new uid *\/\n$index = $tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n\n\/* Construct an iterator *\/\n$it = new TokyoTyrantIterator($tt);\n\nforeach ($it as $value) {\n    var_dump($value);\n}","output":"array(2) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n}"}],"tokyotyrantquery::addcond":[{"title":"TokyoTyrantQuery::addCond() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"not here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Dump the search results *\/\nvar_dump($query->search());","output":"array(2) {\n  [1]=>\n  array(2) {\n    [\"column1\"]=>\n    string(9) \"some data\"\n    [\"column2\"]=>\n    string(14) \"something here\"\n  }\n  [4]=>\n  array(2) {\n    [\"column45\"]=>\n    string(11) \"random data\"\n    [\"column2\"]=>\n    string(25) \"something along the lines\"\n  }\n}"}],"tokyotyrantquery::__construct":[{"title":"TokyoTyrantQuery::__construct() example","source":"$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n$query = new TokyoTyrantQuery($tt);\n\n\/* Work with $query *\/","output":null}],"tokyotyrantquery::count":[{"title":"TokyoTyrantQuery::count() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"not here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Count the results *\/\nvar_dump($query->count());","output":"int(2)"}],"tokyotyrantquery::current":[{"title":"TokyoTyrantQuery iterator example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"foobar here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Iterate the results *\/\nforeach ($query as $key => $value) {\n    echo \"pk: $key, columns: \", count($value) ,\"\\n\";\n}","output":"pk: 1, columns: 2\npk: 4, columns: 2"}],"tokyotyrantquery::hint":[{"title":"TokyoTyrantQuery::hint example","source":"$tt = new TokyoTyrantTable(\"localhost\", 1979);\n$tt->vanish();\n\nfor ($i = 0; $i < 11; $i++) {\n     $tt->put(null, array('a_col' => 'a' . $i, 'b_col' => 'b' . $i));\n}\n\n$query = $tt->getQuery();\n$query->addCond('a_col', TokyoTyrant::RDBQC_STRBW, 'a');\n\n$query->search();\nvar_dump($query->hint());","output":"string(72) \"\nscanning the whole table\nresult set size: 11\nleaving the natural order\n\""}],"tokyotyrantquery::key":[{"title":"TokyoTyrantQuery iterator example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"foobar here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Iterate the results *\/\nforeach ($query as $key => $value) {\n    echo \"pk: $key, columns: \", count($value) ,\"\\n\";\n}","output":"pk: 1, columns: 2\npk: 4, columns: 2"}],"tokyotyrantquery::metasearch":[{"title":"TokyoTyrantQuery::metaSearch() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add test data *\/\n$tt->put('cherry',     array('color' => 'red'));\n$tt->put('strawberry', array('color' => 'red'));\n$tt->put('apple',      array('color' => 'green'));\n$tt->put('lemon',      array('color' => 'yellow'));\n\n\/* First query *\/\n$query = $tt->getQuery();\n$query->addCond('color', TokyoTyrant::RDBQC_STREQ, 'red')->setOrder('color', TokyoTyrant::RDBQO_STRASC);\n\n\/* Second query *\/\n$query1 = $tt->getQuery();\n$query1->addCond('color', TokyoTyrant::RDBQC_STREQ, 'yellow');\n\n\/* Get union between the queries *\/\nvar_dump($query->metaSearch(array($query1), TokyoTyrant::RDBMS_UNION));","output":"array(3) {\n  [\"cherry\"]=>\n  array(1) {\n    [\"color\"]=>\n    string(3) \"red\"\n  }\n  [\"strawberry\"]=>\n  array(1) {\n    [\"color\"]=>\n    string(3) \"red\"\n  }\n  [\"lemon\"]=>\n  array(1) {\n    [\"color\"]=>\n    string(6) \"yellow\"\n  }\n}"}],"tokyotyrantquery::next":[{"title":"TokyoTyrantQuery iterator example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"foobar here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Iterate the results *\/\nforeach ($query as $key => $value) {\n    echo \"pk: $key, columns: \", count($value) ,\"\\n\";\n}","output":"pk: 1, columns: 2\npk: 4, columns: 2"}],"tokyotyrantquery::out":[{"title":"TokyoTyrantQuery::out() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"foobar here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Remove matching records *\/\n$query->out();","output":null}],"tokyotyrantquery::rewind":[{"title":"TokyoTyrantQuery iterator example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"foobar here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Iterate the results *\/\nforeach ($query as $key => $value) {\n    echo \"pk: $key, columns: \", count($value) ,\"\\n\";\n}","output":"pk: 1, columns: 2\npk: 4, columns: 2"}],"tokyotyrantquery::search":[{"title":"TokyoTyrantQuery::search() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"not here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Dump the search results *\/\nvar_dump($query->search());","output":"array(2) {\n  [1]=>\n  array(2) {\n    [\"column1\"]=>\n    string(9) \"some data\"\n    [\"column2\"]=>\n    string(14) \"something here\"\n  }\n  [4]=>\n  array(2) {\n    [\"column45\"]=>\n    string(11) \"random data\"\n    [\"column2\"]=>\n    string(25) \"something along the lines\"\n  }\n}"}],"tokyotyrantquery::valid":[{"title":"TokyoTyrantQuery iterator example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Add rows *\/\n$tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"something here\"));\n$tt->put(null, array(\"column1\" => \"more data\", \"column2\" => \"best data this far\"));\n$tt->put(null, array(\"column1\" => \"again data\", \"column3\" => \"foobar here\"));\n$tt->put(null, array(\"column45\" => \"random data\", \"column2\" => \"something along the lines\"));\n$tt->put(null, array(\"column21\" => \"test data\", \"column2\" => \"generating..\"));\n$tt->put(null, array(\"column1\" => \"foobar data\", \"column2\" => \"value here\"));\n\n\/* Get a new query object *\/\n$query = $tt->getQuery();\n\n\/* Add a search condition *\/\n$query->addCond(\"column2\", TokyoTyrant::RDBQC_STROR, \"something\");\n\n\/* Iterate the results *\/\nforeach ($query as $key => $value) {\n    echo \"pk: $key, columns: \", count($value) ,\"\\n\";\n}","output":"pk: 1, columns: 2\npk: 4, columns: 2"}],"tokyotyranttable::genuid":[{"title":"TokyoTyrantTable::genUid() example","source":"$tt = new TokyoTyrantTable(\"localhost\", 1122);\n\necho $tt->genUid();","output":4}],"tokyotyranttable::get":[{"title":"TokyoTyrantTable::get() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Passing null to put generates a new uid *\/\n$index = $tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));","output":"array(2) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n}"}],"tokyotyranttable::getiterator":[{"title":"TokyoTyrantTable::getIterator() example","source":"$tt = new TokyoTyrantTable(\"localhost\");\n$it = $tt->getIterator();\n\nforeach ($it as $k => $v) {\n  var_dump($k, $v);\n}","output":null}],"tokyotyranttable::getquery":[{"title":"TokyoTyrantTable::getQuery() example","source":"\/* Connect to a table database *\/\n$table = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Put a few rows *\/\n$table->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n$table->put(null, array(\"something\" => \"value\", \"data\" => \"good data\"));\n\n\/* Get query object *\/\n$query = $table->getQuery();\n\n\/* Add condition to query *\/\n$query->addCond('data', TokyoTyrant::RDBQC_STREQ, 'good data');\n\n\/* Get matching rows *\/\nvar_dump($query->search());","output":"array(1) {\n  [11]=>\n  array(2) {\n    [\"something\"]=>\n    string(5) \"value\"\n    [\"data\"]=>\n    string(9) \"good data\"\n  }\n}"}],"tokyotyranttable::out":[{"title":"TokyoTyrantTable::out() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Passing null to put generates a new uid *\/\n$index = $tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n\n\/* Delete the row *\/\n$tt->out($index);","output":null}],"tokyotyranttable::put":[{"title":"TokyoTyrantTable::put() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Passing null to put generates a new uid *\/\n$index = $tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));\n\n\/* Modify an existing row *\/\n$tt->put($index, array(\"column1\" => \"other data\", \"column2\" => \"better data\"));\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));","output":"array(2) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n}\narray(2) {\n  [\"column1\"]=>\n  string(10) \"other data\"\n  [\"column2\"]=>\n  string(11) \"better data\"\n}"}],"tokyotyranttable::putcat":[{"title":"TokyoTyrantTable::putCat() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Passing null to put generates a new uid *\/\n$index = $tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));\n\n\/* Modify an existing row *\/\n$tt->putcat($index, array(\"column1\" => \"something new\", \"new_column\" => \"other data\"));\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));","output":"array(2) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n}\narray(3) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n  [\"new_column\"]=>\n  string(10) \"other data\"\n}"}],"tokyotyranttable::putkeep":[{"title":"TokyoTyrantTable::putKeep() example","source":"\/* Connect to a table database *\/\n$tt = new TokyoTyrantTable(\"localhost\", 1979);\n\n\/* Passing null to put generates a new uid *\/\n$index = $tt->put(null, array(\"column1\" => \"some data\", \"column2\" => \"more data\"));\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));\n\ntry {\n    $tt->putKeep($index, array(\"column1\" => \"something new\", \"new_column\" => \"other data\"));\n} catch (TokyoTyrantException $e) {\n    if ($e->getCode() === TokyoTyrant::TTE_KEEP) {\n        echo \"Existing record! Not modified\\n\";\n    } else {\n        echo \"Error: \" , $e->getMessage() , \"\\n\"; \n    }\n}\n\n\/* Get the row back *\/\nvar_dump($tt->get($index));","output":"array(2) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n}\nExisting record! Not modified\narray(2) {\n  [\"column1\"]=>\n  string(9) \"some data\"\n  [\"column2\"]=>\n  string(9) \"more data\"\n}"}],"transliterator::transliterate":[{"title":"Converting escaped UTF-16 code units","source":"$s = \"\\u304A\\u65E9\\u3046\\u3054\\u3056\\u3044\\u307E\\u3059\";\necho transliterator_transliterate(\"Hex-Any\/Java\", $s), \"\\n\";\n\n\/\/now the reverse operation with a supplementary character\n$supplChar = html_entity_decode('&#x1D11E;');\necho mb_strlen($supplChar, \"UTF-8\"), \"\\n\";\n$encSupplChar = transliterator_transliterate(\"Any-Hex\/Java\", $supplChar);\n\/\/echoes two encoded UTF-16 code units\necho $encSupplChar, \"\\n\";\n\/\/and back\necho transliterator_transliterate(\"Hex-Any\/Java\", $encSupplChar), \"\\n\";","output":"お早うございます\n1\n\\uD834\\uDD1E\n𝄞"}],"varnishadmin::__construct":[{"title":"VarnishAdmin::__construct() example","source":"$args = array(\n        VARNISH_CONFIG_HOST => \"::1\",\n        VARNISH_CONFIG_PORT => 6082,\n        VARNISH_CONFIG_SECRET => \"5174826b-8595-4958-aa7a-0609632ad7ca\",\n        VARNISH_CONFIG_TIMEOUT => 300,\n    );\n    $va = new VarnishAdmin($args);","output":null}],"weakref::acquire":[{"title":"Weakref::acquire() example","source":"class MyClass {\n    public function __destruct() {\n        echo \"Destroying object!\\n\";\n    }\n}\n\n$o1 = new MyClass;\n\n$r1 = new Weakref($o1);\n\n$r1->acquire();\n\necho \"Unsetting o1...\\n\";\nunset($o1);\n\n$o2 = $r1->get();\n\n$r1->release();\n\necho \"Unsetting o2...\\n\";\nunset($o2);","output":"Unsetting o1...\nUnsetting o2...\nDestroying object!"},{"title":"Nested acquire\/release example","source":"class MyClass {\n    public function __destruct() {\n        echo \"Destroying object!\\n\";\n    }\n}\n\n$o1 = new MyClass;\n\n$r1 = new Weakref($o1);\n\necho \"Acquiring...\\n\";\n$r1->acquire();\n\necho \"  Unsetting...\\n\";\nunset($o1);\n\necho \"  Acquiring...\\n\";\n$r1->acquire();\n\necho \"    Acquiring...\\n\";\n$r1->acquire();\n\necho \"    Releasing...\\n\";\n$r1->release();\n\necho \"  Releasing...\\n\";\n$r1->release();\n\necho \"Releasing...\\n\";\n$r1->release();","output":"Acquiring...\n  Unsetting...\n  Acquiring...\n    Acquiring...\n    Releasing...\n  Releasing...\nReleasing...\nDestroying object!"}],"weakref::release":[{"title":"Weakref::release() example","source":"class MyClass {\n    public function __destruct() {\n        echo \"Destroying object!\\n\";\n    }\n}\n\n$o1 = new MyClass;\n\n$r1 = new Weakref($o1);\n\n$r1->acquire();\n\necho \"Unsetting o1...\\n\";\nunset($o1);\n\n$o2 = $r1->get();\n\n$r1->release();\n\necho \"Unsetting o2...\\n\";\nunset($o2);","output":"Unsetting o1...\nUnsetting o2...\nDestroying object!"}],"worker::collect":[{"title":"A basic example of Worker::collect()","source":"$worker = new Worker();\n\necho \"There are currently {$worker->collect()} tasks on the stack to be collected\\n\";\n\nfor ($i = 0; $i < 15; ++$i) {\n    $worker->stack(new class extends Threaded {});\n}\n\necho \"There are {$worker->collect()} tasks remaining on the stack to be collected\\n\";\n\n$worker->start();\n\nwhile ($worker->collect()); \/\/ blocks until all tasks have finished executing\n\necho \"There are now {$worker->collect()} tasks on the stack to be collected\\n\";\n\n$worker->shutdown();","output":"There are currently 0 tasks on the stack to be collected\nThere are 15 tasks remaining on the stack to be collected\nThere are now 0 tasks on the stack to be collected"}],"worker::getstacked":[{"title":"A basic example of Worker::getStacked","source":"$worker = new Worker();\n\nfor ($i = 0; $i < 5; ++$i) {\n    $worker->stack(new class extends Threaded {});\n}\n\necho \"There are {$worker->getStacked()} stacked tasks\\n\";","output":"There are 5 stacked tasks"}],"worker::isshutdown":[{"title":"Detect the state of a worker","source":"$worker = new Worker();\n$worker->start();\n\nvar_dump($worker->isShutdown());\n\n$worker->shutdown();\n\nvar_dump($worker->isShutdown());","output":"bool(false)\nbool(true)"}],"worker::isworking":[{"title":"Detect the state of a Worker","source":"$my = new Worker();\n$my->start();\n\/* ... *\/\nif ($my->isWorking()) {\n    \/* ... the Worker is busy executing another object *\/\n}","output":null}],"worker::shutdown":[{"title":"Shutdown the referenced worker","source":"$my = new Worker();\n$my->start();\n\/* stack\/execute tasks *\/\nvar_dump($my->shutdown());","output":"bool(true)"}],"worker::stack":[{"title":"Stacking a task for execution onto a worker","source":"$worker = new Worker();\n$work = new class extends Threaded {};\n\nvar_dump($worker->stack($work));","output":"int(1)"}],"worker::unstack":[{"title":"Removing objects from the stack of Workers","source":"$my = new Worker();\n$work = new class extends Threaded {};\n\nvar_dump($my->stack($work));\nvar_dump($my->unstack());","output":"int(1)\nint(0)"}],"xmlreader::isvalid":[{"title":"Validating XML","source":"$xml = XMLReader::open('test.xml');\n\n\/\/ The validate parser option must be enabled for \n\/\/ this method to work properly\n$xml->setParserProperty(XMLReader::VALIDATE, true);\n\nvar_dump($xml->isValid());","output":null}],"xsltprocessor::hasexsltsupport":[{"title":"Testing EXSLT support","source":"$proc = new XSLTProcessor;\nif (!$proc->hasExsltSupport()) {\n    die('EXSLT support not available');\n}\n\n\/\/ do EXSLT stuff here ..","output":null}],"xsltprocessor::registerphpfunctions":[{"title":"Simple PHP Function call from a stylesheet","source":"$xml = <<<EOB\n<allusers>\n <user>\n  <uid>bob<\/uid>\n <\/user>\n <user>\n  <uid>joe<\/uid>\n <\/user>\n<\/allusers>\nEOB;\n$xsl = <<<EOB\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\" \n     xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\n     xmlns:php=\"http:\/\/php.net\/xsl\">\n<xsl:output method=\"html\" encoding=\"utf-8\" indent=\"yes\"\/>\n <xsl:template match=\"allusers\">\n  <html><body>\n    <h2>Users<\/h2>\n    <table>\n    <xsl:for-each select=\"user\">\n      <tr><td>\n        <xsl:value-of\n             select=\"php:function('ucfirst',string(uid))\"\/>\n      <\/td><\/tr>\n    <\/xsl:for-each>\n    <\/table>\n  <\/body><\/html>\n <\/xsl:template>\n<\/xsl:stylesheet>\nEOB;\n$xmldoc = DOMDocument::loadXML($xml);\n$xsldoc = DOMDocument::loadXML($xsl);\n\n$proc = new XSLTProcessor();\n$proc->registerPHPFunctions();\n$proc->importStyleSheet($xsldoc);\necho $proc->transformToXML($xmldoc);","output":null}],"xsltprocessor::setprofiling":[{"title":"Example profiling output","source":"\/\/ Load the XML source\n$xml = new DOMDocument;\n$xml->load('collection.xml');\n\n$xsl = new DOMDocument;\n$xsl->load('collection.xsl');\n\n\/\/ Configure the transformer\n$proc = new XSLTProcessor;\n$proc->setProfiling('profiling.txt');\n$proc->importStyleSheet($xsl); \/\/ attach the xsl rules\n\necho trim($proc->transformToDoc($xml)->firstChild->wholeText);","output":"number               match                name      mode  Calls Tot 100us Avg\n\n    0                   cd                                    2      3      1\n    1           collection                                    1      1      1\n\n                         Total                                3      4"}],"xsltprocessor::transformtodoc":[{"title":"Transforming to a DOMDocument","source":"\/\/ Load the XML source\n$xml = new DOMDocument;\n$xml->load('collection.xml');\n\n$xsl = new DOMDocument;\n$xsl->load('collection.xsl');\n\n\/\/ Configure the transformer\n$proc = new XSLTProcessor;\n$proc->importStyleSheet($xsl); \/\/ attach the xsl rules\n\necho trim($proc->transformToDoc($xml)->firstChild->wholeText);","output":"Hey! Welcome to Nicolas Eliaszewicz's sweet CD collection!"}],"xsltprocessor::transformtouri":[{"title":"Transforming to a HTML file","source":"\/\/ Load the XML source\n$xml = new DOMDocument;\n$xml->load('collection.xml');\n\n$xsl = new DOMDocument;\n$xsl->load('collection.xsl');\n\n\/\/ Configure the transformer\n$proc = new XSLTProcessor;\n$proc->importStyleSheet($xsl); \/\/ attach the xsl rules\n\n$proc->transformToURI($xml, 'file:\/\/\/tmp\/out.html');","output":null}],"xsltprocessor::transformtoxml":[{"title":"Transforming to a string","source":"\/\/ Load the XML source\n$xml = new DOMDocument;\n$xml->load('collection.xml');\n\n$xsl = new DOMDocument;\n$xsl->load('collection.xsl');\n\n\/\/ Configure the transformer\n$proc = new XSLTProcessor;\n$proc->importStyleSheet($xsl); \/\/ attach the xsl rules\n\necho $proc->transformToXML($xml);","output":"Hey! Welcome to Nicolas Eliaszewicz's sweet CD collection!\n\n<h1>Fight for your mind<\/h1><h2>by Ben Harper - 1995<\/h2><hr>\n<h1>Electric Ladyland<\/h1><h2>by Jimi Hendrix - 1997<\/h2><hr>"}],"yaf_action_abstract::execute":[{"title":"Yaf_Action_Abstract::execute()example","source":"\/** \n * A controller example\n *\/\nclass ProductController extends Yaf_Controller_Abstract {\n      protected $actions = array(\n          \"index\" => \"actions\/Index.php\",\n      );\n}","output":null},{"title":"Yaf_Action_Abstract::execute()example","source":"\/** \n * ListAction\n *\/\nclass ListAction extends Yaf_Action_Abstract {\n     public function execute ($name, $id) {\n         assert($name == $this->getRequest()->getParam(\"name\"));\n         assert($id   == $this->getRequest()->getParam(\"id\"));\n     }\n}","output":"\/**\n * Now assuming we are using the Yaf_Route_Static route \n * for request: http:\/\/yourdomain\/product\/list\/name\/yaf\/id\/22\n * will result:\n *\/\n bool(true)\n bool(true)"}],"yaf_application::bootstrap":[{"title":"A Bootstrap()example","source":"\/**\n * This file should be under the APPLICATION_PATH . \"\/application\/\"(which was defined in the config passed to Yaf_Application).\n * and named Bootstrap.php,  so the Yaf_Application can find it \n *\/\nclass Bootstrap extends Yaf_Bootstrap_Abstract {\n    function _initConfig(Yaf_Dispatcher $dispatcher) {\n        echo \"1st called\\n\";\n    }\n\n    function _initPlugin($dispatcher) {\n        echo \"2nd called\\n\";\n    }\n}","output":null},{"title":"Yaf_Application::bootstrap()example","source":"defined('APPLICATION_PATH')                  \/\/ APPLICATION_PATH will be used in the ini config file\n    || define('APPLICATION_PATH', __DIR__)); \/\/__DIR__ was introduced after PHP 5.3\n\n$application = new Yaf_Application(APPLICATION_PATH.'\/conf\/application.ini');\n$application->bootstrap();","output":"1st called\n2nd called"}],"yaf_application::clearlasterror":[{"title":"Yaf_Application::clearLastError()example","source":"function error_handler($errno, $errstr, $errfile, $errline) {\n   Yaf_Application::app()->clearLastError();\n   var_dump(Yaf_Application::app()->getLastErrorNo());\n}\n \n$config = array(                   \n \"application\" => array(\n   \"directory\" => \"\/tmp\/notexists\",\n     \"dispatcher\" => array(\n       \"throwException\" => 0, \/\/trigger error instead of throw exception when error occure\n      ),\n  ),\n);\n  \n$app = new Yaf_Application($config);\n$app->getDispatcher()->setErrorHandler(\"error_handler\", E_RECOVERABLE_ERROR);\n$app->run();","output":"int(0)"}],"yaf_application::__construct":[{"title":"A ini config file example","source":"Yaf_Application constructor\n Yaf_Application::__clone\n Yaf_Application::__destruct\n Yaf_Application\n PHP Manual\n\n \n  Yaf_Application::__construct\n  (Yaf >=1.0.0)Yaf_Application::__construct — Yaf_Application constructor\n\n \n\n \n  Description\n  \n   public Yaf_Application::__construct\n    ( mixed $config\n   [, string $envrion\n  ] )\n\n  \n   Instance a Yaf_Application.\n  \n\n\n\n \n\n\n \n  Parameters\n  \nconfig\n\n    \n\n     \n       A ini config file path, or a config array\n     \n     \n       If is a ini config file, there should be a section named as the one\n       defined by yaf.environ, which\n       is \"product\" by default.\n      Note: \n       \n        If you use a ini configuration file as your applicatioin's config\n        container. you would open the yaf.cache_config to improve\n        performance.\n       \n      \n     \n     \n       And the config entry(and there default value) list blow:\n      \n       Example #1 A ini config file example\n       \n[product]\n;this one should alway be defined, and have no default value\napplication.directory=APPLICATION_PATH\n\n;following configs have default value, you may no need to define them\napplication.library = APPLICATION_PATH . \"\/library\"\napplication.dispatcher.throwException=1\napplication.dispatcher.catchException=1\n\napplication.baseUri=\"\"\n\n;the php script ext name\nap.ext=php\n\n;the view template ext name\nap.view.ext=phtml\n\nap.dispatcher.defaultModuel=Index\nap.dispatcher.defaultController=Index\nap.dispatcher.defaultAction=index\n\n;defined modules\nap.modules=Index\n\n       \n\n      \n     \n    \n\n   \n   \n    \nenvrion\n\n    \n\n     \n      Which section will be loaded as the final config\n     \n    \n\n   \n  \n\n\n \n  Return Values\n  \n\n  \n \n\n\n \n  Examples\n  \n   Example #2 Yaf_Application::__construct()example\n   \n\n<?php\ndefined('APPLICATION_PATH')                  \/\/ APPLICATION_PATH will be used in the ini config file\n    || define('APPLICATION_PATH', __DIR__)); \/\/__DIR__ was introduced after PHP 5.3\n\n$application = new Yaf_Application(APPLICATION_PATH.'\/conf\/application.ini');\n$application->bootstrap()->run();\n?>\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\n\n   \n  \n  \n   Example #3 Yaf_Application::__construct()example\n   \n\n<?php\n$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\n$application->bootstrap()->run();\n?>\n\n\n   \n\n   The above example will output\nsomething similar to:\n   \n\n\n   \n  \n \n\n\n \n  See Also\n  Yaf_Config_Ini\n  \n\n\n\n Yaf_Application::__clone\n Yaf_Application::__destruct\n Yaf_Application\n PHP Manual","output":null},{"title":"Yaf_Application::__construct()example","source":"defined('APPLICATION_PATH')                  \/\/ APPLICATION_PATH will be used in the ini config file\n    || define('APPLICATION_PATH', __DIR__)); \/\/__DIR__ was introduced after PHP 5.3\n\n$application = new Yaf_Application(APPLICATION_PATH.'\/conf\/application.ini');\n$application->bootstrap()->run();","output":null},{"title":"Yaf_Application::__construct()example","source":"$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\n$application->bootstrap()->run();","output":null}],"yaf_application::environ":[{"title":"Yaf_Application::environ()example","source":"$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\nprint_r($application->environ());","output":"product"}],"yaf_application::execute":[{"title":"Yaf_Application::execute()example","source":"function main($argc, $argv) {\n}\n\n$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\n$application->execute(\"main\", $argc,  $argv);","output":null}],"yaf_application::getconfig":[{"title":"Yaf_Application::getConfig()example","source":"$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\nprint_r($application->getConfig());","output":"Yaf_Config_Simple Object\n(\n    [_config:protected] => Array\n        (\n            [application] => Array\n                (\n                    [directory] => \/home\/laruence\/local\/www\/htdocs\/application\n                )\n\n        )\n\n    [_readonly:protected] => 1\n)"}],"yaf_application::getdispatcher":[{"title":"Yaf_Application::getDispatcher()example","source":"$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\nprint_r($application->getDispatcher());","output":"Yaf_Dispatcher Object\n(\n    [_router:protected] => Yaf_Router Object\n        (\n            [_routes:protected] => Array\n                (\n                    [_default] => Yaf_Route_Static Object\n                        (\n                        )\n\n                )\n\n            [_current:protected] => \n        )\n\n    [_view:protected] => \n    [_request:protected] => Yaf_Request_Http Object\n        (\n            [module] => \n            [controller] => \n            [action] => \n            [method] => Cli\n            [params:protected] => Array\n                (\n                )\n\n            [language:protected] => \n            [_exception:protected] => \n            [_base_uri:protected] => \n            [uri:protected] => \n            [dispatched:protected] => \n            [routed:protected] => \n        )\n\n    [_plugins:protected] => Array\n        (\n        )\n\n    [_auto_render:protected] => 1\n    [_return_response:protected] => \n    [_instantly_flush:protected] => \n    [_default_module:protected] => Index\n    [_default_controller:protected] => Index\n    [_default_action:protected] => index\n    [_response] => Yaf_Response_Cli Object\n        (\n            [_header:protected] => Array\n                (\n                )\n\n            [_body:protected] => \n            [_sendheader:protected] => \n        )\n\n)"}],"yaf_application::getlasterrormsg":[{"title":"Yaf_Application::getLastErrorMsg()example","source":"function error_handler($errno, $errstr, $errfile, $errline) {\n   var_dump(Yaf_Application::app()->getLastErrorMsg());\n}\n\n$config = array(                   \n \"application\" => array(\n   \"directory\" => \"\/tmp\/notexists\",\n     \"dispatcher\" => array(\n       \"throwException\" => 0, \/\/trigger error instead of throw exception when error occure\n      ),\n  ),\n);\n\n$app = new Yaf_Application($config);\n$app->getDispatcher()->setErrorHandler(\"error_handler\", E_RECOVERABLE_ERROR);\n$app->run();","output":"string(69) \"Could not find controller script \/tmp\/notexists\/controllers\/Index.php\""}],"yaf_application::getlasterrorno":[{"title":"Yaf_Application::getLastErrorNo()example","source":"function error_handler($errno, $errstr, $errfile, $errline) {\n   var_dump(Yaf_Application::app()->getLastErrorNo());\n   var_dump(Yaf_Application::app()->getLastErrorNo() == YAF_ERR_NOTFOUND_CONTROLLER);\n}\n\n$config = array(\n  \"application\" => array(\n   \"directory\" => \"\/tmp\/notexists\",\n     \"dispatcher\" => array(\n       \"throwException\" => 0, \/\/trigger error instead of throw exception when error occure\n      ),\n  ),\n);\n\n$app = new Yaf_Application($config);\n$app->getDispatcher()->setErrorHandler(\"error_handler\", E_RECOVERABLE_ERROR);\n$app->run();","output":"int(516)\nbool(true)"}],"yaf_application::getmodules":[{"title":"Yaf_Application::getModules()example","source":"$config = array(\n    \"application\" => array(\n        \"directory\" => realpath(dirname(__FILE__)) . \"\/application\",\n    ),\n);\n\n\/** Yaf_Application *\/\n$application = new Yaf_Application($config);\nprint_r($application->getModules());","output":"Array\n(\n    [0] => Index\n)"}],"yaf_dispatcher::autorender":[{"title":"Yaf_Dispatcher::autoRender()example","source":"class IndexController extends Yaf_Controller_Abstract {\n     \/* init method will be called as soon as a controller is initialized *\/ \n     public function init() {\n         if ($this->getRequest()->isXmlHttpRequest()) {\n             \/\/do not call render for ajax request\n             \/\/we will outpu a json string\n             Yaf_Dispatcher::getInstance()->autoRender(FALSE);\n         }\n     } \n\n}","output":null}],"yaf_dispatcher::catchexception":[{"title":"Yaf_Dispatcher::catchException()example","source":"\/* if you defined a ErrorController like following *\/\n<?php\nclass ErrorController extends Yaf_Controller_Abstract {\n     \/** \n      * you can also call to Yaf_Request_Abstract::getException to get the \n      * un-caught exception.\n      *\/\n     public function errorAction($exception) {\n        \/* error occurs *\/\n        switch ($exception->getCode()) {\n            case YAF_ERR_NOTFOUND_MODULE:\n            case YAF_ERR_NOTFOUND_CONTROLLER:\n            case YAF_ERR_NOTFOUND_ACTION:\n            case YAF_ERR_NOTFOUND_VIEW:\n                echo 404, \":\", $exception->getMessage();\n                break;\n            default :\n                $message = $exception->getMessage();\n                echo 0, \":\", $exception->getMessage();\n                break;\n        }\n     } \n}","output":"\/* now if some error occur, assuming access a non-exists controller(or you can throw a exception yourself): *\/\n404:Could not find controller script **\/application\/controllers\/No-exists-controller.php"}],"yaf_dispatcher::registerplugin":[{"title":"Yaf_Dispatcher::registerPlugin()example","source":"class Bootstrap extends Yaf_Bootstrap_Abstract {\n  public function _initPlugin(Yaf_Dispatcher $dispatcher) {\n    \/**\n    * Yaf assumes plugin scripts under [application.directory] .  \"\/plugins\" \n    * for this case, it will be:\n    * [application.directory] . \"\/plugins\/\" . \"User\" . [application.ext]\n    *\/ \n    $user = new UserPlugin();\n    $dispatcher->registerPlugin($user);\n  }\n}","output":null}],"yaf_dispatcher::setview":[{"title":"A custom View engine()example","source":"require \"\/path\/to\/smarty\/Smarty.class.php\";\n\nclass Smarty_Adapter implements Yaf_View_Interface\n{\n    \/**\n     * Smarty object\n     * @var Smarty\n     *\/\n    public $_smarty;\n \n    \/**\n     * Constructor\n     *\n     * @param string $tmplPath\n     * @param array $extraParams\n     * @return void\n     *\/\n    public function __construct($tmplPath = null, $extraParams = array()) {\n        $this->_smarty = new Smarty;\n \n        if (null !== $tmplPath) {\n            $this->setScriptPath($tmplPath);\n        }\n \n        foreach ($extraParams as $key => $value) {\n            $this->_smarty->$key = $value;\n        }\n    }\n \n    \/**\n     * Set the path to the templates\n     *\n     * @param string $path The directory to set as the path.\n     * @return void\n     *\/\n    public function setScriptPath($path)\n    {\n        if (is_readable($path)) {\n            $this->_smarty->template_dir = $path;\n            return;\n        }\n \n        throw new Exception('Invalid path provided');\n    }\n \n    \/**\n     * Assign a variable to the template\n     *\n     * @param string $key The variable name.\n     * @param mixed $val The variable value.\n     * @return void\n     *\/\n    public function __set($key, $val)\n    {\n        $this->_smarty->assign($key, $val);\n    }\n \n    \/**\n     * Allows testing with empty() and isset() to work\n     *\n     * @param string $key\n     * @return boolean\n     *\/\n    public function __isset($key)\n    {\n        return (null !== $this->_smarty->get_template_vars($key));\n    }\n \n    \/**\n     * Allows unset() on object properties to work\n     *\n     * @param string $key\n     * @return void\n     *\/\n    public function __unset($key)\n    {\n        $this->_smarty->clear_assign($key);\n    }\n \n    \/**\n     * Assign variables to the template\n     *\n     * Allows setting a specific key to the specified value, OR passing\n     * an array of key => value pairs to set en masse.\n     *\n     * @see __set()\n     * @param string|array $spec The assignment strategy to use (key or\n     * array of key => value pairs)\n     * @param mixed $value (Optional) If assigning a named variable,\n     * use this as the value.\n     * @return void\n     *\/\n    public function assign($spec, $value = null) {\n        if (is_array($spec)) {\n            $this->_smarty->assign($spec);\n            return;\n        }\n \n        $this->_smarty->assign($spec, $value);\n    }\n \n    \/**\n     * Clear all assigned variables\n     *\n     * Clears all variables assigned to Yaf_View either via\n     * {@link assign()} or property overloading\n     * ({@link __get()}\/{@link __set()}).\n     *\n     * @return void\n     *\/\n    public function clearVars() {\n        $this->_smarty->clear_all_assign();\n    }\n \n    \/**\n     * Processes a template and returns the output.\n     *\n     * @param string $name The template to process.\n     * @return string The output.\n     *\/\n    public function render($name, $value = NULL) {\n        return $this->_smarty->fetch($name);\n    }\n\n    public function display($name, $value = NULL) {\n        echo $this->_smarty->fetch($name);\n    }\n\n}","output":null},{"title":"Yaf_Dispatcher::setView()example","source":"class Bootstrap extends Yaf_Bootstrap_Abstract {\n\n    \/**\n     * there are some config for smarty in the config:\n     *\n     * smarty.left_delimiter   = \"{{\"\n     * smarty.right_delimiter  = \"}}\"\n     * smarty.template_dir     = APPLICATION_PATH \"\/views\/scripts\/\"\n     * smarty.compile_dir      = APPLICATION_PATH \"\/views\/templates_c\/\"\n     * smarty.cache_dir        = APPLICATION_PATH \"\/views\/templates_d\/\"\n     *\n     *\/\n    public function _initConfig() {\n        $config = Yaf_Application::app()->getConfig();\n        Yaf_Registry::set(\"config\", $config);\n    }\n\n    public function _initLocalName() {\n        \/** we put class Smarty_Adapter under the local library directory *\/\n        Yaf_Loader::getInstance()->registerLocalNamespace('Smarty');\n    }\n\n    public function _initSmarty(Yaf_Dispatcher $dispatcher) {\n        $smarty = new Smarty_Adapter(null, Yaf_Registry::get(\"config\")->get(\"smarty\"));\n        $dispatcher->setView($smarty);\n        \/* now the Smarty view engine become the default view engine of Yaf *\/\n    }\n}","output":null}],"yaf_dispatcher::throwexception":[{"title":"Yaf_Dispatcher::throwexception()example","source":"$config = array(\n    'application' => array(\n        'directory' => dirname(__FILE__),\n    ),\n);\n$app = new Yaf_Application($config);\n\n$app->getDispatcher()->throwException(true);\n\ntry {\n    $app->run();\n} catch (Yaf_Exception $e) {\n    var_dump($e->getMessage());\n}","output":"string(59) \"Could not find controller script \/tmp\/controllers\/Index.php\""},{"title":"Yaf_Dispatcher::throwexception()example","source":"$config = array(\n    'application' => array(\n        'directory' => dirname(__FILE__),\n    ),\n);\n$app = new Yaf_Application($config);\n\n$app->getDispatcher()->throwException(false);\n\n$app->run();","output":"PHP Catchable fatal error:  Yaf_Application::run(): Could not find controller script \/tmp\/controllers\/Index.php in \/tmp\/1.php on line 12"}],"yaf_loader::registerlocalnamespace":[{"title":"Yaf_Loader::registerLocalNamespace()example","source":"$loader = Yaf_Loader::getInstance('\/local\/library\/', '\/global\/library');\n$loader->registerLocalNamespace(\"Baidu\");\n$loader->registerLocalNamespace(array(\"Sina\", \"Weibo\"));\n\n$loader->autoload(\"Baidu_Name\"); \/\/ search in '\/local\/library\/'\n$loader->autoload(\"Sina\");       \/\/ search '\/local\/library\/'\n$loader->autoload(\"Global_Name\");\/\/ search in '\/global\/library\/'\n$loader->autoload(\"Foo_Bar\");    \/\/ search in '\/global\/library\/'","output":null}],"yaf_plugin_abstract::routershutdown":[{"title":"Yaf_Plugin_Abstract::routerShutdown()example","source":"class UserInitPlugin extends Yaf_Plugin_Abstract {\n\n    public function routerShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response) {\n        $controller = $request->getControllerName();\n\n        \/**\n         * Use access controller is unecessary for APIs\n         *\/\n        if (in_array(strtolower($controller), array(\n            'api',  \n        ))) {\n            return TRUE;\n        }\n       \n        if (Yaf_Session::getInstance()->has(\"login\")) {\n            return TRUE;\n        }\n \n        \/* Use access check failed, need to login *\/\n        $response->redirect(\"http:\/\/yourdomain.com\/login\/\");\n        return FALSE;\n    }","output":null}],"yaf_response_abstract::appendbody":[{"title":"Yaf_Response_Abstract::appendBody()example","source":"$response = new Yaf_Response_Http();\n\n$response->setBody(\"Hello\")->prependBody(\" World\");\n\necho $response;","output":"Hello World"}],"yaf_response_abstract::getbody":[{"title":"Yaf_Response_Abstract::getBody()example","source":"$response = new Yaf_Response_Http();\n\n$response->setBody(\"Hello\")->setBody(\" World\", \"footer\");\n\nvar_dump($response->getBody()); \/\/default \nvar_dump($response->getBody(Yaf_Response_Abstract::DEFAULT_BODY)); \/\/same as above\nvar_dump($response->getBody(\"footer\"));\nvar_dump($response->getBody(NULL)); \/\/get all","output":"string(5) \"Hello\"\nstring(5) \"Hello\"\nstring(6) \" World\"\narray(2) {\n  [\"content\"]=>\n  string(5) \"Hello\"\n  [\"footer\"]=>\n  string(6) \" World\"\n}"}],"yaf_response_abstract::prependbody":[{"title":"Yaf_Response_Abstract::prependBody()example","source":"$response = new Yaf_Response_Http();\n\n$response->setBody(\"World\")->prependBody(\"Hello \");\n\necho $response;","output":"Hello World"}],"yaf_response_abstract::response":[{"title":"Yaf_Response_Abstract::response()example","source":"$response = new Yaf_Response_Http();\n\n$response->setBody(\"Hello\")->setBody(\" World\", \"footer\");\n\n$response->response();","output":"Hello World"}],"yaf_response_abstract::setbody":[{"title":"Yaf_Response_Abstract::setBody()example","source":"$response = new Yaf_Response_Http();\n\n$response->setBody(\"Hello\")->setBody(\" World\", \"footer\");\n\nprint_r($response);\necho $response;","output":"Yaf_Response_Http Object\n(\n    [_header:protected] => Array\n        (\n        )\n\n    [_body:protected] => Array\n        (\n            [content] => Hello\n            [footer] =>  World\n        )\n\n    [_sendheader:protected] => 1\n    [_response_code:protected] => 200\n)\nHello World"}],"yaf_route_map::assemble":[{"title":"Yaf_Route_Map::assemble()example","source":"$router = new Yaf_Router();\n\n$route  = new Yaf_Route_Map();\n\n$router->addRoute(\"map\", $route);\n\nvar_dump($router->getRoute('map')->assemble(\n                        array(\n                                ':c' => 'foo_bar'\n                        ),\n                        array(\n                                'tkey1' => 'tval1',\n                                'tkey2' => 'tval2'\n                        )\n                   )\n);\n\n$route = new Yaf_Route_Map(true, '_');\n$router->addRoute(\"map\", $route);\n\nvar_dump($router->getRoute('map')->assemble(\n                        array(\n                                ':a' => 'foo_bar'\n                        ),\n                        array(\n                                'tkey1' => 'tval1',\n                                'tkey2' => 'tval2'\n                        )\n                   )\n);","output":"string(%d) \"\/foo\/bar?tkey1=tval1&tkey2=tval2\"\nstring(%d) \"\/foo\/bar\/_\/tkey1\/tval1\/tkey2\/tval2\""}],"yaf_route_map::__construct":[{"title":"Yaf_Route_Map()example","source":"\/**\n    * Add a map route to Yaf_Router route stack\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Map());","output":"\/* for http:\/\/yourdomain.com\/product\/foo\/bar\n * route will result in following values:\n *\/\narray(\n  \"controller\" => \"product_foo_bar\",\n)"},{"title":"Yaf_Route_Map()example","source":"\/**\n    * Add a map route to Yaf_Router route stack\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Map(true, \"_\"));","output":"\/* for http:\/\/yourdomain.com\/user\/list\/_\/foo\/22\n * route will result in following values:\n *\/\narray(\n    \"action\" => \"user_list\",\n)\n\n\/**\n * and request parameters:\n *\/\narray(\n  \"foo\"   => 22,\n)"},{"title":"Yaf_Route_Map()example","source":"\/**\n    * Add a map route to Yaf_Router route stack by calling addconfig\n    *\/\n    $config = array(\n        \"name\" => array(\n           \"type\"  => \"map\",         \/\/Yaf_Route_Map route\n           \"controllerPrefer\" => FALSE,\n           \"delimiter\"        => \"#!\", \n           ),\n    );\n    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(\n        new Yaf_Config_Simple($config));","output":null}],"yaf_route_regex::assemble":[{"title":"Yaf_Route_Regex::assemble()example","source":"$router = new Yaf_Router();\n\n$route  = new Yaf_Route_Regex(\n            \"#^\/product\/([^\/]+)\/([^\/])+#\",\n            array(\n                'controller' => \"product\",  \/\/route to product controller,\n                ),\n            array(),\n            array(),\n            '\/:m\/:c\/:a'\n        );\n\n$router->addRoute(\"regex\", $route);\n\nvar_dump($router->getRoute('regex')->assemble(\n            array(\n                ':m' => 'module',\n                ':c' => 'controller',\n                ':a' => 'action'\n                ),\n            array(\n                'tkey1' => 'tval1',\n                'tkey2' =>\n                'tval2'\n                )\n            )\n        );","output":"string(49) \"\/module\/controller\/action?tkey1=tval1&tkey2=tval2\""}],"yaf_route_regex::__construct":[{"title":"Yaf_Route_Regex()example","source":"\/**\n    * Add a regex route to Yaf_Router route stack\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Regex(\n           \"#^\/product\/([^\/]+)\/([^\/])+#\", \/\/match request uri leading \"\/product\"\n           array(\n               'controller' => \"product\",  \/\/route to product controller,\n           ),\n           array(\n              1 => \"name\",   \/\/ now you can call $request->getParam(\"name\")\n              2 => \"id\",     \/\/ to get the first captrue in the match pattern.\n           )\n        )\n    );","output":null},{"title":"Yaf_Route_Regex(as of 2.3.0)()example","source":"\/**\n    * Use match result as MVC name\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Regex(\n           \"#^\/product\/([^\/]+)\/([^\/])+#i\", \/\/match request uri leading \"\/product\"\n           array(\n              'controller' => \":name\", \/\/ route to :name, which is $1 in the match result as controller name\n           ),\n           array(\n              1 => \"name\",   \/\/ now you can call $request->getParam(\"name\")\n              2 => \"id\",     \/\/ to get the first captrue in the match pattern.\n           )\n        )\n    );","output":null},{"title":"Yaf_Route_Regex and named capture ground(as of 2.3.0)()example","source":"\/**\n    * Use match result as MVC name\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Regex(\n           \"#^\/product\/(?<name>[^\/]+)\/([^\/])+#i\", \/\/match request uri leading \"\/product\"\n           array(\n           'controller' => \":name\", \/\/ route to :name,\n                                    \/\/ which is named capture group 'name' in the match result as controller name\n           ),\n           array(\n              2 => \"id\",     \/\/ to get the first captrue in the match pattern.\n           )\n        )\n    );","output":null},{"title":"Yaf_Route_Regex()example","source":"\/**\n    * Add a regex route to Yaf_Router route stack by calling addconfig\n    *\/\n    $config = array(\n        \"name\" => array(\n           \"type\"  => \"regex\",          \/\/Yaf_Route_Regex route\n           \"match\" => \"#(.*)#\",         \/\/match arbitrary request uri\n           \"route\" => array(\n               'controller' => \"product\",  \/\/route to product controller,\n               'action'     => \"dummy\",    \/\/route to dummy action\n           ),\n           \"map\" => array(\n              1 => \"uri\",   \/\/ now you can call $request->getParam(\"uri\")\n           ),\n        ),\n    );\n    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(\n        new Yaf_Config_Simple($config));","output":null}],"yaf_route_rewrite::assemble":[{"title":"Yaf_Route_Rewrite::assemble()example","source":"router = new Yaf_Router();\n\n$route  = new Yaf_Route_Rewrite(\n                \"\/product\/:name\/:id\/*\",\n                array(\n                        'controller' => \"product\",\n                ),\n                array()\n);\n\n$router->addRoute(\"rewrite\", $route);\n\nvar_dump($router->getRoute('rewrite')->assemble(\n                        array(\n                                ':name' => 'foo',\n                                ':id' => 'bar',\n                                ':tmpkey1' => 'tmpval1'\n                        ),\n                        array(\n                                'tkey1' => 'tval1',\n                                'tkey2' => 'tval2'\n                             )\n                        )\n);","output":"string(57) \"\/product\/foo\/bar\/tmpkey1\/tmpval1\/?tkey1=tval1&tkey2=tval2\""}],"yaf_route_rewrite::__construct":[{"title":"Yaf_Route_Rewrite()example","source":"\/**\n    * Add a rewrite route to Yaf_Router route stack\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_rewrite(\n           \"\/product\/:name\/:id\/*\", \/\/match request uri leading \"\/product\"\n           array(\n               'controller' => \"product\",  \/\/route to product controller,\n           ),\n        )\n    );","output":"\/* for http:\/\/yourdomain.com\/product\/foo\/22\/foo\/bar\n * route will result in following values:\n *\/\narray(\n  \"controller\" => \"product\",\n  \"module\"     => \"index\", \/\/(default)\n  \"action\"     => \"index\", \/\/(default)\n)\n\n\/**\n * and request parameters:\n *\/\narray(\n  \"name\" => \"foo\",\n  \"id\"   => 22,\n  \"foo\"  => bar\n)"},{"title":"Yaf_Route_Rewrite()example","source":"\/**\n    * Add a rewrite route to Yaf_Router route stack by calling addconfig\n    *\/\n    $config = array(\n        \"name\" => array(\n           \"type\"  => \"rewrite\",        \/\/Yaf_Route_Rewrite route\n           \"match\" => \"\/user-list\/:id\", \/\/match only \/user\/list\/?\/\n           \"route\" => array(\n               'controller' => \"user\",  \/\/route to user controller,\n               'action'     => \"list\",  \/\/route to list action\n           ),\n        ),\n    );\n    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(\n        new Yaf_Config_Simple($config));","output":"\/* for http:\/\/yourdomain.com\/user-list\/22\n * route will result in following values:\n *\/\narray(\n  \"controller\" => \"user\",\n  \"action\"     => \"list\",\n  \"module\"     => \"index\", \/\/(default)\n)\n\n\/**\n * and request parameters:\n *\/\narray(\n  \"id\"   => 22,\n)"},{"title":"Yaf_Route_Rewrite(as of 2.3.0)()example","source":"\/**\n    * Add a rewrite route use match result as m\/c\/a name\n    *\/\n    $config = array(\n        \"name\" => array(\n           \"type\"  => \"rewrite\",        \n           \"match\" => \"\/user-list\/:a\/:id\", \/\/match only \/user-list\/*\n           \"route\" => array(\n               'controller' => \"user\",   \/\/route to user controller,\n               'action'     => \":a\",     \/\/route to :a action\n           ),\n        ),\n    );\n    Yaf_Dispatcher::getInstance()->getRouter()->addConfig(\n        new Yaf_Config_Simple($config));","output":"\/* for http:\/\/yourdomain.com\/user-list\/list\/22\n * route will result in following values:\n *\/\narray(\n  \"controller\" => \"user\",\n  \"action\"     => \"list\",\n  \"module\"     => \"index\", \/\/(default)\n)\n\n\/**\n * and request parameters:\n *\/\narray(\n  \"id\"   => 22,\n)"}],"yaf_route_simple::assemble":[{"title":"Yaf_Route_Simple::assemble()example","source":"$router = new Yaf_Router();\n\n$route  = new Yaf_Route_Simple('m', 'c', 'a');\n\n$router->addRoute(\"simple\", $route);\n\nvar_dump($router->getRoute('simple')->assemble(\n            array(\n                ':a' => 'yafaction',\n                'tkey' => 'tval',\n                ':c' => 'yafcontroller',\n                ':m' => 'yafmodule'\n                ),\n            array(\n                'tkey1' => 'tval1',\n                'tkey2' => 'tval2'\n                )\n            ));","output":"string(64) \"?m=yafmodule&c=yafcontroller&a=yafaction&tkey1=tval1&tkey2=tval2\""}],"yaf_route_simple::__construct":[{"title":"Yaf_Route_Simple::route()example","source":"$route = new Yaf_Route_Simple(\"m\", \"controller\", \"act\");\n   Yaf_Router::getInstance()->addRoute(\"simple\", $route);","output":null},{"title":"Yaf_Route_Simple::route()example","source":"Yaf_Route_Simple constructor\n Yaf_Route_Simple::assemble\n Yaf_Route_Simple::route\n Yaf_Route_Simple\n PHP Manual\n\n \n  Yaf_Route_Simple::__construct\n  (Yaf >=1.0.0)Yaf_Route_Simple::__construct — Yaf_Route_Simple constructor\n\n \n\n \n  Description\n  \n   public Yaf_Route_Simple::__construct\n    ( string $module_name\n   , string $controller_name\n   , string $action_name\n   )\n\n  \n   Yaf_Route_Simple will get route info from query\n   string. and the parameters of this constructor will used as keys while searching for the\n   route info in $_GET.\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \nmodule_name\n\n    \n\n     \n       The key name of the module info. \n     \n    \n\n   \n   \n    \ncontroller_name\n\n    \n\n     \n      the key name of the controller info.\n     \n    \n\n   \n   \n    \naction_name\n\n    \n\n     \n      the key name of the action info.\n     \n    \n\n   \n  \n\n\n \n  Return Values\n  \n   Always return TRUE.\n  \n \n\n\n \n  Examples\n  \n   Example #1 Yaf_Route_Simple::route()example\n   \n\n<?php\n   $route = new Yaf_Route_Simple(\"m\", \"controller\", \"act\");\n   Yaf_Router::getInstance()->addRoute(\"simple\", $route);\n?>\n\n\n   \n\n  \n  \n   Example #2 Yaf_Route_Simple::route()example\n   \nRequest: http:\/\/yourdomain.com\/path\/?controller=a&act=b\n=> module = default(index), controller = a, action = b\n\nRequest: http:\/\/yourdomain.com\/path\n=> module = default(index), controller = default(index), action = default(index)\n\n   \n\n  \n \n\n\n \n  See Also\n  Yaf_Route_Supervar::route() - The route purpose\n   Yaf_Route_Static::route() - Route a request\n   Yaf_Route_Regex::route() - The route purpose\n   Yaf_Route_Rewrite::route() - The route purpose\n   Yaf_Route_Map::route() - The route purpose\n  \n  \n\n\n Yaf_Route_Simple::assemble\n Yaf_Route_Simple::route\n Yaf_Route_Simple\n PHP Manual","output":null}],"yaf_route_static::assemble":[{"title":"Yaf_Route_Static::assemble()example","source":"$router = new Yaf_Router();\n\n$route  = new Yaf_Route_Static();\n\n$router->addRoute(\"static\", $route);\n\nvar_dump($router->getRoute('static')->assemble(\n            array(\n                ':a' => 'yafaction',\n                'tkey' => 'tval',\n                ':c' => 'yafcontroller',\n                ':m' => 'yafmodule'\n            ),\n        )\n);\n\nvar_dump($router->getRoute('static')->assemble(\n            array(\n                ':a' => 'yafaction',\n                'tkey' => 'tval',\n                ':c' => 'yafcontroller',\n                ':m' => 'yafmodule'\n            ),\n            array(\n                'tkey1' => 'tval1',\n                'tkey2' => 'tval2'\n            )\n        )\n);","output":"string(%d) \"\/yafmodule\/yafcontroller\/yafaction\"\nstring(%d) \"\/yafmodule\/yafcontroller\/yafaction?tkey1=tval1&tkey2=tval2\""}],"yaf_route_static::route":[{"title":"Yaf_Route_Static::route()example","source":"Route a request\n Yaf_Route_Static::match\n Yaf_Route_Supervar\n Yaf_Route_Static\n PHP Manual\n\n \n  Yaf_Route_Static::route\n  (Yaf >=1.0.0)Yaf_Route_Static::route — Route a request\n\n \n\n \n  Description\n  \n   public bool Yaf_Route_Static::route\n    ( Yaf_Request_Abstract $request\n   )\n\n  \n\n  \n\n  WarningThis function is\ncurrently not documented; only its argument list is available.\n\n\n \n\n\n \n  Parameters\n  \nrequest\n\n    \n\n     \n      \n     \n    \n\n   \n  \n\n\n \n  Return Values\n  \n   always be TRUE\n  \n \n\n\n \n  Examples\n  \n   Example #1 Yaf_Route_Static::route()example\n   \n\/\/ assuming there is only one module defined:Index\nRequest: http:\/\/yourdomain.com\/a\/b\n=> module = index, controller=a, action=b\n\n\/\/assuming ap.action_prefer = On\nRequest: http:\/\/yourdomain.com\/b\n=> module = default(index), controller = default(index), action = b\n\n\/\/assuming ap.action_prefer = Off\nRequest: http:\/\/yourdomain.com\/b\n=> module = default(index), controller = b, action = default(index)\n\n\nRequest: http:\/\/yourdomain.com\/a\/b\/foo\/bar\/test\/a\/id\/4\n=> module = default(index), controller = a, action = b, request parameters: foo = bar, test = a, id = 4\n\n   \n\n  \n \n\n\n \n  See Also\n  Yaf_Route_Supervar::route() - The route purpose\n   Yaf_Route_Simple::route() - Route a request\n   Yaf_Route_Regex::route() - The route purpose\n   Yaf_Route_Rewrite::route() - The route purpose\n   Yaf_Route_Map::route() - The route purpose\n  \n  \n\n\n\n Yaf_Route_Static::match\n Yaf_Route_Supervar\n Yaf_Route_Static\n PHP Manual","output":null}],"yaf_route_supervar::assemble":[{"title":"Yaf_Route_Supervar::assemble()example","source":"$router = new Yaf_Router();\n\n$route  = new Yaf_Route_Supervar('r');\n\n$router->addRoute(\"supervar\", $route);\n\nvar_dump($router->getRoute('supervar')->assemble(\n        array(\n              ':a' => 'yafaction',\n              'tkey' => 'tval',\n              ':c' => 'yafcontroller',\n              ':m' => 'yafmodule'\n        ),\n        array(\n              'tkey1' => 'tval1',\n              'tkey2' => 'tval2'\n        )\n));\n\ntry {\nvar_dump($router->getRoute('supervar')->assemble(\n        array(\n              ':a' => 'yafaction',\n              'tkey' => 'tval',\n              ':m' => 'yafmodule'\n        ),\n        array(\n              'tkey1' => 'tval1',\n              'tkey2' => 'tval2',\n              1 => array(),\n        )\n));\n} catch (Exception $e) {\n    var_dump($e->getMessage());\n}","output":"string(%d) \"?r=\/yafmodule\/yafcontroller\/yafaction&tkey1=tval1&tkey2=tval2\"\nstring(%d) \"You need to specify the controller by ':c'\""}],"yaf_route_supervar::__construct":[{"title":"Yaf_Route_Supervar()example","source":"\/**\n    * Add a supervar route to Yaf_Router route stack\n    *\/\n    Yaf_Dispatcher::getInstance()->getRouter()->addRoute(\"name\",\n        new Yaf_Route_Supervar(\"r\"));\n    );","output":"\/** for request: http:\/\/yourdomain.com\/xx\/oo\/?r=\/ctr\/act\/var\/value\n  * will result in following:\n  *\/\n  array (\n    \"module\"   => index(default),\n    \"controller\" => ctr,\n    \"action\"     => act,\n    \"params\"     => array(\n          \"var\" => value,\n     )\n  )"}],"yaf_router::addconfig":[{"title":"application.ini()example","source":"Add config-defined routes into Router\n Yaf_Router\n Yaf_Router::addRoute\n Yaf_Router\n PHP Manual\n\n \n  Yaf_Router::addConfig\n  (Yaf >=1.0.0)Yaf_Router::addConfig — Add config-defined routes into Router\n\n \n\n \n  Description\n  \n   public bool Yaf_Router::addConfig\n    ( Yaf_Config_Abstract $config\n   )\n\n  \n    Add routes defined by configs into\n    Yaf_Router's route stack\n  \n \n\n\n \n  Parameters\n  This function has no parameters.\n \n\n\n \n  Return Values\n  \n     An Yaf_Config_Abstract instance, which should\n     contains one or more valid route configs\n  \n \n\n\n \n  Examples\n  \n   Example #1 application.ini()example\n   \n    ;the order is very important, the prior one will be called first\n\n;a rewrite route match request \/product\/*\/*\nroutes.route_name.type=\"rewrite\"\nroutes.route_name.match=\"\/product\/:name\/:value\"\nroutes.route_name.route.controller=product\nroutes.route_name.route.action=info\n\n;a regex route match request \/list\/*\/*\nroutes.route_name1.type=\"regex\"\nroutes.route_name1.match=\"#^list\/([^\/]*)\/([^\/]*)#\"\nroutes.route_name1.route.controller=Index\nroutes.route_name1.route.action=action\nroutes.route_name1.map.1=name\nroutes.route_name1.map.2=value\n\n;a simple route match \/**?c=controller&a=action&m=module\nroutes.route_name2.type=\"simple\"\nroutes.route_name2.controller=c\nroutes.route_name2.module=m\nroutes.route_name2.action=a\n\n;a simple router match \/**?r=PATH_INFO\nroutes.route_name3.type=\"supervar\"\nroutes.route_name3.varname=r\n\n;a map route match any request to controller\nroutes.route_name4.type=\"map\"\nroutes.route_name4.controllerPrefer=TRUE\nroutes.route_namer.delimiter=\"#!\"\n\n   \n\n  \n  \n   Example #2 Yaf_Dispatcher::autoConfig()example\n   \n\n<?php\nclass Bootstrap extends Yaf_Bootstrap_Abstract{\n    public function _initConfig() {\n        $config = Yaf_Application::app()->getConfig();\n        Yaf_Registry::set(\"config\", $config);\n    }\n\n    public function _initRoute(Yaf_Dispatcher $dispatcher) {\n        $router = $dispatcher->getRouter();\n        \/**\n         * we can add some pre-defined routes in application.ini\n         *\/\n        $router->addConfig(Yaf_Registry::get(\"config\")->routes);\n    }\n?>\n\n\n   \n\n  \n \n\n\n \n  See Also\n  Yaf_Router::addRoute() - Add new Route into Router\n   Yaf_Route_Static\n   Yaf_Route_Supervar\n   Yaf_Route_Simple\n   Yaf_Route_Regex\n   Yaf_Route_Rewrite\n   Yaf_Route_Map\n  \n  \n\n\n Yaf_Router\n Yaf_Router::addRoute\n Yaf_Router\n PHP Manual","output":null},{"title":"Yaf_Dispatcher::autoConfig()example","source":"class Bootstrap extends Yaf_Bootstrap_Abstract{\n    public function _initConfig() {\n        $config = Yaf_Application::app()->getConfig();\n        Yaf_Registry::set(\"config\", $config);\n    }\n\n    public function _initRoute(Yaf_Dispatcher $dispatcher) {\n        $router = $dispatcher->getRouter();\n        \/**\n         * we can add some pre-defined routes in application.ini\n         *\/\n        $router->addConfig(Yaf_Registry::get(\"config\")->routes);\n    }","output":null}],"yaf_router::addroute":[{"title":"Yaf_Dispatcher::autoRender()example","source":"class Bootstrap extends Yaf_Bootstrap_Abstract{\n    public function _initConfig() {\n        $config = Yaf_Application::app()->getConfig();\n        Yaf_Registry::set(\"config\", $config);\n    }\n\n    public function _initRoute(Yaf_Dispatcher $dispatcher) {\n        $router = $dispatcher->getRouter();\n        \/**\n         * we can add some pre-defined routes in application.ini\n         *\/\n        $router->addConfig(Yaf_Registry::get(\"config\")->routes);\n        \/**\n         * add a Rewrite route, then for a request uri: \n         * http:\/\/***\/product\/list\/22\/foo\n         * will be matched by this route, and result:\n         *\n         *  [module] => \n         *  [controller] => product\n         *  [action] => info\n         *  [method] => GET\n         *  [params:protected] => Array\n         *      (\n         *          [id] => 22\n         *          [name] => foo\n         *      )\n         * \n         *\/\n        $route  = new Yaf_Route_Rewrite(\n            \"\/product\/list\/:id\/:name\",\n            array(\n                \"controller\" => \"product\",\n                \"action\"     => \"info\",\n            )\n        ); \n        \n        $router->addRoute('dummy', $route);\n    }","output":null}],"yaf_router::getcurrentroute":[{"title":"Register some routes in Bootstrap","source":"class Bootstrap extends Yaf_Bootstrap_Abstract{\n    public function _initConfig() {\n        $config = Yaf_Application::app()->getConfig();\n        Yaf_Registry::set(\"config\", $config);\n    }\n\n    public function _initRoute(Yaf_Dispatcher $dispatcher) {\n        $router = $dispatcher->getRouter();\n        $rewrite_route  = new Yaf_Route_Rewrite(\n            \"\/product\/list\/:page\",\n            array(\n                \"controller\" => \"product\",\n                \"action\"     => \"list\",\n            )\n        ); \n\n        $regex_route  = new Yaf_Route_Rewrite(\n            \"#^\/product\/info\/(\\d+)\",\n            array(\n                \"controller\" => \"product\",\n                \"action\"     => \"info\",\n            )\n        ); \n        \n        $router->addRoute('rewrite', $rewrite_route)->addRoute('regex', $regex_route);\n    } \n\n    \/**\n     * register plugin \n     *\/\n    public function __initPlugins(Yaf_Dispatcher $dispatcher) {\n        $dispatcher->registerPlugin(new DummyPlugin());\n    }","output":null},{"title":"plugin Dummy.php (under application.directory\/plugins)","source":"class DummyPlugin extends Yaf_Plugin_Abstract {\n\n    public function routerShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response) {\n         var_dump(Yaf_Dispatcher::getInstance()->getRouter()->getCurrentRoute());\n    }\n?>","output":"\/* for http:\/\/yourdomain.com\/product\/list\/1\n * DummyPlugin will output:\n *\/\nstring(7) \"rewrite\"\n\n\/* for http:\/\/yourdomain.com\/product\/info\/34\n * DummyPlugin will output:\n *\/\nstring(5) \"regex\"\n\n\/* for other request URI\n * DummyPlugin will output:\n *\/\nstring(8) \"_default\""}],"yaf_view_simple::assign":[{"title":"Yaf_View_Simple::assign()example","source":"class IndexController extends Yaf_Controller_Abstract {\n    public function indexAction() {\n        $this->getView()->assign(\"foo\", \"bar\");\n        $this->_view->assign( array( \"key\" => \"value\", \"name\" => \"value\"));\n    }","output":null},{"title":"template()example","source":"<html>\n <head>\n  <title><?php echo $foo; ?><\/title>\n <\/head>  \n<body>\n  <?php \n    foreach ($this->_tpl_vars as $name => value) {\n         echo $$name; \/\/ or echo $this->_tpl_vars[$name];\n    }\n  ?>\n<\/body>\n<\/html>","output":null}],"yaf_view_simple::assignref":[{"title":"Yaf_View_Simple::assignRef()example","source":"class IndexController extends Yaf_Controller_Abstract {\n    public function indexAction() {\n        $value = \"bar\";\n        $this->getView()->assign(\"foo\", $value);\n\n        \/* plz note that there was a bug before Yaf 2.1.4, \n         * which make following output \"bar\";\n         *\/\n        $dummy = $this->getView()->render(\"index\/index.phtml\");\n        echo $value;\n\n        \/\/prevent the auto-render\n        Yaf_Dispatcher::getInstance()->autoRender(FALSE);\n    }","output":null},{"title":"template()example","source":"<html>\n <head>\n  <title><?php echo $foo;  $foo = \"changed\"; ?><\/title>\n <\/head>  \n<body>\n<\/body>\n<\/html>","output":"\/* access the index controller will result: *\/\nchanged"}],"yaf_view_simple::clear":[{"title":"Yaf_View_Simple::clear()example","source":"class IndexController extends Yaf_Controller_Abstract {\n    public function indexAction() {\n        $this->getView()->clear(\"foo\")->clear(\"bar\"); \/\/ clear \"foo\" and \"bar\"\n        $this->_view->clear(); \/\/clear all assigned variables\n    }","output":null}],"yaf_view_simple::__construct":[{"title":"Yaf_View_Simple::__constructor()example","source":"define (\"TEMPLATE_DIRECTORY\", APPLICATOIN_PATH . '\/views');\n   $view = new Yaf_View_Simple(TEMPLATE_DIRECTORY, array(\n                           'short_tag' => false \/\/doesn't allow use short tag in template\n   ));","output":null}],"yaf_view_simple::__set":[{"title":"Yaf_View_Simple::__set()example","source":"class IndexController extends Yaf_Controller_Abstract {\n    public function indexAction() {\n        $this->getView()->foo = \"bar\"; \/\/ same as assign(\"foo\", \"bar\");\n    }","output":null}],"yar_client_exception::gettype":[{"title":"Yar_Client_Exception::getType() example","source":"\/* ... *\/","output":"..."}],"yar_client::__call":[{"title":"Yar_Client::__call() example","source":"$client = new Yar_Client(\"http:\/\/host\/api\/\");\n\n\/* call remote service *\/\n$result = $client->some_method(\"parameter\");","output":null}],"yar_client::__construct":[{"title":"Yar_Client::__construct() example","source":"$client = new Yar_Client(\"http:\/\/host\/api\/\");","output":null}],"yar_client::setopt":[{"title":"Yar_Client::setOpt() example","source":"$cient = new Yar_Client(\"http:\/\/host\/api\/\");\n\n\/\/Set timeout to 1s\n$client->SetOpt(YAR_OPT_CONNECT_TIMEOUT, 1000);\n\n\/\/Set packager to JSON\n$client->SetOpt(YAR_OPT_PACKAGER, \"json\");\n\n\/* call remote service *\/\n$result = $client->some_method(\"parameter\");","output":null}],"yar_concurrent_client::call":[{"title":"Yar_Concurrent_Client::call() example","source":"function callback($retval, $callinfo) {\n     var_dump($retval);\n}\n\nfunction error_callback($type, $error, $callinfo) {\n    error_log($error);\n}\n\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"), \"callback\");\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"));   \/\/ if the callback is not specificed, \n                                                                               \/\/ callback in loop will be used\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_PACKAGER => \"json\"));\n                                                                               \/\/this server accept json packager\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_TIMEOUT=>1));\n                                                                               \/\/custom timeout \n\n\/\/The requests are not sent yet","output":null}],"yar_concurrent_client::loop":[{"title":"Yar_Concurrent_Client::loop() example","source":"function callback($retval, $callinfo) {\n     if ($callinfo == NULL) {\n        echo \"Now, all requests are sent, and no any response available\\n\";\n     } else {\n        echo \"This is a remote call response, the method name is\", $callinfo[\"method\"], \n             \". calling sequence is \" , $callinfo[\"sequence\"] , \"\\n\";\n        var_dump($retval);\n     }\n} \n\nfunction error_callback($type, $error, $callinfo) {\n    error_log($error);\n}\n\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"), \"callback\");\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"));   \/\/ if the callback is not specificed, \n                                                                               \/\/ callback in loop will be used\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_PACKAGER => \"json\"));\n                                                                               \/\/this server accept json packager\nYar_Concurrent_Client::call(\"http:\/\/host\/api\/\", \"some_method\", array(\"parameters\"), \"callback\", NULL, array(YAR_OPT_TIMEOUT=>1));\n                                                                               \/\/custom timeout \n\nYar_Concurrent_Client::loop(\"callback\", \"error_callback\"); \/\/send the requests, \n                                                           \/\/the error_callback is optional","output":"Now, all requests are sent, and no any response available\nThis is a remote call response, the method name issome_method. calling sequence is 4\nstring(11) \"some_method\"\nThis is a remote call response, the method name issome_method. calling sequence is 1\nstring(11) \"some_method\"\nThis is a remote call response, the method name issome_method. calling sequence is 2\nstring(11) \"some_method\"\nThis is a remote call response, the method name issome_method. calling sequence is 3\nstring(11) \"some_method\""}],"yar_concurrent_client::reset":[{"title":"Yar_Concurrent_Client::reset() example","source":"","output":null}],"yar_server_exception::gettype":[{"title":"Yar_Server_Exception::getType() example","source":"\/\/Server.php\n<?php\nclass Custom_Exception extends Exception {};\n\nclass API {\n    public function throw_exception($name) {\n        throw new Custom_Exception($name);\n    }\n}\n\n$service = new Yar_Server(new API());\n$service->handle();\n?>\n\n\/\/Client.php\n<?php\n$client = new Yar_Client(\"http:\/\/host\/api.php\");\n\ntry {\n    $client->throw_exception(\"client\");\n} catch (Yar_Server_Exception $e) {\n    var_dump($e->getType());\n    var_dump($e->getMessage());\n}","output":"string(16) \"Custom_Exception\"\nstring(6) \"client\""}],"yar_server::__construct":[{"title":"Yar_Server::__construct() example","source":"class API {\n    \/**\n     * the doc info will be generated automatically into service info page.\n     * @params \n     * @return\n     *\/\n    public function some_method($parameter, $option = \"foo\") {\n         return \"some_method\";\n    }\n\n    protected function client_can_not_see() {\n    }\n}\n\n$service = new Yar_Server(new API());\n$service->handle();","output":null}],"yar_server::handle":[{"title":"Yar_Server::handle() example","source":"class API {\n    \/**\n     * the doc info will be generated automatically into service info page.\n     * @params \n     * @return\n     *\/\n    public function some_method($parameter, $option = \"foo\") {\n    }\n\n    protected function client_can_not_see() {\n    }\n}\n\n$service = new Yar_Server(new API());\n$service->handle();","output":null}],"ziparchive::addemptydir":[{"title":"Create a new directory in an archive","source":"$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    if($zip->addEmptyDir('newDirectory')) {\n        echo 'Created a new root directory';\n    } else {\n        echo 'Could not create the directory';\n    }\n    $zip->close();\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::addfile":[{"title":"Open and add","source":"$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    $zip->addFile('\/path\/to\/index.txt', 'newname.txt');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::addfromstring":[{"title":"Add an entry to a new archive","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip', ZipArchive::CREATE);\nif ($res === TRUE) {\n    $zip->addFromString('test.txt', 'file content goes here');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null},{"title":"Add file to a directory inside an archive","source":"$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    $zip->addFromString('dir\/test.txt', 'file content goes here');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::addglob":[{"title":"ZipArchive::addGlob() example","source":"$zip = new ZipArchive();\n$ret = $zip->open('application.zip', ZipArchive::OVERWRITE);\nif ($ret !== TRUE) {\n    printf('Failed with code %d', $ret);\n} else {\n    $options = array('add_path' => 'sources\/', 'remove_all_path' => TRUE);\n    $zip->addGlob('*.{php,txt}', GLOB_BRACE, $options);\n    $zip->close();\n}","output":null}],"ziparchive::addpattern":[{"title":"ZipArchive::addPattern() example","source":"$zip = new ZipArchive();\n$ret = $zip->open('application.zip', ZipArchive::OVERWRITE);\nif ($ret !== TRUE) {\n    printf('Failed with code %d', $ret);\n} else {\n    $directory = realpath('.');\n    $options = array('add_path' => 'sources\/', 'remove_path' => $directory);\n    $zip->addPattern('\/\\.(?:php|txt)$\/', $directory, $options);\n    $zip->close();\n}","output":null}],"ziparchive::deleteindex":[{"title":"Delete file from archive using its index","source":"$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    $zip->deleteIndex(2);\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::deletename":[{"title":"Deleting a file and directory from an archive, using names","source":"$zip = new ZipArchive;\nif ($zip->open('test1.zip') === TRUE) {\n    $zip->deleteName('testfromfile.php');\n    $zip->deleteName('testDir\/');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::extractto":[{"title":"Extract all entries","source":"$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    $zip->extractTo('\/my\/destination\/dir\/');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null},{"title":"Extract two entries","source":"$zip = new ZipArchive;\n$res = $zip->open('test_im.zip');\nif ($res === TRUE) {\n    $zip->extractTo('\/my\/destination\/dir\/', array('pear_item.gif', 'testfromfile.php'));\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::getarchivecomment":[{"title":"Dump an archive comment","source":"$zip = new ZipArchive;\n$res = $zip->open('test_with_comment.zip');\nif ($res === TRUE) {\n    var_dump($zip->getArchiveComment());\n    \/* Or using the archive property *\/\n    var_dump($zip->comment);\n} else {\n    echo 'failed, code:' . $res;\n}","output":null}],"ziparchive::getcommentindex":[{"title":"Dump an entry comment","source":"$zip = new ZipArchive;\n$res = $zip->open('test1.zip');\nif ($res === TRUE) {\n    var_dump($zip->getCommentIndex(1));\n} else {\n    echo 'failed, code:' . $res;\n}","output":null}],"ziparchive::getcommentname":[{"title":"Dump an entry comment","source":"$zip = new ZipArchive;\n$res = $zip->open('test1.zip');\nif ($res === TRUE) {\n    var_dump($zip->getCommentName('test\/entry1.txt'));\n} else {\n    echo 'failed, code:' . $res;\n}","output":null}],"ziparchive::getexternalattributesindex":[{"title":"Extract all entries with Unix rights","source":"$zip = new ZipArchive();\nif ($zip->open('test.zip') === TRUE) {\n    for ($idx=0 ; $s = $zip->statIndex($idx) ; $idx++) {\n        if ($zip->extractTo('.', $s['name'])) {\n            if ($zip->getExternalAttributesIndex($idx, $opsys, $attr) \n                && $opsys==ZipArchive::OPSYS_UNIX) {\n               chmod($s['name'], ($attr >> 16) & 0777);\n            }\n        }\n    }\n    $zip->close();\n    echo \"Ok\\n\";\n} else {\n    echo \"KO\\n\";\n}","output":null}],"ziparchive::getfromindex":[{"title":"Get the file contents","source":"$zip = new ZipArchive;\nif ($zip->open('test.zip') === TRUE) {\n    echo $zip->getFromIndex(2);\n    $zip->close();\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::getfromname":[{"title":"Get the file contents","source":"$zip = new ZipArchive;\nif ($zip->open('test1.zip') === TRUE) {\n    echo $zip->getFromName('testfromfile.php');\n    $zip->close();\n} else {\n    echo 'failed';\n}","output":null},{"title":"Convert an image from a zip entry","source":"$z = new ZipArchive();\nif ($z->open(dirname(__FILE__) . '\/test_im.zip')) {\n    $im_string = $z->getFromName(\"pear_item.gif\");\n    $im = imagecreatefromstring($im_string);\n    imagepng($im, 'b.png');\n}","output":null}],"ziparchive::getnameindex":[{"title":"ZipArchive::getNameIndex() example","source":"if ($zip->open('test.zip') == TRUE) {\n for ($i = 0; $i < $zip->numFiles; $i++) {\n     $filename = $zip->getNameIndex($i);\n     \/\/ ...\n }\n}","output":null}],"ziparchive::getstream":[{"title":"Get the entry contents with fread() and store it","source":"$contents = '';\n$z = new ZipArchive();\nif ($z->open('test.zip')) {\n    $fp = $z->getStream('test');\n    if(!$fp) exit(\"failed\\n\");\n\n    while (!feof($fp)) {\n        $contents .= fread($fp, 2);\n    }\n\n    fclose($fp);\n    file_put_contents('t',$contents);\n    echo \"done.\\n\";\n}","output":null},{"title":"Same as the previous example but with fopen() and the zip stream wrapper","source":"$contents = '';\n$fp = fopen('zip:\/\/' . dirname(__FILE__) . '\/test.zip#test', 'r');\nif (!$fp) {\n    exit(\"cannot open\\n\");\n}\nwhile (!feof($fp)) {\n    $contents .= fread($fp, 2);\n}\necho \"$contents\\n\";\nfclose($fp);\necho \"done.\\n\";","output":null},{"title":"Stream wrapper and image, can be used with the xml function as well","source":"$im = imagecreatefromgif('zip:\/\/' . dirname(__FILE__) . '\/test_im.zip#pear_item.gif');\nimagepng($im, 'a.png');","output":null}],"ziparchive::locatename":[{"title":"Create an archive and then use it with ZipArchive::locateName()","source":"$file = 'testlocate.zip';\n\n$zip = new ZipArchive;\nif ($zip->open($file, ZipArchive::CREATE) !== TRUE) {\n    exit('failed');\n}\n\n$zip->addFromString('entry1.txt', 'entry #1');\n$zip->addFromString('entry2.txt', 'entry #2');\n$zip->addFromString('dir\/entry2d.txt', 'entry #2');\n\nif (!$zip->status == ZipArchive::ER_OK) {\n    echo \"failed to write zip\\n\";\n}\n$zip->close();\n\nif ($zip->open($file) !== TRUE) {\n    exit('failed');\n}\n\necho $zip->locateName('entry1.txt') . \"\\n\";\necho $zip->locateName('eNtry2.txt') . \"\\n\";\necho $zip->locateName('eNtry2.txt', ZipArchive::FL_NOCASE) . \"\\n\";\necho $zip->locateName('enTRy2d.txt', ZipArchive::FL_NOCASE|ZipArchive::FL_NODIR) . \"\\n\";\n$zip->close();","output":null}],"ziparchive::open":[{"title":"Open and extract","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    echo 'ok';\n    $zip->extractTo('test');\n    $zip->close();\n} else {\n    echo 'failed, code:' . $res;\n}","output":null},{"title":"Create an archive","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip', ZipArchive::CREATE);\nif ($res === TRUE) {\n    $zip->addFromString('test.txt', 'file content goes here');\n    $zip->addFile('data.txt', 'entryname.txt');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::renameindex":[{"title":"Rename one entry","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    $zip->renameIndex(2,'newname.txt');\n    $zip->close();\n} else {\n    echo 'failed, code:' . $res;\n}","output":null}],"ziparchive::renamename":[{"title":"Rename one entry","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    $zip->renameName('currentname.txt','newname.txt');\n    $zip->close();\n} else {\n    echo 'failed, code:' . $res;\n}","output":null}],"ziparchive::setarchivecomment":[{"title":"Create an archive and set a comment","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip', ZipArchive::CREATE);\nif ($res === TRUE) {\n    $zip->addFromString('test.txt', 'file content goes here');\n    $zip->setArchiveComment('new archive comment');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::setcommentindex":[{"title":"Open an archive and set a comment for an entry","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    $zip->setCommentIndex(2, 'new entry comment');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::setcommentname":[{"title":"Open an archive and set a comment for an entry","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    $zip->setCommentName('entry1.txt', 'new entry comment');\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::setcompressionindex":[{"title":"Add files with different compression methods to an archive","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip', ZipArchive::CREATE);\nif ($res === TRUE) {\n    $zip->addFromString('foo', 'Some text');\n    $zip->addFromString('bar', 'Some other text');\n    $zip->setCompressionIndex(0, ZipArchive::CM_STORE);\n    $zip->setCompressionIndex(1, ZipArchive::CM_DEFLATE);\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::setcompressionname":[{"title":"Add files with different compression methods to an archive","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip', ZipArchive::CREATE);\nif ($res === TRUE) {\n    $zip->addFromString('foo', 'Some text');\n    $zip->addFromString('bar', 'Some other text');\n    $zip->setCompressionName('foo', ZipArchive::CM_STORE);\n    $zip->setCompressionName('bar', ZipArchive::CM_DEFLATE);\n    $zip->close();\n    echo 'ok';\n} else {\n    echo 'failed';\n}","output":null}],"ziparchive::setencryptionname":[{"title":"Archive and encrypt a file","source":"$zip = new ZipArchive();\nif ($zip->open('test.zip', ZipArchive::CREATE) === TRUE) {\n    $zip->setPassword('secret');\n    $zip->addFile('text.txt');\n    $zip->setEncryptionName('text.txt', ZipArchive::EM_AES_256);\n    $zip->close();\n    echo \"Ok\\n\";\n} else {\n    echo \"KO\\n\";\n}","output":null}],"ziparchive::setexternalattributesname":[{"title":"Archive a file, with its Unix rights","source":"$zip = new ZipArchive();\n$stat = stat($filename='test.txt');\nif (is_array($stat) && $zip->open('test.zip', ZipArchive::CREATE) === TRUE) {\n    $zip->addFile($filename);\n    $zip->setExternalAttributesName($filename, ZipArchive::OPSYS_UNIX, $stat['mode'] << 16);\n    $zip->close();\n    echo \"Ok\\n\";\n} else {\n    echo \"KO\\n\";\n}","output":null}],"ziparchive::statindex":[{"title":"Dump the stat info of an entry","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    print_r($zip->statIndex(3));\n    $zip->close();\n} else {\n    echo 'failed, code:' . $res;\n}","output":"Array\n(\n    [name] => foobar\/baz\n    [index] => 3\n    [crc] => 499465816\n    [size] => 27\n    [mtime] => 1123164748\n    [comp_size] => 24\n    [comp_method] => 8\n)"}],"ziparchive::statname":[{"title":"Dump the stat info of an entry","source":"$zip = new ZipArchive;\n$res = $zip->open('test.zip');\nif ($res === TRUE) {\n    print_r($zip->statName('foobar\/baz'));\n    $zip->close();\n} else {\n    echo 'failed, code:' . $res;\n}","output":"Array\n(\n    [name] => foobar\/baz\n    [index] => 3\n    [crc] => 499465816\n    [size] => 27\n    [mtime] => 1123164748\n    [comp_size] => 24\n    [comp_method] => 8\n)"}],"zmqcontext::__construct":[{"title":"A ZMQContext() example","source":"\/* Allocate a new context *\/\n$context = new ZMQContext();\n\n\/* Create a new socket *\/\n$socket = $context->getSocket(ZMQ::SOCKET_REQ, 'my sock');\n\n\/* Connect the socket *\/\n$socket->connect(\"tcp:\/\/example.com:1234\");\n\n\/* Send a request *\/\n$socket->send(\"Hello there\");\n\n\/* Receive back the response *\/\n$message = $socket->recv();","output":null}],"zmqcontext::getsocket":[{"title":"A ZMQContext() example","source":"\/* Allocate a new context *\/\n$context = new ZMQContext();\n\n\/* Create a new socket *\/\n$socket = $context->getSocket(ZMQ::SOCKET_REQ, 'my sock');\n\n\/* Connect the socket *\/\n$socket->connect(\"tcp:\/\/example.com:1234\");\n\n\/* Send a request *\/\n$socket->send(\"Hello there\");\n\n\/* Receive back the response *\/\n$message = $socket->recv();\necho \"Received message: {$message}\\n\";","output":null}],"zmqpoll::poll":[{"title":"A ZMQPoll() example","source":"\/* Create socket, request-reply pattern (reply socket) *\/\n$context = new ZMQContext();\n$server  = $context->getSocket(ZMQ::SOCKET_REP);\n\n\/* Bind to port 5555 on 127.0.0.1 *\/\n$server->bind(\"tcp:\/\/127.0.0.1:5555\");\n\n\/* Create new pollset for incoming\/outgoing message *\/\n$poll = new ZMQPoll();\n\n\/* Add the object and listen for poll in\/out *\/\n$id = $poll->add($server, ZMQ::POLL_IN | ZMQ::POLL_OUT);\necho \"Added object with id \" . $id . \"\\n\";\n\n\/* Initialise readable and writable arrays *\/\n$readable = array();\n$writable = array();\n\nwhile (true) {\n   \/* Amount of events retrieved *\/\n   $events = 0;\n\n   try {\n       \/* Poll until there is something to do *\/\n       $events = $poll->poll($readable, $writable, -1);\n       $errors = $poll->getLastErrors();\n\n       if (count($errors) > 0) {\n           foreach ($errors as $error) {\n               echo \"Error polling object \" . $error . \"\\n\";\n           }\n       }\n   } catch (ZMQPollException $e) {\n       echo \"poll failed: \" . $e->getMessage() . \"\\n\";\n   }\n\n   if ($events > 0) {\n       \/* Loop through readable objects and recv messages *\/\n       foreach ($readable as $r) {\n           try {\n               echo \"Received message: \" . $r->recv() . \"\\n\";\n           } catch (ZMQException $e) {\n               echo \"recv failed: \" . $e->getMessage() . \"\\n\";\n           }\n       }\n\n       \/* Loop through writable and send back messages *\/\n       foreach ($writable as $w) {\n           try {\n               $w->send(\"Got it!\");\n           } catch (ZMQException $e) {\n               echo \"send failed: \" . $e->getMessage() . \"\\n\";\n           }\n       }\n   }\n}","output":null}],"zmqsocket::connect":[{"title":"A ZMQContext() example","source":"\/* Server hostname *\/\n$dsn = \"tcp:\/\/127.0.0.1:5555\";\n\n\/* Create a socket *\/\n$socket = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ, 'my socket');\n\n\/* Get list of connected endpoints *\/\n$endpoints = $socket->getEndpoints();\n\n\/* Check if the socket is connected *\/\nif (!in_array($dsn, $endpoints['connect'])) {\n    echo \"<p>Connecting to $dsn<\/p>\";\n    $socket->connect($dsn);\n} else {\n    echo \"<p>Already connected to $dsn<\/p>\";\n}\n\n\/* Send and receive *\/\n$socket->send(\"Hello!\");\n$message = $socket->recv();\n\necho \"<p>Server said: {$message}<\/p>\";","output":null}],"zmqsocket::__construct":[{"title":"A ZMQSocket() example","source":"\/*\n  The socket is persistent so this function is called only on the \n  first request to the script.\n*\/\nfunction on_new_socket_cb(ZMQSocket $socket, $persistent_id = null)\n{\n    if ($persistent_id === 'server') {\n        $socket->bind(\"tcp:\/\/localhost:12122\");\n    } else {\n        $socket->connect(\"tcp:\/\/localhost:12122\");\n    }\n}\n\n\/* Allocate a new context *\/\n$context = new ZMQContext();\n\n\/* Create a new socket *\/\n$socket = $context->getSocket(ZMQ::SOCKET_REP, 'server', 'on_new_socket_cb');\n\n$message = $socket->recv();\necho \"Received message: {$message}\\n\";","output":null}],"zmqsocket::recv":[{"title":"A send\/recv example","source":"\/* Create new queue object, there needs to be a server at the other end *\/\n$queue = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ);\n$queue->connect(\"tcp:\/\/127.0.0.1:5555\");\n\n\/* Assign socket 1 to the queue, send and receive *\/\n$retries = 5;\n$sending = true;\n\n\/* Start a loop *\/\ndo {\n    try {\n        \/* Try to send \/ receive *\/\n        if ($sending) {\n            echo \"Sending message\\n\";\n            $queue->send(\"This is a message\", ZMQ::MODE_NOBLOCK);\n            $sending = false;\n        } else {\n            echo \"Got response: \" . $queue->recv(ZMQ::MODE_NOBLOCK) . \"\\n\";\n            break;\n        }\n    } catch (ZMQSocketException $e) {\n        \/* EAGAIN means that the operation would have blocked, retry *\/\n        if ($e->getCode() === ZMQ::ERR_EAGAIN) {\n            echo \" - Got EAGAIN, retrying ($retries)\\n\";\n        } else {\n            die(\" - Error: \" . $e->getMessage());\n        }\n    }\n    \/* Sleep a bit between operations *\/\n    usleep(5);\n} while (--$retries);","output":"Sending message\n - Unable to execute operation, retrying (4)\nGot response: This is a message"}],"zookeeper::addauth":[{"title":"Zookeeper::addAuth() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$path = '\/path\/to\/node';\n$value = 'nodevalue';\n$zookeeper->set($path, $value);\n\n$zookeeper->addAuth('digest', 'user0:passwd0');\n$r = $zookeeper->get($path);\nif ($r)\n  echo $r;\nelse\n  echo 'ERR';","output":"nodevalue"}],"zookeeper::create":[{"title":"Zookeeper::create() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$aclArray = array(\n  array(\n    'perms'  => Zookeeper::PERM_ALL,\n    'scheme' => 'world',\n    'id'     => 'anyone',\n  )\n);\n$path = '\/path\/to\/newnode';\n$realPath = $zookeeper->create($path, null, $aclArray);\nif ($realPath)\n  echo $realPath;\nelse\n  echo 'ERR';","output":"\/path\/to\/newnode"}],"zookeeper::delete":[{"title":"Zookeeper::delete() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$path = '\/path\/to\/node';\n$r = $zookeeper->delete($path);\nif ($r)\n  echo 'SUCCESS';\nelse\n  echo 'ERR';","output":"SUCCESS"}],"zookeeper::exists":[{"title":"Zookeeper::exists() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$path = '\/path\/to\/node';\n$r = $zookeeper->exists($path);\nif ($r)\n  echo 'EXISTS';\nelse\n  echo 'N\/A or ERR';","output":"EXISTS"}],"zookeeper::get":[{"title":"Zookeeper::get() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$path = '\/path\/to\/node';\n$value = 'nodevalue';\n$zookeeper->set($path, $value);\n\n$r = $zookeeper->get($path);\nif ($r)\n  echo $r;\nelse\n  echo 'ERR';","output":"nodevalue"}],"zookeeper::getacl":[{"title":"Zookeeper::getAcl() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$aclArray = array(\n  array(\n    'perms'  => Zookeeper::PERM_ALL,\n    'scheme' => 'world',\n    'id'     => 'anyone',\n  )\n);\n$path = '\/path\/to\/newnode';\n$zookeeper->setAcl($path, $aclArray);\n\n$r = $zookeeper->getAcl($path);\nif ($r)\n  var_dump($r);\nelse\n  echo 'ERR';","output":"array(1) {\n  [0]=>\n  array(3) {\n    [\"perms\"]=>\n    int(31)\n    [\"scheme\"]=>\n    string(5) \"world\"\n    [\"id\"]=>\n    string(6) \"anyone\"\n  }\n}"}],"zookeeper::set":[{"title":"Zookeeper::set() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$path = '\/path\/to\/node';\n$value = 'nodevalue';\n$r = $zookeeper->set($path, $value);\nif ($r)\n  echo 'SUCCESS';\nelse\n  echo 'ERR';","output":"SUCCESS"}],"zookeeper::setacl":[{"title":"Zookeeper::setAcl() example","source":"$zookeeper = new Zookeeper('locahost:2181');\n$aclArray = array(\n  array(\n    'perms'  => Zookeeper::PERM_ALL,\n    'scheme' => 'world',\n    'id'     => 'anyone',\n  )\n);\n$path = '\/path\/to\/newnode';\n$zookeeper->setAcl($path, $aclArray);\n\n$r = $zookeeper->getAcl($path);\nif ($r)\n  var_dump($r);\nelse\n  echo 'ERR';","output":"array(1) {\n  [0]=>\n  array(3) {\n    [\"perms\"]=>\n    int(31)\n    [\"scheme\"]=>\n    string(5) \"world\"\n    [\"id\"]=>\n    string(6) \"anyone\"\n  }\n}"}],"zookeeper::setdebuglevel":[{"title":"Zookeeper::setDebugLevel() example","source":"$r = Zookeeper::setDebugLevel(Zookeeper::LOG_LEVEL_WARN);\nif ($r)\n  echo 'SUCCESS';\nelse\n  echo 'ERR';\n?>","output":"SUCCESS"}]}